
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20003620 	.word	0x20003620
}
   4:	0000f225 	.word	0x0000f225
   8:	00014c53 	.word	0x00014c53
   c:	0000f1dd 	.word	0x0000f1dd
  10:	0000f1dd 	.word	0x0000f1dd
  14:	0000f1dd 	.word	0x0000f1dd
  18:	0000f1dd 	.word	0x0000f1dd
	...
  2c:	0000ee69 	.word	0x0000ee69
  30:	0000f1dd 	.word	0x0000f1dd
  34:	00000000 	.word	0x00000000
  38:	0000ee11 	.word	0x0000ee11
  3c:	0000f1dd 	.word	0x0000f1dd

00000040 <_irq_vector_table>:
  40:	0000ef55 0001626b 0000ef55 0000ef55     U...kb..U...U...
  50:	0000ef55 0000ef55 0000ef55 0000ef55     U...U...U...U...
  60:	00016233 0000ef55 0000ef55 00016251     3b..U...U...Qb..
  70:	0000ef55 0000ef55 0000ef55 0000ef55     U...U...U...U...
  80:	0000ef55 0000ef55 0000ef55 0000ef55     U...U...U...U...
  90:	0000ef55 0000ef55 0000ef55 0000ef55     U...U...U...U...
  a0:	0000ef55 0000ef55 0000ef55 0000ef55     U...U...U...U...
  b0:	0000ef55 0000ef55 0000ef55 0000ef55     U...U...U...U...
  c0:	0000ef55 0000ef55 0000ef55 0000ef55     U...U...U...U...
  d0:	0000ef55 0000ef55 0000ef55              U...U...U...

Disassembly of section text:

000000dc <__aeabi_drsub>:
      dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e0:	e002      	b.n	e8 <__adddf3>
      e2:	bf00      	nop

000000e4 <__aeabi_dsub>:
      e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000e8 <__adddf3>:
      e8:	b530      	push	{r4, r5, lr}
      ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
      ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f2:	ea94 0f05 	teq	r4, r5
      f6:	bf08      	it	eq
      f8:	ea90 0f02 	teqeq	r0, r2
      fc:	bf1f      	itttt	ne
      fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     102:	ea55 0c02 	orrsne.w	ip, r5, r2
     106:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     10e:	f000 80e2 	beq.w	2d6 <CONFIG_FLASH_SIZE+0xd6>
     112:	ea4f 5454 	mov.w	r4, r4, lsr #21
     116:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11a:	bfb8      	it	lt
     11c:	426d      	neglt	r5, r5
     11e:	dd0c      	ble.n	13a <CONFIG_KOBJECT_TEXT_AREA+0x3a>
     120:	442c      	add	r4, r5
     122:	ea80 0202 	eor.w	r2, r0, r2
     126:	ea81 0303 	eor.w	r3, r1, r3
     12a:	ea82 0000 	eor.w	r0, r2, r0
     12e:	ea83 0101 	eor.w	r1, r3, r1
     132:	ea80 0202 	eor.w	r2, r0, r2
     136:	ea81 0303 	eor.w	r3, r1, r3
     13a:	2d36      	cmp	r5, #54	; 0x36
     13c:	bf88      	it	hi
     13e:	bd30      	pophi	{r4, r5, pc}
     140:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     144:	ea4f 3101 	mov.w	r1, r1, lsl #12
     148:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     14c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     150:	d002      	beq.n	158 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xe>
     152:	4240      	negs	r0, r0
     154:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     158:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     15c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     160:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     164:	d002      	beq.n	16c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x22>
     166:	4252      	negs	r2, r2
     168:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16c:	ea94 0f05 	teq	r4, r5
     170:	f000 80a7 	beq.w	2c2 <CONFIG_FLASH_SIZE+0xc2>
     174:	f1a4 0401 	sub.w	r4, r4, #1
     178:	f1d5 0e20 	rsbs	lr, r5, #32
     17c:	db0d      	blt.n	19a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x50>
     17e:	fa02 fc0e 	lsl.w	ip, r2, lr
     182:	fa22 f205 	lsr.w	r2, r2, r5
     186:	1880      	adds	r0, r0, r2
     188:	f141 0100 	adc.w	r1, r1, #0
     18c:	fa03 f20e 	lsl.w	r2, r3, lr
     190:	1880      	adds	r0, r0, r2
     192:	fa43 f305 	asr.w	r3, r3, r5
     196:	4159      	adcs	r1, r3
     198:	e00e      	b.n	1b8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6e>
     19a:	f1a5 0520 	sub.w	r5, r5, #32
     19e:	f10e 0e20 	add.w	lr, lr, #32
     1a2:	2a01      	cmp	r2, #1
     1a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     1a8:	bf28      	it	cs
     1aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     1ae:	fa43 f305 	asr.w	r3, r3, r5
     1b2:	18c0      	adds	r0, r0, r3
     1b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1bc:	d507      	bpl.n	1ce <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x84>
     1be:	f04f 0e00 	mov.w	lr, #0
     1c2:	f1dc 0c00 	rsbs	ip, ip, #0
     1c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ca:	eb6e 0101 	sbc.w	r1, lr, r1
     1ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d2:	d31b      	bcc.n	20c <CONFIG_FLASH_SIZE+0xc>
     1d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1d8:	d30c      	bcc.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     1da:	0849      	lsrs	r1, r1, #1
     1dc:	ea5f 0030 	movs.w	r0, r0, rrx
     1e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e4:	f104 0401 	add.w	r4, r4, #1
     1e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f0:	f080 809a 	bcs.w	328 <CONFIG_FLASH_SIZE+0x128>
     1f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1f8:	bf08      	it	eq
     1fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     1fe:	f150 0000 	adcs.w	r0, r0, #0
     202:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     206:	ea41 0105 	orr.w	r1, r1, r5
     20a:	bd30      	pop	{r4, r5, pc}
     20c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     210:	4140      	adcs	r0, r0
     212:	eb41 0101 	adc.w	r1, r1, r1
     216:	3c01      	subs	r4, #1
     218:	bf28      	it	cs
     21a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     21e:	d2e9      	bcs.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     220:	f091 0f00 	teq	r1, #0
     224:	bf04      	itt	eq
     226:	4601      	moveq	r1, r0
     228:	2000      	moveq	r0, #0
     22a:	fab1 f381 	clz	r3, r1
     22e:	bf08      	it	eq
     230:	3320      	addeq	r3, #32
     232:	f1a3 030b 	sub.w	r3, r3, #11
     236:	f1b3 0220 	subs.w	r2, r3, #32
     23a:	da0c      	bge.n	256 <CONFIG_FLASH_SIZE+0x56>
     23c:	320c      	adds	r2, #12
     23e:	dd08      	ble.n	252 <CONFIG_FLASH_SIZE+0x52>
     240:	f102 0c14 	add.w	ip, r2, #20
     244:	f1c2 020c 	rsb	r2, r2, #12
     248:	fa01 f00c 	lsl.w	r0, r1, ip
     24c:	fa21 f102 	lsr.w	r1, r1, r2
     250:	e00c      	b.n	26c <CONFIG_FLASH_SIZE+0x6c>
     252:	f102 0214 	add.w	r2, r2, #20
     256:	bfd8      	it	le
     258:	f1c2 0c20 	rsble	ip, r2, #32
     25c:	fa01 f102 	lsl.w	r1, r1, r2
     260:	fa20 fc0c 	lsr.w	ip, r0, ip
     264:	bfdc      	itt	le
     266:	ea41 010c 	orrle.w	r1, r1, ip
     26a:	4090      	lslle	r0, r2
     26c:	1ae4      	subs	r4, r4, r3
     26e:	bfa2      	ittt	ge
     270:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     274:	4329      	orrge	r1, r5
     276:	bd30      	popge	{r4, r5, pc}
     278:	ea6f 0404 	mvn.w	r4, r4
     27c:	3c1f      	subs	r4, #31
     27e:	da1c      	bge.n	2ba <CONFIG_FLASH_SIZE+0xba>
     280:	340c      	adds	r4, #12
     282:	dc0e      	bgt.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     284:	f104 0414 	add.w	r4, r4, #20
     288:	f1c4 0220 	rsb	r2, r4, #32
     28c:	fa20 f004 	lsr.w	r0, r0, r4
     290:	fa01 f302 	lsl.w	r3, r1, r2
     294:	ea40 0003 	orr.w	r0, r0, r3
     298:	fa21 f304 	lsr.w	r3, r1, r4
     29c:	ea45 0103 	orr.w	r1, r5, r3
     2a0:	bd30      	pop	{r4, r5, pc}
     2a2:	f1c4 040c 	rsb	r4, r4, #12
     2a6:	f1c4 0220 	rsb	r2, r4, #32
     2aa:	fa20 f002 	lsr.w	r0, r0, r2
     2ae:	fa01 f304 	lsl.w	r3, r1, r4
     2b2:	ea40 0003 	orr.w	r0, r0, r3
     2b6:	4629      	mov	r1, r5
     2b8:	bd30      	pop	{r4, r5, pc}
     2ba:	fa21 f004 	lsr.w	r0, r1, r4
     2be:	4629      	mov	r1, r5
     2c0:	bd30      	pop	{r4, r5, pc}
     2c2:	f094 0f00 	teq	r4, #0
     2c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ca:	bf06      	itte	eq
     2cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d0:	3401      	addeq	r4, #1
     2d2:	3d01      	subne	r5, #1
     2d4:	e74e      	b.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     2d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2da:	bf18      	it	ne
     2dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e0:	d029      	beq.n	336 <CONFIG_FLASH_SIZE+0x136>
     2e2:	ea94 0f05 	teq	r4, r5
     2e6:	bf08      	it	eq
     2e8:	ea90 0f02 	teqeq	r0, r2
     2ec:	d005      	beq.n	2fa <CONFIG_FLASH_SIZE+0xfa>
     2ee:	ea54 0c00 	orrs.w	ip, r4, r0
     2f2:	bf04      	itt	eq
     2f4:	4619      	moveq	r1, r3
     2f6:	4610      	moveq	r0, r2
     2f8:	bd30      	pop	{r4, r5, pc}
     2fa:	ea91 0f03 	teq	r1, r3
     2fe:	bf1e      	ittt	ne
     300:	2100      	movne	r1, #0
     302:	2000      	movne	r0, #0
     304:	bd30      	popne	{r4, r5, pc}
     306:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30a:	d105      	bne.n	318 <CONFIG_FLASH_SIZE+0x118>
     30c:	0040      	lsls	r0, r0, #1
     30e:	4149      	adcs	r1, r1
     310:	bf28      	it	cs
     312:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     316:	bd30      	pop	{r4, r5, pc}
     318:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     31c:	bf3c      	itt	cc
     31e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     322:	bd30      	popcc	{r4, r5, pc}
     324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     328:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     32c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     330:	f04f 0000 	mov.w	r0, #0
     334:	bd30      	pop	{r4, r5, pc}
     336:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33a:	bf1a      	itte	ne
     33c:	4619      	movne	r1, r3
     33e:	4610      	movne	r0, r2
     340:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     344:	bf1c      	itt	ne
     346:	460b      	movne	r3, r1
     348:	4602      	movne	r2, r0
     34a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     34e:	bf06      	itte	eq
     350:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     354:	ea91 0f03 	teqeq	r1, r3
     358:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     35c:	bd30      	pop	{r4, r5, pc}
     35e:	bf00      	nop

00000360 <__aeabi_ui2d>:
     360:	f090 0f00 	teq	r0, #0
     364:	bf04      	itt	eq
     366:	2100      	moveq	r1, #0
     368:	4770      	bxeq	lr
     36a:	b530      	push	{r4, r5, lr}
     36c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     370:	f104 0432 	add.w	r4, r4, #50	; 0x32
     374:	f04f 0500 	mov.w	r5, #0
     378:	f04f 0100 	mov.w	r1, #0
     37c:	e750      	b.n	220 <CONFIG_FLASH_SIZE+0x20>
     37e:	bf00      	nop

00000380 <__aeabi_i2d>:
     380:	f090 0f00 	teq	r0, #0
     384:	bf04      	itt	eq
     386:	2100      	moveq	r1, #0
     388:	4770      	bxeq	lr
     38a:	b530      	push	{r4, r5, lr}
     38c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     390:	f104 0432 	add.w	r4, r4, #50	; 0x32
     394:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     398:	bf48      	it	mi
     39a:	4240      	negmi	r0, r0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e73e      	b.n	220 <CONFIG_FLASH_SIZE+0x20>
     3a2:	bf00      	nop

000003a4 <__aeabi_f2d>:
     3a4:	0042      	lsls	r2, r0, #1
     3a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3aa:	ea4f 0131 	mov.w	r1, r1, rrx
     3ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b2:	bf1f      	itttt	ne
     3b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c0:	4770      	bxne	lr
     3c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3c6:	bf08      	it	eq
     3c8:	4770      	bxeq	lr
     3ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3ce:	bf04      	itt	eq
     3d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d4:	4770      	bxeq	lr
     3d6:	b530      	push	{r4, r5, lr}
     3d8:	f44f 7460 	mov.w	r4, #896	; 0x380
     3dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e4:	e71c      	b.n	220 <CONFIG_FLASH_SIZE+0x20>
     3e6:	bf00      	nop

000003e8 <__aeabi_ul2d>:
     3e8:	ea50 0201 	orrs.w	r2, r0, r1
     3ec:	bf08      	it	eq
     3ee:	4770      	bxeq	lr
     3f0:	b530      	push	{r4, r5, lr}
     3f2:	f04f 0500 	mov.w	r5, #0
     3f6:	e00a      	b.n	40e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xe>

000003f8 <__aeabi_l2d>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	b530      	push	{r4, r5, lr}
     402:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     406:	d502      	bpl.n	40e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xe>
     408:	4240      	negs	r0, r0
     40a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     40e:	f44f 6480 	mov.w	r4, #1024	; 0x400
     412:	f104 0432 	add.w	r4, r4, #50	; 0x32
     416:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41a:	f43f aed8 	beq.w	1ce <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x84>
     41e:	f04f 0203 	mov.w	r2, #3
     422:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     426:	bf18      	it	ne
     428:	3203      	addne	r2, #3
     42a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42e:	bf18      	it	ne
     430:	3203      	addne	r2, #3
     432:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     436:	f1c2 0320 	rsb	r3, r2, #32
     43a:	fa00 fc03 	lsl.w	ip, r0, r3
     43e:	fa20 f002 	lsr.w	r0, r0, r2
     442:	fa01 fe03 	lsl.w	lr, r1, r3
     446:	ea40 000e 	orr.w	r0, r0, lr
     44a:	fa21 f102 	lsr.w	r1, r1, r2
     44e:	4414      	add	r4, r2
     450:	e6bd      	b.n	1ce <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x84>
     452:	bf00      	nop

00000454 <__aeabi_dmul>:
     454:	b570      	push	{r4, r5, r6, lr}
     456:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     45e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     462:	bf1d      	ittte	ne
     464:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     468:	ea94 0f0c 	teqne	r4, ip
     46c:	ea95 0f0c 	teqne	r5, ip
     470:	f000 f8de 	bleq	630 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     474:	442c      	add	r4, r5
     476:	ea81 0603 	eor.w	r6, r1, r3
     47a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     47e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     482:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     486:	bf18      	it	ne
     488:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     48c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     494:	d038      	beq.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     496:	fba0 ce02 	umull	ip, lr, r0, r2
     49a:	f04f 0500 	mov.w	r5, #0
     49e:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4a6:	fbe0 e503 	umlal	lr, r5, r0, r3
     4aa:	f04f 0600 	mov.w	r6, #0
     4ae:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b2:	f09c 0f00 	teq	ip, #0
     4b6:	bf18      	it	ne
     4b8:	f04e 0e01 	orrne.w	lr, lr, #1
     4bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4c8:	d204      	bcs.n	4d4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x60>
     4ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4ce:	416d      	adcs	r5, r5
     4d0:	eb46 0606 	adc.w	r6, r6, r6
     4d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4ec:	bf88      	it	hi
     4ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f2:	d81e      	bhi.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     4f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4f8:	bf08      	it	eq
     4fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     4fe:	f150 0000 	adcs.w	r0, r0, #0
     502:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     506:	bd70      	pop	{r4, r5, r6, pc}
     508:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     50c:	ea46 0101 	orr.w	r1, r6, r1
     510:	ea40 0002 	orr.w	r0, r0, r2
     514:	ea81 0103 	eor.w	r1, r1, r3
     518:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     51c:	bfc2      	ittt	gt
     51e:	ebd4 050c 	rsbsgt	r5, r4, ip
     522:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     526:	bd70      	popgt	{r4, r5, r6, pc}
     528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     52c:	f04f 0e00 	mov.w	lr, #0
     530:	3c01      	subs	r4, #1
     532:	f300 80ab 	bgt.w	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     536:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53a:	bfde      	ittt	le
     53c:	2000      	movle	r0, #0
     53e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     542:	bd70      	pople	{r4, r5, r6, pc}
     544:	f1c4 0400 	rsb	r4, r4, #0
     548:	3c20      	subs	r4, #32
     54a:	da35      	bge.n	5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>
     54c:	340c      	adds	r4, #12
     54e:	dc1b      	bgt.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
     550:	f104 0414 	add.w	r4, r4, #20
     554:	f1c4 0520 	rsb	r5, r4, #32
     558:	fa00 f305 	lsl.w	r3, r0, r5
     55c:	fa20 f004 	lsr.w	r0, r0, r4
     560:	fa01 f205 	lsl.w	r2, r1, r5
     564:	ea40 0002 	orr.w	r0, r0, r2
     568:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     56c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     570:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     574:	fa21 f604 	lsr.w	r6, r1, r4
     578:	eb42 0106 	adc.w	r1, r2, r6
     57c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     580:	bf08      	it	eq
     582:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     586:	bd70      	pop	{r4, r5, r6, pc}
     588:	f1c4 040c 	rsb	r4, r4, #12
     58c:	f1c4 0520 	rsb	r5, r4, #32
     590:	fa00 f304 	lsl.w	r3, r0, r4
     594:	fa20 f005 	lsr.w	r0, r0, r5
     598:	fa01 f204 	lsl.w	r2, r1, r4
     59c:	ea40 0002 	orr.w	r0, r0, r2
     5a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5a8:	f141 0100 	adc.w	r1, r1, #0
     5ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b0:	bf08      	it	eq
     5b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	f1c4 0520 	rsb	r5, r4, #32
     5bc:	fa00 f205 	lsl.w	r2, r0, r5
     5c0:	ea4e 0e02 	orr.w	lr, lr, r2
     5c4:	fa20 f304 	lsr.w	r3, r0, r4
     5c8:	fa01 f205 	lsl.w	r2, r1, r5
     5cc:	ea43 0302 	orr.w	r3, r3, r2
     5d0:	fa21 f004 	lsr.w	r0, r1, r4
     5d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5d8:	fa21 f204 	lsr.w	r2, r1, r4
     5dc:	ea20 0002 	bic.w	r0, r0, r2
     5e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5e8:	bf08      	it	eq
     5ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ee:	bd70      	pop	{r4, r5, r6, pc}
     5f0:	f094 0f00 	teq	r4, #0
     5f4:	d10f      	bne.n	616 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     5f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fa:	0040      	lsls	r0, r0, #1
     5fc:	eb41 0101 	adc.w	r1, r1, r1
     600:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     604:	bf08      	it	eq
     606:	3c01      	subeq	r4, #1
     608:	d0f7      	beq.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
     60a:	ea41 0106 	orr.w	r1, r1, r6
     60e:	f095 0f00 	teq	r5, #0
     612:	bf18      	it	ne
     614:	4770      	bxne	lr
     616:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61a:	0052      	lsls	r2, r2, #1
     61c:	eb43 0303 	adc.w	r3, r3, r3
     620:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     624:	bf08      	it	eq
     626:	3d01      	subeq	r5, #1
     628:	d0f7      	beq.n	61a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     62a:	ea43 0306 	orr.w	r3, r3, r6
     62e:	4770      	bx	lr
     630:	ea94 0f0c 	teq	r4, ip
     634:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     638:	bf18      	it	ne
     63a:	ea95 0f0c 	teqne	r5, ip
     63e:	d00c      	beq.n	65a <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     640:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     644:	bf18      	it	ne
     646:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64a:	d1d1      	bne.n	5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>
     64c:	ea81 0103 	eor.w	r1, r1, r3
     650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     654:	f04f 0000 	mov.w	r0, #0
     658:	bd70      	pop	{r4, r5, r6, pc}
     65a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     65e:	bf06      	itte	eq
     660:	4610      	moveq	r0, r2
     662:	4619      	moveq	r1, r3
     664:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     668:	d019      	beq.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     66a:	ea94 0f0c 	teq	r4, ip
     66e:	d102      	bne.n	676 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     670:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     674:	d113      	bne.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     676:	ea95 0f0c 	teq	r5, ip
     67a:	d105      	bne.n	688 <CONFIG_BT_HCI_TX_STACK_SIZE+0x88>
     67c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     680:	bf1c      	itt	ne
     682:	4610      	movne	r0, r2
     684:	4619      	movne	r1, r3
     686:	d10a      	bne.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     688:	ea81 0103 	eor.w	r1, r1, r3
     68c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     690:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     698:	f04f 0000 	mov.w	r0, #0
     69c:	bd70      	pop	{r4, r5, r6, pc}
     69e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6a6:	bd70      	pop	{r4, r5, r6, pc}

000006a8 <__aeabi_ddiv>:
     6a8:	b570      	push	{r4, r5, r6, lr}
     6aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6b6:	bf1d      	ittte	ne
     6b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6bc:	ea94 0f0c 	teqne	r4, ip
     6c0:	ea95 0f0c 	teqne	r5, ip
     6c4:	f000 f8a7 	bleq	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
     6c8:	eba4 0405 	sub.w	r4, r4, r5
     6cc:	ea81 0e03 	eor.w	lr, r1, r3
     6d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6d8:	f000 8088 	beq.w	7ec <__aeabi_ddiv+0x144>
     6dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
     6fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     700:	429d      	cmp	r5, r3
     702:	bf08      	it	eq
     704:	4296      	cmpeq	r6, r2
     706:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70a:	f504 7440 	add.w	r4, r4, #768	; 0x300
     70e:	d202      	bcs.n	716 <__aeabi_ddiv+0x6e>
     710:	085b      	lsrs	r3, r3, #1
     712:	ea4f 0232 	mov.w	r2, r2, rrx
     716:	1ab6      	subs	r6, r6, r2
     718:	eb65 0503 	sbc.w	r5, r5, r3
     71c:	085b      	lsrs	r3, r3, #1
     71e:	ea4f 0232 	mov.w	r2, r2, rrx
     722:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     726:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72a:	ebb6 0e02 	subs.w	lr, r6, r2
     72e:	eb75 0e03 	sbcs.w	lr, r5, r3
     732:	bf22      	ittt	cs
     734:	1ab6      	subcs	r6, r6, r2
     736:	4675      	movcs	r5, lr
     738:	ea40 000c 	orrcs.w	r0, r0, ip
     73c:	085b      	lsrs	r3, r3, #1
     73e:	ea4f 0232 	mov.w	r2, r2, rrx
     742:	ebb6 0e02 	subs.w	lr, r6, r2
     746:	eb75 0e03 	sbcs.w	lr, r5, r3
     74a:	bf22      	ittt	cs
     74c:	1ab6      	subcs	r6, r6, r2
     74e:	4675      	movcs	r5, lr
     750:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     754:	085b      	lsrs	r3, r3, #1
     756:	ea4f 0232 	mov.w	r2, r2, rrx
     75a:	ebb6 0e02 	subs.w	lr, r6, r2
     75e:	eb75 0e03 	sbcs.w	lr, r5, r3
     762:	bf22      	ittt	cs
     764:	1ab6      	subcs	r6, r6, r2
     766:	4675      	movcs	r5, lr
     768:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     76c:	085b      	lsrs	r3, r3, #1
     76e:	ea4f 0232 	mov.w	r2, r2, rrx
     772:	ebb6 0e02 	subs.w	lr, r6, r2
     776:	eb75 0e03 	sbcs.w	lr, r5, r3
     77a:	bf22      	ittt	cs
     77c:	1ab6      	subcs	r6, r6, r2
     77e:	4675      	movcs	r5, lr
     780:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     784:	ea55 0e06 	orrs.w	lr, r5, r6
     788:	d018      	beq.n	7bc <__aeabi_ddiv+0x114>
     78a:	ea4f 1505 	mov.w	r5, r5, lsl #4
     78e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     792:	ea4f 1606 	mov.w	r6, r6, lsl #4
     796:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     79e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7a6:	d1c0      	bne.n	72a <__aeabi_ddiv+0x82>
     7a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7ac:	d10b      	bne.n	7c6 <__aeabi_ddiv+0x11e>
     7ae:	ea41 0100 	orr.w	r1, r1, r0
     7b2:	f04f 0000 	mov.w	r0, #0
     7b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7ba:	e7b6      	b.n	72a <__aeabi_ddiv+0x82>
     7bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c0:	bf04      	itt	eq
     7c2:	4301      	orreq	r1, r0
     7c4:	2000      	moveq	r0, #0
     7c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ca:	bf88      	it	hi
     7cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d0:	f63f aeaf 	bhi.w	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     7d4:	ebb5 0c03 	subs.w	ip, r5, r3
     7d8:	bf04      	itt	eq
     7da:	ebb6 0c02 	subseq.w	ip, r6, r2
     7de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e2:	f150 0000 	adcs.w	r0, r0, #0
     7e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ea:	bd70      	pop	{r4, r5, r6, pc}
     7ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7f8:	bfc2      	ittt	gt
     7fa:	ebd4 050c 	rsbsgt	r5, r4, ip
     7fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     802:	bd70      	popgt	{r4, r5, r6, pc}
     804:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     808:	f04f 0e00 	mov.w	lr, #0
     80c:	3c01      	subs	r4, #1
     80e:	e690      	b.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     810:	ea45 0e06 	orr.w	lr, r5, r6
     814:	e68d      	b.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     816:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81a:	ea94 0f0c 	teq	r4, ip
     81e:	bf08      	it	eq
     820:	ea95 0f0c 	teqeq	r5, ip
     824:	f43f af3b 	beq.w	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     828:	ea94 0f0c 	teq	r4, ip
     82c:	d10a      	bne.n	844 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x44>
     82e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     832:	f47f af34 	bne.w	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     836:	ea95 0f0c 	teq	r5, ip
     83a:	f47f af25 	bne.w	688 <CONFIG_BT_HCI_TX_STACK_SIZE+0x88>
     83e:	4610      	mov	r0, r2
     840:	4619      	mov	r1, r3
     842:	e72c      	b.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     844:	ea95 0f0c 	teq	r5, ip
     848:	d106      	bne.n	858 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x58>
     84a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     84e:	f43f aefd 	beq.w	64c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     852:	4610      	mov	r0, r2
     854:	4619      	mov	r1, r3
     856:	e722      	b.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     85c:	bf18      	it	ne
     85e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     862:	f47f aec5 	bne.w	5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>
     866:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86a:	f47f af0d 	bne.w	688 <CONFIG_BT_HCI_TX_STACK_SIZE+0x88>
     86e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     872:	f47f aeeb 	bne.w	64c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     876:	e712      	b.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>

00000878 <__aeabi_d2iz>:
     878:	ea4f 0241 	mov.w	r2, r1, lsl #1
     87c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     880:	d215      	bcs.n	8ae <__aeabi_d2iz+0x36>
     882:	d511      	bpl.n	8a8 <__aeabi_d2iz+0x30>
     884:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     888:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     88c:	d912      	bls.n	8b4 <__aeabi_d2iz+0x3c>
     88e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     896:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     89a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     89e:	fa23 f002 	lsr.w	r0, r3, r2
     8a2:	bf18      	it	ne
     8a4:	4240      	negne	r0, r0
     8a6:	4770      	bx	lr
     8a8:	f04f 0000 	mov.w	r0, #0
     8ac:	4770      	bx	lr
     8ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8b2:	d105      	bne.n	8c0 <__aeabi_d2iz+0x48>
     8b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8b8:	bf08      	it	eq
     8ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8be:	4770      	bx	lr
     8c0:	f04f 0000 	mov.w	r0, #0
     8c4:	4770      	bx	lr
     8c6:	bf00      	nop

000008c8 <__aeabi_uldivmod>:
     8c8:	b953      	cbnz	r3, 8e0 <__aeabi_uldivmod+0x18>
     8ca:	b94a      	cbnz	r2, 8e0 <__aeabi_uldivmod+0x18>
     8cc:	2900      	cmp	r1, #0
     8ce:	bf08      	it	eq
     8d0:	2800      	cmpeq	r0, #0
     8d2:	bf1c      	itt	ne
     8d4:	f04f 31ff 	movne.w	r1, #4294967295
     8d8:	f04f 30ff 	movne.w	r0, #4294967295
     8dc:	f000 b96c 	b.w	bb8 <__aeabi_idiv0>
     8e0:	f1ad 0c08 	sub.w	ip, sp, #8
     8e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8e8:	f000 f806 	bl	8f8 <__udivmoddi4>
     8ec:	f8dd e004 	ldr.w	lr, [sp, #4]
     8f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8f4:	b004      	add	sp, #16
     8f6:	4770      	bx	lr

000008f8 <__udivmoddi4>:
     8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     8fc:	9e08      	ldr	r6, [sp, #32]
     8fe:	460d      	mov	r5, r1
     900:	4604      	mov	r4, r0
     902:	468e      	mov	lr, r1
     904:	2b00      	cmp	r3, #0
     906:	f040 8082 	bne.w	a0e <__udivmoddi4+0x116>
     90a:	428a      	cmp	r2, r1
     90c:	4617      	mov	r7, r2
     90e:	d946      	bls.n	99e <__udivmoddi4+0xa6>
     910:	fab2 f282 	clz	r2, r2
     914:	b14a      	cbz	r2, 92a <__udivmoddi4+0x32>
     916:	f1c2 0120 	rsb	r1, r2, #32
     91a:	fa05 f302 	lsl.w	r3, r5, r2
     91e:	fa20 f101 	lsr.w	r1, r0, r1
     922:	4097      	lsls	r7, r2
     924:	ea41 0e03 	orr.w	lr, r1, r3
     928:	4094      	lsls	r4, r2
     92a:	ea4f 4817 	mov.w	r8, r7, lsr #16
     92e:	0c23      	lsrs	r3, r4, #16
     930:	fbbe fcf8 	udiv	ip, lr, r8
     934:	b2b9      	uxth	r1, r7
     936:	fb08 ee1c 	mls	lr, r8, ip, lr
     93a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     93e:	fb0c f001 	mul.w	r0, ip, r1
     942:	4298      	cmp	r0, r3
     944:	d90a      	bls.n	95c <__udivmoddi4+0x64>
     946:	18fb      	adds	r3, r7, r3
     948:	f10c 35ff 	add.w	r5, ip, #4294967295
     94c:	f080 8116 	bcs.w	b7c <__udivmoddi4+0x284>
     950:	4298      	cmp	r0, r3
     952:	f240 8113 	bls.w	b7c <__udivmoddi4+0x284>
     956:	f1ac 0c02 	sub.w	ip, ip, #2
     95a:	443b      	add	r3, r7
     95c:	1a1b      	subs	r3, r3, r0
     95e:	b2a4      	uxth	r4, r4
     960:	fbb3 f0f8 	udiv	r0, r3, r8
     964:	fb08 3310 	mls	r3, r8, r0, r3
     968:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     96c:	fb00 f101 	mul.w	r1, r0, r1
     970:	42a1      	cmp	r1, r4
     972:	d909      	bls.n	988 <__udivmoddi4+0x90>
     974:	193c      	adds	r4, r7, r4
     976:	f100 33ff 	add.w	r3, r0, #4294967295
     97a:	f080 8101 	bcs.w	b80 <__udivmoddi4+0x288>
     97e:	42a1      	cmp	r1, r4
     980:	f240 80fe 	bls.w	b80 <__udivmoddi4+0x288>
     984:	3802      	subs	r0, #2
     986:	443c      	add	r4, r7
     988:	1a64      	subs	r4, r4, r1
     98a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     98e:	2100      	movs	r1, #0
     990:	b11e      	cbz	r6, 99a <__udivmoddi4+0xa2>
     992:	40d4      	lsrs	r4, r2
     994:	2300      	movs	r3, #0
     996:	e9c6 4300 	strd	r4, r3, [r6]
     99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     99e:	b902      	cbnz	r2, 9a2 <__udivmoddi4+0xaa>
     9a0:	deff      	udf	#255	; 0xff
     9a2:	fab2 f282 	clz	r2, r2
     9a6:	2a00      	cmp	r2, #0
     9a8:	d14f      	bne.n	a4a <__udivmoddi4+0x152>
     9aa:	1bcb      	subs	r3, r1, r7
     9ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     9b0:	fa1f f887 	uxth.w	r8, r7
     9b4:	2101      	movs	r1, #1
     9b6:	fbb3 fcfe 	udiv	ip, r3, lr
     9ba:	0c25      	lsrs	r5, r4, #16
     9bc:	fb0e 331c 	mls	r3, lr, ip, r3
     9c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     9c4:	fb08 f30c 	mul.w	r3, r8, ip
     9c8:	42ab      	cmp	r3, r5
     9ca:	d907      	bls.n	9dc <__udivmoddi4+0xe4>
     9cc:	197d      	adds	r5, r7, r5
     9ce:	f10c 30ff 	add.w	r0, ip, #4294967295
     9d2:	d202      	bcs.n	9da <__udivmoddi4+0xe2>
     9d4:	42ab      	cmp	r3, r5
     9d6:	f200 80e7 	bhi.w	ba8 <__udivmoddi4+0x2b0>
     9da:	4684      	mov	ip, r0
     9dc:	1aed      	subs	r5, r5, r3
     9de:	b2a3      	uxth	r3, r4
     9e0:	fbb5 f0fe 	udiv	r0, r5, lr
     9e4:	fb0e 5510 	mls	r5, lr, r0, r5
     9e8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     9ec:	fb08 f800 	mul.w	r8, r8, r0
     9f0:	45a0      	cmp	r8, r4
     9f2:	d907      	bls.n	a04 <__udivmoddi4+0x10c>
     9f4:	193c      	adds	r4, r7, r4
     9f6:	f100 33ff 	add.w	r3, r0, #4294967295
     9fa:	d202      	bcs.n	a02 <__udivmoddi4+0x10a>
     9fc:	45a0      	cmp	r8, r4
     9fe:	f200 80d7 	bhi.w	bb0 <__udivmoddi4+0x2b8>
     a02:	4618      	mov	r0, r3
     a04:	eba4 0408 	sub.w	r4, r4, r8
     a08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a0c:	e7c0      	b.n	990 <__udivmoddi4+0x98>
     a0e:	428b      	cmp	r3, r1
     a10:	d908      	bls.n	a24 <__udivmoddi4+0x12c>
     a12:	2e00      	cmp	r6, #0
     a14:	f000 80af 	beq.w	b76 <__udivmoddi4+0x27e>
     a18:	2100      	movs	r1, #0
     a1a:	e9c6 0500 	strd	r0, r5, [r6]
     a1e:	4608      	mov	r0, r1
     a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a24:	fab3 f183 	clz	r1, r3
     a28:	2900      	cmp	r1, #0
     a2a:	d14b      	bne.n	ac4 <__udivmoddi4+0x1cc>
     a2c:	42ab      	cmp	r3, r5
     a2e:	d302      	bcc.n	a36 <__udivmoddi4+0x13e>
     a30:	4282      	cmp	r2, r0
     a32:	f200 80b7 	bhi.w	ba4 <__udivmoddi4+0x2ac>
     a36:	1a84      	subs	r4, r0, r2
     a38:	eb65 0303 	sbc.w	r3, r5, r3
     a3c:	2001      	movs	r0, #1
     a3e:	469e      	mov	lr, r3
     a40:	2e00      	cmp	r6, #0
     a42:	d0aa      	beq.n	99a <__udivmoddi4+0xa2>
     a44:	e9c6 4e00 	strd	r4, lr, [r6]
     a48:	e7a7      	b.n	99a <__udivmoddi4+0xa2>
     a4a:	f1c2 0c20 	rsb	ip, r2, #32
     a4e:	fa01 f302 	lsl.w	r3, r1, r2
     a52:	4097      	lsls	r7, r2
     a54:	fa20 f00c 	lsr.w	r0, r0, ip
     a58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a5c:	fa21 fc0c 	lsr.w	ip, r1, ip
     a60:	4318      	orrs	r0, r3
     a62:	fbbc f1fe 	udiv	r1, ip, lr
     a66:	0c05      	lsrs	r5, r0, #16
     a68:	fb0e cc11 	mls	ip, lr, r1, ip
     a6c:	fa1f f887 	uxth.w	r8, r7
     a70:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     a74:	fb01 f308 	mul.w	r3, r1, r8
     a78:	42ab      	cmp	r3, r5
     a7a:	fa04 f402 	lsl.w	r4, r4, r2
     a7e:	d909      	bls.n	a94 <__udivmoddi4+0x19c>
     a80:	197d      	adds	r5, r7, r5
     a82:	f101 3cff 	add.w	ip, r1, #4294967295
     a86:	f080 808b 	bcs.w	ba0 <__udivmoddi4+0x2a8>
     a8a:	42ab      	cmp	r3, r5
     a8c:	f240 8088 	bls.w	ba0 <__udivmoddi4+0x2a8>
     a90:	3902      	subs	r1, #2
     a92:	443d      	add	r5, r7
     a94:	1aeb      	subs	r3, r5, r3
     a96:	b285      	uxth	r5, r0
     a98:	fbb3 f0fe 	udiv	r0, r3, lr
     a9c:	fb0e 3310 	mls	r3, lr, r0, r3
     aa0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     aa4:	fb00 f308 	mul.w	r3, r0, r8
     aa8:	42ab      	cmp	r3, r5
     aaa:	d907      	bls.n	abc <__udivmoddi4+0x1c4>
     aac:	197d      	adds	r5, r7, r5
     aae:	f100 3cff 	add.w	ip, r0, #4294967295
     ab2:	d271      	bcs.n	b98 <__udivmoddi4+0x2a0>
     ab4:	42ab      	cmp	r3, r5
     ab6:	d96f      	bls.n	b98 <__udivmoddi4+0x2a0>
     ab8:	3802      	subs	r0, #2
     aba:	443d      	add	r5, r7
     abc:	1aeb      	subs	r3, r5, r3
     abe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     ac2:	e778      	b.n	9b6 <__udivmoddi4+0xbe>
     ac4:	f1c1 0c20 	rsb	ip, r1, #32
     ac8:	408b      	lsls	r3, r1
     aca:	fa22 f70c 	lsr.w	r7, r2, ip
     ace:	431f      	orrs	r7, r3
     ad0:	fa20 f40c 	lsr.w	r4, r0, ip
     ad4:	fa05 f301 	lsl.w	r3, r5, r1
     ad8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     adc:	fa25 f50c 	lsr.w	r5, r5, ip
     ae0:	431c      	orrs	r4, r3
     ae2:	0c23      	lsrs	r3, r4, #16
     ae4:	fbb5 f9fe 	udiv	r9, r5, lr
     ae8:	fa1f f887 	uxth.w	r8, r7
     aec:	fb0e 5519 	mls	r5, lr, r9, r5
     af0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     af4:	fb09 fa08 	mul.w	sl, r9, r8
     af8:	45aa      	cmp	sl, r5
     afa:	fa02 f201 	lsl.w	r2, r2, r1
     afe:	fa00 f301 	lsl.w	r3, r0, r1
     b02:	d908      	bls.n	b16 <__udivmoddi4+0x21e>
     b04:	197d      	adds	r5, r7, r5
     b06:	f109 30ff 	add.w	r0, r9, #4294967295
     b0a:	d247      	bcs.n	b9c <__udivmoddi4+0x2a4>
     b0c:	45aa      	cmp	sl, r5
     b0e:	d945      	bls.n	b9c <__udivmoddi4+0x2a4>
     b10:	f1a9 0902 	sub.w	r9, r9, #2
     b14:	443d      	add	r5, r7
     b16:	eba5 050a 	sub.w	r5, r5, sl
     b1a:	b2a4      	uxth	r4, r4
     b1c:	fbb5 f0fe 	udiv	r0, r5, lr
     b20:	fb0e 5510 	mls	r5, lr, r0, r5
     b24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     b28:	fb00 f808 	mul.w	r8, r0, r8
     b2c:	45a0      	cmp	r8, r4
     b2e:	d907      	bls.n	b40 <__udivmoddi4+0x248>
     b30:	193c      	adds	r4, r7, r4
     b32:	f100 35ff 	add.w	r5, r0, #4294967295
     b36:	d22d      	bcs.n	b94 <__udivmoddi4+0x29c>
     b38:	45a0      	cmp	r8, r4
     b3a:	d92b      	bls.n	b94 <__udivmoddi4+0x29c>
     b3c:	3802      	subs	r0, #2
     b3e:	443c      	add	r4, r7
     b40:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     b44:	eba4 0408 	sub.w	r4, r4, r8
     b48:	fba0 8902 	umull	r8, r9, r0, r2
     b4c:	454c      	cmp	r4, r9
     b4e:	46c6      	mov	lr, r8
     b50:	464d      	mov	r5, r9
     b52:	d319      	bcc.n	b88 <__udivmoddi4+0x290>
     b54:	d016      	beq.n	b84 <__udivmoddi4+0x28c>
     b56:	b15e      	cbz	r6, b70 <__udivmoddi4+0x278>
     b58:	ebb3 020e 	subs.w	r2, r3, lr
     b5c:	eb64 0405 	sbc.w	r4, r4, r5
     b60:	fa04 fc0c 	lsl.w	ip, r4, ip
     b64:	40ca      	lsrs	r2, r1
     b66:	ea4c 0202 	orr.w	r2, ip, r2
     b6a:	40cc      	lsrs	r4, r1
     b6c:	e9c6 2400 	strd	r2, r4, [r6]
     b70:	2100      	movs	r1, #0
     b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b76:	4631      	mov	r1, r6
     b78:	4630      	mov	r0, r6
     b7a:	e70e      	b.n	99a <__udivmoddi4+0xa2>
     b7c:	46ac      	mov	ip, r5
     b7e:	e6ed      	b.n	95c <__udivmoddi4+0x64>
     b80:	4618      	mov	r0, r3
     b82:	e701      	b.n	988 <__udivmoddi4+0x90>
     b84:	4543      	cmp	r3, r8
     b86:	d2e6      	bcs.n	b56 <__udivmoddi4+0x25e>
     b88:	ebb8 0e02 	subs.w	lr, r8, r2
     b8c:	eb69 0507 	sbc.w	r5, r9, r7
     b90:	3801      	subs	r0, #1
     b92:	e7e0      	b.n	b56 <__udivmoddi4+0x25e>
     b94:	4628      	mov	r0, r5
     b96:	e7d3      	b.n	b40 <__udivmoddi4+0x248>
     b98:	4660      	mov	r0, ip
     b9a:	e78f      	b.n	abc <__udivmoddi4+0x1c4>
     b9c:	4681      	mov	r9, r0
     b9e:	e7ba      	b.n	b16 <__udivmoddi4+0x21e>
     ba0:	4661      	mov	r1, ip
     ba2:	e777      	b.n	a94 <__udivmoddi4+0x19c>
     ba4:	4608      	mov	r0, r1
     ba6:	e74b      	b.n	a40 <__udivmoddi4+0x148>
     ba8:	f1ac 0c02 	sub.w	ip, ip, #2
     bac:	443d      	add	r5, r7
     bae:	e715      	b.n	9dc <__udivmoddi4+0xe4>
     bb0:	3802      	subs	r0, #2
     bb2:	443c      	add	r4, r7
     bb4:	e726      	b.n	a04 <__udivmoddi4+0x10c>
     bb6:	bf00      	nop

00000bb8 <__aeabi_idiv0>:
     bb8:	4770      	bx	lr
     bba:	bf00      	nop

00000bbc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bbe:	4615      	mov	r5, r2
     bc0:	4a0a      	ldr	r2, [pc, #40]	; (bec <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
     bc2:	461c      	mov	r4, r3
     bc4:	6856      	ldr	r6, [r2, #4]
     bc6:	b12e      	cbz	r6, bd4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
     bc8:	b001      	add	sp, #4
     bca:	462a      	mov	r2, r5
     bcc:	46b4      	mov	ip, r6
     bce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     bd2:	4760      	bx	ip
     bd4:	2000      	movs	r0, #0
     bd6:	f88d 0000 	strb.w	r0, [sp]
     bda:	4668      	mov	r0, sp
     bdc:	f00a f9c2 	bl	af64 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     be0:	f89d 0000 	ldrb.w	r0, [sp]
     be4:	1a28      	subs	r0, r5, r0
     be6:	7020      	strb	r0, [r4, #0]
     be8:	2000      	movs	r0, #0
     bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bec:	20000000 	.word	0x20000000

00000bf0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     bf0:	4801      	ldr	r0, [pc, #4]	; (bf8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     bf2:	7800      	ldrb	r0, [r0, #0]
     bf4:	4770      	bx	lr
     bf6:	0000      	.short	0x0000
     bf8:	20000008 	.word	0x20000008

00000bfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     bfc:	4905      	ldr	r1, [pc, #20]	; (c14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     bfe:	780a      	ldrb	r2, [r1, #0]
     c00:	4290      	cmp	r0, r2
     c02:	d301      	bcc.n	c08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     c04:	2000      	movs	r0, #0
     c06:	4770      	bx	lr
     c08:	6849      	ldr	r1, [r1, #4]
     c0a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     c0e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     c12:	4770      	bx	lr
     c14:	20000008 	.word	0x20000008
     c18:	b570      	push	{r4, r5, r6, lr}
     c1a:	4605      	mov	r5, r0
     c1c:	2a20      	cmp	r2, #32
     c1e:	d027      	beq.n	c70 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
     c20:	4819      	ldr	r0, [pc, #100]	; (c88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
     c22:	4c1a      	ldr	r4, [pc, #104]	; (c8c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
     c24:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     c28:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     c2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     c30:	2920      	cmp	r1, #32
     c32:	d022      	beq.n	c7a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
     c34:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     c38:	7840      	ldrb	r0, [r0, #1]
     c3a:	784c      	ldrb	r4, [r1, #1]
     c3c:	7048      	strb	r0, [r1, #1]
     c3e:	4620      	mov	r0, r4
     c40:	4601      	mov	r1, r0
     c42:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     c46:	4291      	cmp	r1, r2
     c48:	7005      	strb	r5, [r0, #0]
     c4a:	7840      	ldrb	r0, [r0, #1]
     c4c:	d1f8      	bne.n	c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     c4e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     c52:	2a20      	cmp	r2, #32
     c54:	bf1a      	itte	ne
     c56:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     c5a:	7054      	strbne	r4, [r2, #1]
     c5c:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     c60:	2220      	movs	r2, #32
     c62:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     c66:	f88c 2001 	strb.w	r2, [ip, #1]
     c6a:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     c6e:	bd70      	pop	{r4, r5, r6, pc}
     c70:	f240 217e 	movw	r1, #638	; 0x27e
     c74:	2070      	movs	r0, #112	; 0x70
     c76:	f003 f987 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c7a:	f893 4020 	ldrb.w	r4, [r3, #32]
     c7e:	7840      	ldrb	r0, [r0, #1]
     c80:	f883 0020 	strb.w	r0, [r3, #32]
     c84:	e7db      	b.n	c3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     c86:	0000      	.short	0x0000
     c88:	200009a4 	.word	0x200009a4
     c8c:	20000a24 	.word	0x20000a24
     c90:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c94:	b085      	sub	sp, #20
     c96:	4615      	mov	r5, r2
     c98:	460c      	mov	r4, r1
     c9a:	f002 f915 	bl	2ec8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     c9e:	4428      	add	r0, r5
     ca0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ca4:	9002      	str	r0, [sp, #8]
     ca6:	6821      	ldr	r1, [r4, #0]
     ca8:	1a08      	subs	r0, r1, r0
     caa:	0200      	lsls	r0, r0, #8
     cac:	17c1      	asrs	r1, r0, #31
     cae:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     cb2:	1200      	asrs	r0, r0, #8
     cb4:	2800      	cmp	r0, #0
     cb6:	f300 80d5 	bgt.w	e64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
     cba:	48ac      	ldr	r0, [pc, #688]	; (f6c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
     cbc:	9f08      	ldr	r7, [sp, #32]
     cbe:	4eac      	ldr	r6, [pc, #688]	; (f70 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
     cc0:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     cc4:	9003      	str	r0, [sp, #12]
     cc6:	f890 5020 	ldrb.w	r5, [r0, #32]
     cca:	2020      	movs	r0, #32
     ccc:	46e9      	mov	r9, sp
     cce:	f10d 0804 	add.w	r8, sp, #4
     cd2:	f88d 0000 	strb.w	r0, [sp]
     cd6:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     cda:	2d20      	cmp	r5, #32
     cdc:	bf18      	it	ne
     cde:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     ce2:	d025      	beq.n	d30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     ce4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     ce8:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     cec:	6822      	ldr	r2, [r4, #0]
     cee:	68c1      	ldr	r1, [r0, #12]
     cf0:	1a51      	subs	r1, r2, r1
     cf2:	0209      	lsls	r1, r1, #8
     cf4:	17ca      	asrs	r2, r1, #31
     cf6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     cfa:	3008      	adds	r0, #8
     cfc:	1209      	asrs	r1, r1, #8
     cfe:	d417      	bmi.n	d30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     d00:	8961      	ldrh	r1, [r4, #10]
     d02:	b171      	cbz	r1, d22 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
     d04:	8941      	ldrh	r1, [r0, #10]
     d06:	b961      	cbnz	r1, d22 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
     d08:	f000 fdb4 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
     d0c:	f002 f8dc 	bl	2ec8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     d10:	6821      	ldr	r1, [r4, #0]
     d12:	1a08      	subs	r0, r1, r0
     d14:	0200      	lsls	r0, r0, #8
     d16:	17c1      	asrs	r1, r0, #31
     d18:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     d1c:	1200      	asrs	r0, r0, #8
     d1e:	2833      	cmp	r0, #51	; 0x33
     d20:	db06      	blt.n	d30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     d22:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     d26:	f889 5000 	strb.w	r5, [r9]
     d2a:	7845      	ldrb	r5, [r0, #1]
     d2c:	2d20      	cmp	r5, #32
     d2e:	d1d9      	bne.n	ce4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
     d30:	f899 0000 	ldrb.w	r0, [r9]
     d34:	f888 0000 	strb.w	r0, [r8]
     d38:	46a1      	mov	r9, r4
     d3a:	2d20      	cmp	r5, #32
     d3c:	bf1c      	itt	ne
     d3e:	488d      	ldrne	r0, [pc, #564]	; (f74 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
     d40:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     d44:	f000 810e 	beq.w	f64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     d48:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     d4c:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     d50:	f8d9 2004 	ldr.w	r2, [r9, #4]
     d54:	f8da 1008 	ldr.w	r1, [sl, #8]
     d58:	4648      	mov	r0, r9
     d5a:	1a89      	subs	r1, r1, r2
     d5c:	0209      	lsls	r1, r1, #8
     d5e:	17ca      	asrs	r2, r1, #31
     d60:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     d64:	f10a 0708 	add.w	r7, sl, #8
     d68:	1209      	asrs	r1, r1, #8
     d6a:	d415      	bmi.n	d98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
     d6c:	8979      	ldrh	r1, [r7, #10]
     d6e:	2900      	cmp	r1, #0
     d70:	f000 80f8 	beq.w	f64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     d74:	8941      	ldrh	r1, [r0, #10]
     d76:	2900      	cmp	r1, #0
     d78:	f040 80f4 	bne.w	f64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     d7c:	f000 fd7a 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
     d80:	f002 f8a2 	bl	2ec8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     d84:	6839      	ldr	r1, [r7, #0]
     d86:	1a08      	subs	r0, r1, r0
     d88:	0200      	lsls	r0, r0, #8
     d8a:	17c1      	asrs	r1, r0, #31
     d8c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     d90:	1200      	asrs	r0, r0, #8
     d92:	2833      	cmp	r0, #51	; 0x33
     d94:	f280 80e6 	bge.w	f64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     d98:	f888 5000 	strb.w	r5, [r8]
     d9c:	f89a 1014 	ldrb.w	r1, [sl, #20]
     da0:	f899 000c 	ldrb.w	r0, [r9, #12]
     da4:	4281      	cmp	r1, r0
     da6:	d906      	bls.n	db6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
     da8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     dac:	7845      	ldrb	r5, [r0, #1]
     dae:	2d20      	cmp	r5, #32
     db0:	d1ca      	bne.n	d48 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
     db2:	f000 b8d7 	b.w	f64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     db6:	f89d 0004 	ldrb.w	r0, [sp, #4]
     dba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     dbe:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     dc2:	8a68      	ldrh	r0, [r5, #18]
     dc4:	68ef      	ldr	r7, [r5, #12]
     dc6:	2800      	cmp	r0, #0
     dc8:	d143      	bne.n	e52 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
     dca:	8960      	ldrh	r0, [r4, #10]
     dcc:	b3e8      	cbz	r0, e4a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
     dce:	68a8      	ldr	r0, [r5, #8]
     dd0:	f00a f8e8 	bl	afa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     dd4:	8a69      	ldrh	r1, [r5, #18]
     dd6:	7c2a      	ldrb	r2, [r5, #16]
     dd8:	4b67      	ldr	r3, [pc, #412]	; (f78 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
     dda:	4411      	add	r1, r2
     ddc:	1c49      	adds	r1, r1, #1
     dde:	1842      	adds	r2, r0, r1
     de0:	4298      	cmp	r0, r3
     de2:	d904      	bls.n	dee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
     de4:	f240 6109 	movw	r1, #1545	; 0x609
     de8:	2070      	movs	r0, #112	; 0x70
     dea:	f003 f8cd 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dee:	4863      	ldr	r0, [pc, #396]	; (f7c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
     df0:	4281      	cmp	r1, r0
     df2:	dd04      	ble.n	dfe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
     df4:	f240 610a 	movw	r1, #1546	; 0x60a
     df8:	2070      	movs	r0, #112	; 0x70
     dfa:	f003 f8c5 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dfe:	4860      	ldr	r0, [pc, #384]	; (f80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
     e00:	4281      	cmp	r1, r0
     e02:	da04      	bge.n	e0e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
     e04:	f240 610b 	movw	r1, #1547	; 0x60b
     e08:	2070      	movs	r0, #112	; 0x70
     e0a:	f003 f8bd 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e0e:	485d      	ldr	r0, [pc, #372]	; (f84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
     e10:	4290      	cmp	r0, r2
     e12:	bfdc      	itt	le
     e14:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     e18:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     e1c:	dd05      	ble.n	e2a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
     e1e:	2a00      	cmp	r2, #0
     e20:	bfbc      	itt	lt
     e22:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     e26:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     e2a:	4610      	mov	r0, r2
     e2c:	f002 f84c 	bl	2ec8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e30:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e34:	1a78      	subs	r0, r7, r1
     e36:	0200      	lsls	r0, r0, #8
     e38:	17c2      	asrs	r2, r0, #31
     e3a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e3e:	1200      	asrs	r0, r0, #8
     e40:	2833      	cmp	r0, #51	; 0x33
     e42:	bfb8      	it	lt
     e44:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     e48:	e000      	b.n	e4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
     e4a:	e002      	b.n	e52 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
     e4c:	bfb8      	it	lt
     e4e:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     e52:	9802      	ldr	r0, [sp, #8]
     e54:	1a38      	subs	r0, r7, r0
     e56:	0200      	lsls	r0, r0, #8
     e58:	17c1      	asrs	r1, r0, #31
     e5a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     e5e:	1200      	asrs	r0, r0, #8
     e60:	2800      	cmp	r0, #0
     e62:	dd03      	ble.n	e6c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
     e64:	b009      	add	sp, #36	; 0x24
     e66:	2000      	movs	r0, #0
     e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e6c:	e9d4 1000 	ldrd	r1, r0, [r4]
     e70:	1a40      	subs	r0, r0, r1
     e72:	4438      	add	r0, r7
     e74:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     e78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e7c:	e9c4 1000 	strd	r1, r0, [r4]
     e80:	9803      	ldr	r0, [sp, #12]
     e82:	f8dd 8020 	ldr.w	r8, [sp, #32]
     e86:	466f      	mov	r7, sp
     e88:	f890 5020 	ldrb.w	r5, [r0, #32]
     e8c:	2020      	movs	r0, #32
     e8e:	f10d 0a04 	add.w	sl, sp, #4
     e92:	f88d 0000 	strb.w	r0, [sp]
     e96:	2d20      	cmp	r5, #32
     e98:	bf1c      	itt	ne
     e9a:	4836      	ldrne	r0, [pc, #216]	; (f74 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
     e9c:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     ea0:	d025      	beq.n	eee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
     ea2:	bf00      	nop
     ea4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     ea8:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     eac:	6822      	ldr	r2, [r4, #0]
     eae:	68c1      	ldr	r1, [r0, #12]
     eb0:	1a51      	subs	r1, r2, r1
     eb2:	0209      	lsls	r1, r1, #8
     eb4:	17ca      	asrs	r2, r1, #31
     eb6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     eba:	3008      	adds	r0, #8
     ebc:	1209      	asrs	r1, r1, #8
     ebe:	d416      	bmi.n	eee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
     ec0:	8961      	ldrh	r1, [r4, #10]
     ec2:	b171      	cbz	r1, ee2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
     ec4:	8941      	ldrh	r1, [r0, #10]
     ec6:	b961      	cbnz	r1, ee2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
     ec8:	f000 fcd4 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
     ecc:	f001 fffc 	bl	2ec8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ed0:	6821      	ldr	r1, [r4, #0]
     ed2:	1a08      	subs	r0, r1, r0
     ed4:	0200      	lsls	r0, r0, #8
     ed6:	17c1      	asrs	r1, r0, #31
     ed8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     edc:	1200      	asrs	r0, r0, #8
     ede:	2833      	cmp	r0, #51	; 0x33
     ee0:	db05      	blt.n	eee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
     ee2:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     ee6:	703d      	strb	r5, [r7, #0]
     ee8:	7845      	ldrb	r5, [r0, #1]
     eea:	2d20      	cmp	r5, #32
     eec:	d1da      	bne.n	ea4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
     eee:	7838      	ldrb	r0, [r7, #0]
     ef0:	f88a 0000 	strb.w	r0, [sl]
     ef4:	4627      	mov	r7, r4
     ef6:	2d20      	cmp	r5, #32
     ef8:	bf1c      	itt	ne
     efa:	481e      	ldrne	r0, [pc, #120]	; (f74 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
     efc:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     f00:	d030      	beq.n	f64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     f02:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     f06:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     f0a:	6879      	ldr	r1, [r7, #4]
     f0c:	f8d9 2008 	ldr.w	r2, [r9, #8]
     f10:	4638      	mov	r0, r7
     f12:	1a51      	subs	r1, r2, r1
     f14:	0209      	lsls	r1, r1, #8
     f16:	17ca      	asrs	r2, r1, #31
     f18:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     f1c:	f109 0808 	add.w	r8, r9, #8
     f20:	1209      	asrs	r1, r1, #8
     f22:	d412      	bmi.n	f4a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
     f24:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     f28:	b1e1      	cbz	r1, f64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     f2a:	8941      	ldrh	r1, [r0, #10]
     f2c:	b9d1      	cbnz	r1, f64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     f2e:	f000 fca1 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
     f32:	f001 ffc9 	bl	2ec8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f36:	f8d8 1000 	ldr.w	r1, [r8]
     f3a:	1a08      	subs	r0, r1, r0
     f3c:	0200      	lsls	r0, r0, #8
     f3e:	17c1      	asrs	r1, r0, #31
     f40:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     f44:	1200      	asrs	r0, r0, #8
     f46:	2833      	cmp	r0, #51	; 0x33
     f48:	da0c      	bge.n	f64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     f4a:	f88a 5000 	strb.w	r5, [sl]
     f4e:	f899 0014 	ldrb.w	r0, [r9, #20]
     f52:	7b39      	ldrb	r1, [r7, #12]
     f54:	4288      	cmp	r0, r1
     f56:	f67f af2e 	bls.w	db6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
     f5a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     f5e:	7845      	ldrb	r5, [r0, #1]
     f60:	2d20      	cmp	r5, #32
     f62:	d1ce      	bne.n	f02 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
     f64:	b009      	add	sp, #36	; 0x24
     f66:	2001      	movs	r0, #1
     f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f6c:	20000a24 	.word	0x20000a24
     f70:	200006a4 	.word	0x200006a4
     f74:	200009a4 	.word	0x200009a4
     f78:	1e847fff 	.word	0x1e847fff
     f7c:	07a12000 	.word	0x07a12000
     f80:	f85ee000 	.word	0xf85ee000
     f84:	1e848000 	.word	0x1e848000
     f88:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     f8c:	4604      	mov	r4, r0
     f8e:	483c      	ldr	r0, [pc, #240]	; (1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
     f90:	460e      	mov	r6, r1
     f92:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     f96:	4f3b      	ldr	r7, [pc, #236]	; (1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>)
     f98:	f890 5020 	ldrb.w	r5, [r0, #32]
     f9c:	2020      	movs	r0, #32
     f9e:	4698      	mov	r8, r3
     fa0:	4692      	mov	sl, r2
     fa2:	7010      	strb	r0, [r2, #0]
     fa4:	f507 7940 	add.w	r9, r7, #768	; 0x300
     fa8:	2d20      	cmp	r5, #32
     faa:	bf18      	it	ne
     fac:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     fb0:	d028      	beq.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     fb2:	bf00      	nop
     fb4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     fb8:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     fbc:	f100 0108 	add.w	r1, r0, #8
     fc0:	68c0      	ldr	r0, [r0, #12]
     fc2:	6822      	ldr	r2, [r4, #0]
     fc4:	1a10      	subs	r0, r2, r0
     fc6:	0200      	lsls	r0, r0, #8
     fc8:	17c2      	asrs	r2, r0, #31
     fca:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     fce:	1200      	asrs	r0, r0, #8
     fd0:	d418      	bmi.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     fd2:	8960      	ldrh	r0, [r4, #10]
     fd4:	b178      	cbz	r0, ff6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
     fd6:	8948      	ldrh	r0, [r1, #10]
     fd8:	b968      	cbnz	r0, ff6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
     fda:	4608      	mov	r0, r1
     fdc:	f000 fc4a 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
     fe0:	f001 ff72 	bl	2ec8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     fe4:	6821      	ldr	r1, [r4, #0]
     fe6:	1a08      	subs	r0, r1, r0
     fe8:	0200      	lsls	r0, r0, #8
     fea:	17c1      	asrs	r1, r0, #31
     fec:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     ff0:	1200      	asrs	r0, r0, #8
     ff2:	2833      	cmp	r0, #51	; 0x33
     ff4:	db06      	blt.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     ff6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     ffa:	f88a 5000 	strb.w	r5, [sl]
     ffe:	7845      	ldrb	r5, [r0, #1]
    1000:	2d20      	cmp	r5, #32
    1002:	d1d7      	bne.n	fb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    1004:	f89a 0000 	ldrb.w	r0, [sl]
    1008:	f888 0000 	strb.w	r0, [r8]
    100c:	2d20      	cmp	r5, #32
    100e:	bf18      	it	ne
    1010:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    1014:	d030      	beq.n	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
    1016:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    101a:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    101e:	6861      	ldr	r1, [r4, #4]
    1020:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1024:	4620      	mov	r0, r4
    1026:	1a51      	subs	r1, r2, r1
    1028:	0209      	lsls	r1, r1, #8
    102a:	17ca      	asrs	r2, r1, #31
    102c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1030:	f109 0608 	add.w	r6, r9, #8
    1034:	1209      	asrs	r1, r1, #8
    1036:	d410      	bmi.n	105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
    1038:	8971      	ldrh	r1, [r6, #10]
    103a:	b1e9      	cbz	r1, 1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
    103c:	8941      	ldrh	r1, [r0, #10]
    103e:	b9d9      	cbnz	r1, 1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
    1040:	f000 fc18 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    1044:	f001 ff40 	bl	2ec8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1048:	6831      	ldr	r1, [r6, #0]
    104a:	1a08      	subs	r0, r1, r0
    104c:	0200      	lsls	r0, r0, #8
    104e:	17c1      	asrs	r1, r0, #31
    1050:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1054:	1200      	asrs	r0, r0, #8
    1056:	2833      	cmp	r0, #51	; 0x33
    1058:	da0e      	bge.n	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
    105a:	f888 5000 	strb.w	r5, [r8]
    105e:	f899 0014 	ldrb.w	r0, [r9, #20]
    1062:	7b21      	ldrb	r1, [r4, #12]
    1064:	4288      	cmp	r0, r1
    1066:	d802      	bhi.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
    1068:	2000      	movs	r0, #0
    106a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    106e:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    1072:	7845      	ldrb	r5, [r0, #1]
    1074:	2d20      	cmp	r5, #32
    1076:	d1ce      	bne.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
    1078:	2001      	movs	r0, #1
    107a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    107e:	0000      	.short	0x0000
    1080:	20000a24 	.word	0x20000a24
    1084:	200006a4 	.word	0x200006a4
    1088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    108c:	b098      	sub	sp, #96	; 0x60
    108e:	4616      	mov	r6, r2
    1090:	460d      	mov	r5, r1
    1092:	f04f 0800 	mov.w	r8, #0
    1096:	f04f 0b01 	mov.w	fp, #1
    109a:	f002 f997 	bl	33cc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    109e:	4604      	mov	r4, r0
    10a0:	2d01      	cmp	r5, #1
    10a2:	bf18      	it	ne
    10a4:	2d02      	cmpne	r5, #2
    10a6:	d005      	beq.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
    10a8:	f640 1194 	movw	r1, #2452	; 0x994
    10ac:	f04f 0070 	mov.w	r0, #112	; 0x70
    10b0:	f002 ff6a 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10b4:	49f9      	ldr	r1, [pc, #996]	; (149c <CONFIG_FPROTECT_BLOCK_SIZE+0x49c>)
    10b6:	2001      	movs	r0, #1
    10b8:	6008      	str	r0, [r1, #0]
    10ba:	49f9      	ldr	r1, [pc, #996]	; (14a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a0>)
    10bc:	6889      	ldr	r1, [r1, #8]
    10be:	6008      	str	r0, [r1, #0]
    10c0:	2000      	movs	r0, #0
    10c2:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    10c6:	900c      	str	r0, [sp, #48]	; 0x30
    10c8:	1e40      	subs	r0, r0, #1
    10ca:	900e      	str	r0, [sp, #56]	; 0x38
    10cc:	49f5      	ldr	r1, [pc, #980]	; (14a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a4>)
    10ce:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    10d2:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    10d6:	3308      	adds	r3, #8
    10d8:	af0f      	add	r7, sp, #60	; 0x3c
    10da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    10dc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    10e0:	a80f      	add	r0, sp, #60	; 0x3c
    10e2:	f000 fbc7 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    10e6:	900d      	str	r0, [sp, #52]	; 0x34
    10e8:	48ee      	ldr	r0, [pc, #952]	; (14a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a4>)
    10ea:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    10ee:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    10f2:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    10f6:	f1b9 0f00 	cmp.w	r9, #0
    10fa:	bf14      	ite	ne
    10fc:	f04f 0a01 	movne.w	sl, #1
    1100:	f04f 0a00 	moveq.w	sl, #0
    1104:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1106:	9014      	str	r0, [sp, #80]	; 0x50
    1108:	f1ba 0f00 	cmp.w	sl, #0
    110c:	d009      	beq.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
    110e:	48e6      	ldr	r0, [pc, #920]	; (14a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a8>)
    1110:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1114:	b928      	cbnz	r0, 1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
    1116:	f002 febf 	bl	3e98 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    111a:	2800      	cmp	r0, #0
    111c:	bf08      	it	eq
    111e:	2701      	moveq	r7, #1
    1120:	d000      	beq.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    1122:	2700      	movs	r7, #0
    1124:	48e1      	ldr	r0, [pc, #900]	; (14ac <CONFIG_FPROTECT_BLOCK_SIZE+0x4ac>)
    1126:	2200      	movs	r2, #0
    1128:	9215      	str	r2, [sp, #84]	; 0x54
    112a:	7800      	ldrb	r0, [r0, #0]
    112c:	4616      	mov	r6, r2
    112e:	2801      	cmp	r0, #1
    1130:	bf18      	it	ne
    1132:	2803      	cmpne	r0, #3
    1134:	d140      	bne.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
    1136:	48dd      	ldr	r0, [pc, #884]	; (14ac <CONFIG_FPROTECT_BLOCK_SIZE+0x4ac>)
    1138:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    113c:	eba8 0009 	sub.w	r0, r8, r9
    1140:	9015      	str	r0, [sp, #84]	; 0x54
    1142:	45c8      	cmp	r8, r9
    1144:	d938      	bls.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
    1146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1148:	ea6f 0108 	mvn.w	r1, r8
    114c:	f8df e360 	ldr.w	lr, [pc, #864]	; 14b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b0>
    1150:	1858      	adds	r0, r3, r1
    1152:	f10d 0c0c 	add.w	ip, sp, #12
    1156:	aa17      	add	r2, sp, #92	; 0x5c
    1158:	4573      	cmp	r3, lr
    115a:	d904      	bls.n	1166 <CONFIG_FPROTECT_BLOCK_SIZE+0x166>
    115c:	f240 6109 	movw	r1, #1545	; 0x609
    1160:	2070      	movs	r0, #112	; 0x70
    1162:	f002 ff11 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1166:	4bd3      	ldr	r3, [pc, #844]	; (14b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b4>)
    1168:	4299      	cmp	r1, r3
    116a:	dd04      	ble.n	1176 <CONFIG_FPROTECT_BLOCK_SIZE+0x176>
    116c:	f240 610a 	movw	r1, #1546	; 0x60a
    1170:	2070      	movs	r0, #112	; 0x70
    1172:	f002 ff09 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1176:	4bd0      	ldr	r3, [pc, #832]	; (14b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b8>)
    1178:	4299      	cmp	r1, r3
    117a:	da04      	bge.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
    117c:	f240 610b 	movw	r1, #1547	; 0x60b
    1180:	2070      	movs	r0, #112	; 0x70
    1182:	f002 ff01 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1186:	49cd      	ldr	r1, [pc, #820]	; (14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>)
    1188:	4281      	cmp	r1, r0
    118a:	bfdc      	itt	le
    118c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1190:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1194:	dd05      	ble.n	11a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a2>
    1196:	2800      	cmp	r0, #0
    1198:	bfbc      	itt	lt
    119a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    119e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    11a2:	4661      	mov	r1, ip
    11a4:	f001 feac 	bl	2f00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    11a8:	9803      	ldr	r0, [sp, #12]
    11aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
    11ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    11b0:	9003      	str	r0, [sp, #12]
    11b2:	1a08      	subs	r0, r1, r0
    11b4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    11b8:	2f00      	cmp	r7, #0
    11ba:	bf18      	it	ne
    11bc:	2632      	movne	r6, #50	; 0x32
    11be:	d104      	bne.n	11ca <CONFIG_FPROTECT_BLOCK_SIZE+0x1ca>
    11c0:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    11c4:	2800      	cmp	r0, #0
    11c6:	bf18      	it	ne
    11c8:	2602      	movne	r6, #2
    11ca:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    11ce:	d008      	beq.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
    11d0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    11d2:	1b00      	subs	r0, r0, r4
    11d4:	0200      	lsls	r0, r0, #8
    11d6:	17c1      	asrs	r1, r0, #31
    11d8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    11dc:	1200      	asrs	r0, r0, #8
    11de:	2801      	cmp	r0, #1
    11e0:	da02      	bge.n	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
    11e2:	2004      	movs	r0, #4
    11e4:	9918      	ldr	r1, [sp, #96]	; 0x60
    11e6:	e00b      	b.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
    11e8:	b147      	cbz	r7, 11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
    11ea:	48af      	ldr	r0, [pc, #700]	; (14a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a8>)
    11ec:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    11f0:	b120      	cbz	r0, 11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
    11f2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    11f6:	1c06      	adds	r6, r0, #0
    11f8:	bf18      	it	ne
    11fa:	2602      	movne	r6, #2
    11fc:	4621      	mov	r1, r4
    11fe:	2001      	movs	r0, #1
    1200:	f1b9 0f00 	cmp.w	r9, #0
    1204:	d002      	beq.n	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
    1206:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1208:	2b1e      	cmp	r3, #30
    120a:	da02      	bge.n	1212 <CONFIG_FPROTECT_BLOCK_SIZE+0x212>
    120c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    1210:	b113      	cbz	r3, 1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
    1212:	f04f 0b00 	mov.w	fp, #0
    1216:	1e40      	subs	r0, r0, #1
    1218:	1983      	adds	r3, r0, r6
    121a:	48a4      	ldr	r0, [pc, #656]	; (14ac <CONFIG_FPROTECT_BLOCK_SIZE+0x4ac>)
    121c:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    1220:	7800      	ldrb	r0, [r0, #0]
    1222:	9015      	str	r0, [sp, #84]	; 0x54
    1224:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1226:	1a80      	subs	r0, r0, r2
    1228:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    122c:	ebac 0001 	sub.w	r0, ip, r1
    1230:	0200      	lsls	r0, r0, #8
    1232:	17c6      	asrs	r6, r0, #31
    1234:	eb00 6016 	add.w	r0, r0, r6, lsr #24
    1238:	1200      	asrs	r0, r0, #8
    123a:	4298      	cmp	r0, r3
    123c:	db18      	blt.n	1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>
    123e:	2a00      	cmp	r2, #0
    1240:	bf18      	it	ne
    1242:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    1246:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    1248:	9705      	str	r7, [sp, #20]
    124a:	2700      	movs	r7, #0
    124c:	f001 ffb6 	bl	31bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1250:	1a30      	subs	r0, r6, r0
    1252:	0200      	lsls	r0, r0, #8
    1254:	17c1      	asrs	r1, r0, #31
    1256:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    125a:	1200      	asrs	r0, r0, #8
    125c:	283e      	cmp	r0, #62	; 0x3e
    125e:	da3f      	bge.n	12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>
    1260:	2d01      	cmp	r5, #1
    1262:	d020      	beq.n	12a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a6>
    1264:	1e70      	subs	r0, r6, #1
    1266:	9905      	ldr	r1, [sp, #20]
    1268:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    126c:	b319      	cbz	r1, 12b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b6>
    126e:	e02d      	b.n	12cc <CONFIG_FPROTECT_BLOCK_SIZE+0x2cc>
    1270:	b182      	cbz	r2, 1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    1272:	f1be 0f00 	cmp.w	lr, #0
    1276:	bf04      	itt	eq
    1278:	9815      	ldreq	r0, [sp, #84]	; 0x54
    127a:	2803      	cmpeq	r0, #3
    127c:	d00a      	beq.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    127e:	b927      	cbnz	r7, 128a <CONFIG_FPROTECT_BLOCK_SIZE+0x28a>
    1280:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1284:	2800      	cmp	r0, #0
    1286:	bf18      	it	ne
    1288:	1e9b      	subne	r3, r3, #2
    128a:	2200      	movs	r2, #0
    128c:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    1290:	4690      	mov	r8, r2
    1292:	e7c7      	b.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    1294:	bb07      	cbnz	r7, 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
    1296:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    129a:	b1e8      	cbz	r0, 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
    129c:	2000      	movs	r0, #0
    129e:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    12a2:	1e9b      	subs	r3, r3, #2
    12a4:	e7be      	b.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    12a6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    12aa:	d120      	bne.n	12ee <CONFIG_FPROTECT_BLOCK_SIZE+0x2ee>
    12ac:	f640 110d 	movw	r1, #2317	; 0x90d
    12b0:	2070      	movs	r0, #112	; 0x70
    12b2:	f002 fe69 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12b6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    12ba:	d007      	beq.n	12cc <CONFIG_FPROTECT_BLOCK_SIZE+0x2cc>
    12bc:	1a21      	subs	r1, r4, r0
    12be:	0209      	lsls	r1, r1, #8
    12c0:	17ca      	asrs	r2, r1, #31
    12c2:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    12c6:	1209      	asrs	r1, r1, #8
    12c8:	2904      	cmp	r1, #4
    12ca:	dd03      	ble.n	12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>
    12cc:	4604      	mov	r4, r0
    12ce:	f001 ff7b 	bl	31c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    12d2:	e00c      	b.n	12ee <CONFIG_FPROTECT_BLOCK_SIZE+0x2ee>
    12d4:	2900      	cmp	r1, #0
    12d6:	dd0a      	ble.n	12ee <CONFIG_FPROTECT_BLOCK_SIZE+0x2ee>
    12d8:	b01b      	add	sp, #108	; 0x6c
    12da:	2000      	movs	r0, #0
    12dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12e0:	1e70      	subs	r0, r6, #1
    12e2:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    12e6:	4620      	mov	r0, r4
    12e8:	f001 ff6e 	bl	31c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    12ec:	4657      	mov	r7, sl
    12ee:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    12f2:	d024      	beq.n	133e <CONFIG_FPROTECT_BLOCK_SIZE+0x33e>
    12f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    12f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    12f8:	1b00      	subs	r0, r0, r4
    12fa:	1b1b      	subs	r3, r3, r4
    12fc:	4a70      	ldr	r2, [pc, #448]	; (14c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c0>)
    12fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1302:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1306:	4583      	cmp	fp, r0
    1308:	bf98      	it	ls
    130a:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    130e:	d2e3      	bcs.n	12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
    1310:	429a      	cmp	r2, r3
    1312:	d3e1      	bcc.n	12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
    1314:	4620      	mov	r0, r4
    1316:	f009 fe45 	bl	afa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    131a:	4965      	ldr	r1, [pc, #404]	; (14b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b0>)
    131c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    131e:	1c4b      	adds	r3, r1, #1
    1320:	1a16      	subs	r6, r2, r0
    1322:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    1326:	bf24      	itt	cs
    1328:	eba0 0c02 	subcs.w	ip, r0, r2
    132c:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    1330:	d310      	bcc.n	1354 <CONFIG_FPROTECT_BLOCK_SIZE+0x354>
    1332:	42b1      	cmp	r1, r6
    1334:	d208      	bcs.n	1348 <CONFIG_FPROTECT_BLOCK_SIZE+0x348>
    1336:	1a08      	subs	r0, r1, r0
    1338:	4410      	add	r0, r2
    133a:	1c46      	adds	r6, r0, #1
    133c:	e00a      	b.n	1354 <CONFIG_FPROTECT_BLOCK_SIZE+0x354>
    133e:	f640 212d 	movw	r1, #2605	; 0xa2d
    1342:	2070      	movs	r0, #112	; 0x70
    1344:	f002 fe20 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1348:	4561      	cmp	r1, ip
    134a:	d22c      	bcs.n	13a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a6>
    134c:	1a89      	subs	r1, r1, r2
    134e:	4408      	add	r0, r1
    1350:	1c40      	adds	r0, r0, #1
    1352:	4246      	negs	r6, r0
    1354:	4854      	ldr	r0, [pc, #336]	; (14a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a8>)
    1356:	7f80      	ldrb	r0, [r0, #30]
    1358:	b350      	cbz	r0, 13b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b0>
    135a:	4628      	mov	r0, r5
    135c:	4645      	mov	r5, r8
    135e:	f04f 0b00 	mov.w	fp, #0
    1362:	46d8      	mov	r8, fp
    1364:	2801      	cmp	r0, #1
    1366:	d005      	beq.n	1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
    1368:	2002      	movs	r0, #2
    136a:	f002 f985 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    136e:	2001      	movs	r0, #1
    1370:	f002 f982 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1374:	45a9      	cmp	r9, r5
    1376:	d227      	bcs.n	13c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c8>
    1378:	eba6 0105 	sub.w	r1, r6, r5
    137c:	f04f 0301 	mov.w	r3, #1
    1380:	f04f 0203 	mov.w	r2, #3
    1384:	f04f 0002 	mov.w	r0, #2
    1388:	f002 f8a2 	bl	34d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    138c:	2800      	cmp	r0, #0
    138e:	bf08      	it	eq
    1390:	f04f 0801 	moveq.w	r8, #1
    1394:	f1b9 0f00 	cmp.w	r9, #0
    1398:	d030      	beq.n	13fc <CONFIG_FPROTECT_BLOCK_SIZE+0x3fc>
    139a:	2301      	movs	r3, #1
    139c:	eba6 0109 	sub.w	r1, r6, r9
    13a0:	2203      	movs	r2, #3
    13a2:	4618      	mov	r0, r3
    13a4:	e01e      	b.n	13e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e4>
    13a6:	f640 310c 	movw	r1, #2828	; 0xb0c
    13aa:	2070      	movs	r0, #112	; 0x70
    13ac:	f002 fdec 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13b0:	45c1      	cmp	r9, r8
    13b2:	bf34      	ite	cc
    13b4:	4640      	movcc	r0, r8
    13b6:	4648      	movcs	r0, r9
    13b8:	4458      	add	r0, fp
    13ba:	42b0      	cmp	r0, r6
    13bc:	dbcd      	blt.n	135a <CONFIG_FPROTECT_BLOCK_SIZE+0x35a>
    13be:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    13c2:	2070      	movs	r0, #112	; 0x70
    13c4:	f002 fde0 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13c8:	d910      	bls.n	13ec <CONFIG_FPROTECT_BLOCK_SIZE+0x3ec>
    13ca:	2301      	movs	r3, #1
    13cc:	eba6 0109 	sub.w	r1, r6, r9
    13d0:	2203      	movs	r2, #3
    13d2:	4618      	mov	r0, r3
    13d4:	f002 f87c 	bl	34d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    13d8:	b328      	cbz	r0, 1426 <CONFIG_FPROTECT_BLOCK_SIZE+0x426>
    13da:	b17d      	cbz	r5, 13fc <CONFIG_FPROTECT_BLOCK_SIZE+0x3fc>
    13dc:	1b71      	subs	r1, r6, r5
    13de:	2301      	movs	r3, #1
    13e0:	2203      	movs	r2, #3
    13e2:	2002      	movs	r0, #2
    13e4:	f002 f874 	bl	34d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    13e8:	b1e8      	cbz	r0, 1426 <CONFIG_FPROTECT_BLOCK_SIZE+0x426>
    13ea:	e007      	b.n	13fc <CONFIG_FPROTECT_BLOCK_SIZE+0x3fc>
    13ec:	ea55 0009 	orrs.w	r0, r5, r9
    13f0:	d004      	beq.n	13fc <CONFIG_FPROTECT_BLOCK_SIZE+0x3fc>
    13f2:	f640 1177 	movw	r1, #2423	; 0x977
    13f6:	2070      	movs	r0, #112	; 0x70
    13f8:	f002 fdc6 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13fc:	2301      	movs	r3, #1
    13fe:	2203      	movs	r2, #3
    1400:	4631      	mov	r1, r6
    1402:	2000      	movs	r0, #0
    1404:	f002 f864 	bl	34d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1408:	b168      	cbz	r0, 1426 <CONFIG_FPROTECT_BLOCK_SIZE+0x426>
    140a:	2501      	movs	r5, #1
    140c:	f1b8 0f00 	cmp.w	r8, #0
    1410:	d003      	beq.n	141a <CONFIG_FPROTECT_BLOCK_SIZE+0x41a>
    1412:	9814      	ldr	r0, [sp, #80]	; 0x50
    1414:	900f      	str	r0, [sp, #60]	; 0x3c
    1416:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    141a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 14c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c4>
    141e:	f1ba 0f00 	cmp.w	sl, #0
    1422:	d10e      	bne.n	1442 <CONFIG_FPROTECT_BLOCK_SIZE+0x442>
    1424:	e009      	b.n	143a <CONFIG_FPROTECT_BLOCK_SIZE+0x43a>
    1426:	2002      	movs	r0, #2
    1428:	f002 f926 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    142c:	2001      	movs	r0, #1
    142e:	f002 f923 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1432:	b01b      	add	sp, #108	; 0x6c
    1434:	2000      	movs	r0, #0
    1436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    143a:	481b      	ldr	r0, [pc, #108]	; (14a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a8>)
    143c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1440:	b100      	cbz	r0, 1444 <CONFIG_FPROTECT_BLOCK_SIZE+0x444>
    1442:	b34f      	cbz	r7, 1498 <CONFIG_FPROTECT_BLOCK_SIZE+0x498>
    1444:	f8df a060 	ldr.w	sl, [pc, #96]	; 14a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a8>
    1448:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    144c:	b118      	cbz	r0, 1456 <CONFIG_FPROTECT_BLOCK_SIZE+0x456>
    144e:	f002 fbeb 	bl	3c28 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1452:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    1456:	b307      	cbz	r7, 149a <CONFIG_FPROTECT_BLOCK_SIZE+0x49a>
    1458:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    145c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1460:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1464:	f8c8 0000 	str.w	r0, [r8]
    1468:	2300      	movs	r3, #0
    146a:	2203      	movs	r2, #3
    146c:	2005      	movs	r0, #5
    146e:	f002 f82f 	bl	34d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1472:	b368      	cbz	r0, 14d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d0>
    1474:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1478:	2005      	movs	r0, #5
    147a:	f002 f9c9 	bl	3810 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    147e:	4912      	ldr	r1, [pc, #72]	; (14c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c8>)
    1480:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1484:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    1488:	4910      	ldr	r1, [pc, #64]	; (14cc <CONFIG_FPROTECT_BLOCK_SIZE+0x4cc>)
    148a:	12e0      	asrs	r0, r4, #11
    148c:	6008      	str	r0, [r1, #0]
    148e:	4c06      	ldr	r4, [pc, #24]	; (14a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a8>)
    1490:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1494:	b3e8      	cbz	r0, 1512 <CONFIG_FPROTECT_BLOCK_SIZE+0x512>
    1496:	e030      	b.n	14fa <CONFIG_FPROTECT_BLOCK_SIZE+0x4fa>
    1498:	e01b      	b.n	14d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d2>
    149a:	e01f      	b.n	14dc <CONFIG_FPROTECT_BLOCK_SIZE+0x4dc>
    149c:	40000508 	.word	0x40000508
    14a0:	20000010 	.word	0x20000010
    14a4:	200006a4 	.word	0x200006a4
    14a8:	20000a24 	.word	0x20000a24
    14ac:	20000012 	.word	0x20000012
    14b0:	1e847fff 	.word	0x1e847fff
    14b4:	07a12000 	.word	0x07a12000
    14b8:	f85ee000 	.word	0xf85ee000
    14bc:	1e848000 	.word	0x1e848000
    14c0:	003fffff 	.word	0x003fffff
    14c4:	4001f508 	.word	0x4001f508
    14c8:	4001f098 	.word	0x4001f098
    14cc:	4001f504 	.word	0x4001f504
    14d0:	e025      	b.n	151e <CONFIG_FPROTECT_BLOCK_SIZE+0x51e>
    14d2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 158c <CONFIG_FPROTECT_BLOCK_SIZE+0x58c>
    14d6:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    14da:	b1c8      	cbz	r0, 1510 <CONFIG_FPROTECT_BLOCK_SIZE+0x510>
    14dc:	4c2b      	ldr	r4, [pc, #172]	; (158c <CONFIG_FPROTECT_BLOCK_SIZE+0x58c>)
    14de:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    14e2:	b150      	cbz	r0, 14fa <CONFIG_FPROTECT_BLOCK_SIZE+0x4fa>
    14e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    14e8:	f8c8 0000 	str.w	r0, [r8]
    14ec:	2005      	movs	r0, #5
    14ee:	f002 f8c3 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    14f2:	f002 fc01 	bl	3cf8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    14f6:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    14fa:	eba6 0009 	sub.w	r0, r6, r9
    14fe:	f1a0 0119 	sub.w	r1, r0, #25
    1502:	2900      	cmp	r1, #0
    1504:	dc15      	bgt.n	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
    1506:	f640 2171 	movw	r1, #2673	; 0xa71
    150a:	2070      	movs	r0, #112	; 0x70
    150c:	f002 fd3c 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1510:	e000      	b.n	1514 <CONFIG_FPROTECT_BLOCK_SIZE+0x514>
    1512:	e009      	b.n	1528 <CONFIG_FPROTECT_BLOCK_SIZE+0x528>
    1514:	f002 fba4 	bl	3c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1518:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    151c:	e79b      	b.n	1456 <CONFIG_FPROTECT_BLOCK_SIZE+0x456>
    151e:	f240 313e 	movw	r1, #830	; 0x33e
    1522:	2070      	movs	r0, #112	; 0x70
    1524:	f002 fd30 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1528:	f002 fbd8 	bl	3cdc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    152c:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1530:	e7e3      	b.n	14fa <CONFIG_FPROTECT_BLOCK_SIZE+0x4fa>
    1532:	2203      	movs	r2, #3
    1534:	2301      	movs	r3, #1
    1536:	4610      	mov	r0, r2
    1538:	f001 ffca 	bl	34d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    153c:	b308      	cbz	r0, 1582 <CONFIG_FPROTECT_BLOCK_SIZE+0x582>
    153e:	4814      	ldr	r0, [pc, #80]	; (1590 <CONFIG_FPROTECT_BLOCK_SIZE+0x590>)
    1540:	6880      	ldr	r0, [r0, #8]
    1542:	f8c0 b000 	str.w	fp, [r0]
    1546:	4813      	ldr	r0, [pc, #76]	; (1594 <CONFIG_FPROTECT_BLOCK_SIZE+0x594>)
    1548:	f8c0 b000 	str.w	fp, [r0]
    154c:	ac0c      	add	r4, sp, #48	; 0x30
    154e:	4812      	ldr	r0, [pc, #72]	; (1598 <CONFIG_FPROTECT_BLOCK_SIZE+0x598>)
    1550:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1554:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    1558:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    155c:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1560:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1564:	ac10      	add	r4, sp, #64	; 0x40
    1566:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    156a:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    156e:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1572:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1576:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    157a:	b01b      	add	sp, #108	; 0x6c
    157c:	2001      	movs	r0, #1
    157e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1582:	f640 2179 	movw	r1, #2681	; 0xa79
    1586:	2070      	movs	r0, #112	; 0x70
    1588:	f002 fcfe 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    158c:	20000a24 	.word	0x20000a24
    1590:	20000010 	.word	0x20000010
    1594:	40000508 	.word	0x40000508
    1598:	200006a4 	.word	0x200006a4
    159c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    15a0:	4606      	mov	r6, r0
    15a2:	b083      	sub	sp, #12
    15a4:	7808      	ldrb	r0, [r1, #0]
    15a6:	7390      	strb	r0, [r2, #14]
    15a8:	7acf      	ldrb	r7, [r1, #11]
    15aa:	7357      	strb	r7, [r2, #13]
    15ac:	7a88      	ldrb	r0, [r1, #10]
    15ae:	7310      	strb	r0, [r2, #12]
    15b0:	8908      	ldrh	r0, [r1, #8]
    15b2:	4614      	mov	r4, r2
    15b4:	8150      	strh	r0, [r2, #10]
    15b6:	460d      	mov	r5, r1
    15b8:	780a      	ldrb	r2, [r1, #0]
    15ba:	495f      	ldr	r1, [pc, #380]	; (1738 <CONFIG_FPROTECT_BLOCK_SIZE+0x738>)
    15bc:	4699      	mov	r9, r3
    15be:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    15c2:	424b      	negs	r3, r1
    15c4:	f1ac 0801 	sub.w	r8, ip, #1
    15c8:	b15a      	cbz	r2, 15e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e2>
    15ca:	43c0      	mvns	r0, r0
    15cc:	f8d5 8004 	ldr.w	r8, [r5, #4]
    15d0:	f104 0208 	add.w	r2, r4, #8
    15d4:	4288      	cmp	r0, r1
    15d6:	dd3d      	ble.n	1654 <CONFIG_FPROTECT_BLOCK_SIZE+0x654>
    15d8:	f240 610a 	movw	r1, #1546	; 0x60a
    15dc:	2070      	movs	r0, #112	; 0x70
    15de:	f002 fcd3 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15e2:	68ee      	ldr	r6, [r5, #12]
    15e4:	686d      	ldr	r5, [r5, #4]
    15e6:	ea6f 0900 	mvn.w	r9, r0
    15ea:	f104 0208 	add.w	r2, r4, #8
    15ee:	eb06 0009 	add.w	r0, r6, r9
    15f2:	4546      	cmp	r6, r8
    15f4:	d904      	bls.n	1600 <CONFIG_FPROTECT_BLOCK_SIZE+0x600>
    15f6:	f240 6109 	movw	r1, #1545	; 0x609
    15fa:	2070      	movs	r0, #112	; 0x70
    15fc:	f002 fcc4 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1600:	4589      	cmp	r9, r1
    1602:	dce9      	bgt.n	15d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d8>
    1604:	4599      	cmp	r9, r3
    1606:	db28      	blt.n	165a <CONFIG_FPROTECT_BLOCK_SIZE+0x65a>
    1608:	4584      	cmp	ip, r0
    160a:	bfdc      	itt	le
    160c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1610:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1614:	dd05      	ble.n	1622 <CONFIG_FPROTECT_BLOCK_SIZE+0x622>
    1616:	2800      	cmp	r0, #0
    1618:	bfbc      	itt	lt
    161a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    161e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1622:	4621      	mov	r1, r4
    1624:	f001 fc6c 	bl	2f00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1628:	6820      	ldr	r0, [r4, #0]
    162a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    162e:	1970      	adds	r0, r6, r5
    1630:	1c40      	adds	r0, r0, #1
    1632:	6021      	str	r1, [r4, #0]
    1634:	2f00      	cmp	r7, #0
    1636:	bf08      	it	eq
    1638:	307a      	addeq	r0, #122	; 0x7a
    163a:	d003      	beq.n	1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>
    163c:	2f01      	cmp	r7, #1
    163e:	bf08      	it	eq
    1640:	3048      	addeq	r0, #72	; 0x48
    1642:	d12d      	bne.n	16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>
    1644:	f001 fc40 	bl	2ec8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1648:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    164c:	6060      	str	r0, [r4, #4]
    164e:	b003      	add	sp, #12
    1650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1654:	4601      	mov	r1, r0
    1656:	4298      	cmp	r0, r3
    1658:	da04      	bge.n	1664 <CONFIG_FPROTECT_BLOCK_SIZE+0x664>
    165a:	f240 610b 	movw	r1, #1547	; 0x60b
    165e:	2070      	movs	r0, #112	; 0x70
    1660:	f002 fc92 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1664:	4584      	cmp	ip, r0
    1666:	bfdc      	itt	le
    1668:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    166c:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1670:	dd05      	ble.n	167e <CONFIG_FPROTECT_BLOCK_SIZE+0x67e>
    1672:	2800      	cmp	r0, #0
    1674:	bfbc      	itt	lt
    1676:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    167a:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    167e:	4621      	mov	r1, r4
    1680:	f001 fc3e 	bl	2f00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1684:	6820      	ldr	r0, [r4, #0]
    1686:	2f00      	cmp	r7, #0
    1688:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    168c:	f108 0001 	add.w	r0, r8, #1
    1690:	6021      	str	r1, [r4, #0]
    1692:	bf08      	it	eq
    1694:	307a      	addeq	r0, #122	; 0x7a
    1696:	d008      	beq.n	16aa <CONFIG_FPROTECT_BLOCK_SIZE+0x6aa>
    1698:	2f01      	cmp	r7, #1
    169a:	bf08      	it	eq
    169c:	3048      	addeq	r0, #72	; 0x48
    169e:	d004      	beq.n	16aa <CONFIG_FPROTECT_BLOCK_SIZE+0x6aa>
    16a0:	f240 61b1 	movw	r1, #1713	; 0x6b1
    16a4:	2070      	movs	r0, #112	; 0x70
    16a6:	f002 fc6f 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16aa:	f001 fc0d 	bl	2ec8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    16ae:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    16b2:	6061      	str	r1, [r4, #4]
    16b4:	8960      	ldrh	r0, [r4, #10]
    16b6:	aa01      	add	r2, sp, #4
    16b8:	4669      	mov	r1, sp
    16ba:	f001 fc21 	bl	2f00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    16be:	481f      	ldr	r0, [pc, #124]	; (173c <CONFIG_FPROTECT_BLOCK_SIZE+0x73c>)
    16c0:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    16c4:	2920      	cmp	r1, #32
    16c6:	d023      	beq.n	1710 <CONFIG_FPROTECT_BLOCK_SIZE+0x710>
    16c8:	6900      	ldr	r0, [r0, #16]
    16ca:	1d40      	adds	r0, r0, #5
    16cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16d0:	e9d4 2100 	ldrd	r2, r1, [r4]
    16d4:	1a89      	subs	r1, r1, r2
    16d6:	6020      	str	r0, [r4, #0]
    16d8:	4408      	add	r0, r1
    16da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16de:	6060      	str	r0, [r4, #4]
    16e0:	464b      	mov	r3, r9
    16e2:	4632      	mov	r2, r6
    16e4:	4621      	mov	r1, r4
    16e6:	68e8      	ldr	r0, [r5, #12]
    16e8:	f7ff fad2 	bl	c90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    16ec:	2800      	cmp	r0, #0
    16ee:	bf1c      	itt	ne
    16f0:	b003      	addne	sp, #12
    16f2:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    16f6:	e9d4 1000 	ldrd	r1, r0, [r4]
    16fa:	1a40      	subs	r0, r0, r1
    16fc:	4430      	add	r0, r6
    16fe:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1702:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1706:	e9c4 1000 	strd	r1, r0, [r4]
    170a:	b003      	add	sp, #12
    170c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1710:	8960      	ldrh	r0, [r4, #10]
    1712:	f106 0709 	add.w	r7, r6, #9
    1716:	b120      	cbz	r0, 1722 <CONFIG_FPROTECT_BLOCK_SIZE+0x722>
    1718:	f002 fbbe 	bl	3e98 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    171c:	2800      	cmp	r0, #0
    171e:	bf08      	it	eq
    1720:	3732      	addeq	r7, #50	; 0x32
    1722:	4807      	ldr	r0, [pc, #28]	; (1740 <CONFIG_FPROTECT_BLOCK_SIZE+0x740>)
    1724:	7841      	ldrb	r1, [r0, #1]
    1726:	9800      	ldr	r0, [sp, #0]
    1728:	4281      	cmp	r1, r0
    172a:	bf84      	itt	hi
    172c:	1a08      	subhi	r0, r1, r0
    172e:	4407      	addhi	r7, r0
    1730:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1734:	e7cc      	b.n	16d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6d0>
    1736:	0000      	.short	0x0000
    1738:	07a12000 	.word	0x07a12000
    173c:	20000a24 	.word	0x20000a24
    1740:	20000012 	.word	0x20000012
    1744:	b510      	push	{r4, lr}
    1746:	4c15      	ldr	r4, [pc, #84]	; (179c <CONFIG_FPROTECT_BLOCK_SIZE+0x79c>)
    1748:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    174c:	2820      	cmp	r0, #32
    174e:	bf18      	it	ne
    1750:	bd10      	popne	{r4, pc}
    1752:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1756:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    175a:	f890 1020 	ldrb.w	r1, [r0, #32]
    175e:	2920      	cmp	r1, #32
    1760:	d017      	beq.n	1792 <CONFIG_FPROTECT_BLOCK_SIZE+0x792>
    1762:	f8df c03c 	ldr.w	ip, [pc, #60]	; 17a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x7a0>
    1766:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    176a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    176e:	785b      	ldrb	r3, [r3, #1]
    1770:	f880 3020 	strb.w	r3, [r0, #32]
    1774:	2301      	movs	r3, #1
    1776:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    177a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    177e:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1782:	2002      	movs	r0, #2
    1784:	f000 f8b0 	bl	18e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e8>
    1788:	2000      	movs	r0, #0
    178a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    178e:	77a0      	strb	r0, [r4, #30]
    1790:	bd10      	pop	{r4, pc}
    1792:	f240 318b 	movw	r1, #907	; 0x38b
    1796:	2070      	movs	r0, #112	; 0x70
    1798:	f002 fbf6 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    179c:	20000a24 	.word	0x20000a24
    17a0:	200009a4 	.word	0x200009a4
    17a4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    17a8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1864 <CONFIG_FPROTECT_BLOCK_SIZE+0x864>
    17ac:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    17b0:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    17b4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    17b8:	2c20      	cmp	r4, #32
    17ba:	bf08      	it	eq
    17bc:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    17c0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 1868 <CONFIG_FPROTECT_BLOCK_SIZE+0x868>
    17c4:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 186c <CONFIG_FPROTECT_BLOCK_SIZE+0x86c>
    17c8:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    17cc:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    17d0:	2607      	movs	r6, #7
    17d2:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    17d6:	2801      	cmp	r0, #1
    17d8:	d00e      	beq.n	17f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x7f8>
    17da:	2804      	cmp	r0, #4
    17dc:	bf08      	it	eq
    17de:	2602      	moveq	r6, #2
    17e0:	d00a      	beq.n	17f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x7f8>
    17e2:	2805      	cmp	r0, #5
    17e4:	bf0c      	ite	eq
    17e6:	2603      	moveq	r6, #3
    17e8:	2806      	cmpne	r0, #6
    17ea:	d005      	beq.n	17f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x7f8>
    17ec:	f640 01d9 	movw	r1, #2265	; 0x8d9
    17f0:	f04f 0070 	mov.w	r0, #112	; 0x70
    17f4:	f002 fbc8 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f8:	f1bb 0f00 	cmp.w	fp, #0
    17fc:	bf18      	it	ne
    17fe:	f3af 8000 	nopne.w
    1802:	f3ef 8010 	mrs	r0, PRIMASK
    1806:	b672      	cpsid	i
    1808:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    180c:	784a      	ldrb	r2, [r1, #1]
    180e:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1812:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1816:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    181a:	42a2      	cmp	r2, r4
    181c:	bf04      	itt	eq
    181e:	2220      	moveq	r2, #32
    1820:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1824:	b1b8      	cbz	r0, 1856 <CONFIG_FPROTECT_BLOCK_SIZE+0x856>
    1826:	462a      	mov	r2, r5
    1828:	4621      	mov	r1, r4
    182a:	2001      	movs	r0, #1
    182c:	f000 f85c 	bl	18e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e8>
    1830:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1834:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1838:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    183c:	6840      	ldr	r0, [r0, #4]
    183e:	4631      	mov	r1, r6
    1840:	4790      	blx	r2
    1842:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1846:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    184a:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    184e:	2c20      	cmp	r4, #32
    1850:	d1bc      	bne.n	17cc <CONFIG_FPROTECT_BLOCK_SIZE+0x7cc>
    1852:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1856:	4806      	ldr	r0, [pc, #24]	; (1870 <CONFIG_FPROTECT_BLOCK_SIZE+0x870>)
    1858:	2800      	cmp	r0, #0
    185a:	bf18      	it	ne
    185c:	f3af 8000 	nopne.w
    1860:	b662      	cpsie	i
    1862:	e7e0      	b.n	1826 <CONFIG_FPROTECT_BLOCK_SIZE+0x826>
    1864:	20000a24 	.word	0x20000a24
    1868:	00000000 	.word	0x00000000
    186c:	200009a4 	.word	0x200009a4
    1870:	00000000 	.word	0x00000000
    1874:	b510      	push	{r4, lr}
    1876:	4604      	mov	r4, r0
    1878:	6800      	ldr	r0, [r0, #0]
    187a:	f009 fb93 	bl	afa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    187e:	4602      	mov	r2, r0
    1880:	8960      	ldrh	r0, [r4, #10]
    1882:	7a21      	ldrb	r1, [r4, #8]
    1884:	4b14      	ldr	r3, [pc, #80]	; (18d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8d8>)
    1886:	4408      	add	r0, r1
    1888:	1c41      	adds	r1, r0, #1
    188a:	1850      	adds	r0, r2, r1
    188c:	429a      	cmp	r2, r3
    188e:	d904      	bls.n	189a <CONFIG_FPROTECT_BLOCK_SIZE+0x89a>
    1890:	f240 6109 	movw	r1, #1545	; 0x609
    1894:	2070      	movs	r0, #112	; 0x70
    1896:	f002 fb77 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    189a:	4a10      	ldr	r2, [pc, #64]	; (18dc <CONFIG_FPROTECT_BLOCK_SIZE+0x8dc>)
    189c:	4291      	cmp	r1, r2
    189e:	dd04      	ble.n	18aa <CONFIG_FPROTECT_BLOCK_SIZE+0x8aa>
    18a0:	f240 610a 	movw	r1, #1546	; 0x60a
    18a4:	2070      	movs	r0, #112	; 0x70
    18a6:	f002 fb6f 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18aa:	4a0d      	ldr	r2, [pc, #52]	; (18e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e0>)
    18ac:	4291      	cmp	r1, r2
    18ae:	da04      	bge.n	18ba <CONFIG_FPROTECT_BLOCK_SIZE+0x8ba>
    18b0:	f240 610b 	movw	r1, #1547	; 0x60b
    18b4:	2070      	movs	r0, #112	; 0x70
    18b6:	f002 fb67 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ba:	490a      	ldr	r1, [pc, #40]	; (18e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e4>)
    18bc:	4281      	cmp	r1, r0
    18be:	bfde      	ittt	le
    18c0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    18c4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    18c8:	bd10      	pople	{r4, pc}
    18ca:	2800      	cmp	r0, #0
    18cc:	bfbc      	itt	lt
    18ce:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    18d2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    18d6:	bd10      	pop	{r4, pc}
    18d8:	1e847fff 	.word	0x1e847fff
    18dc:	07a12000 	.word	0x07a12000
    18e0:	f85ee000 	.word	0xf85ee000
    18e4:	1e848000 	.word	0x1e848000
    18e8:	f8df c054 	ldr.w	ip, [pc, #84]	; 1940 <CONFIG_FPROTECT_BLOCK_SIZE+0x940>
    18ec:	b510      	push	{r4, lr}
    18ee:	2300      	movs	r3, #0
    18f0:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    18f4:	2807      	cmp	r0, #7
    18f6:	d21e      	bcs.n	1936 <CONFIG_FPROTECT_BLOCK_SIZE+0x936>
    18f8:	e8df f000 	tbb	[pc, r0]
    18fc:	05050505 	.word	0x05050505
    1900:	00040404 	.word	0x00040404
    1904:	2301      	movs	r3, #1
    1906:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    190a:	2b00      	cmp	r3, #0
    190c:	bf08      	it	eq
    190e:	bd10      	popeq	{r4, pc}
    1910:	480c      	ldr	r0, [pc, #48]	; (1944 <CONFIG_FPROTECT_BLOCK_SIZE+0x944>)
    1912:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1916:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    191a:	2820      	cmp	r0, #32
    191c:	bf0e      	itee	eq
    191e:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1922:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1926:	7041      	strbne	r1, [r0, #1]
    1928:	2020      	movs	r0, #32
    192a:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    192e:	7058      	strb	r0, [r3, #1]
    1930:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1934:	bd10      	pop	{r4, pc}
    1936:	f44f 7115 	mov.w	r1, #596	; 0x254
    193a:	2070      	movs	r0, #112	; 0x70
    193c:	f002 fb24 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1940:	200009a4 	.word	0x200009a4
    1944:	20000a24 	.word	0x20000a24
    1948:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    194c:	b083      	sub	sp, #12
    194e:	485c      	ldr	r0, [pc, #368]	; (1ac0 <CONFIG_FPROTECT_BLOCK_SIZE+0xac0>)
    1950:	9904      	ldr	r1, [sp, #16]
    1952:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1956:	9001      	str	r0, [sp, #4]
    1958:	f890 4020 	ldrb.w	r4, [r0, #32]
    195c:	9803      	ldr	r0, [sp, #12]
    195e:	4625      	mov	r5, r4
    1960:	2801      	cmp	r0, #1
    1962:	bf18      	it	ne
    1964:	2802      	cmpne	r0, #2
    1966:	d005      	beq.n	1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>
    1968:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    196c:	f04f 0070 	mov.w	r0, #112	; 0x70
    1970:	f002 fb0a 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1974:	2700      	movs	r7, #0
    1976:	2d20      	cmp	r5, #32
    1978:	d04a      	beq.n	1a10 <CONFIG_FPROTECT_BLOCK_SIZE+0xa10>
    197a:	4851      	ldr	r0, [pc, #324]	; (1ac0 <CONFIG_FPROTECT_BLOCK_SIZE+0xac0>)
    197c:	9100      	str	r1, [sp, #0]
    197e:	2600      	movs	r6, #0
    1980:	7f80      	ldrb	r0, [r0, #30]
    1982:	2800      	cmp	r0, #0
    1984:	bf08      	it	eq
    1986:	2602      	moveq	r6, #2
    1988:	f001 fc18 	bl	31bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    198c:	f8df a138 	ldr.w	sl, [pc, #312]	; 1ac8 <CONFIG_FPROTECT_BLOCK_SIZE+0xac8>
    1990:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1994:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    1998:	f8df 9128 	ldr.w	r9, [pc, #296]	; 1ac4 <CONFIG_FPROTECT_BLOCK_SIZE+0xac4>
    199c:	688a      	ldr	r2, [r1, #8]
    199e:	68c9      	ldr	r1, [r1, #12]
    19a0:	1a12      	subs	r2, r2, r0
    19a2:	1a09      	subs	r1, r1, r0
    19a4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    19a8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    19ac:	4296      	cmp	r6, r2
    19ae:	bf98      	it	ls
    19b0:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    19b4:	d201      	bcs.n	19ba <CONFIG_FPROTECT_BLOCK_SIZE+0x9ba>
    19b6:	4589      	cmp	r9, r1
    19b8:	d228      	bcs.n	1a0c <CONFIG_FPROTECT_BLOCK_SIZE+0xa0c>
    19ba:	4a44      	ldr	r2, [pc, #272]	; (1acc <CONFIG_FPROTECT_BLOCK_SIZE+0xacc>)
    19bc:	9900      	ldr	r1, [sp, #0]
    19be:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    19c2:	4622      	mov	r2, r4
    19c4:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    19c8:	784c      	ldrb	r4, [r1, #1]
    19ca:	2c20      	cmp	r4, #32
    19cc:	d016      	beq.n	19fc <CONFIG_FPROTECT_BLOCK_SIZE+0x9fc>
    19ce:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    19d2:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    19d6:	f8dc 8008 	ldr.w	r8, [ip, #8]
    19da:	f8dc c00c 	ldr.w	ip, [ip, #12]
    19de:	eba8 0800 	sub.w	r8, r8, r0
    19e2:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    19e6:	ebac 0100 	sub.w	r1, ip, r0
    19ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    19ee:	4546      	cmp	r6, r8
    19f0:	bf98      	it	ls
    19f2:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    19f6:	d2e4      	bcs.n	19c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x9c2>
    19f8:	4589      	cmp	r9, r1
    19fa:	d3e2      	bcc.n	19c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x9c2>
    19fc:	2a20      	cmp	r2, #32
    19fe:	d005      	beq.n	1a0c <CONFIG_FPROTECT_BLOCK_SIZE+0xa0c>
    1a00:	2120      	movs	r1, #32
    1a02:	2004      	movs	r0, #4
    1a04:	9b00      	ldr	r3, [sp, #0]
    1a06:	f7ff f907 	bl	c18 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1a0a:	4604      	mov	r4, r0
    1a0c:	42ac      	cmp	r4, r5
    1a0e:	d115      	bne.n	1a3c <CONFIG_FPROTECT_BLOCK_SIZE+0xa3c>
    1a10:	482f      	ldr	r0, [pc, #188]	; (1ad0 <CONFIG_FPROTECT_BLOCK_SIZE+0xad0>)
    1a12:	2800      	cmp	r0, #0
    1a14:	bf18      	it	ne
    1a16:	f3af 8000 	nopne.w
    1a1a:	f001 fbcf 	bl	31bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a1e:	4c28      	ldr	r4, [pc, #160]	; (1ac0 <CONFIG_FPROTECT_BLOCK_SIZE+0xac0>)
    1a20:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1a24:	2920      	cmp	r1, #32
    1a26:	d00d      	beq.n	1a44 <CONFIG_FPROTECT_BLOCK_SIZE+0xa44>
    1a28:	68e1      	ldr	r1, [r4, #12]
    1a2a:	1c82      	adds	r2, r0, #2
    1a2c:	1a51      	subs	r1, r2, r1
    1a2e:	0209      	lsls	r1, r1, #8
    1a30:	17ca      	asrs	r2, r1, #31
    1a32:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1a36:	1209      	asrs	r1, r1, #8
    1a38:	2900      	cmp	r1, #0
    1a3a:	dd03      	ble.n	1a44 <CONFIG_FPROTECT_BLOCK_SIZE+0xa44>
    1a3c:	b005      	add	sp, #20
    1a3e:	2000      	movs	r0, #0
    1a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a44:	2d20      	cmp	r5, #32
    1a46:	d00d      	beq.n	1a64 <CONFIG_FPROTECT_BLOCK_SIZE+0xa64>
    1a48:	462a      	mov	r2, r5
    1a4a:	9903      	ldr	r1, [sp, #12]
    1a4c:	f7ff fb1c 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
    1a50:	b358      	cbz	r0, 1aaa <CONFIG_FPROTECT_BLOCK_SIZE+0xaaa>
    1a52:	9801      	ldr	r0, [sp, #4]
    1a54:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1a58:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1a5c:	b005      	add	sp, #20
    1a5e:	2001      	movs	r0, #1
    1a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a64:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1a68:	b118      	cbz	r0, 1a72 <CONFIG_FPROTECT_BLOCK_SIZE+0xa72>
    1a6a:	f002 f8dd 	bl	3c28 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1a6e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1a72:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1a76:	b150      	cbz	r0, 1a8e <CONFIG_FPROTECT_BLOCK_SIZE+0xa8e>
    1a78:	4916      	ldr	r1, [pc, #88]	; (1ad4 <CONFIG_FPROTECT_BLOCK_SIZE+0xad4>)
    1a7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1a7e:	6008      	str	r0, [r1, #0]
    1a80:	2005      	movs	r0, #5
    1a82:	f001 fdf9 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a86:	f002 f937 	bl	3cf8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1a8a:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    1a8e:	2004      	movs	r0, #4
    1a90:	f001 fdf2 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a94:	f001 fe5e 	bl	3754 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1a98:	2020      	movs	r0, #32
    1a9a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    1a9e:	480e      	ldr	r0, [pc, #56]	; (1ad8 <CONFIG_FPROTECT_BLOCK_SIZE+0xad8>)
    1aa0:	6880      	ldr	r0, [r0, #8]
    1aa2:	6007      	str	r7, [r0, #0]
    1aa4:	480d      	ldr	r0, [pc, #52]	; (1adc <CONFIG_FPROTECT_BLOCK_SIZE+0xadc>)
    1aa6:	6007      	str	r7, [r0, #0]
    1aa8:	e7d8      	b.n	1a5c <CONFIG_FPROTECT_BLOCK_SIZE+0xa5c>
    1aaa:	462a      	mov	r2, r5
    1aac:	2120      	movs	r1, #32
    1aae:	2004      	movs	r0, #4
    1ab0:	9b04      	ldr	r3, [sp, #16]
    1ab2:	f7ff f8b1 	bl	c18 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1ab6:	b005      	add	sp, #20
    1ab8:	2000      	movs	r0, #0
    1aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1abe:	0000      	.short	0x0000
    1ac0:	20000a24 	.word	0x20000a24
    1ac4:	003fffff 	.word	0x003fffff
    1ac8:	200006a4 	.word	0x200006a4
    1acc:	200009a4 	.word	0x200009a4
    1ad0:	00000000 	.word	0x00000000
    1ad4:	4001f508 	.word	0x4001f508
    1ad8:	20000010 	.word	0x20000010
    1adc:	40000508 	.word	0x40000508

00001ae0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1ae0:	4906      	ldr	r1, [pc, #24]	; (1afc <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1ae2:	b510      	push	{r4, lr}
    1ae4:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1ae8:	2a20      	cmp	r2, #32
    1aea:	bf1c      	itt	ne
    1aec:	7788      	strbne	r0, [r1, #30]
    1aee:	bd10      	popne	{r4, pc}
    1af0:	f240 31ea 	movw	r1, #1002	; 0x3ea
    1af4:	2070      	movs	r0, #112	; 0x70
    1af6:	f002 fa47 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1afa:	0000      	.short	0x0000
    1afc:	20000a24 	.word	0x20000a24

00001b00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b04:	4e5b      	ldr	r6, [pc, #364]	; (1c74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1b06:	4681      	mov	r9, r0
    1b08:	b085      	sub	sp, #20
    1b0a:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1b0e:	468a      	mov	sl, r1
    1b10:	2820      	cmp	r0, #32
    1b12:	d04d      	beq.n	1bb0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    1b14:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1b18:	f106 040c 	add.w	r4, r6, #12
    1b1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1b20:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    1b24:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1b28:	2020      	movs	r0, #32
    1b2a:	f88d 0000 	strb.w	r0, [sp]
    1b2e:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1b32:	aa03      	add	r2, sp, #12
    1b34:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1b38:	a901      	add	r1, sp, #4
    1b3a:	f890 5020 	ldrb.w	r5, [r0, #32]
    1b3e:	6930      	ldr	r0, [r6, #16]
    1b40:	9002      	str	r0, [sp, #8]
    1b42:	6830      	ldr	r0, [r6, #0]
    1b44:	4448      	add	r0, r9
    1b46:	f001 f9db 	bl	2f00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1b4a:	68f8      	ldr	r0, [r7, #12]
    1b4c:	9901      	ldr	r1, [sp, #4]
    1b4e:	4a4a      	ldr	r2, [pc, #296]	; (1c78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    1b50:	4408      	add	r0, r1
    1b52:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    1b56:	4291      	cmp	r1, r2
    1b58:	d82f      	bhi.n	1bba <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1b5a:	68b9      	ldr	r1, [r7, #8]
    1b5c:	1a41      	subs	r1, r0, r1
    1b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1b62:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1b66:	d228      	bcs.n	1bba <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1b68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b6c:	6060      	str	r0, [r4, #4]
    1b6e:	4630      	mov	r0, r6
    1b70:	f884 a00c 	strb.w	sl, [r4, #12]
    1b74:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    1b78:	46ea      	mov	sl, sp
    1b7a:	2d20      	cmp	r5, #32
    1b7c:	bf1c      	itt	ne
    1b7e:	493f      	ldrne	r1, [pc, #252]	; (1c7c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1b80:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1b84:	d03c      	beq.n	1c00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1b86:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1b8a:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1b8e:	6860      	ldr	r0, [r4, #4]
    1b90:	68ba      	ldr	r2, [r7, #8]
    1b92:	4621      	mov	r1, r4
    1b94:	1a10      	subs	r0, r2, r0
    1b96:	0200      	lsls	r0, r0, #8
    1b98:	17c2      	asrs	r2, r0, #31
    1b9a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b9e:	f107 0608 	add.w	r6, r7, #8
    1ba2:	1200      	asrs	r0, r0, #8
    1ba4:	d41b      	bmi.n	1bde <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    1ba6:	8970      	ldrh	r0, [r6, #10]
    1ba8:	b350      	cbz	r0, 1c00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1baa:	8948      	ldrh	r0, [r1, #10]
    1bac:	b148      	cbz	r0, 1bc2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    1bae:	e027      	b.n	1c00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1bb0:	f640 317b 	movw	r1, #2939	; 0xb7b
    1bb4:	2070      	movs	r0, #112	; 0x70
    1bb6:	f002 f9e7 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bba:	b005      	add	sp, #20
    1bbc:	2001      	movs	r0, #1
    1bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bc2:	4620      	mov	r0, r4
    1bc4:	f7ff fe56 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    1bc8:	f001 f97e 	bl	2ec8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1bcc:	6831      	ldr	r1, [r6, #0]
    1bce:	1a08      	subs	r0, r1, r0
    1bd0:	0200      	lsls	r0, r0, #8
    1bd2:	17c1      	asrs	r1, r0, #31
    1bd4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1bd8:	1200      	asrs	r0, r0, #8
    1bda:	2833      	cmp	r0, #51	; 0x33
    1bdc:	da10      	bge.n	1c00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1bde:	f88a 5000 	strb.w	r5, [sl]
    1be2:	7d39      	ldrb	r1, [r7, #20]
    1be4:	7b20      	ldrb	r0, [r4, #12]
    1be6:	4281      	cmp	r1, r0
    1be8:	d805      	bhi.n	1bf6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    1bea:	9802      	ldr	r0, [sp, #8]
    1bec:	6060      	str	r0, [r4, #4]
    1bee:	b005      	add	sp, #20
    1bf0:	2002      	movs	r0, #2
    1bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bf6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1bfa:	7845      	ldrb	r5, [r0, #1]
    1bfc:	2d20      	cmp	r5, #32
    1bfe:	d1c2      	bne.n	1b86 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    1c00:	2005      	movs	r0, #5
    1c02:	f001 fd39 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c06:	4c1b      	ldr	r4, [pc, #108]	; (1c74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1c08:	f04f 30ff 	mov.w	r0, #4294967295
    1c0c:	60a0      	str	r0, [r4, #8]
    1c0e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1c12:	f89d 2000 	ldrb.w	r2, [sp]
    1c16:	2120      	movs	r1, #32
    1c18:	2a20      	cmp	r2, #32
    1c1a:	bf13      	iteet	ne
    1c1c:	2005      	movne	r0, #5
    1c1e:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1c22:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1c26:	f7fe fff7 	blne	c18 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1c2a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1c2e:	4913      	ldr	r1, [pc, #76]	; (1c7c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1c30:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1c34:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1c38:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1c3c:	7048      	strb	r0, [r1, #1]
    1c3e:	6820      	ldr	r0, [r4, #0]
    1c40:	4448      	add	r0, r9
    1c42:	6020      	str	r0, [r4, #0]
    1c44:	2001      	movs	r0, #1
    1c46:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1c4a:	7e60      	ldrb	r0, [r4, #25]
    1c4c:	2801      	cmp	r0, #1
    1c4e:	d105      	bne.n	1c5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    1c50:	6920      	ldr	r0, [r4, #16]
    1c52:	1e40      	subs	r0, r0, #1
    1c54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c58:	f001 fb54 	bl	3304 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1c5c:	f89d 0000 	ldrb.w	r0, [sp]
    1c60:	2820      	cmp	r0, #32
    1c62:	d003      	beq.n	1c6c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    1c64:	4806      	ldr	r0, [pc, #24]	; (1c80 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    1c66:	7840      	ldrb	r0, [r0, #1]
    1c68:	f002 fa5e 	bl	4128 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1c6c:	b005      	add	sp, #20
    1c6e:	2000      	movs	r0, #0
    1c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c74:	20000a24 	.word	0x20000a24
    1c78:	07a11f9b 	.word	0x07a11f9b
    1c7c:	200009a4 	.word	0x200009a4
    1c80:	20000010 	.word	0x20000010

00001c84 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    1c84:	b570      	push	{r4, r5, r6, lr}
    1c86:	4a23      	ldr	r2, [pc, #140]	; (1d14 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    1c88:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    1c8c:	2920      	cmp	r1, #32
    1c8e:	d039      	beq.n	1d04 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    1c90:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    1c94:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    1c98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1c9c:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    1ca0:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    1ca4:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    1ca8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    1cac:	f891 1020 	ldrb.w	r1, [r1, #32]
    1cb0:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    1cb4:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    1cb8:	2920      	cmp	r1, #32
    1cba:	d028      	beq.n	1d0e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    1cbc:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    1cc0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    1cc4:	7d2d      	ldrb	r5, [r5, #20]
    1cc6:	4285      	cmp	r5, r0
    1cc8:	bf84      	itt	hi
    1cca:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    1cce:	7849      	ldrbhi	r1, [r1, #1]
    1cd0:	d8f2      	bhi.n	1cb8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    1cd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1cd6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1cda:	f8dc 000c 	ldr.w	r0, [ip, #12]
    1cde:	6889      	ldr	r1, [r1, #8]
    1ce0:	6814      	ldr	r4, [r2, #0]
    1ce2:	1a08      	subs	r0, r1, r0
    1ce4:	0200      	lsls	r0, r0, #8
    1ce6:	17c1      	asrs	r1, r0, #31
    1ce8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1cec:	1200      	asrs	r0, r0, #8
    1cee:	d407      	bmi.n	1d00 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    1cf0:	f009 f958 	bl	afa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1cf4:	f104 0165 	add.w	r1, r4, #101	; 0x65
    1cf8:	4288      	cmp	r0, r1
    1cfa:	bf24      	itt	cs
    1cfc:	1b00      	subcs	r0, r0, r4
    1cfe:	bd70      	popcs	{r4, r5, r6, pc}
    1d00:	2000      	movs	r0, #0
    1d02:	bd70      	pop	{r4, r5, r6, pc}
    1d04:	f640 314d 	movw	r1, #2893	; 0xb4d
    1d08:	2070      	movs	r0, #112	; 0x70
    1d0a:	f002 f93d 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d0e:	f04f 30ff 	mov.w	r0, #4294967295
    1d12:	bd70      	pop	{r4, r5, r6, pc}
    1d14:	20000a24 	.word	0x20000a24

00001d18 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1d18:	4806      	ldr	r0, [pc, #24]	; (1d34 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    1d1a:	b510      	push	{r4, lr}
    1d1c:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1d20:	2920      	cmp	r1, #32
    1d22:	bf1c      	itt	ne
    1d24:	7e00      	ldrbne	r0, [r0, #24]
    1d26:	bd10      	popne	{r4, pc}
    1d28:	f640 3174 	movw	r1, #2932	; 0xb74
    1d2c:	2070      	movs	r0, #112	; 0x70
    1d2e:	f002 f92b 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d32:	0000      	.short	0x0000
    1d34:	20000a24 	.word	0x20000a24

00001d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1d38:	4602      	mov	r2, r0
    1d3a:	4b14      	ldr	r3, [pc, #80]	; (1d8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>)
    1d3c:	b510      	push	{r4, lr}
    1d3e:	4408      	add	r0, r1
    1d40:	429a      	cmp	r2, r3
    1d42:	d904      	bls.n	1d4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d44:	f240 6109 	movw	r1, #1545	; 0x609
    1d48:	2070      	movs	r0, #112	; 0x70
    1d4a:	f002 f91d 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d4e:	4a10      	ldr	r2, [pc, #64]	; (1d90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44>)
    1d50:	4291      	cmp	r1, r2
    1d52:	dd04      	ble.n	1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1d54:	f240 610a 	movw	r1, #1546	; 0x60a
    1d58:	2070      	movs	r0, #112	; 0x70
    1d5a:	f002 f915 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d5e:	4a0d      	ldr	r2, [pc, #52]	; (1d94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>)
    1d60:	4291      	cmp	r1, r2
    1d62:	da04      	bge.n	1d6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1d64:	f240 610b 	movw	r1, #1547	; 0x60b
    1d68:	2070      	movs	r0, #112	; 0x70
    1d6a:	f002 f90d 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d6e:	490a      	ldr	r1, [pc, #40]	; (1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>)
    1d70:	4281      	cmp	r1, r0
    1d72:	bfde      	ittt	le
    1d74:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1d78:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1d7c:	bd10      	pople	{r4, pc}
    1d7e:	2800      	cmp	r0, #0
    1d80:	bfbc      	itt	lt
    1d82:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1d86:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1d8a:	bd10      	pop	{r4, pc}
    1d8c:	1e847fff 	.word	0x1e847fff
    1d90:	07a12000 	.word	0x07a12000
    1d94:	f85ee000 	.word	0xf85ee000
    1d98:	1e848000 	.word	0x1e848000

00001d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1d9c:	4a10      	ldr	r2, [pc, #64]	; (1de0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1d9e:	1a0b      	subs	r3, r1, r0
    1da0:	f102 0c01 	add.w	ip, r2, #1
    1da4:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1da8:	bf3c      	itt	cc
    1daa:	4618      	movcc	r0, r3
    1dac:	4770      	bxcc	lr
    1dae:	b510      	push	{r4, lr}
    1db0:	1a44      	subs	r4, r0, r1
    1db2:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    1db6:	bf3c      	itt	cc
    1db8:	4618      	movcc	r0, r3
    1dba:	bd10      	popcc	{r4, pc}
    1dbc:	429a      	cmp	r2, r3
    1dbe:	d203      	bcs.n	1dc8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1dc0:	1a10      	subs	r0, r2, r0
    1dc2:	4408      	add	r0, r1
    1dc4:	1c40      	adds	r0, r0, #1
    1dc6:	bd10      	pop	{r4, pc}
    1dc8:	42a2      	cmp	r2, r4
    1dca:	d204      	bcs.n	1dd6 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1dcc:	1a51      	subs	r1, r2, r1
    1dce:	4408      	add	r0, r1
    1dd0:	1c40      	adds	r0, r0, #1
    1dd2:	4240      	negs	r0, r0
    1dd4:	bd10      	pop	{r4, pc}
    1dd6:	f640 310c 	movw	r1, #2828	; 0xb0c
    1dda:	2070      	movs	r0, #112	; 0x70
    1ddc:	f002 f8d4 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1de0:	1e847fff 	.word	0x1e847fff

00001de4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1de4:	4907      	ldr	r1, [pc, #28]	; (1e04 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    1de6:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    1dea:	4282      	cmp	r2, r0
    1dec:	bf04      	itt	eq
    1dee:	6848      	ldreq	r0, [r1, #4]
    1df0:	4770      	bxeq	lr
    1df2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1df6:	4904      	ldr	r1, [pc, #16]	; (1e08 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    1df8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1dfc:	3008      	adds	r0, #8
    1dfe:	f7ff bd39 	b.w	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    1e02:	0000      	.short	0x0000
    1e04:	20000a24 	.word	0x20000a24
    1e08:	200006a4 	.word	0x200006a4

00001e0c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1e0c:	490e      	ldr	r1, [pc, #56]	; (1e48 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1e0e:	b510      	push	{r4, lr}
    1e10:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1e14:	2820      	cmp	r0, #32
    1e16:	d012      	beq.n	1e3e <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1e18:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1e1c:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    1e20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1e24:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    1e28:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1e2c:	6840      	ldr	r0, [r0, #4]
    1e2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1e32:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    1e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e3a:	2104      	movs	r1, #4
    1e3c:	4710      	bx	r2
    1e3e:	f640 01bc 	movw	r1, #2236	; 0x8bc
    1e42:	2070      	movs	r0, #112	; 0x70
    1e44:	f002 f8a0 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e48:	20000a24 	.word	0x20000a24

00001e4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e4e:	4d6d      	ldr	r5, [pc, #436]	; (2004 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1e50:	496d      	ldr	r1, [pc, #436]	; (2008 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    1e52:	2601      	movs	r6, #1
    1e54:	f505 7460 	add.w	r4, r5, #896	; 0x380
    1e58:	2808      	cmp	r0, #8
    1e5a:	d273      	bcs.n	1f44 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    1e5c:	e8df f000 	tbb	[pc, r0]
    1e60:	af9d6704 	.word	0xaf9d6704
    1e64:	b9b444cd 	.word	0xb9b444cd
    1e68:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1e6c:	b918      	cbnz	r0, 1e76 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1e6e:	f001 fef7 	bl	3c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1e72:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1e76:	8ae0      	ldrh	r0, [r4, #22]
    1e78:	b110      	cbz	r0, 1e80 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1e7a:	f002 f80d 	bl	3e98 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e7e:	b188      	cbz	r0, 1ea4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1e80:	f7ff fc60 	bl	1744 <CONFIG_FPROTECT_BLOCK_SIZE+0x744>
    1e84:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    1e88:	68a1      	ldr	r1, [r4, #8]
    1e8a:	f1b1 3fff 	cmp.w	r1, #4294967295
    1e8e:	d005      	beq.n	1e9c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1e90:	2301      	movs	r3, #1
    1e92:	2203      	movs	r2, #3
    1e94:	2005      	movs	r0, #5
    1e96:	f001 fb1b 	bl	34d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1e9a:	b140      	cbz	r0, 1eae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1e9c:	7e60      	ldrb	r0, [r4, #25]
    1e9e:	2801      	cmp	r0, #1
    1ea0:	d110      	bne.n	1ec4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1ea2:	e009      	b.n	1eb8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1ea4:	f44f 6107 	mov.w	r1, #2160	; 0x870
    1ea8:	2070      	movs	r0, #112	; 0x70
    1eaa:	f002 f86d 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eae:	f640 0175 	movw	r1, #2165	; 0x875
    1eb2:	2070      	movs	r0, #112	; 0x70
    1eb4:	f002 f868 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eb8:	6920      	ldr	r0, [r4, #16]
    1eba:	1e40      	subs	r0, r0, #1
    1ebc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ec0:	f001 fa20 	bl	3304 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1ec4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1ec8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1ecc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1ed0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1ed4:	6840      	ldr	r0, [r0, #4]
    1ed6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1eda:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1ede:	b001      	add	sp, #4
    1ee0:	2101      	movs	r1, #1
    1ee2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1ee6:	4710      	bx	r2
    1ee8:	f7ff fc2c 	bl	1744 <CONFIG_FPROTECT_BLOCK_SIZE+0x744>
    1eec:	f04f 30ff 	mov.w	r0, #4294967295
    1ef0:	60a0      	str	r0, [r4, #8]
    1ef2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1ef6:	f88d 0000 	strb.w	r0, [sp]
    1efa:	f89d 0000 	ldrb.w	r0, [sp]
    1efe:	b188      	cbz	r0, 1f24 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1f00:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f04:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1f08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1f0c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1f10:	6840      	ldr	r0, [r0, #4]
    1f12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1f16:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1f1a:	b001      	add	sp, #4
    1f1c:	2106      	movs	r1, #6
    1f1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1f22:	4710      	bx	r2
    1f24:	f640 0186 	movw	r1, #2182	; 0x886
    1f28:	2070      	movs	r0, #112	; 0x70
    1f2a:	f002 f82d 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f2e:	f7ff fc09 	bl	1744 <CONFIG_FPROTECT_BLOCK_SIZE+0x744>
    1f32:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    1f36:	f001 ffaf 	bl	3e98 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f3a:	b120      	cbz	r0, 1f46 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    1f3c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1f40:	b130      	cbz	r0, 1f50 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    1f42:	e009      	b.n	1f58 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1f44:	e059      	b.n	1ffa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    1f46:	f640 0196 	movw	r1, #2198	; 0x896
    1f4a:	2070      	movs	r0, #112	; 0x70
    1f4c:	f002 f81c 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f50:	f001 fe86 	bl	3c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1f54:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1f58:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1f5c:	b158      	cbz	r0, 1f76 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    1f5e:	492b      	ldr	r1, [pc, #172]	; (200c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    1f60:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1f64:	6008      	str	r0, [r1, #0]
    1f66:	2005      	movs	r0, #5
    1f68:	f001 fb86 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1f6c:	f001 fec4 	bl	3cf8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1f70:	2000      	movs	r0, #0
    1f72:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    1f76:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f7a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1f7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1f82:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1f86:	6840      	ldr	r0, [r0, #4]
    1f88:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1f8c:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1f90:	b001      	add	sp, #4
    1f92:	2100      	movs	r1, #0
    1f94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1f98:	4710      	bx	r2
    1f9a:	f001 fc25 	bl	37e8 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1f9e:	8ae0      	ldrh	r0, [r4, #22]
    1fa0:	b110      	cbz	r0, 1fa8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    1fa2:	f001 ff79 	bl	3e98 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1fa6:	b128      	cbz	r0, 1fb4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    1fa8:	4819      	ldr	r0, [pc, #100]	; (2010 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    1faa:	7800      	ldrb	r0, [r0, #0]
    1fac:	2803      	cmp	r0, #3
    1fae:	bf08      	it	eq
    1fb0:	7766      	strbeq	r6, [r4, #29]
    1fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fb4:	f640 01a1 	movw	r1, #2209	; 0x8a1
    1fb8:	2070      	movs	r0, #112	; 0x70
    1fba:	f001 ffe5 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fbe:	4815      	ldr	r0, [pc, #84]	; (2014 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    1fc0:	6006      	str	r6, [r0, #0]
    1fc2:	6888      	ldr	r0, [r1, #8]
    1fc4:	6006      	str	r6, [r0, #0]
    1fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fc8:	7808      	ldrb	r0, [r1, #0]
    1fca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1fce:	f002 b8ab 	b.w	4128 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1fd2:	f7ff fbb7 	bl	1744 <CONFIG_FPROTECT_BLOCK_SIZE+0x744>
    1fd6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1fda:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1fde:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1fe2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1fe6:	6840      	ldr	r0, [r0, #4]
    1fe8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1fec:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1ff0:	b001      	add	sp, #4
    1ff2:	2105      	movs	r1, #5
    1ff4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1ff8:	4710      	bx	r2
    1ffa:	f640 01b4 	movw	r1, #2228	; 0x8b4
    1ffe:	2070      	movs	r0, #112	; 0x70
    2000:	f001 ffc2 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2004:	200006a4 	.word	0x200006a4
    2008:	20000010 	.word	0x20000010
    200c:	4001f508 	.word	0x4001f508
    2010:	20000012 	.word	0x20000012
    2014:	40000508 	.word	0x40000508

00002018 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2018:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    201c:	4682      	mov	sl, r0
    201e:	48dc      	ldr	r0, [pc, #880]	; (2390 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    2020:	b08b      	sub	sp, #44	; 0x2c
    2022:	6800      	ldr	r0, [r0, #0]
    2024:	4ddb      	ldr	r5, [pc, #876]	; (2394 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    2026:	05c0      	lsls	r0, r0, #23
    2028:	0dc0      	lsrs	r0, r0, #23
    202a:	d00e      	beq.n	204a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    202c:	3810      	subs	r0, #16
    202e:	b240      	sxtb	r0, r0
    2030:	2800      	cmp	r0, #0
    2032:	bfb8      	it	lt
    2034:	f000 000f 	andlt.w	r0, r0, #15
    2038:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    203c:	bfac      	ite	ge
    203e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2042:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2046:	0940      	lsrs	r0, r0, #5
    2048:	d00d      	beq.n	2066 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    204a:	980c      	ldr	r0, [sp, #48]	; 0x30
    204c:	f04f 0b00 	mov.w	fp, #0
    2050:	7800      	ldrb	r0, [r0, #0]
    2052:	2800      	cmp	r0, #0
    2054:	bf18      	it	ne
    2056:	2801      	cmpne	r0, #1
    2058:	d018      	beq.n	208c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    205a:	f240 714f 	movw	r1, #1871	; 0x74f
    205e:	f04f 0070 	mov.w	r0, #112	; 0x70
    2062:	f001 ff91 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2066:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    206a:	f04f 0b01 	mov.w	fp, #1
    206e:	2820      	cmp	r0, #32
    2070:	d007      	beq.n	2082 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    2072:	980c      	ldr	r0, [sp, #48]	; 0x30
    2074:	7800      	ldrb	r0, [r0, #0]
    2076:	b148      	cbz	r0, 208c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2078:	f240 714b 	movw	r1, #1867	; 0x74b
    207c:	2070      	movs	r0, #112	; 0x70
    207e:	f001 ff83 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2082:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    2086:	2070      	movs	r0, #112	; 0x70
    2088:	f001 ff7e 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    208c:	4cc2      	ldr	r4, [pc, #776]	; (2398 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    208e:	b124      	cbz	r4, 209a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2090:	2100      	movs	r1, #0
    2092:	f240 7052 	movw	r0, #1874	; 0x752
    2096:	f3af 8000 	nop.w
    209a:	49c0      	ldr	r1, [pc, #768]	; (239c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    209c:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    20a0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    20a4:	f04f 0801 	mov.w	r8, #1
    20a8:	9000      	str	r0, [sp, #0]
    20aa:	b124      	cbz	r4, 20b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    20ac:	2100      	movs	r1, #0
    20ae:	f240 705a 	movw	r0, #1882	; 0x75a
    20b2:	f3af 8000 	nop.w
    20b6:	f1b8 0f00 	cmp.w	r8, #0
    20ba:	d009      	beq.n	20d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    20bc:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    20c0:	f04f 0900 	mov.w	r9, #0
    20c4:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    20c8:	f1bb 0f00 	cmp.w	fp, #0
    20cc:	d007      	beq.n	20de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    20ce:	e032      	b.n	2136 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    20d0:	48b3      	ldr	r0, [pc, #716]	; (23a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    20d2:	2800      	cmp	r0, #0
    20d4:	bf18      	it	ne
    20d6:	f3af 8000 	nopne.w
    20da:	b662      	cpsie	i
    20dc:	e7ee      	b.n	20bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    20de:	4637      	mov	r7, r6
    20e0:	2001      	movs	r0, #1
    20e2:	ea20 0607 	bic.w	r6, r0, r7
    20e6:	48af      	ldr	r0, [pc, #700]	; (23a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    20e8:	2240      	movs	r2, #64	; 0x40
    20ea:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    20ee:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    20f2:	f009 f8c5 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    20f6:	b124      	cbz	r4, 2102 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    20f8:	2100      	movs	r1, #0
    20fa:	f240 50cd 	movw	r0, #1485	; 0x5cd
    20fe:	f3af 8000 	nop.w
    2102:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    2106:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    210a:	6a09      	ldr	r1, [r1, #32]
    210c:	6201      	str	r1, [r0, #32]
    210e:	b124      	cbz	r4, 211a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    2110:	2100      	movs	r1, #0
    2112:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2116:	f3af 8000 	nop.w
    211a:	b124      	cbz	r4, 2126 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    211c:	2100      	movs	r1, #0
    211e:	f240 7064 	movw	r0, #1892	; 0x764
    2122:	f3af 8000 	nop.w
    2126:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    212a:	f88d 0004 	strb.w	r0, [sp, #4]
    212e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2132:	2800      	cmp	r0, #0
    2134:	d1b9      	bne.n	20aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2136:	b124      	cbz	r4, 2142 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    2138:	2100      	movs	r1, #0
    213a:	f240 706e 	movw	r0, #1902	; 0x76e
    213e:	f3af 8000 	nop.w
    2142:	f001 f83b 	bl	31bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2146:	4680      	mov	r8, r0
    2148:	4633      	mov	r3, r6
    214a:	aa06      	add	r2, sp, #24
    214c:	990c      	ldr	r1, [sp, #48]	; 0x30
    214e:	f7ff fa25 	bl	159c <CONFIG_FPROTECT_BLOCK_SIZE+0x59c>
    2152:	b124      	cbz	r4, 215e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    2154:	2100      	movs	r1, #0
    2156:	f240 7075 	movw	r0, #1909	; 0x775
    215a:	f3af 8000 	nop.w
    215e:	4991      	ldr	r1, [pc, #580]	; (23a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    2160:	a806      	add	r0, sp, #24
    2162:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    2166:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    216a:	2901      	cmp	r1, #1
    216c:	bf18      	it	ne
    216e:	2902      	cmpne	r1, #2
    2170:	d13c      	bne.n	21ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    2172:	9906      	ldr	r1, [sp, #24]
    2174:	9b07      	ldr	r3, [sp, #28]
    2176:	eba1 0108 	sub.w	r1, r1, r8
    217a:	4a8b      	ldr	r2, [pc, #556]	; (23a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    217c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2180:	eba3 0308 	sub.w	r3, r3, r8
    2184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2188:	2902      	cmp	r1, #2
    218a:	d371      	bcc.n	2270 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    218c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    2190:	d26e      	bcs.n	2270 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2192:	429a      	cmp	r2, r3
    2194:	d36c      	bcc.n	2270 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2196:	f04f 0901 	mov.w	r9, #1
    219a:	ab01      	add	r3, sp, #4
    219c:	aa05      	add	r2, sp, #20
    219e:	4631      	mov	r1, r6
    21a0:	f7fe fef2 	bl	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    21a4:	2800      	cmp	r0, #0
    21a6:	d06b      	beq.n	2280 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    21a8:	f89d 1014 	ldrb.w	r1, [sp, #20]
    21ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
    21b0:	4633      	mov	r3, r6
    21b2:	428a      	cmp	r2, r1
    21b4:	d068      	beq.n	2288 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    21b6:	2005      	movs	r0, #5
    21b8:	f7fe fd2e 	bl	c18 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    21bc:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    21c0:	7048      	strb	r0, [r1, #1]
    21c2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    21c6:	2820      	cmp	r0, #32
    21c8:	bf03      	ittte	eq
    21ca:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    21ce:	f880 a020 	strbeq.w	sl, [r0, #32]
    21d2:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    21d6:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    21da:	bf18      	it	ne
    21dc:	f880 a001 	strbne.w	sl, [r0, #1]
    21e0:	4632      	mov	r2, r6
    21e2:	4651      	mov	r1, sl
    21e4:	f05f 0003 	movs.w	r0, #3
    21e8:	f7ff fb7e 	bl	18e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e8>
    21ec:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    21f0:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    21f4:	f88d 0004 	strb.w	r0, [sp, #4]
    21f8:	f89d 7004 	ldrb.w	r7, [sp, #4]
    21fc:	b124      	cbz	r4, 2208 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    21fe:	2100      	movs	r1, #0
    2200:	f240 707c 	movw	r0, #1916	; 0x77c
    2204:	f3af 8000 	nop.w
    2208:	4868      	ldr	r0, [pc, #416]	; (23ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    220a:	2800      	cmp	r0, #0
    220c:	bf18      	it	ne
    220e:	f3af 8000 	nopne.w
    2212:	f3ef 8810 	mrs	r8, PRIMASK
    2216:	b672      	cpsid	i
    2218:	b124      	cbz	r4, 2224 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    221a:	2100      	movs	r1, #0
    221c:	f240 7082 	movw	r0, #1922	; 0x782
    2220:	f3af 8000 	nop.w
    2224:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2228:	f88d 0004 	strb.w	r0, [sp, #4]
    222c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2230:	2800      	cmp	r0, #0
    2232:	f47f af3a 	bne.w	20aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2236:	b124      	cbz	r4, 2242 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    2238:	2100      	movs	r1, #0
    223a:	f240 708a 	movw	r0, #1930	; 0x78a
    223e:	f3af 8000 	nop.w
    2242:	f10d 0e18 	add.w	lr, sp, #24
    2246:	9800      	ldr	r0, [sp, #0]
    2248:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    224c:	f100 0008 	add.w	r0, r0, #8
    2250:	f1b9 0f00 	cmp.w	r9, #0
    2254:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    2258:	d044      	beq.n	22e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    225a:	b124      	cbz	r4, 2266 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    225c:	2100      	movs	r1, #0
    225e:	f240 7097 	movw	r0, #1943	; 0x797
    2262:	f3af 8000 	nop.w
    2266:	f1bb 0f00 	cmp.w	fp, #0
    226a:	d12c      	bne.n	22c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    226c:	e016      	b.n	229c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    226e:	e7ff      	b.n	2270 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2270:	4632      	mov	r2, r6
    2272:	4651      	mov	r1, sl
    2274:	2004      	movs	r0, #4
    2276:	f7ff fb37 	bl	18e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e8>
    227a:	f04f 0901 	mov.w	r9, #1
    227e:	e7b5      	b.n	21ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    2280:	4632      	mov	r2, r6
    2282:	4651      	mov	r1, sl
    2284:	2004      	movs	r0, #4
    2286:	e7af      	b.n	21e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    2288:	2920      	cmp	r1, #32
    228a:	bf19      	ittee	ne
    228c:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2290:	7840      	ldrbne	r0, [r0, #1]
    2292:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2296:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    229a:	e78f      	b.n	21bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    229c:	b19f      	cbz	r7, 22c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    229e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    22a2:	2820      	cmp	r0, #32
    22a4:	d10f      	bne.n	22c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    22a6:	b124      	cbz	r4, 22b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    22a8:	2100      	movs	r1, #0
    22aa:	f240 709c 	movw	r0, #1948	; 0x79c
    22ae:	f3af 8000 	nop.w
    22b2:	4631      	mov	r1, r6
    22b4:	2002      	movs	r0, #2
    22b6:	f7ff fb47 	bl	1948 <CONFIG_FPROTECT_BLOCK_SIZE+0x948>
    22ba:	b920      	cbnz	r0, 22c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    22bc:	980c      	ldr	r0, [sp, #48]	; 0x30
    22be:	7800      	ldrb	r0, [r0, #0]
    22c0:	b3f0      	cbz	r0, 2340 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    22c2:	2801      	cmp	r0, #1
    22c4:	d04c      	beq.n	2360 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    22c6:	b124      	cbz	r4, 22d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    22c8:	2100      	movs	r1, #0
    22ca:	f240 70b9 	movw	r0, #1977	; 0x7b9
    22ce:	f3af 8000 	nop.w
    22d2:	f1bb 0f00 	cmp.w	fp, #0
    22d6:	bf18      	it	ne
    22d8:	2001      	movne	r0, #1
    22da:	d04a      	beq.n	2372 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    22dc:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    22e0:	f04f 0901 	mov.w	r9, #1
    22e4:	b124      	cbz	r4, 22f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    22e6:	2100      	movs	r1, #0
    22e8:	f240 70ca 	movw	r0, #1994	; 0x7ca
    22ec:	f3af 8000 	nop.w
    22f0:	f1b8 0f00 	cmp.w	r8, #0
    22f4:	d045      	beq.n	2382 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    22f6:	b124      	cbz	r4, 2302 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    22f8:	2100      	movs	r1, #0
    22fa:	f240 70ce 	movw	r0, #1998	; 0x7ce
    22fe:	f3af 8000 	nop.w
    2302:	f1b9 0f00 	cmp.w	r9, #0
    2306:	d011      	beq.n	232c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2308:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    230c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2310:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2314:	2820      	cmp	r0, #32
    2316:	d009      	beq.n	232c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2318:	b124      	cbz	r4, 2324 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    231a:	2100      	movs	r1, #0
    231c:	f240 70d5 	movw	r0, #2005	; 0x7d5
    2320:	f3af 8000 	nop.w
    2324:	4822      	ldr	r0, [pc, #136]	; (23b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2326:	7840      	ldrb	r0, [r0, #1]
    2328:	f001 fefe 	bl	4128 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    232c:	b124      	cbz	r4, 2338 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    232e:	2100      	movs	r1, #0
    2330:	f240 70da 	movw	r0, #2010	; 0x7da
    2334:	f3af 8000 	nop.w
    2338:	b00d      	add	sp, #52	; 0x34
    233a:	4648      	mov	r0, r9
    233c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2340:	e7ff      	b.n	2342 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    2342:	b124      	cbz	r4, 234e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2344:	2100      	movs	r1, #0
    2346:	f240 70a4 	movw	r0, #1956	; 0x7a4
    234a:	f3af 8000 	nop.w
    234e:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2352:	4651      	mov	r1, sl
    2354:	2004      	movs	r0, #4
    2356:	f7ff fac7 	bl	18e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e8>
    235a:	f04f 0901 	mov.w	r9, #1
    235e:	e7c1      	b.n	22e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2360:	2c00      	cmp	r4, #0
    2362:	f43f aea2 	beq.w	20aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2366:	2100      	movs	r1, #0
    2368:	f240 70af 	movw	r0, #1967	; 0x7af
    236c:	f3af 8000 	nop.w
    2370:	e69b      	b.n	20aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2372:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    2376:	2001      	movs	r0, #1
    2378:	ea20 0101 	bic.w	r1, r0, r1
    237c:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    2380:	e7ac      	b.n	22dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    2382:	4807      	ldr	r0, [pc, #28]	; (23a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2384:	2800      	cmp	r0, #0
    2386:	bf18      	it	ne
    2388:	f3af 8000 	nopne.w
    238c:	b662      	cpsie	i
    238e:	e7b2      	b.n	22f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    2390:	e000ed04 	.word	0xe000ed04
    2394:	20000a24 	.word	0x20000a24
    2398:	00000000 	.word	0x00000000
    239c:	200006a4 	.word	0x200006a4
    23a0:	00000000 	.word	0x00000000
    23a4:	200009a4 	.word	0x200009a4
    23a8:	003fffff 	.word	0x003fffff
    23ac:	00000000 	.word	0x00000000
    23b0:	20000010 	.word	0x20000010

000023b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    23b4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23b8:	48a5      	ldr	r0, [pc, #660]	; (2650 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    23ba:	b08c      	sub	sp, #48	; 0x30
    23bc:	6800      	ldr	r0, [r0, #0]
    23be:	05c0      	lsls	r0, r0, #23
    23c0:	0dc0      	lsrs	r0, r0, #23
    23c2:	d011      	beq.n	23e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    23c4:	3810      	subs	r0, #16
    23c6:	b240      	sxtb	r0, r0
    23c8:	2800      	cmp	r0, #0
    23ca:	bfb8      	it	lt
    23cc:	f000 000f 	andlt.w	r0, r0, #15
    23d0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    23d4:	bfac      	ite	ge
    23d6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    23da:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    23de:	0940      	lsrs	r0, r0, #5
    23e0:	bf08      	it	eq
    23e2:	f04f 0901 	moveq.w	r9, #1
    23e6:	d001      	beq.n	23ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    23e8:	f04f 0900 	mov.w	r9, #0
    23ec:	980c      	ldr	r0, [sp, #48]	; 0x30
    23ee:	7800      	ldrb	r0, [r0, #0]
    23f0:	2800      	cmp	r0, #0
    23f2:	f04f 0000 	mov.w	r0, #0
    23f6:	bf1c      	itt	ne
    23f8:	b00d      	addne	sp, #52	; 0x34
    23fa:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23fe:	f8df a254 	ldr.w	sl, [pc, #596]	; 2654 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    2402:	4d95      	ldr	r5, [pc, #596]	; (2658 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2404:	4c95      	ldr	r4, [pc, #596]	; (265c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2406:	f04f 0b00 	mov.w	fp, #0
    240a:	900b      	str	r0, [sp, #44]	; 0x2c
    240c:	b125      	cbz	r5, 2418 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    240e:	2100      	movs	r1, #0
    2410:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    2414:	f3af 8000 	nop.w
    2418:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    241c:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    2420:	f04f 0800 	mov.w	r8, #0
    2424:	b125      	cbz	r5, 2430 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    2426:	2100      	movs	r1, #0
    2428:	f240 605d 	movw	r0, #1629	; 0x65d
    242c:	f3af 8000 	nop.w
    2430:	f1b9 0f00 	cmp.w	r9, #0
    2434:	d11d      	bne.n	2472 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2436:	4637      	mov	r7, r6
    2438:	2001      	movs	r0, #1
    243a:	ea20 0607 	bic.w	r6, r0, r7
    243e:	4888      	ldr	r0, [pc, #544]	; (2660 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2440:	2240      	movs	r2, #64	; 0x40
    2442:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2446:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    244a:	f008 ff19 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    244e:	b125      	cbz	r5, 245a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    2450:	2100      	movs	r1, #0
    2452:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2456:	f3af 8000 	nop.w
    245a:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    245e:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    2462:	6a09      	ldr	r1, [r1, #32]
    2464:	6201      	str	r1, [r0, #32]
    2466:	b125      	cbz	r5, 2472 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2468:	2100      	movs	r1, #0
    246a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    246e:	f3af 8000 	nop.w
    2472:	b125      	cbz	r5, 247e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    2474:	2100      	movs	r1, #0
    2476:	f240 6065 	movw	r0, #1637	; 0x665
    247a:	f3af 8000 	nop.w
    247e:	f000 fe9d 	bl	31bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2482:	4607      	mov	r7, r0
    2484:	4633      	mov	r3, r6
    2486:	466a      	mov	r2, sp
    2488:	990c      	ldr	r1, [sp, #48]	; 0x30
    248a:	f7ff f887 	bl	159c <CONFIG_FPROTECT_BLOCK_SIZE+0x59c>
    248e:	b125      	cbz	r5, 249a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    2490:	2100      	movs	r1, #0
    2492:	f240 606b 	movw	r0, #1643	; 0x66b
    2496:	f3af 8000 	nop.w
    249a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    249e:	2820      	cmp	r0, #32
    24a0:	d014      	beq.n	24cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    24a2:	6920      	ldr	r0, [r4, #16]
    24a4:	9900      	ldr	r1, [sp, #0]
    24a6:	1a09      	subs	r1, r1, r0
    24a8:	0209      	lsls	r1, r1, #8
    24aa:	17ca      	asrs	r2, r1, #31
    24ac:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    24b0:	1209      	asrs	r1, r1, #8
    24b2:	d50b      	bpl.n	24cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    24b4:	e9dd 2100 	ldrd	r2, r1, [sp]
    24b8:	1a89      	subs	r1, r1, r2
    24ba:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    24be:	4408      	add	r0, r1
    24c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24c4:	e9cd 2000 	strd	r2, r0, [sp]
    24c8:	f04f 0801 	mov.w	r8, #1
    24cc:	b14d      	cbz	r5, 24e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    24ce:	2100      	movs	r1, #0
    24d0:	f240 6075 	movw	r0, #1653	; 0x675
    24d4:	f3af 8000 	nop.w
    24d8:	2100      	movs	r1, #0
    24da:	f240 607b 	movw	r0, #1659	; 0x67b
    24de:	f3af 8000 	nop.w
    24e2:	9800      	ldr	r0, [sp, #0]
    24e4:	9901      	ldr	r1, [sp, #4]
    24e6:	1bc0      	subs	r0, r0, r7
    24e8:	1bc9      	subs	r1, r1, r7
    24ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    24f2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    24f6:	d205      	bcs.n	2504 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    24f8:	458a      	cmp	sl, r1
    24fa:	d303      	bcc.n	2504 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    24fc:	f1b9 0f00 	cmp.w	r9, #0
    2500:	d10c      	bne.n	251c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2502:	e003      	b.n	250c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    2504:	f1b9 0f00 	cmp.w	r9, #0
    2508:	d038      	beq.n	257c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    250a:	e094      	b.n	2636 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    250c:	4633      	mov	r3, r6
    250e:	463a      	mov	r2, r7
    2510:	4669      	mov	r1, sp
    2512:	4854      	ldr	r0, [pc, #336]	; (2664 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2514:	f7fe fbbc 	bl	c90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2518:	ea48 0800 	orr.w	r8, r8, r0
    251c:	f1b8 0f00 	cmp.w	r8, #0
    2520:	d022      	beq.n	2568 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    2522:	9800      	ldr	r0, [sp, #0]
    2524:	f008 fd3e 	bl	afa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2528:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    252c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2530:	4b4d      	ldr	r3, [pc, #308]	; (2668 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2532:	4411      	add	r1, r2
    2534:	1c49      	adds	r1, r1, #1
    2536:	1842      	adds	r2, r0, r1
    2538:	4298      	cmp	r0, r3
    253a:	d841      	bhi.n	25c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    253c:	4849      	ldr	r0, [pc, #292]	; (2664 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    253e:	4281      	cmp	r1, r0
    2540:	dc5a      	bgt.n	25f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2542:	4240      	negs	r0, r0
    2544:	4281      	cmp	r1, r0
    2546:	db5f      	blt.n	2608 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    2548:	1c58      	adds	r0, r3, #1
    254a:	4290      	cmp	r0, r2
    254c:	bfdc      	itt	le
    254e:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2552:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2556:	dd05      	ble.n	2564 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2558:	2a00      	cmp	r2, #0
    255a:	bfbc      	itt	lt
    255c:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2560:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2564:	980c      	ldr	r0, [sp, #48]	; 0x30
    2566:	60c2      	str	r2, [r0, #12]
    2568:	2001      	movs	r0, #1
    256a:	900b      	str	r0, [sp, #44]	; 0x2c
    256c:	2d00      	cmp	r5, #0
    256e:	d062      	beq.n	2636 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2570:	2100      	movs	r1, #0
    2572:	f240 608e 	movw	r0, #1678	; 0x68e
    2576:	f3af 8000 	nop.w
    257a:	e05c      	b.n	2636 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    257c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2580:	aa08      	add	r2, sp, #32
    2582:	a907      	add	r1, sp, #28
    2584:	f000 fcbc 	bl	2f00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2588:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    258c:	2820      	cmp	r0, #32
    258e:	d01c      	beq.n	25ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    2590:	6920      	ldr	r0, [r4, #16]
    2592:	1d40      	adds	r0, r0, #5
    2594:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2598:	e9dd 2100 	ldrd	r2, r1, [sp]
    259c:	1a89      	subs	r1, r1, r2
    259e:	4401      	add	r1, r0
    25a0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    25a4:	e9cd 0100 	strd	r0, r1, [sp]
    25a8:	f008 fcfc 	bl	afa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    25ac:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    25b0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    25b4:	4b2c      	ldr	r3, [pc, #176]	; (2668 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    25b6:	4411      	add	r1, r2
    25b8:	1c4a      	adds	r2, r1, #1
    25ba:	1881      	adds	r1, r0, r2
    25bc:	4298      	cmp	r0, r3
    25be:	d918      	bls.n	25f2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    25c0:	f240 6109 	movw	r1, #1545	; 0x609
    25c4:	2070      	movs	r0, #112	; 0x70
    25c6:	f001 fcdf 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25ca:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    25ce:	f107 0609 	add.w	r6, r7, #9
    25d2:	b120      	cbz	r0, 25de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    25d4:	f001 fc60 	bl	3e98 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    25d8:	2800      	cmp	r0, #0
    25da:	bf08      	it	eq
    25dc:	3632      	addeq	r6, #50	; 0x32
    25de:	4823      	ldr	r0, [pc, #140]	; (266c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    25e0:	7841      	ldrb	r1, [r0, #1]
    25e2:	9807      	ldr	r0, [sp, #28]
    25e4:	4281      	cmp	r1, r0
    25e6:	bf84      	itt	hi
    25e8:	1a08      	subhi	r0, r1, r0
    25ea:	4406      	addhi	r6, r0
    25ec:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    25f0:	e7d2      	b.n	2598 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    25f2:	481c      	ldr	r0, [pc, #112]	; (2664 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    25f4:	4282      	cmp	r2, r0
    25f6:	dd04      	ble.n	2602 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    25f8:	f240 610a 	movw	r1, #1546	; 0x60a
    25fc:	2070      	movs	r0, #112	; 0x70
    25fe:	f001 fcc3 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2602:	481b      	ldr	r0, [pc, #108]	; (2670 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    2604:	4282      	cmp	r2, r0
    2606:	da04      	bge.n	2612 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2608:	f240 610b 	movw	r1, #1547	; 0x60b
    260c:	2070      	movs	r0, #112	; 0x70
    260e:	f001 fcbb 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2612:	4818      	ldr	r0, [pc, #96]	; (2674 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    2614:	4288      	cmp	r0, r1
    2616:	bfdc      	itt	le
    2618:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    261c:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2620:	dd05      	ble.n	262e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    2622:	2900      	cmp	r1, #0
    2624:	bfbc      	itt	lt
    2626:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    262a:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    262e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2630:	60c1      	str	r1, [r0, #12]
    2632:	2001      	movs	r0, #1
    2634:	900b      	str	r0, [sp, #44]	; 0x2c
    2636:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    263a:	f88d 0010 	strb.w	r0, [sp, #16]
    263e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2642:	2800      	cmp	r0, #0
    2644:	f47f aee2 	bne.w	240c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2648:	980b      	ldr	r0, [sp, #44]	; 0x2c
    264a:	b00d      	add	sp, #52	; 0x34
    264c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2650:	e000ed04 	.word	0xe000ed04
    2654:	003fffff 	.word	0x003fffff
    2658:	00000000 	.word	0x00000000
    265c:	20000a24 	.word	0x20000a24
    2660:	200009a4 	.word	0x200009a4
    2664:	07a12000 	.word	0x07a12000
    2668:	1e847fff 	.word	0x1e847fff
    266c:	20000012 	.word	0x20000012
    2670:	f85ee000 	.word	0xf85ee000
    2674:	1e848000 	.word	0x1e848000

00002678 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2678:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    267c:	4d88      	ldr	r5, [pc, #544]	; (28a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    267e:	b08c      	sub	sp, #48	; 0x30
    2680:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2684:	2000      	movs	r0, #0
    2686:	9009      	str	r0, [sp, #36]	; 0x24
    2688:	2001      	movs	r0, #1
    268a:	4c86      	ldr	r4, [pc, #536]	; (28a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    268c:	f04f 0900 	mov.w	r9, #0
    2690:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    2694:	4680      	mov	r8, r0
    2696:	9008      	str	r0, [sp, #32]
    2698:	b124      	cbz	r4, 26a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    269a:	2100      	movs	r1, #0
    269c:	f240 70e9 	movw	r0, #2025	; 0x7e9
    26a0:	f3af 8000 	nop.w
    26a4:	9808      	ldr	r0, [sp, #32]
    26a6:	2800      	cmp	r0, #0
    26a8:	d037      	beq.n	271a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    26aa:	bf00      	nop
    26ac:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    26b0:	b124      	cbz	r4, 26bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    26b2:	2100      	movs	r1, #0
    26b4:	f240 70ee 	movw	r0, #2030	; 0x7ee
    26b8:	f3af 8000 	nop.w
    26bc:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    26c0:	2240      	movs	r2, #64	; 0x40
    26c2:	ea28 060a 	bic.w	r6, r8, sl
    26c6:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    26ca:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    26ce:	4683      	mov	fp, r0
    26d0:	f008 fdd6 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26d4:	b124      	cbz	r4, 26e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    26d6:	2100      	movs	r1, #0
    26d8:	f240 50cd 	movw	r0, #1485	; 0x5cd
    26dc:	f3af 8000 	nop.w
    26e0:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    26e4:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    26e8:	9000      	str	r0, [sp, #0]
    26ea:	6a09      	ldr	r1, [r1, #32]
    26ec:	6201      	str	r1, [r0, #32]
    26ee:	b124      	cbz	r4, 26fa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    26f0:	2100      	movs	r1, #0
    26f2:	f240 50d1 	movw	r0, #1489	; 0x5d1
    26f6:	f3af 8000 	nop.w
    26fa:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    26fe:	f88d 0008 	strb.w	r0, [sp, #8]
    2702:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2706:	b178      	cbz	r0, 2728 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2708:	2c00      	cmp	r4, #0
    270a:	bf1c      	itt	ne
    270c:	2100      	movne	r1, #0
    270e:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    2712:	d0c1      	beq.n	2698 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2714:	f3af 8000 	nop.w
    2718:	e7be      	b.n	2698 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    271a:	4863      	ldr	r0, [pc, #396]	; (28a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    271c:	2800      	cmp	r0, #0
    271e:	bf18      	it	ne
    2720:	f3af 8000 	nopne.w
    2724:	b662      	cpsie	i
    2726:	e7c1      	b.n	26ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2728:	b124      	cbz	r4, 2734 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    272a:	2100      	movs	r1, #0
    272c:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2730:	f3af 8000 	nop.w
    2734:	980c      	ldr	r0, [sp, #48]	; 0x30
    2736:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    273a:	2803      	cmp	r0, #3
    273c:	d172      	bne.n	2824 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    273e:	f8dd a000 	ldr.w	sl, [sp]
    2742:	f8cd a018 	str.w	sl, [sp, #24]
    2746:	990c      	ldr	r1, [sp, #48]	; 0x30
    2748:	f89a 0020 	ldrb.w	r0, [sl, #32]
    274c:	4288      	cmp	r0, r1
    274e:	bf14      	ite	ne
    2750:	f04f 0b00 	movne.w	fp, #0
    2754:	f04f 0b01 	moveq.w	fp, #1
    2758:	f10a 0c20 	add.w	ip, sl, #32
    275c:	4686      	mov	lr, r0
    275e:	2220      	movs	r2, #32
    2760:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2764:	e003      	b.n	276e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    2766:	4602      	mov	r2, r0
    2768:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    276c:	7840      	ldrb	r0, [r0, #1]
    276e:	4288      	cmp	r0, r1
    2770:	d002      	beq.n	2778 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    2772:	2820      	cmp	r0, #32
    2774:	d00a      	beq.n	278c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2776:	e7f6      	b.n	2766 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    2778:	2820      	cmp	r0, #32
    277a:	d007      	beq.n	278c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    277c:	4586      	cmp	lr, r0
    277e:	d107      	bne.n	2790 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    2780:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2784:	7840      	ldrb	r0, [r0, #1]
    2786:	f88c 0000 	strb.w	r0, [ip]
    278a:	e007      	b.n	279c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    278c:	4648      	mov	r0, r9
    278e:	e00c      	b.n	27aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    2790:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2794:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2798:	7840      	ldrb	r0, [r0, #1]
    279a:	7048      	strb	r0, [r1, #1]
    279c:	b124      	cbz	r4, 27a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    279e:	2100      	movs	r1, #0
    27a0:	f240 5037 	movw	r0, #1335	; 0x537
    27a4:	f3af 8000 	nop.w
    27a8:	4640      	mov	r0, r8
    27aa:	ea10 0f0b 	tst.w	r0, fp
    27ae:	bf18      	it	ne
    27b0:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    27b4:	2800      	cmp	r0, #0
    27b6:	d052      	beq.n	285e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    27b8:	b124      	cbz	r4, 27c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    27ba:	2100      	movs	r1, #0
    27bc:	f240 70fd 	movw	r0, #2045	; 0x7fd
    27c0:	f3af 8000 	nop.w
    27c4:	4632      	mov	r2, r6
    27c6:	2001      	movs	r0, #1
    27c8:	990c      	ldr	r1, [sp, #48]	; 0x30
    27ca:	f7ff f88d 	bl	18e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e8>
    27ce:	9806      	ldr	r0, [sp, #24]
    27d0:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    27d4:	f88d 0008 	strb.w	r0, [sp, #8]
    27d8:	f89d a008 	ldrb.w	sl, [sp, #8]
    27dc:	b124      	cbz	r4, 27e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    27de:	2100      	movs	r1, #0
    27e0:	f640 0008 	movw	r0, #2056	; 0x808
    27e4:	f3af 8000 	nop.w
    27e8:	4830      	ldr	r0, [pc, #192]	; (28ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    27ea:	2800      	cmp	r0, #0
    27ec:	bf18      	it	ne
    27ee:	f3af 8000 	nopne.w
    27f2:	f3ef 8010 	mrs	r0, PRIMASK
    27f6:	b672      	cpsid	i
    27f8:	9008      	str	r0, [sp, #32]
    27fa:	b124      	cbz	r4, 2806 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    27fc:	2100      	movs	r1, #0
    27fe:	f640 000d 	movw	r0, #2061	; 0x80d
    2802:	f3af 8000 	nop.w
    2806:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    280a:	f88d 0008 	strb.w	r0, [sp, #8]
    280e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2812:	b140      	cbz	r0, 2826 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2814:	2c00      	cmp	r4, #0
    2816:	bf1c      	itt	ne
    2818:	2100      	movne	r1, #0
    281a:	f640 0011 	movwne	r0, #2065	; 0x811
    281e:	f43f af3b 	beq.w	2698 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2822:	e777      	b.n	2714 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    2824:	e01b      	b.n	285e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2826:	f1ba 0f00 	cmp.w	sl, #0
    282a:	d008      	beq.n	283e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    282c:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2830:	2820      	cmp	r0, #32
    2832:	d104      	bne.n	283e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2834:	4631      	mov	r1, r6
    2836:	2002      	movs	r0, #2
    2838:	f7ff f886 	bl	1948 <CONFIG_FPROTECT_BLOCK_SIZE+0x948>
    283c:	b308      	cbz	r0, 2882 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    283e:	b124      	cbz	r4, 284a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2840:	2100      	movs	r1, #0
    2842:	f640 0025 	movw	r0, #2085	; 0x825
    2846:	f3af 8000 	nop.w
    284a:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    284e:	ea28 0000 	bic.w	r0, r8, r0
    2852:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    2856:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    285a:	2001      	movs	r0, #1
    285c:	9009      	str	r0, [sp, #36]	; 0x24
    285e:	b124      	cbz	r4, 286a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2860:	2100      	movs	r1, #0
    2862:	f640 002e 	movw	r0, #2094	; 0x82e
    2866:	f3af 8000 	nop.w
    286a:	9808      	ldr	r0, [sp, #32]
    286c:	b188      	cbz	r0, 2892 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    286e:	b124      	cbz	r4, 287a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    2870:	2100      	movs	r1, #0
    2872:	f640 0032 	movw	r0, #2098	; 0x832
    2876:	f3af 8000 	nop.w
    287a:	9809      	ldr	r0, [sp, #36]	; 0x24
    287c:	b00d      	add	sp, #52	; 0x34
    287e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2882:	2c00      	cmp	r4, #0
    2884:	d0f1      	beq.n	286a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2886:	2100      	movs	r1, #0
    2888:	f44f 6002 	mov.w	r0, #2080	; 0x820
    288c:	f3af 8000 	nop.w
    2890:	e7e6      	b.n	2860 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2892:	4805      	ldr	r0, [pc, #20]	; (28a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2894:	2800      	cmp	r0, #0
    2896:	bf18      	it	ne
    2898:	f3af 8000 	nopne.w
    289c:	b662      	cpsie	i
    289e:	e7e6      	b.n	286e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    28a0:	20000a24 	.word	0x20000a24
	...

000028b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    28b0:	b510      	push	{r4, lr}
    28b2:	2820      	cmp	r0, #32
    28b4:	d211      	bcs.n	28da <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    28b6:	490e      	ldr	r1, [pc, #56]	; (28f0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    28b8:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    28bc:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    28c0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    28c4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    28c8:	b13b      	cbz	r3, 28da <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    28ca:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    28ce:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    28d2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    28d6:	2a01      	cmp	r2, #1
    28d8:	d001      	beq.n	28de <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    28da:	2000      	movs	r0, #0
    28dc:	bd10      	pop	{r4, pc}
    28de:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    28e2:	4601      	mov	r1, r0
    28e4:	2000      	movs	r0, #0
    28e6:	f7fe ffff 	bl	18e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e8>
    28ea:	2001      	movs	r0, #1
    28ec:	bd10      	pop	{r4, pc}
    28ee:	0000      	.short	0x0000
    28f0:	20000a24 	.word	0x20000a24

000028f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    28f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28f8:	4e80      	ldr	r6, [pc, #512]	; (2afc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    28fa:	4680      	mov	r8, r0
    28fc:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2900:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2904:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2908:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    290c:	2800      	cmp	r0, #0
    290e:	d068      	beq.n	29e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    2910:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2914:	4d7a      	ldr	r5, [pc, #488]	; (2b00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    2916:	b125      	cbz	r5, 2922 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2918:	2100      	movs	r1, #0
    291a:	f640 30c1 	movw	r0, #3009	; 0xbc1
    291e:	f3af 8000 	nop.w
    2922:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2926:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    292a:	2801      	cmp	r0, #1
    292c:	d018      	beq.n	2960 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    292e:	b2c0      	uxtb	r0, r0
    2930:	2804      	cmp	r0, #4
    2932:	bf1c      	itt	ne
    2934:	2805      	cmpne	r0, #5
    2936:	2806      	cmpne	r0, #6
    2938:	d058      	beq.n	29ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    293a:	b12d      	cbz	r5, 2948 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    293c:	f04f 0100 	mov.w	r1, #0
    2940:	f640 30cd 	movw	r0, #3021	; 0xbcd
    2944:	f3af 8000 	nop.w
    2948:	f001 fc44 	bl	41d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    294c:	b125      	cbz	r5, 2958 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    294e:	2100      	movs	r1, #0
    2950:	f640 30d1 	movw	r0, #3025	; 0xbd1
    2954:	f3af 8000 	nop.w
    2958:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    295c:	2801      	cmp	r0, #1
    295e:	d1e6      	bne.n	292e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2960:	2401      	movs	r4, #1
    2962:	b125      	cbz	r5, 296e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2964:	2100      	movs	r1, #0
    2966:	f640 30d8 	movw	r0, #3032	; 0xbd8
    296a:	f3af 8000 	nop.w
    296e:	2c00      	cmp	r4, #0
    2970:	d042      	beq.n	29f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    2972:	2000      	movs	r0, #0
    2974:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2978:	b125      	cbz	r5, 2984 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    297a:	2100      	movs	r1, #0
    297c:	f640 30dd 	movw	r0, #3037	; 0xbdd
    2980:	f3af 8000 	nop.w
    2984:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2988:	2001      	movs	r0, #1
    298a:	ea20 090b 	bic.w	r9, r0, fp
    298e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2992:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2996:	2240      	movs	r2, #64	; 0x40
    2998:	f008 fc72 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    299c:	b125      	cbz	r5, 29a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    299e:	2100      	movs	r1, #0
    29a0:	f240 50cd 	movw	r0, #1485	; 0x5cd
    29a4:	f3af 8000 	nop.w
    29a8:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    29ac:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    29b0:	6a00      	ldr	r0, [r0, #32]
    29b2:	f8ca 0020 	str.w	r0, [sl, #32]
    29b6:	b125      	cbz	r5, 29c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    29b8:	2100      	movs	r1, #0
    29ba:	f240 50d1 	movw	r0, #1489	; 0x5d1
    29be:	f3af 8000 	nop.w
    29c2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    29c6:	f88d 0000 	strb.w	r0, [sp]
    29ca:	f89d 0000 	ldrb.w	r0, [sp]
    29ce:	b1d0      	cbz	r0, 2a06 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    29d0:	2d00      	cmp	r5, #0
    29d2:	bf1c      	itt	ne
    29d4:	2100      	movne	r1, #0
    29d6:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    29da:	d0c2      	beq.n	2962 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    29dc:	f3af 8000 	nop.w
    29e0:	e7bf      	b.n	2962 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    29e2:	f640 31b8 	movw	r1, #3000	; 0xbb8
    29e6:	2070      	movs	r0, #112	; 0x70
    29e8:	f001 face 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29ec:	464a      	mov	r2, r9
    29ee:	4641      	mov	r1, r8
    29f0:	2001      	movs	r0, #1
    29f2:	f7fe ff79 	bl	18e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e8>
    29f6:	e7a9      	b.n	294c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    29f8:	4842      	ldr	r0, [pc, #264]	; (2b04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    29fa:	2800      	cmp	r0, #0
    29fc:	bf18      	it	ne
    29fe:	f3af 8000 	nopne.w
    2a02:	b662      	cpsie	i
    2a04:	e7b5      	b.n	2972 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2a06:	b125      	cbz	r5, 2a12 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    2a08:	2100      	movs	r1, #0
    2a0a:	f640 30e7 	movw	r0, #3047	; 0xbe7
    2a0e:	f3af 8000 	nop.w
    2a12:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    2a16:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2a1a:	4614      	mov	r4, r2
    2a1c:	f04f 0b20 	mov.w	fp, #32
    2a20:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2a24:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2a28:	e003      	b.n	2a32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    2a2a:	46a3      	mov	fp, r4
    2a2c:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    2a30:	785c      	ldrb	r4, [r3, #1]
    2a32:	4544      	cmp	r4, r8
    2a34:	d002      	beq.n	2a3c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    2a36:	2c20      	cmp	r4, #32
    2a38:	d02b      	beq.n	2a92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2a3a:	e7f6      	b.n	2a2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2a3c:	2c20      	cmp	r4, #32
    2a3e:	d028      	beq.n	2a92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2a40:	42a2      	cmp	r2, r4
    2a42:	d104      	bne.n	2a4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    2a44:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    2a48:	7840      	ldrb	r0, [r0, #1]
    2a4a:	7008      	strb	r0, [r1, #0]
    2a4c:	e005      	b.n	2a5a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2a4e:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    2a52:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    2a56:	7849      	ldrb	r1, [r1, #1]
    2a58:	7041      	strb	r1, [r0, #1]
    2a5a:	f1ba 0f00 	cmp.w	sl, #0
    2a5e:	d011      	beq.n	2a84 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2a60:	b125      	cbz	r5, 2a6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    2a62:	2100      	movs	r1, #0
    2a64:	f240 502f 	movw	r0, #1327	; 0x52f
    2a68:	f3af 8000 	nop.w
    2a6c:	f89a 0000 	ldrb.w	r0, [sl]
    2a70:	42a0      	cmp	r0, r4
    2a72:	d107      	bne.n	2a84 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2a74:	b125      	cbz	r5, 2a80 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    2a76:	2100      	movs	r1, #0
    2a78:	f240 5032 	movw	r0, #1330	; 0x532
    2a7c:	f3af 8000 	nop.w
    2a80:	f88a b000 	strb.w	fp, [sl]
    2a84:	b15d      	cbz	r5, 2a9e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2a86:	2100      	movs	r1, #0
    2a88:	f240 5037 	movw	r0, #1335	; 0x537
    2a8c:	f3af 8000 	nop.w
    2a90:	e000      	b.n	2a94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    2a92:	b125      	cbz	r5, 2a9e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2a94:	2100      	movs	r1, #0
    2a96:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2a9a:	f3af 8000 	nop.w
    2a9e:	481a      	ldr	r0, [pc, #104]	; (2b08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    2aa0:	2800      	cmp	r0, #0
    2aa2:	bf18      	it	ne
    2aa4:	f3af 8000 	nopne.w
    2aa8:	f3ef 8410 	mrs	r4, PRIMASK
    2aac:	b672      	cpsid	i
    2aae:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2ab2:	f88d 0000 	strb.w	r0, [sp]
    2ab6:	f89d 0000 	ldrb.w	r0, [sp]
    2aba:	b138      	cbz	r0, 2acc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    2abc:	2d00      	cmp	r5, #0
    2abe:	bf1c      	itt	ne
    2ac0:	2100      	movne	r1, #0
    2ac2:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    2ac6:	f43f af4c 	beq.w	2962 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2aca:	e787      	b.n	29dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2acc:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2ad0:	2001      	movs	r0, #1
    2ad2:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2ad6:	b154      	cbz	r4, 2aee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2ad8:	2d00      	cmp	r5, #0
    2ada:	bf08      	it	eq
    2adc:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ae0:	2100      	movs	r1, #0
    2ae2:	f640 30fe 	movw	r0, #3070	; 0xbfe
    2ae6:	f3af 8000 	nop.w
    2aea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2aee:	4805      	ldr	r0, [pc, #20]	; (2b04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2af0:	2800      	cmp	r0, #0
    2af2:	bf18      	it	ne
    2af4:	f3af 8000 	nopne.w
    2af8:	b662      	cpsie	i
    2afa:	e7ed      	b.n	2ad8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    2afc:	20000a24 	.word	0x20000a24
	...

00002b0c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2b0c:	b570      	push	{r4, r5, r6, lr}
    2b0e:	460d      	mov	r5, r1
    2b10:	4606      	mov	r6, r0
    2b12:	f001 f9af 	bl	3e74 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2b16:	480f      	ldr	r0, [pc, #60]	; (2b54 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2b18:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2b1c:	2400      	movs	r4, #0
    2b1e:	3880      	subs	r0, #128	; 0x80
    2b20:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2b24:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2b28:	b129      	cbz	r1, 2b36 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2b2a:	1c61      	adds	r1, r4, #1
    2b2c:	b2cc      	uxtb	r4, r1
    2b2e:	2c20      	cmp	r4, #32
    2b30:	d3f8      	bcc.n	2b24 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2b32:	2020      	movs	r0, #32
    2b34:	bd70      	pop	{r4, r5, r6, pc}
    2b36:	4808      	ldr	r0, [pc, #32]	; (2b58 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2b38:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2b3c:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2b40:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2b44:	4621      	mov	r1, r4
    2b46:	6045      	str	r5, [r0, #4]
    2b48:	2001      	movs	r0, #1
    2b4a:	f7fe fecd 	bl	18e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e8>
    2b4e:	4620      	mov	r0, r4
    2b50:	bd70      	pop	{r4, r5, r6, pc}
    2b52:	0000      	.short	0x0000
    2b54:	20000a24 	.word	0x20000a24
    2b58:	200006a4 	.word	0x200006a4

00002b5c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b60:	b083      	sub	sp, #12
    2b62:	f000 fb2b 	bl	31bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2b66:	4605      	mov	r5, r0
    2b68:	f000 fdf4 	bl	3754 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2b6c:	4c67      	ldr	r4, [pc, #412]	; (2d0c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    2b6e:	68a0      	ldr	r0, [r4, #8]
    2b70:	f1b0 3fff 	cmp.w	r0, #4294967295
    2b74:	bf1c      	itt	ne
    2b76:	f04f 30ff 	movne.w	r0, #4294967295
    2b7a:	60a0      	strne	r0, [r4, #8]
    2b7c:	7fa0      	ldrb	r0, [r4, #30]
    2b7e:	f8df b190 	ldr.w	fp, [pc, #400]	; 2d10 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    2b82:	b9a8      	cbnz	r0, 2bb0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2b84:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2b88:	1a08      	subs	r0, r1, r0
    2b8a:	0200      	lsls	r0, r0, #8
    2b8c:	17c1      	asrs	r1, r0, #31
    2b8e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2b92:	1200      	asrs	r0, r0, #8
    2b94:	f44f 710c 	mov.w	r1, #560	; 0x230
    2b98:	f008 fa31 	bl	affe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2b9c:	6921      	ldr	r1, [r4, #16]
    2b9e:	4408      	add	r0, r1
    2ba0:	1a28      	subs	r0, r5, r0
    2ba2:	0200      	lsls	r0, r0, #8
    2ba4:	17c1      	asrs	r1, r0, #31
    2ba6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2baa:	1200      	asrs	r0, r0, #8
    2bac:	0fc0      	lsrs	r0, r0, #31
    2bae:	d013      	beq.n	2bd8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    2bb0:	7e60      	ldrb	r0, [r4, #25]
    2bb2:	b328      	cbz	r0, 2c00 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2bb4:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2bb8:	f88d 0000 	strb.w	r0, [sp]
    2bbc:	f89d 0000 	ldrb.w	r0, [sp]
    2bc0:	b1f0      	cbz	r0, 2c00 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2bc2:	f000 fc09 	bl	33d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2bc6:	bf00      	nop
    2bc8:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2bcc:	b1f0      	cbz	r0, 2c0c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    2bce:	f240 4147 	movw	r1, #1095	; 0x447
    2bd2:	2070      	movs	r0, #112	; 0x70
    2bd4:	f001 f9d8 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bd8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2bdc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2be0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2be4:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2be8:	6840      	ldr	r0, [r0, #4]
    2bea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2bee:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    2bf2:	2108      	movs	r1, #8
    2bf4:	4790      	blx	r2
    2bf6:	f44f 6186 	mov.w	r1, #1072	; 0x430
    2bfa:	2070      	movs	r0, #112	; 0x70
    2bfc:	f001 f9c4 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c00:	1ce8      	adds	r0, r5, #3
    2c02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c06:	f000 fadf 	bl	31c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2c0a:	e7dd      	b.n	2bc8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2c0c:	f04f 0a01 	mov.w	sl, #1
    2c10:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2c14:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2c18:	2820      	cmp	r0, #32
    2c1a:	d024      	beq.n	2c66 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    2c1c:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2c20:	2020      	movs	r0, #32
    2c22:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    2c26:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2c2a:	2600      	movs	r6, #0
    2c2c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2c30:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2c34:	4837      	ldr	r0, [pc, #220]	; (2d14 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    2c36:	6026      	str	r6, [r4, #0]
    2c38:	7800      	ldrb	r0, [r0, #0]
    2c3a:	2802      	cmp	r0, #2
    2c3c:	bf16      	itet	ne
    2c3e:	2803      	cmpne	r0, #3
    2c40:	2001      	moveq	r0, #1
    2c42:	2000      	movne	r0, #0
    2c44:	7720      	strb	r0, [r4, #28]
    2c46:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2c4a:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2c4e:	f899 0020 	ldrb.w	r0, [r9, #32]
    2c52:	2820      	cmp	r0, #32
    2c54:	d031      	beq.n	2cba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2c56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2c5a:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2c5e:	7d81      	ldrb	r1, [r0, #22]
    2c60:	2901      	cmp	r1, #1
    2c62:	d005      	beq.n	2c70 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    2c64:	e029      	b.n	2cba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2c66:	f240 414a 	movw	r1, #1098	; 0x44a
    2c6a:	2070      	movs	r0, #112	; 0x70
    2c6c:	f001 f98c 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c70:	46ab      	mov	fp, r5
    2c72:	f100 0508 	add.w	r5, r0, #8
    2c76:	8a40      	ldrh	r0, [r0, #18]
    2c78:	aa01      	add	r2, sp, #4
    2c7a:	4669      	mov	r1, sp
    2c7c:	f000 f940 	bl	2f00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2c80:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2c84:	2820      	cmp	r0, #32
    2c86:	d004      	beq.n	2c92 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    2c88:	6920      	ldr	r0, [r4, #16]
    2c8a:	1d40      	adds	r0, r0, #5
    2c8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c90:	e00b      	b.n	2caa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    2c92:	8968      	ldrh	r0, [r5, #10]
    2c94:	f10b 0b09 	add.w	fp, fp, #9
    2c98:	b128      	cbz	r0, 2ca6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    2c9a:	f001 f8fd 	bl	3e98 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2c9e:	2800      	cmp	r0, #0
    2ca0:	bf08      	it	eq
    2ca2:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    2ca6:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    2caa:	e9d5 2100 	ldrd	r2, r1, [r5]
    2cae:	1a89      	subs	r1, r1, r2
    2cb0:	6028      	str	r0, [r5, #0]
    2cb2:	4408      	add	r0, r1
    2cb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cb8:	6068      	str	r0, [r5, #4]
    2cba:	4639      	mov	r1, r7
    2cbc:	2001      	movs	r0, #1
    2cbe:	f7fe fe43 	bl	1948 <CONFIG_FPROTECT_BLOCK_SIZE+0x948>
    2cc2:	2800      	cmp	r0, #0
    2cc4:	d0f9      	beq.n	2cba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2cc6:	4814      	ldr	r0, [pc, #80]	; (2d18 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    2cc8:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2ccc:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2cd0:	2802      	cmp	r0, #2
    2cd2:	d104      	bne.n	2cde <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    2cd4:	463a      	mov	r2, r7
    2cd6:	4641      	mov	r1, r8
    2cd8:	2006      	movs	r0, #6
    2cda:	f7fe fe05 	bl	18e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e8>
    2cde:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2ce2:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    2ce6:	2820      	cmp	r0, #32
    2ce8:	d003      	beq.n	2cf2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    2cea:	480c      	ldr	r0, [pc, #48]	; (2d1c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    2cec:	7840      	ldrb	r0, [r0, #1]
    2cee:	f001 fa1b 	bl	4128 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2cf2:	7f20      	ldrb	r0, [r4, #28]
    2cf4:	2800      	cmp	r0, #0
    2cf6:	bf04      	itt	eq
    2cf8:	b003      	addeq	sp, #12
    2cfa:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cfe:	f000 fd73 	bl	37e8 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2d02:	7726      	strb	r6, [r4, #28]
    2d04:	7766      	strb	r6, [r4, #29]
    2d06:	b003      	add	sp, #12
    2d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d0c:	20000a24 	.word	0x20000a24
    2d10:	200006a4 	.word	0x200006a4
    2d14:	20000012 	.word	0x20000012
    2d18:	200009a4 	.word	0x200009a4
    2d1c:	20000010 	.word	0x20000010

00002d20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2d20:	b510      	push	{r4, lr}
    2d22:	4c32      	ldr	r4, [pc, #200]	; (2dec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2d24:	b082      	sub	sp, #8
    2d26:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2d2a:	2920      	cmp	r1, #32
    2d2c:	d008      	beq.n	2d40 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2d2e:	68a1      	ldr	r1, [r4, #8]
    2d30:	f1b1 3fff 	cmp.w	r1, #4294967295
    2d34:	d009      	beq.n	2d4a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    2d36:	f640 21e9 	movw	r1, #2793	; 0xae9
    2d3a:	2070      	movs	r0, #112	; 0x70
    2d3c:	f001 f924 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d40:	f640 21e8 	movw	r1, #2792	; 0xae8
    2d44:	2070      	movs	r0, #112	; 0x70
    2d46:	f001 f91f 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d4a:	6862      	ldr	r2, [r4, #4]
    2d4c:	4601      	mov	r1, r0
    2d4e:	4b28      	ldr	r3, [pc, #160]	; (2df0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2d50:	1850      	adds	r0, r2, r1
    2d52:	429a      	cmp	r2, r3
    2d54:	d904      	bls.n	2d60 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    2d56:	f240 6109 	movw	r1, #1545	; 0x609
    2d5a:	2070      	movs	r0, #112	; 0x70
    2d5c:	f001 f914 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d60:	4a24      	ldr	r2, [pc, #144]	; (2df4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2d62:	4291      	cmp	r1, r2
    2d64:	dd04      	ble.n	2d70 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    2d66:	f240 610a 	movw	r1, #1546	; 0x60a
    2d6a:	2070      	movs	r0, #112	; 0x70
    2d6c:	f001 f90c 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d70:	4a21      	ldr	r2, [pc, #132]	; (2df8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2d72:	4291      	cmp	r1, r2
    2d74:	da04      	bge.n	2d80 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    2d76:	f240 610b 	movw	r1, #1547	; 0x60b
    2d7a:	2070      	movs	r0, #112	; 0x70
    2d7c:	f001 f904 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d80:	491e      	ldr	r1, [pc, #120]	; (2dfc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    2d82:	4281      	cmp	r1, r0
    2d84:	bfdc      	itt	le
    2d86:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2d8a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2d8e:	dd05      	ble.n	2d9c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2d90:	2800      	cmp	r0, #0
    2d92:	bfbc      	itt	lt
    2d94:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2d98:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2d9c:	aa01      	add	r2, sp, #4
    2d9e:	4669      	mov	r1, sp
    2da0:	f000 f8ae 	bl	2f00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2da4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2da8:	280f      	cmp	r0, #15
    2daa:	bf8c      	ite	hi
    2dac:	2001      	movhi	r0, #1
    2dae:	2000      	movls	r0, #0
    2db0:	9900      	ldr	r1, [sp, #0]
    2db2:	4408      	add	r0, r1
    2db4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2db8:	60a1      	str	r1, [r4, #8]
    2dba:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2dbe:	f88d 0000 	strb.w	r0, [sp]
    2dc2:	f89d 0000 	ldrb.w	r0, [sp]
    2dc6:	2800      	cmp	r0, #0
    2dc8:	bf04      	itt	eq
    2dca:	b002      	addeq	sp, #8
    2dcc:	bd10      	popeq	{r4, pc}
    2dce:	2301      	movs	r3, #1
    2dd0:	2203      	movs	r2, #3
    2dd2:	2005      	movs	r0, #5
    2dd4:	f000 fb7c 	bl	34d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2dd8:	2800      	cmp	r0, #0
    2dda:	bf1c      	itt	ne
    2ddc:	b002      	addne	sp, #8
    2dde:	bd10      	popne	{r4, pc}
    2de0:	f640 21f1 	movw	r1, #2801	; 0xaf1
    2de4:	2070      	movs	r0, #112	; 0x70
    2de6:	f001 f8cf 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dea:	0000      	.short	0x0000
    2dec:	20000a24 	.word	0x20000a24
    2df0:	1e847fff 	.word	0x1e847fff
    2df4:	07a12000 	.word	0x07a12000
    2df8:	f85ee000 	.word	0xf85ee000
    2dfc:	1e848000 	.word	0x1e848000

00002e00 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2e00:	b570      	push	{r4, r5, r6, lr}
    2e02:	4c1e      	ldr	r4, [pc, #120]	; (2e7c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2e04:	2120      	movs	r1, #32
    2e06:	f884 1020 	strb.w	r1, [r4, #32]
    2e0a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2e0e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2e12:	2000      	movs	r0, #0
    2e14:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2e18:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2e1c:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2e20:	1e42      	subs	r2, r0, #1
    2e22:	60a2      	str	r2, [r4, #8]
    2e24:	6020      	str	r0, [r4, #0]
    2e26:	77a0      	strb	r0, [r4, #30]
    2e28:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2e2c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2e30:	7720      	strb	r0, [r4, #28]
    2e32:	7760      	strb	r0, [r4, #29]
    2e34:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2e38:	4911      	ldr	r1, [pc, #68]	; (2e80 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2e3a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2e3e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2e42:	7008      	strb	r0, [r1, #0]
    2e44:	7048      	strb	r0, [r1, #1]
    2e46:	8048      	strh	r0, [r1, #2]
    2e48:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2e4c:	2210      	movs	r2, #16
    2e4e:	7088      	strb	r0, [r1, #2]
    2e50:	f801 0f04 	strb.w	r0, [r1, #4]!
    2e54:	1e52      	subs	r2, r2, #1
    2e56:	d1fa      	bne.n	2e4e <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2e58:	4d0a      	ldr	r5, [pc, #40]	; (2e84 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2e5a:	2601      	movs	r6, #1
    2e5c:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2e60:	20ff      	movs	r0, #255	; 0xff
    2e62:	7028      	strb	r0, [r5, #0]
    2e64:	4808      	ldr	r0, [pc, #32]	; (2e88 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2e66:	f001 f941 	bl	40ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2e6a:	7068      	strb	r0, [r5, #1]
    2e6c:	f001 f99c 	bl	41a8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2e70:	60a8      	str	r0, [r5, #8]
    2e72:	f000 fce7 	bl	3844 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2e76:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    2e7a:	bd70      	pop	{r4, r5, r6, pc}
    2e7c:	20000a24 	.word	0x20000a24
    2e80:	20000012 	.word	0x20000012
    2e84:	20000010 	.word	0x20000010
    2e88:	000017a5 	.word	0x000017a5

00002e8c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2e8c:	b570      	push	{r4, r5, r6, lr}
    2e8e:	4605      	mov	r5, r0
    2e90:	2001      	movs	r0, #1
    2e92:	fa00 f405 	lsl.w	r4, r0, r5
    2e96:	460e      	mov	r6, r1
    2e98:	2a00      	cmp	r2, #0
    2e9a:	bf08      	it	eq
    2e9c:	4808      	ldreq	r0, [pc, #32]	; (2ec0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    2e9e:	d00c      	beq.n	2eba <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    2ea0:	2000      	movs	r0, #0
    2ea2:	f000 fcb5 	bl	3810 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    2ea6:	00e9      	lsls	r1, r5, #3
    2ea8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2eac:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    2eb0:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2eb4:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2eb8:	4802      	ldr	r0, [pc, #8]	; (2ec4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2eba:	6004      	str	r4, [r0, #0]
    2ebc:	bd70      	pop	{r4, r5, r6, pc}
    2ebe:	0000      	.short	0x0000
    2ec0:	4001f508 	.word	0x4001f508
    2ec4:	4001f504 	.word	0x4001f504

00002ec8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2ec8:	0b41      	lsrs	r1, r0, #13
    2eca:	f248 6237 	movw	r2, #34359	; 0x8637
    2ece:	4351      	muls	r1, r2
    2ed0:	0c0a      	lsrs	r2, r1, #16
    2ed2:	4b09      	ldr	r3, [pc, #36]	; (2ef8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2ed4:	0251      	lsls	r1, r2, #9
    2ed6:	fb02 0203 	mla	r2, r2, r3, r0
    2eda:	4808      	ldr	r0, [pc, #32]	; (2efc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2edc:	4350      	muls	r0, r2
    2ede:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2ee2:	306e      	adds	r0, #110	; 0x6e
    2ee4:	0d40      	lsrs	r0, r0, #21
    2ee6:	425b      	negs	r3, r3
    2ee8:	fb10 f303 	smulbb	r3, r0, r3
    2eec:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2ef0:	bf88      	it	hi
    2ef2:	1c49      	addhi	r1, r1, #1
    2ef4:	4408      	add	r0, r1
    2ef6:	4770      	bx	lr
    2ef8:	ffffc2f7 	.word	0xffffc2f7
    2efc:	00010c6f 	.word	0x00010c6f

00002f00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2f00:	0b43      	lsrs	r3, r0, #13
    2f02:	f248 6c37 	movw	ip, #34359	; 0x8637
    2f06:	fb03 f30c 	mul.w	r3, r3, ip
    2f0a:	b430      	push	{r4, r5}
    2f0c:	0c1b      	lsrs	r3, r3, #16
    2f0e:	f8df c044 	ldr.w	ip, [pc, #68]	; 2f54 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2f12:	025c      	lsls	r4, r3, #9
    2f14:	fb03 030c 	mla	r3, r3, ip, r0
    2f18:	480f      	ldr	r0, [pc, #60]	; (2f58 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2f1a:	4358      	muls	r0, r3
    2f1c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2f20:	eb04 000c 	add.w	r0, r4, ip
    2f24:	f643 5409 	movw	r4, #15625	; 0x3d09
    2f28:	fb1c f404 	smulbb	r4, ip, r4
    2f2c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2f30:	f643 5508 	movw	r5, #15624	; 0x3d08
    2f34:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2f38:	442c      	add	r4, r5
    2f3a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2f3e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2f42:	bf84      	itt	hi
    2f44:	f04f 0c00 	movhi.w	ip, #0
    2f48:	1c40      	addhi	r0, r0, #1
    2f4a:	6008      	str	r0, [r1, #0]
    2f4c:	f882 c000 	strb.w	ip, [r2]
    2f50:	bc30      	pop	{r4, r5}
    2f52:	4770      	bx	lr
    2f54:	ffffc2f7 	.word	0xffffc2f7
    2f58:	00010c6f 	.word	0x00010c6f

00002f5c <MPSL_IRQ_RTC0_Handler>:
    2f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f60:	4c36      	ldr	r4, [pc, #216]	; (303c <MPSL_IRQ_RTC0_Handler+0xe0>)
    2f62:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f66:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2f6a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2f6e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2f72:	f04f 0500 	mov.w	r5, #0
    2f76:	d019      	beq.n	2fac <MPSL_IRQ_RTC0_Handler+0x50>
    2f78:	4831      	ldr	r0, [pc, #196]	; (3040 <MPSL_IRQ_RTC0_Handler+0xe4>)
    2f7a:	6800      	ldr	r0, [r0, #0]
    2f7c:	b1b0      	cbz	r0, 2fac <MPSL_IRQ_RTC0_Handler+0x50>
    2f7e:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2f82:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2f86:	482f      	ldr	r0, [pc, #188]	; (3044 <MPSL_IRQ_RTC0_Handler+0xe8>)
    2f88:	6800      	ldr	r0, [r0, #0]
    2f8a:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2f8e:	1a40      	subs	r0, r0, r1
    2f90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f94:	2802      	cmp	r0, #2
    2f96:	d302      	bcc.n	2f9e <MPSL_IRQ_RTC0_Handler+0x42>
    2f98:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2f9c:	d306      	bcc.n	2fac <MPSL_IRQ_RTC0_Handler+0x50>
    2f9e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2fa2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2fa6:	2004      	movs	r0, #4
    2fa8:	f7fe ff50 	bl	1e4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2fac:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2fb0:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2fb4:	d019      	beq.n	2fea <MPSL_IRQ_RTC0_Handler+0x8e>
    2fb6:	4824      	ldr	r0, [pc, #144]	; (3048 <MPSL_IRQ_RTC0_Handler+0xec>)
    2fb8:	6800      	ldr	r0, [r0, #0]
    2fba:	b1b0      	cbz	r0, 2fea <MPSL_IRQ_RTC0_Handler+0x8e>
    2fbc:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    2fc0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2fc4:	4821      	ldr	r0, [pc, #132]	; (304c <MPSL_IRQ_RTC0_Handler+0xf0>)
    2fc6:	6800      	ldr	r0, [r0, #0]
    2fc8:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2fcc:	1a40      	subs	r0, r0, r1
    2fce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fd2:	2802      	cmp	r0, #2
    2fd4:	d302      	bcc.n	2fdc <MPSL_IRQ_RTC0_Handler+0x80>
    2fd6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2fda:	d306      	bcc.n	2fea <MPSL_IRQ_RTC0_Handler+0x8e>
    2fdc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2fe0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2fe4:	2005      	movs	r0, #5
    2fe6:	f7fe ff31 	bl	1e4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2fea:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2fee:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2ff2:	bf08      	it	eq
    2ff4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ff8:	4815      	ldr	r0, [pc, #84]	; (3050 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2ffa:	6800      	ldr	r0, [r0, #0]
    2ffc:	2800      	cmp	r0, #0
    2ffe:	bf08      	it	eq
    3000:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3004:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    3008:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    300c:	4811      	ldr	r0, [pc, #68]	; (3054 <MPSL_IRQ_RTC0_Handler+0xf8>)
    300e:	6800      	ldr	r0, [r0, #0]
    3010:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    3014:	1a40      	subs	r0, r0, r1
    3016:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    301a:	2802      	cmp	r0, #2
    301c:	d304      	bcc.n	3028 <MPSL_IRQ_RTC0_Handler+0xcc>
    301e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3022:	bf38      	it	cc
    3024:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    3028:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    302c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3034:	2006      	movs	r0, #6
    3036:	f7fe bf09 	b.w	1e4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    303a:	0000      	.short	0x0000
    303c:	4000b000 	.word	0x4000b000
    3040:	4000b140 	.word	0x4000b140
    3044:	4000b540 	.word	0x4000b540
    3048:	4000b144 	.word	0x4000b144
    304c:	4000b544 	.word	0x4000b544
    3050:	4000b148 	.word	0x4000b148
    3054:	4000b548 	.word	0x4000b548

00003058 <MPSL_IRQ_TIMER0_Handler>:
    3058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    305c:	4d38      	ldr	r5, [pc, #224]	; (3140 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    305e:	7828      	ldrb	r0, [r5, #0]
    3060:	2804      	cmp	r0, #4
    3062:	d068      	beq.n	3136 <MPSL_IRQ_TIMER0_Handler+0xde>
    3064:	1ce8      	adds	r0, r5, #3
    3066:	2201      	movs	r2, #1
    3068:	7801      	ldrb	r1, [r0, #0]
    306a:	b159      	cbz	r1, 3084 <MPSL_IRQ_TIMER0_Handler+0x2c>
    306c:	2901      	cmp	r1, #1
    306e:	bf08      	it	eq
    3070:	706a      	strbeq	r2, [r5, #1]
    3072:	d002      	beq.n	307a <MPSL_IRQ_TIMER0_Handler+0x22>
    3074:	7869      	ldrb	r1, [r5, #1]
    3076:	2900      	cmp	r1, #0
    3078:	d058      	beq.n	312c <MPSL_IRQ_TIMER0_Handler+0xd4>
    307a:	2102      	movs	r1, #2
    307c:	7001      	strb	r1, [r0, #0]
    307e:	7840      	ldrb	r0, [r0, #1]
    3080:	f000 fafa 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3084:	4c2f      	ldr	r4, [pc, #188]	; (3144 <MPSL_IRQ_TIMER0_Handler+0xec>)
    3086:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    308a:	f04f 0800 	mov.w	r8, #0
    308e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3092:	f44f 7780 	mov.w	r7, #256	; 0x100
    3096:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    309a:	d00a      	beq.n	30b2 <MPSL_IRQ_TIMER0_Handler+0x5a>
    309c:	482a      	ldr	r0, [pc, #168]	; (3148 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    309e:	6800      	ldr	r0, [r0, #0]
    30a0:	b138      	cbz	r0, 30b2 <MPSL_IRQ_TIMER0_Handler+0x5a>
    30a2:	2003      	movs	r0, #3
    30a4:	f000 fae8 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30a8:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30ac:	2003      	movs	r0, #3
    30ae:	f7fe fecd 	bl	1e4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30b2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    30b6:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    30ba:	d00a      	beq.n	30d2 <MPSL_IRQ_TIMER0_Handler+0x7a>
    30bc:	4823      	ldr	r0, [pc, #140]	; (314c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    30be:	6800      	ldr	r0, [r0, #0]
    30c0:	b138      	cbz	r0, 30d2 <MPSL_IRQ_TIMER0_Handler+0x7a>
    30c2:	2002      	movs	r0, #2
    30c4:	f000 fad8 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30c8:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30cc:	2002      	movs	r0, #2
    30ce:	f7fe febd 	bl	1e4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30d2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    30d6:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    30da:	d00a      	beq.n	30f2 <MPSL_IRQ_TIMER0_Handler+0x9a>
    30dc:	481c      	ldr	r0, [pc, #112]	; (3150 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    30de:	6800      	ldr	r0, [r0, #0]
    30e0:	b138      	cbz	r0, 30f2 <MPSL_IRQ_TIMER0_Handler+0x9a>
    30e2:	2001      	movs	r0, #1
    30e4:	f000 fac8 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30e8:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30ec:	2001      	movs	r0, #1
    30ee:	f7fe fead 	bl	1e4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30f2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    30f6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    30fa:	bf08      	it	eq
    30fc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3100:	4814      	ldr	r0, [pc, #80]	; (3154 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    3102:	6800      	ldr	r0, [r0, #0]
    3104:	2800      	cmp	r0, #0
    3106:	bf08      	it	eq
    3108:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    310c:	2000      	movs	r0, #0
    310e:	f000 fab3 	bl	3678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3112:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3116:	2004      	movs	r0, #4
    3118:	7028      	strb	r0, [r5, #0]
    311a:	f8c5 8008 	str.w	r8, [r5, #8]
    311e:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3126:	2000      	movs	r0, #0
    3128:	f7fe be90 	b.w	1e4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    312c:	f240 316a 	movw	r1, #874	; 0x36a
    3130:	206c      	movs	r0, #108	; 0x6c
    3132:	f000 ff29 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    313a:	2007      	movs	r0, #7
    313c:	f7fe be86 	b.w	1e4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3140:	2000001c 	.word	0x2000001c
    3144:	40008000 	.word	0x40008000
    3148:	4000814c 	.word	0x4000814c
    314c:	40008148 	.word	0x40008148
    3150:	40008144 	.word	0x40008144
    3154:	40008140 	.word	0x40008140
    3158:	2201      	movs	r2, #1
    315a:	0211      	lsls	r1, r2, #8
    315c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3160:	2000      	movs	r0, #0
    3162:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    3166:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    316a:	f3bf 8f4f 	dsb	sy
    316e:	f3bf 8f6f 	isb	sy
    3172:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    3176:	490e      	ldr	r1, [pc, #56]	; (31b0 <MPSL_IRQ_TIMER0_Handler+0x158>)
    3178:	f841 2f04 	str.w	r2, [r1, #4]!
    317c:	1e43      	subs	r3, r0, #1
    317e:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    3182:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3186:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    318a:	4b0a      	ldr	r3, [pc, #40]	; (31b4 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    318c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3190:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3194:	1d1b      	adds	r3, r3, #4
    3196:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    319a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    319e:	1d1b      	adds	r3, r3, #4
    31a0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    31a4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    31a8:	60ca      	str	r2, [r1, #12]
    31aa:	4903      	ldr	r1, [pc, #12]	; (31b8 <MPSL_IRQ_TIMER0_Handler+0x160>)
    31ac:	7048      	strb	r0, [r1, #1]
    31ae:	4770      	bx	lr
    31b0:	40008000 	.word	0x40008000
    31b4:	40008004 	.word	0x40008004
    31b8:	2000001c 	.word	0x2000001c

000031bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    31bc:	4801      	ldr	r0, [pc, #4]	; (31c4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    31be:	6800      	ldr	r0, [r0, #0]
    31c0:	4770      	bx	lr
    31c2:	0000      	.short	0x0000
    31c4:	4000b504 	.word	0x4000b504

000031c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    31c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31cc:	4e47      	ldr	r6, [pc, #284]	; (32ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    31ce:	4605      	mov	r5, r0
    31d0:	1ef7      	subs	r7, r6, #3
    31d2:	7832      	ldrb	r2, [r6, #0]
    31d4:	68f9      	ldr	r1, [r7, #12]
    31d6:	2a01      	cmp	r2, #1
    31d8:	bf04      	itt	eq
    31da:	42a9      	cmpeq	r1, r5
    31dc:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31e0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    31e4:	4b42      	ldr	r3, [pc, #264]	; (32f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    31e6:	6018      	str	r0, [r3, #0]
    31e8:	4842      	ldr	r0, [pc, #264]	; (32f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    31ea:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    31ee:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    31f2:	f100 0304 	add.w	r3, r0, #4
    31f6:	f04f 0400 	mov.w	r4, #0
    31fa:	2a00      	cmp	r2, #0
    31fc:	d061      	beq.n	32c2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    31fe:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3202:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    3206:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    320a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    320e:	4b3a      	ldr	r3, [pc, #232]	; (32f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3210:	681b      	ldr	r3, [r3, #0]
    3212:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3216:	f04f 0801 	mov.w	r8, #1
    321a:	2b00      	cmp	r3, #0
    321c:	bf04      	itt	eq
    321e:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    3222:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    3226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    322a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    322e:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    3232:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3236:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    323a:	1aeb      	subs	r3, r5, r3
    323c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3240:	2b02      	cmp	r3, #2
    3242:	d34b      	bcc.n	32dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    3244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3248:	d248      	bcs.n	32dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    324a:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    324e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3252:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    3256:	b132      	cbz	r2, 3266 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    3258:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    325c:	1a8a      	subs	r2, r1, r2
    325e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3262:	2a02      	cmp	r2, #2
    3264:	d3f8      	bcc.n	3258 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    3266:	f8c7 8008 	str.w	r8, [r7, #8]
    326a:	703c      	strb	r4, [r7, #0]
    326c:	f7ff ff74 	bl	3158 <MPSL_IRQ_TIMER0_Handler+0x100>
    3270:	4822      	ldr	r0, [pc, #136]	; (32fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3272:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3276:	f364 0101 	bfi	r1, r4, #0, #2
    327a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    327e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    3282:	2102      	movs	r1, #2
    3284:	f361 0201 	bfi	r2, r1, #0, #2
    3288:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    328c:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    3290:	2104      	movs	r1, #4
    3292:	f361 0203 	bfi	r2, r1, #0, #4
    3296:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    329a:	f8c0 800c 	str.w	r8, [r0, #12]
    329e:	68b9      	ldr	r1, [r7, #8]
    32a0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    32a4:	1580      	asrs	r0, r0, #22
    32a6:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    32aa:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    32ae:	4914      	ldr	r1, [pc, #80]	; (3300 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    32b0:	05c0      	lsls	r0, r0, #23
    32b2:	6008      	str	r0, [r1, #0]
    32b4:	2004      	movs	r0, #4
    32b6:	60fd      	str	r5, [r7, #12]
    32b8:	7070      	strb	r0, [r6, #1]
    32ba:	f886 8000 	strb.w	r8, [r6]
    32be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32c2:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    32c6:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    32ca:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    32ce:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    32d2:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    32d6:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    32da:	e798      	b.n	320e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    32dc:	2100      	movs	r1, #0
    32de:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    32e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    32e6:	206c      	movs	r0, #108	; 0x6c
    32e8:	f000 fe4e 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32ec:	2000001f 	.word	0x2000001f
    32f0:	4001f508 	.word	0x4001f508
    32f4:	4000b000 	.word	0x4000b000
    32f8:	4000b148 	.word	0x4000b148
    32fc:	40008000 	.word	0x40008000
    3300:	4001f504 	.word	0x4001f504

00003304 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3304:	b570      	push	{r4, r5, r6, lr}
    3306:	4c2c      	ldr	r4, [pc, #176]	; (33b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3308:	68e2      	ldr	r2, [r4, #12]
    330a:	4282      	cmp	r2, r0
    330c:	bf14      	ite	ne
    330e:	2101      	movne	r1, #1
    3310:	2100      	moveq	r1, #0
    3312:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 33bc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    3316:	f89c 5000 	ldrb.w	r5, [ip]
    331a:	2d02      	cmp	r5, #2
    331c:	d002      	beq.n	3324 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    331e:	2900      	cmp	r1, #0
    3320:	d037      	beq.n	3392 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    3322:	e002      	b.n	332a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3324:	2900      	cmp	r1, #0
    3326:	bf08      	it	eq
    3328:	bd70      	popeq	{r4, r5, r6, pc}
    332a:	7861      	ldrb	r1, [r4, #1]
    332c:	b381      	cbz	r1, 3390 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    332e:	4b24      	ldr	r3, [pc, #144]	; (33c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3330:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3334:	6019      	str	r1, [r3, #0]
    3336:	138b      	asrs	r3, r1, #14
    3338:	4922      	ldr	r1, [pc, #136]	; (33c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    333a:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    333e:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3342:	2300      	movs	r3, #0
    3344:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    3348:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    334c:	1ac3      	subs	r3, r0, r3
    334e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3352:	2b02      	cmp	r3, #2
    3354:	d327      	bcc.n	33a6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    3356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    335a:	d224      	bcs.n	33a6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    335c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3364:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    3368:	b13d      	cbz	r5, 337a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    336a:	bf00      	nop
    336c:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    3370:	1ad3      	subs	r3, r2, r3
    3372:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3376:	2b02      	cmp	r3, #2
    3378:	d3f8      	bcc.n	336c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    337a:	4b13      	ldr	r3, [pc, #76]	; (33c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    337c:	2102      	movs	r1, #2
    337e:	074a      	lsls	r2, r1, #29
    3380:	601a      	str	r2, [r3, #0]
    3382:	60e0      	str	r0, [r4, #12]
    3384:	2004      	movs	r0, #4
    3386:	f88c 0001 	strb.w	r0, [ip, #1]
    338a:	f88c 1000 	strb.w	r1, [ip]
    338e:	bd70      	pop	{r4, r5, r6, pc}
    3390:	e004      	b.n	339c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    3392:	f240 2102 	movw	r1, #514	; 0x202
    3396:	206c      	movs	r0, #108	; 0x6c
    3398:	f000 fdf6 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    339c:	f240 2106 	movw	r1, #518	; 0x206
    33a0:	206c      	movs	r0, #108	; 0x6c
    33a2:	f000 fdf1 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33a6:	2000      	movs	r0, #0
    33a8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    33ac:	f240 2112 	movw	r1, #530	; 0x212
    33b0:	206c      	movs	r0, #108	; 0x6c
    33b2:	f000 fde9 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33b6:	0000      	.short	0x0000
    33b8:	2000001c 	.word	0x2000001c
    33bc:	2000001f 	.word	0x2000001f
    33c0:	4001f508 	.word	0x4001f508
    33c4:	4000b000 	.word	0x4000b000
    33c8:	4001f504 	.word	0x4001f504

000033cc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    33cc:	4801      	ldr	r0, [pc, #4]	; (33d4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    33ce:	68c0      	ldr	r0, [r0, #12]
    33d0:	4770      	bx	lr
    33d2:	0000      	.short	0x0000
    33d4:	2000001c 	.word	0x2000001c

000033d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    33d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33dc:	4936      	ldr	r1, [pc, #216]	; (34b8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    33de:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    33e2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    33e6:	4d35      	ldr	r5, [pc, #212]	; (34bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    33e8:	1d0b      	adds	r3, r1, #4
    33ea:	2200      	movs	r2, #0
    33ec:	7828      	ldrb	r0, [r5, #0]
    33ee:	b168      	cbz	r0, 340c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    33f0:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    33f4:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    33f8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    33fc:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3400:	4b2f      	ldr	r3, [pc, #188]	; (34c0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3402:	681b      	ldr	r3, [r3, #0]
    3404:	f04f 0c01 	mov.w	ip, #1
    3408:	b99b      	cbnz	r3, 3432 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    340a:	e00c      	b.n	3426 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    340c:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    3410:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    3414:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    3418:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    341c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3420:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3424:	e7ec      	b.n	3400 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    3426:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    342a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    342e:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    3432:	2802      	cmp	r0, #2
    3434:	d004      	beq.n	3440 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    3436:	f240 211e 	movw	r1, #542	; 0x21e
    343a:	206c      	movs	r0, #108	; 0x6c
    343c:	f000 fda4 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3440:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    3444:	4c1f      	ldr	r4, [pc, #124]	; (34c4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3446:	1cc0      	adds	r0, r0, #3
    3448:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    344c:	68e3      	ldr	r3, [r4, #12]
    344e:	4e1e      	ldr	r6, [pc, #120]	; (34c8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3450:	4298      	cmp	r0, r3
    3452:	d00c      	beq.n	346e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3454:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    3458:	1bdf      	subs	r7, r3, r7
    345a:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    345e:	2f04      	cmp	r7, #4
    3460:	d305      	bcc.n	346e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3462:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    3466:	d202      	bcs.n	346e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3468:	f7ff feae 	bl	31c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    346c:	e01f      	b.n	34ae <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    346e:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    3472:	1a18      	subs	r0, r3, r0
    3474:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3478:	2802      	cmp	r0, #2
    347a:	d315      	bcc.n	34a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    347c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3480:	d212      	bcs.n	34a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3482:	4912      	ldr	r1, [pc, #72]	; (34cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    3484:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3488:	6008      	str	r0, [r1, #0]
    348a:	f8c4 c008 	str.w	ip, [r4, #8]
    348e:	7022      	strb	r2, [r4, #0]
    3490:	f8c6 c004 	str.w	ip, [r6, #4]
    3494:	f8c6 c00c 	str.w	ip, [r6, #12]
    3498:	0040      	lsls	r0, r0, #1
    349a:	1f09      	subs	r1, r1, #4
    349c:	6008      	str	r0, [r1, #0]
    349e:	2004      	movs	r0, #4
    34a0:	7068      	strb	r0, [r5, #1]
    34a2:	f885 c000 	strb.w	ip, [r5]
    34a6:	e002      	b.n	34ae <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    34a8:	f8c4 c008 	str.w	ip, [r4, #8]
    34ac:	7022      	strb	r2, [r4, #0]
    34ae:	68a0      	ldr	r0, [r4, #8]
    34b0:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    34b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34b8:	4000b000 	.word	0x4000b000
    34bc:	2000001f 	.word	0x2000001f
    34c0:	4000b148 	.word	0x4000b148
    34c4:	2000001c 	.word	0x2000001c
    34c8:	40008000 	.word	0x40008000
    34cc:	4001f508 	.word	0x4001f508

000034d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    34d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    34d4:	f8df c190 	ldr.w	ip, [pc, #400]	; 3668 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    34d8:	2600      	movs	r6, #0
    34da:	2701      	movs	r7, #1
    34dc:	f89c 4000 	ldrb.w	r4, [ip]
    34e0:	f89c c001 	ldrb.w	ip, [ip, #1]
    34e4:	f44f 75a0 	mov.w	r5, #320	; 0x140
    34e8:	2807      	cmp	r0, #7
    34ea:	d27b      	bcs.n	35e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    34ec:	e8df f000 	tbb	[pc, r0]
    34f0:	04040404 	.word	0x04040404
    34f4:	006c6c6c 	.word	0x006c6c6c
    34f8:	f8df 8170 	ldr.w	r8, [pc, #368]	; 366c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    34fc:	f8d8 900c 	ldr.w	r9, [r8, #12]
    3500:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    3504:	bf04      	itt	eq
    3506:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    350a:	f1b8 0f00 	cmpeq.w	r8, #0
    350e:	d002      	beq.n	3516 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3510:	2c02      	cmp	r4, #2
    3512:	d005      	beq.n	3520 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    3514:	e02c      	b.n	3570 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    3516:	f240 2151 	movw	r1, #593	; 0x251
    351a:	206c      	movs	r0, #108	; 0x6c
    351c:	f000 fd34 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3520:	f1ac 0804 	sub.w	r8, ip, #4
    3524:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3528:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    352c:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    3530:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    3534:	2500      	movs	r5, #0
    3536:	2c01      	cmp	r4, #1
    3538:	d002      	beq.n	3540 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    353a:	2c02      	cmp	r4, #2
    353c:	d00b      	beq.n	3556 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    353e:	e014      	b.n	356a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    3540:	f1bc 0f04 	cmp.w	ip, #4
    3544:	bf24      	itt	cs
    3546:	f8d8 9000 	ldrcs.w	r9, [r8]
    354a:	f1b9 0f00 	cmpcs.w	r9, #0
    354e:	bf08      	it	eq
    3550:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    3554:	e009      	b.n	356a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    3556:	f1bc 0f04 	cmp.w	ip, #4
    355a:	bf24      	itt	cs
    355c:	f8d8 9000 	ldrcs.w	r9, [r8]
    3560:	f1b9 0f00 	cmpcs.w	r9, #0
    3564:	bf08      	it	eq
    3566:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    356a:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    356e:	d1e1      	bne.n	3534 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    3570:	4c3f      	ldr	r4, [pc, #252]	; (3670 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    3572:	f100 0c10 	add.w	ip, r0, #16
    3576:	fa07 fc0c 	lsl.w	ip, r7, ip
    357a:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    357e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    3582:	b1c2      	cbz	r2, 35b6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    3584:	f04f 0840 	mov.w	r8, #64	; 0x40
    3588:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    358c:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3590:	44a0      	add	r8, r4
    3592:	f8c8 7000 	str.w	r7, [r8]
    3596:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    359a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    359e:	eba1 0000 	sub.w	r0, r1, r0
    35a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    35a6:	4282      	cmp	r2, r0
    35a8:	bf98      	it	ls
    35aa:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    35ae:	bf28      	it	cs
    35b0:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    35b4:	d250      	bcs.n	3658 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    35b6:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    35ba:	2b01      	cmp	r3, #1
    35bc:	bf08      	it	eq
    35be:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    35c2:	2001      	movs	r0, #1
    35c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    35c8:	b134      	cbz	r4, 35d8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    35ca:	4584      	cmp	ip, r0
    35cc:	d104      	bne.n	35d8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    35ce:	f44f 711d 	mov.w	r1, #628	; 0x274
    35d2:	206c      	movs	r0, #108	; 0x6c
    35d4:	f000 fcd8 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35d8:	f1a0 0c04 	sub.w	ip, r0, #4
    35dc:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    35e0:	2b01      	cmp	r3, #1
    35e2:	e000      	b.n	35e6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    35e4:	e03b      	b.n	365e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    35e6:	bf0c      	ite	eq
    35e8:	f04f 0801 	moveq.w	r8, #1
    35ec:	f04f 0800 	movne.w	r8, #0
    35f0:	2c03      	cmp	r4, #3
    35f2:	d304      	bcc.n	35fe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    35f4:	f240 114d 	movw	r1, #333	; 0x14d
    35f8:	206c      	movs	r0, #108	; 0x6c
    35fa:	f000 fcc5 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35fe:	f8df c074 	ldr.w	ip, [pc, #116]	; 3674 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    3602:	f104 0310 	add.w	r3, r4, #16
    3606:	fa07 f303 	lsl.w	r3, r7, r3
    360a:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    360e:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3612:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    3616:	f84c 6004 	str.w	r6, [ip, r4]
    361a:	1f00      	subs	r0, r0, #4
    361c:	b2c0      	uxtb	r0, r0
    361e:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3622:	b16a      	cbz	r2, 3640 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    3624:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    3628:	1b0c      	subs	r4, r1, r4
    362a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    362e:	42a2      	cmp	r2, r4
    3630:	bf98      	it	ls
    3632:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    3636:	bf24      	itt	cs
    3638:	2100      	movcs	r1, #0
    363a:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    363e:	d20b      	bcs.n	3658 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3640:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3644:	f1b8 0f00 	cmp.w	r8, #0
    3648:	bf18      	it	ne
    364a:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    364e:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3652:	2001      	movs	r0, #1
    3654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3658:	2000      	movs	r0, #0
    365a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    365e:	f240 2179 	movw	r1, #633	; 0x279
    3662:	206c      	movs	r0, #108	; 0x6c
    3664:	f000 fc90 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3668:	2000001f 	.word	0x2000001f
    366c:	2000001c 	.word	0x2000001c
    3670:	40008000 	.word	0x40008000
    3674:	4000b000 	.word	0x4000b000

00003678 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    367c:	2600      	movs	r6, #0
    367e:	f44f 77a0 	mov.w	r7, #320	; 0x140
    3682:	f04f 0801 	mov.w	r8, #1
    3686:	2807      	cmp	r0, #7
    3688:	d251      	bcs.n	372e <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    368a:	e8df f000 	tbb	[pc, r0]
    368e:	0404      	.short	0x0404
    3690:	19190404 	.word	0x19190404
    3694:	0019      	.short	0x0019
    3696:	f100 0110 	add.w	r1, r0, #16
    369a:	fa08 f201 	lsl.w	r2, r8, r1
    369e:	4926      	ldr	r1, [pc, #152]	; (3738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    36a0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    36a4:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    36a8:	2200      	movs	r2, #0
    36aa:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    36ae:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    36b2:	508e      	str	r6, [r1, r2]
    36b4:	4921      	ldr	r1, [pc, #132]	; (373c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    36b6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    36ba:	9000      	str	r0, [sp, #0]
    36bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    36c0:	4d1f      	ldr	r5, [pc, #124]	; (3740 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    36c2:	1f01      	subs	r1, r0, #4
    36c4:	b2cc      	uxtb	r4, r1
    36c6:	7829      	ldrb	r1, [r5, #0]
    36c8:	b179      	cbz	r1, 36ea <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    36ca:	786a      	ldrb	r2, [r5, #1]
    36cc:	4282      	cmp	r2, r0
    36ce:	d10c      	bne.n	36ea <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    36d0:	4a1c      	ldr	r2, [pc, #112]	; (3744 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    36d2:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    36d6:	6010      	str	r0, [r2, #0]
    36d8:	2901      	cmp	r1, #1
    36da:	bf08      	it	eq
    36dc:	f7ff fd3c 	bleq	3158 <MPSL_IRQ_TIMER0_Handler+0x100>
    36e0:	702e      	strb	r6, [r5, #0]
    36e2:	4919      	ldr	r1, [pc, #100]	; (3748 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    36e4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    36e8:	60c8      	str	r0, [r1, #12]
    36ea:	f104 0010 	add.w	r0, r4, #16
    36ee:	fa08 f100 	lsl.w	r1, r8, r0
    36f2:	4816      	ldr	r0, [pc, #88]	; (374c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    36f4:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    36f8:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    36fc:	00a1      	lsls	r1, r4, #2
    36fe:	4401      	add	r1, r0
    3700:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    3704:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    3708:	1a89      	subs	r1, r1, r2
    370a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    370e:	2902      	cmp	r1, #2
    3710:	d307      	bcc.n	3722 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    3712:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    3716:	2100      	movs	r1, #0
    3718:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    371c:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    3720:	5046      	str	r6, [r0, r1]
    3722:	480b      	ldr	r0, [pc, #44]	; (3750 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3724:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3728:	9000      	str	r0, [sp, #0]
    372a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    372e:	f240 21f1 	movw	r1, #753	; 0x2f1
    3732:	206c      	movs	r0, #108	; 0x6c
    3734:	f000 fc28 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3738:	40008000 	.word	0x40008000
    373c:	40008140 	.word	0x40008140
    3740:	2000001f 	.word	0x2000001f
    3744:	4001f508 	.word	0x4001f508
    3748:	2000001c 	.word	0x2000001c
    374c:	4000b000 	.word	0x4000b000
    3750:	4000b140 	.word	0x4000b140

00003754 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3754:	4920      	ldr	r1, [pc, #128]	; (37d8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3756:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    375a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    375e:	481f      	ldr	r0, [pc, #124]	; (37dc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3760:	1d0a      	adds	r2, r1, #4
    3762:	7803      	ldrb	r3, [r0, #0]
    3764:	2000      	movs	r0, #0
    3766:	b15b      	cbz	r3, 3780 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    3768:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    376c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3770:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3774:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3778:	4919      	ldr	r1, [pc, #100]	; (37e0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    377a:	6809      	ldr	r1, [r1, #0]
    377c:	b999      	cbnz	r1, 37a6 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    377e:	e00c      	b.n	379a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    3780:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3784:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3788:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    378c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3790:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3794:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3798:	e7ee      	b.n	3778 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    379a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    379e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    37a2:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    37a6:	490f      	ldr	r1, [pc, #60]	; (37e4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    37a8:	f04f 32ff 	mov.w	r2, #4294967295
    37ac:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    37b0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    37b4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    37b8:	1d0a      	adds	r2, r1, #4
    37ba:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    37be:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    37c2:	1d12      	adds	r2, r2, #4
    37c4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    37c8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    37cc:	1d12      	adds	r2, r2, #4
    37ce:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    37d2:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    37d6:	4770      	bx	lr
    37d8:	4000b000 	.word	0x4000b000
    37dc:	2000001f 	.word	0x2000001f
    37e0:	4000b148 	.word	0x4000b148
    37e4:	40008000 	.word	0x40008000

000037e8 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    37e8:	4808      	ldr	r0, [pc, #32]	; (380c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    37ea:	f990 0002 	ldrsb.w	r0, [r0, #2]
    37ee:	2800      	cmp	r0, #0
    37f0:	bfb8      	it	lt
    37f2:	4770      	bxlt	lr
    37f4:	f000 011f 	and.w	r1, r0, #31
    37f8:	2201      	movs	r2, #1
    37fa:	fa02 f101 	lsl.w	r1, r2, r1
    37fe:	0940      	lsrs	r0, r0, #5
    3800:	0080      	lsls	r0, r0, #2
    3802:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3806:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    380a:	4770      	bx	lr
    380c:	2000001c 	.word	0x2000001c

00003810 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3810:	b510      	push	{r4, lr}
    3812:	2807      	cmp	r0, #7
    3814:	d20d      	bcs.n	3832 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3816:	e8df f000 	tbb	[pc, r0]
    381a:	0404      	.short	0x0404
    381c:	06060404 	.word	0x06060404
    3820:	0006      	.short	0x0006
    3822:	4906      	ldr	r1, [pc, #24]	; (383c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3824:	e002      	b.n	382c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3826:	1f00      	subs	r0, r0, #4
    3828:	4905      	ldr	r1, [pc, #20]	; (3840 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    382a:	b2c0      	uxtb	r0, r0
    382c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3830:	bd10      	pop	{r4, pc}
    3832:	f240 219d 	movw	r1, #669	; 0x29d
    3836:	206c      	movs	r0, #108	; 0x6c
    3838:	f000 fba6 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    383c:	40008140 	.word	0x40008140
    3840:	4000b140 	.word	0x4000b140

00003844 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3844:	b510      	push	{r4, lr}
    3846:	481c      	ldr	r0, [pc, #112]	; (38b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3848:	2400      	movs	r4, #0
    384a:	2104      	movs	r1, #4
    384c:	7004      	strb	r4, [r0, #0]
    384e:	1ec0      	subs	r0, r0, #3
    3850:	7001      	strb	r1, [r0, #0]
    3852:	0589      	lsls	r1, r1, #22
    3854:	60c1      	str	r1, [r0, #12]
    3856:	f7ff fc7f 	bl	3158 <MPSL_IRQ_TIMER0_Handler+0x100>
    385a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    385e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3862:	f04f 0c01 	mov.w	ip, #1
    3866:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    386a:	f3bf 8f4f 	dsb	sy
    386e:	f3bf 8f6f 	isb	sy
    3872:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    3876:	4811      	ldr	r0, [pc, #68]	; (38bc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    3878:	f8c0 c004 	str.w	ip, [r0, #4]
    387c:	f8c0 c008 	str.w	ip, [r0, #8]
    3880:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3884:	2900      	cmp	r1, #0
    3886:	d1fb      	bne.n	3880 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    3888:	1e49      	subs	r1, r1, #1
    388a:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    388e:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3892:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3896:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    389a:	4909      	ldr	r1, [pc, #36]	; (38c0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    389c:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    38a0:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    38a4:	1d09      	adds	r1, r1, #4
    38a6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    38aa:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    38ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    38b2:	f8c0 c000 	str.w	ip, [r0]
    38b6:	bd10      	pop	{r4, pc}
    38b8:	2000001f 	.word	0x2000001f
    38bc:	4000b000 	.word	0x4000b000
    38c0:	4000b004 	.word	0x4000b004

000038c4 <MPSL_IRQ_CLOCK_Handler>:
    38c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38c8:	4c16      	ldr	r4, [pc, #88]	; (3924 <MPSL_IRQ_CLOCK_Handler+0x60>)
    38ca:	7a60      	ldrb	r0, [r4, #9]
    38cc:	2800      	cmp	r0, #0
    38ce:	d027      	beq.n	3920 <MPSL_IRQ_CLOCK_Handler+0x5c>
    38d0:	f44f 7180 	mov.w	r1, #256	; 0x100
    38d4:	058d      	lsls	r5, r1, #22
    38d6:	4628      	mov	r0, r5
    38d8:	f007 fbb5 	bl	b046 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    38dc:	4680      	mov	r8, r0
    38de:	f44f 7182 	mov.w	r1, #260	; 0x104
    38e2:	4628      	mov	r0, r5
    38e4:	f007 fbaf 	bl	b046 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    38e8:	2600      	movs	r6, #0
    38ea:	4607      	mov	r7, r0
    38ec:	f1b8 0f00 	cmp.w	r8, #0
    38f0:	d009      	beq.n	3906 <MPSL_IRQ_CLOCK_Handler+0x42>
    38f2:	2001      	movs	r0, #1
    38f4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    38f8:	7920      	ldrb	r0, [r4, #4]
    38fa:	b120      	cbz	r0, 3906 <MPSL_IRQ_CLOCK_Handler+0x42>
    38fc:	7126      	strb	r6, [r4, #4]
    38fe:	69e0      	ldr	r0, [r4, #28]
    3900:	b108      	cbz	r0, 3906 <MPSL_IRQ_CLOCK_Handler+0x42>
    3902:	4780      	blx	r0
    3904:	61e6      	str	r6, [r4, #28]
    3906:	b137      	cbz	r7, 3916 <MPSL_IRQ_CLOCK_Handler+0x52>
    3908:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    390c:	2002      	movs	r0, #2
    390e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3912:	f000 fa6d 	bl	3df0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3916:	4640      	mov	r0, r8
    3918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    391c:	f000 b85a 	b.w	39d4 <MPSL_IRQ_CLOCK_Handler+0x110>
    3920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3924:	2000002c 	.word	0x2000002c
    3928:	b510      	push	{r4, lr}
    392a:	f007 fc36 	bl	b19a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    392e:	b930      	cbnz	r0, 393e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3930:	f007 fc54 	bl	b1dc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3934:	b918      	cbnz	r0, 393e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3936:	f007 fc87 	bl	b248 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    393a:	2800      	cmp	r0, #0
    393c:	d002      	beq.n	3944 <MPSL_IRQ_CLOCK_Handler+0x80>
    393e:	4902      	ldr	r1, [pc, #8]	; (3948 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3940:	2002      	movs	r0, #2
    3942:	6008      	str	r0, [r1, #0]
    3944:	bd10      	pop	{r4, pc}
    3946:	0000      	.short	0x0000
    3948:	40000c34 	.word	0x40000c34
    394c:	b570      	push	{r4, r5, r6, lr}
    394e:	f000 f987 	bl	3c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3952:	f000 faa1 	bl	3e98 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3956:	4c09      	ldr	r4, [pc, #36]	; (397c <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3958:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    395c:	b130      	cbz	r0, 396c <MPSL_IRQ_CLOCK_Handler+0xa8>
    395e:	f7ff ffe3 	bl	3928 <MPSL_IRQ_CLOCK_Handler+0x64>
    3962:	2001      	movs	r0, #1
    3964:	6128      	str	r0, [r5, #16]
    3966:	2004      	movs	r0, #4
    3968:	72a0      	strb	r0, [r4, #10]
    396a:	e004      	b.n	3976 <MPSL_IRQ_CLOCK_Handler+0xb2>
    396c:	2003      	movs	r0, #3
    396e:	72a0      	strb	r0, [r4, #10]
    3970:	2001      	movs	r0, #1
    3972:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3976:	2000      	movs	r0, #0
    3978:	71e0      	strb	r0, [r4, #7]
    397a:	bd70      	pop	{r4, r5, r6, pc}
    397c:	2000002c 	.word	0x2000002c
    3980:	b570      	push	{r4, r5, r6, lr}
    3982:	4c13      	ldr	r4, [pc, #76]	; (39d0 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3984:	79a0      	ldrb	r0, [r4, #6]
    3986:	b1f0      	cbz	r0, 39c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    3988:	2801      	cmp	r0, #1
    398a:	d003      	beq.n	3994 <MPSL_IRQ_CLOCK_Handler+0xd0>
    398c:	79e1      	ldrb	r1, [r4, #7]
    398e:	1e40      	subs	r0, r0, #1
    3990:	4281      	cmp	r1, r0
    3992:	da18      	bge.n	39c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    3994:	f000 fa80 	bl	3e98 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3998:	4605      	mov	r5, r0
    399a:	f000 fb65 	bl	4068 <mpsl_temperature_get>
    399e:	79a1      	ldrb	r1, [r4, #6]
    39a0:	2901      	cmp	r1, #1
    39a2:	d902      	bls.n	39aa <MPSL_IRQ_CLOCK_Handler+0xe6>
    39a4:	79e1      	ldrb	r1, [r4, #7]
    39a6:	1c49      	adds	r1, r1, #1
    39a8:	71e1      	strb	r1, [r4, #7]
    39aa:	b10d      	cbz	r5, 39b0 <MPSL_IRQ_CLOCK_Handler+0xec>
    39ac:	6961      	ldr	r1, [r4, #20]
    39ae:	e000      	b.n	39b2 <MPSL_IRQ_CLOCK_Handler+0xee>
    39b0:	6921      	ldr	r1, [r4, #16]
    39b2:	1a41      	subs	r1, r0, r1
    39b4:	2902      	cmp	r1, #2
    39b6:	da02      	bge.n	39be <MPSL_IRQ_CLOCK_Handler+0xfa>
    39b8:	f111 0f02 	cmn.w	r1, #2
    39bc:	dc07      	bgt.n	39ce <MPSL_IRQ_CLOCK_Handler+0x10a>
    39be:	b10d      	cbz	r5, 39c4 <MPSL_IRQ_CLOCK_Handler+0x100>
    39c0:	6160      	str	r0, [r4, #20]
    39c2:	e000      	b.n	39c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    39c4:	6120      	str	r0, [r4, #16]
    39c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    39ca:	f7ff bfbf 	b.w	394c <MPSL_IRQ_CLOCK_Handler+0x88>
    39ce:	bd70      	pop	{r4, r5, r6, pc}
    39d0:	2000002c 	.word	0x2000002c
    39d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39d8:	4606      	mov	r6, r0
    39da:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    39de:	f44f 7186 	mov.w	r1, #268	; 0x10c
    39e2:	4628      	mov	r0, r5
    39e4:	f007 fb2f 	bl	b046 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    39e8:	4680      	mov	r8, r0
    39ea:	f44f 7188 	mov.w	r1, #272	; 0x110
    39ee:	4628      	mov	r0, r5
    39f0:	f007 fb29 	bl	b046 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    39f4:	4c27      	ldr	r4, [pc, #156]	; (3a94 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    39f6:	4682      	mov	sl, r0
    39f8:	7827      	ldrb	r7, [r4, #0]
    39fa:	f104 0008 	add.w	r0, r4, #8
    39fe:	f007 fb96 	bl	b12e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3a02:	b110      	cbz	r0, 3a0a <MPSL_IRQ_CLOCK_Handler+0x146>
    3a04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3a08:	e016      	b.n	3a38 <MPSL_IRQ_CLOCK_Handler+0x174>
    3a0a:	f04f 0901 	mov.w	r9, #1
    3a0e:	b146      	cbz	r6, 3a22 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3a10:	7aa0      	ldrb	r0, [r4, #10]
    3a12:	2803      	cmp	r0, #3
    3a14:	d105      	bne.n	3a22 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3a16:	2004      	movs	r0, #4
    3a18:	72a0      	strb	r0, [r4, #10]
    3a1a:	f7ff ff85 	bl	3928 <MPSL_IRQ_CLOCK_Handler+0x64>
    3a1e:	f8c5 9010 	str.w	r9, [r5, #16]
    3a22:	2600      	movs	r6, #0
    3a24:	f1b8 0f00 	cmp.w	r8, #0
    3a28:	d018      	beq.n	3a5c <MPSL_IRQ_CLOCK_Handler+0x198>
    3a2a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3a2e:	7aa0      	ldrb	r0, [r4, #10]
    3a30:	2804      	cmp	r0, #4
    3a32:	d004      	beq.n	3a3e <MPSL_IRQ_CLOCK_Handler+0x17a>
    3a34:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3a38:	206d      	movs	r0, #109	; 0x6d
    3a3a:	f000 faa5 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a3e:	f007 fbac 	bl	b19a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3a42:	b928      	cbnz	r0, 3a50 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3a44:	f007 fbca 	bl	b1dc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a48:	b910      	cbnz	r0, 3a50 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3a4a:	f007 fbfd 	bl	b248 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3a4e:	b108      	cbz	r0, 3a54 <MPSL_IRQ_CLOCK_Handler+0x190>
    3a50:	4811      	ldr	r0, [pc, #68]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a52:	6006      	str	r6, [r0, #0]
    3a54:	2002      	movs	r0, #2
    3a56:	72a0      	strb	r0, [r4, #10]
    3a58:	f000 f8e6 	bl	3c28 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3a5c:	f1ba 0f00 	cmp.w	sl, #0
    3a60:	d008      	beq.n	3a74 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3a62:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3a66:	7aa0      	ldrb	r0, [r4, #10]
    3a68:	2802      	cmp	r0, #2
    3a6a:	d101      	bne.n	3a70 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3a6c:	f7ff ff88 	bl	3980 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3a70:	f8c5 9014 	str.w	r9, [r5, #20]
    3a74:	b13f      	cbz	r7, 3a86 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3a76:	7026      	strb	r6, [r4, #0]
    3a78:	7aa0      	ldrb	r0, [r4, #10]
    3a7a:	2802      	cmp	r0, #2
    3a7c:	d101      	bne.n	3a82 <MPSL_IRQ_CLOCK_Handler+0x1be>
    3a7e:	f7ff ff65 	bl	394c <MPSL_IRQ_CLOCK_Handler+0x88>
    3a82:	f000 f8d1 	bl	3c28 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3a86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a8a:	4802      	ldr	r0, [pc, #8]	; (3a94 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3a8c:	3008      	adds	r0, #8
    3a8e:	f007 bb65 	b.w	b15c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3a92:	0000      	.short	0x0000
    3a94:	2000002c 	.word	0x2000002c
    3a98:	40000c34 	.word	0x40000c34
    3a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3aa0:	4c5c      	ldr	r4, [pc, #368]	; (3c14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x17c>)
    3aa2:	f04f 0800 	mov.w	r8, #0
    3aa6:	4606      	mov	r6, r0
    3aa8:	f8c4 8018 	str.w	r8, [r4, #24]
    3aac:	7843      	ldrb	r3, [r0, #1]
    3aae:	7882      	ldrb	r2, [r0, #2]
    3ab0:	7800      	ldrb	r0, [r0, #0]
    3ab2:	72e0      	strb	r0, [r4, #11]
    3ab4:	7163      	strb	r3, [r4, #5]
    3ab6:	2701      	movs	r7, #1
    3ab8:	71a2      	strb	r2, [r4, #6]
    3aba:	07bd      	lsls	r5, r7, #30
    3abc:	f884 8007 	strb.w	r8, [r4, #7]
    3ac0:	2805      	cmp	r0, #5
    3ac2:	d224      	bcs.n	3b0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x76>
    3ac4:	e8df f000 	tbb	[pc, r0]
    3ac8:	1f05030f 	.word	0x1f05030f
    3acc:	0021      	.short	0x0021
    3ace:	61a7      	str	r7, [r4, #24]
    3ad0:	e009      	b.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3ad2:	f000 f8c5 	bl	3c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3ad6:	2101      	movs	r1, #1
    3ad8:	4628      	mov	r0, r5
    3ada:	f007 fab9 	bl	b050 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3ade:	2800      	cmp	r0, #0
    3ae0:	d0f9      	beq.n	3ad6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e>
    3ae2:	2002      	movs	r0, #2
    3ae4:	61a0      	str	r0, [r4, #24]
    3ae6:	f007 fadf 	bl	b0a8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3aea:	b1b0      	cbz	r0, 3b1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82>
    3aec:	f000 f9ee 	bl	3ecc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3af0:	7e21      	ldrb	r1, [r4, #24]
    3af2:	f001 0103 	and.w	r1, r1, #3
    3af6:	4288      	cmp	r0, r1
    3af8:	d10f      	bne.n	3b1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82>
    3afa:	79b0      	ldrb	r0, [r6, #6]
    3afc:	b150      	cbz	r0, 3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
    3afe:	2002      	movs	r0, #2
    3b00:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3b04:	e06a      	b.n	3bdc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x144>
    3b06:	4844      	ldr	r0, [pc, #272]	; (3c18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x180>)
    3b08:	e7ec      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
    3b0a:	4844      	ldr	r0, [pc, #272]	; (3c1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x184>)
    3b0c:	e7ea      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
    3b0e:	f240 312d 	movw	r1, #813	; 0x32d
    3b12:	e049      	b.n	3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>
    3b14:	f000 f9ae 	bl	3e74 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3b18:	e060      	b.n	3bdc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x144>
    3b1a:	60ef      	str	r7, [r5, #12]
    3b1c:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3b20:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3b24:	69a0      	ldr	r0, [r4, #24]
    3b26:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3b2a:	f007 fb22 	bl	b172 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b2e:	b940      	cbnz	r0, 3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
    3b30:	f007 fb29 	bl	b186 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b34:	b928      	cbnz	r0, 3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
    3b36:	f007 fb3d 	bl	b1b4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b3a:	b910      	cbnz	r0, 3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
    3b3c:	f007 fb4e 	bl	b1dc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b40:	b138      	cbz	r0, 3b52 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xba>
    3b42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3b46:	4836      	ldr	r0, [pc, #216]	; (3c20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x188>)
    3b48:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3b4c:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3b50:	6001      	str	r1, [r0, #0]
    3b52:	f007 fb0e 	bl	b172 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b56:	b940      	cbnz	r0, 3b6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd2>
    3b58:	f007 fb15 	bl	b186 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b5c:	b928      	cbnz	r0, 3b6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd2>
    3b5e:	f007 fb29 	bl	b1b4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b62:	b910      	cbnz	r0, 3b6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd2>
    3b64:	f007 fb3a 	bl	b1dc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b68:	b110      	cbz	r0, 3b70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd8>
    3b6a:	482d      	ldr	r0, [pc, #180]	; (3c20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x188>)
    3b6c:	3010      	adds	r0, #16
    3b6e:	6007      	str	r7, [r0, #0]
    3b70:	60af      	str	r7, [r5, #8]
    3b72:	2002      	movs	r0, #2
    3b74:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3b78:	79b0      	ldrb	r0, [r6, #6]
    3b7a:	bb78      	cbnz	r0, 3bdc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x144>
    3b7c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3b80:	f010 0f02 	tst.w	r0, #2
    3b84:	d00e      	beq.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
    3b86:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3c24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18c>
    3b8a:	f8d9 1000 	ldr.w	r1, [r9]
    3b8e:	43c9      	mvns	r1, r1
    3b90:	f341 1700 	sbfx	r7, r1, #4, #1
    3b94:	f8d9 1000 	ldr.w	r1, [r9]
    3b98:	f041 0110 	orr.w	r1, r1, #16
    3b9c:	f8c9 1000 	str.w	r1, [r9]
    3ba0:	1c7f      	adds	r7, r7, #1
    3ba2:	e007      	b.n	3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>
    3ba4:	f240 21ee 	movw	r1, #750	; 0x2ee
    3ba8:	206d      	movs	r0, #109	; 0x6d
    3baa:	f000 f9ed 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bae:	bf00      	nop
    3bb0:	f000 fb10 	bl	41d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3bb4:	4651      	mov	r1, sl
    3bb6:	4628      	mov	r0, r5
    3bb8:	f007 fa45 	bl	b046 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3bbc:	2800      	cmp	r0, #0
    3bbe:	d0f7      	beq.n	3bb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x118>
    3bc0:	f000 f958 	bl	3e74 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3bc4:	b92f      	cbnz	r7, 3bd2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13a>
    3bc6:	f8d9 1000 	ldr.w	r1, [r9]
    3bca:	f021 0110 	bic.w	r1, r1, #16
    3bce:	f8c9 1000 	str.w	r1, [r9]
    3bd2:	2002      	movs	r0, #2
    3bd4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3bd8:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3bdc:	79a0      	ldrb	r0, [r4, #6]
    3bde:	b170      	cbz	r0, 3bfe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x166>
    3be0:	7830      	ldrb	r0, [r6, #0]
    3be2:	b960      	cbnz	r0, 3bfe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x166>
    3be4:	f000 f958 	bl	3e98 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3be8:	4606      	mov	r6, r0
    3bea:	f000 fa3d 	bl	4068 <mpsl_temperature_get>
    3bee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3bf2:	b116      	cbz	r6, 3bfa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x162>
    3bf4:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3bf8:	e001      	b.n	3bfe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x166>
    3bfa:	e9c4 0204 	strd	r0, r2, [r4, #16]
    3bfe:	2101      	movs	r1, #1
    3c00:	4628      	mov	r0, r5
    3c02:	f007 fa25 	bl	b050 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3c06:	b108      	cbz	r0, 3c0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x174>
    3c08:	f000 f940 	bl	3e8c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3c0c:	f884 800a 	strb.w	r8, [r4, #10]
    3c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c14:	2000002c 	.word	0x2000002c
    3c18:	00020001 	.word	0x00020001
    3c1c:	00030001 	.word	0x00030001
    3c20:	4000053c 	.word	0x4000053c
    3c24:	e000ed10 	.word	0xe000ed10

00003c28 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3c28:	b510      	push	{r4, lr}
    3c2a:	f3ef 8410 	mrs	r4, PRIMASK
    3c2e:	b672      	cpsid	i
    3c30:	480a      	ldr	r0, [pc, #40]	; (3c5c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3c32:	7841      	ldrb	r1, [r0, #1]
    3c34:	b129      	cbz	r1, 3c42 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3c36:	7841      	ldrb	r1, [r0, #1]
    3c38:	1e49      	subs	r1, r1, #1
    3c3a:	7041      	strb	r1, [r0, #1]
    3c3c:	7841      	ldrb	r1, [r0, #1]
    3c3e:	b129      	cbz	r1, 3c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3c40:	e008      	b.n	3c54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c42:	f240 110d 	movw	r1, #269	; 0x10d
    3c46:	206d      	movs	r0, #109	; 0x6d
    3c48:	f000 f99e 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c4c:	7880      	ldrb	r0, [r0, #2]
    3c4e:	b908      	cbnz	r0, 3c54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c50:	f000 f930 	bl	3eb4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3c54:	2c00      	cmp	r4, #0
    3c56:	d100      	bne.n	3c5a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3c58:	b662      	cpsie	i
    3c5a:	bd10      	pop	{r4, pc}
    3c5c:	2000002c 	.word	0x2000002c

00003c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3c60:	b510      	push	{r4, lr}
    3c62:	f3ef 8410 	mrs	r4, PRIMASK
    3c66:	b672      	cpsid	i
    3c68:	4806      	ldr	r0, [pc, #24]	; (3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3c6a:	7841      	ldrb	r1, [r0, #1]
    3c6c:	1c49      	adds	r1, r1, #1
    3c6e:	7041      	strb	r1, [r0, #1]
    3c70:	7840      	ldrb	r0, [r0, #1]
    3c72:	2801      	cmp	r0, #1
    3c74:	d101      	bne.n	3c7a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3c76:	f007 fa02 	bl	b07e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3c7a:	2c00      	cmp	r4, #0
    3c7c:	d100      	bne.n	3c80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3c7e:	b662      	cpsie	i
    3c80:	bd10      	pop	{r4, pc}
    3c82:	0000      	.short	0x0000
    3c84:	2000002c 	.word	0x2000002c

00003c88 <mpsl_clock_hfclk_release>:
    3c88:	4805      	ldr	r0, [pc, #20]	; (3ca0 <mpsl_clock_hfclk_release+0x18>)
    3c8a:	b510      	push	{r4, lr}
    3c8c:	78c1      	ldrb	r1, [r0, #3]
    3c8e:	b121      	cbz	r1, 3c9a <mpsl_clock_hfclk_release+0x12>
    3c90:	2100      	movs	r1, #0
    3c92:	7101      	strb	r1, [r0, #4]
    3c94:	70c1      	strb	r1, [r0, #3]
    3c96:	f7ff ffc7 	bl	3c28 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3c9a:	2000      	movs	r0, #0
    3c9c:	bd10      	pop	{r4, pc}
    3c9e:	0000      	.short	0x0000
    3ca0:	2000002c 	.word	0x2000002c

00003ca4 <mpsl_clock_hfclk_request>:
    3ca4:	b570      	push	{r4, r5, r6, lr}
    3ca6:	4c0c      	ldr	r4, [pc, #48]	; (3cd8 <mpsl_clock_hfclk_request+0x34>)
    3ca8:	78e1      	ldrb	r1, [r4, #3]
    3caa:	b961      	cbnz	r1, 3cc6 <mpsl_clock_hfclk_request+0x22>
    3cac:	2501      	movs	r5, #1
    3cae:	70e5      	strb	r5, [r4, #3]
    3cb0:	61e0      	str	r0, [r4, #28]
    3cb2:	f7ff ffd5 	bl	3c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3cb6:	f000 f8ef 	bl	3e98 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3cba:	b130      	cbz	r0, 3cca <mpsl_clock_hfclk_request+0x26>
    3cbc:	69e0      	ldr	r0, [r4, #28]
    3cbe:	b110      	cbz	r0, 3cc6 <mpsl_clock_hfclk_request+0x22>
    3cc0:	4780      	blx	r0
    3cc2:	2000      	movs	r0, #0
    3cc4:	61e0      	str	r0, [r4, #28]
    3cc6:	2000      	movs	r0, #0
    3cc8:	bd70      	pop	{r4, r5, r6, pc}
    3cca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3cce:	7125      	strb	r5, [r4, #4]
    3cd0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3cd4:	e7f7      	b.n	3cc6 <mpsl_clock_hfclk_request+0x22>
    3cd6:	0000      	.short	0x0000
    3cd8:	2000002c 	.word	0x2000002c

00003cdc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3cdc:	f3ef 8010 	mrs	r0, PRIMASK
    3ce0:	b672      	cpsid	i
    3ce2:	4904      	ldr	r1, [pc, #16]	; (3cf4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3ce4:	788a      	ldrb	r2, [r1, #2]
    3ce6:	1c52      	adds	r2, r2, #1
    3ce8:	708a      	strb	r2, [r1, #2]
    3cea:	2800      	cmp	r0, #0
    3cec:	d100      	bne.n	3cf0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    3cee:	b662      	cpsie	i
    3cf0:	4770      	bx	lr
    3cf2:	0000      	.short	0x0000
    3cf4:	2000002c 	.word	0x2000002c

00003cf8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3cf8:	b510      	push	{r4, lr}
    3cfa:	f3ef 8410 	mrs	r4, PRIMASK
    3cfe:	b672      	cpsid	i
    3d00:	480a      	ldr	r0, [pc, #40]	; (3d2c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3d02:	7881      	ldrb	r1, [r0, #2]
    3d04:	b129      	cbz	r1, 3d12 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3d06:	7881      	ldrb	r1, [r0, #2]
    3d08:	1e49      	subs	r1, r1, #1
    3d0a:	7081      	strb	r1, [r0, #2]
    3d0c:	7841      	ldrb	r1, [r0, #1]
    3d0e:	b129      	cbz	r1, 3d1c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3d10:	e008      	b.n	3d24 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3d12:	f240 1125 	movw	r1, #293	; 0x125
    3d16:	206d      	movs	r0, #109	; 0x6d
    3d18:	f000 f936 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d1c:	7880      	ldrb	r0, [r0, #2]
    3d1e:	b908      	cbnz	r0, 3d24 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3d20:	f000 f8c8 	bl	3eb4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3d24:	2c00      	cmp	r4, #0
    3d26:	d100      	bne.n	3d2a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3d28:	b662      	cpsie	i
    3d2a:	bd10      	pop	{r4, pc}
    3d2c:	2000002c 	.word	0x2000002c

00003d30 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d34:	0004      	movs	r4, r0
    3d36:	f06f 0015 	mvn.w	r0, #21
    3d3a:	d03c      	beq.n	3db6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3d3c:	7821      	ldrb	r1, [r4, #0]
    3d3e:	2904      	cmp	r1, #4
    3d40:	d839      	bhi.n	3db6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3d42:	2900      	cmp	r1, #0
    3d44:	7861      	ldrb	r1, [r4, #1]
    3d46:	d038      	beq.n	3dba <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3d48:	2900      	cmp	r1, #0
    3d4a:	d134      	bne.n	3db6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3d4c:	78a1      	ldrb	r1, [r4, #2]
    3d4e:	2900      	cmp	r1, #0
    3d50:	d131      	bne.n	3db6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3d52:	2000      	movs	r0, #0
    3d54:	f007 f942 	bl	afdc <MPSL_IRQ_RADIO_Handler+0x1e>
    3d58:	2000      	movs	r0, #0
    3d5a:	f007 f932 	bl	afc2 <MPSL_IRQ_RADIO_Handler+0x4>
    3d5e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3d62:	f04f 31ff 	mov.w	r1, #4294967295
    3d66:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3d6a:	2600      	movs	r6, #0
    3d6c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3d70:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3d74:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3d78:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3d7c:	4f14      	ldr	r7, [pc, #80]	; (3dd0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3d7e:	707e      	strb	r6, [r7, #1]
    3d80:	88a0      	ldrh	r0, [r4, #4]
    3d82:	81b8      	strh	r0, [r7, #12]
    3d84:	f007 f972 	bl	b06c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3d88:	2501      	movs	r5, #1
    3d8a:	b108      	cbz	r0, 3d90 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3d8c:	70fd      	strb	r5, [r7, #3]
    3d8e:	707d      	strb	r5, [r7, #1]
    3d90:	2101      	movs	r1, #1
    3d92:	4640      	mov	r0, r8
    3d94:	f007 f95c 	bl	b050 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3d98:	b108      	cbz	r0, 3d9e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3d9a:	f000 f877 	bl	3e8c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3d9e:	4620      	mov	r0, r4
    3da0:	f7ff fe7c 	bl	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3da4:	727d      	strb	r5, [r7, #9]
    3da6:	2000      	movs	r0, #0
    3da8:	f007 f90b 	bl	afc2 <MPSL_IRQ_RADIO_Handler+0x4>
    3dac:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3db0:	4630      	mov	r0, r6
    3db2:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3dba:	2900      	cmp	r1, #0
    3dbc:	d0fb      	beq.n	3db6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3dbe:	2920      	cmp	r1, #32
    3dc0:	d8f9      	bhi.n	3db6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3dc2:	78a1      	ldrb	r1, [r4, #2]
    3dc4:	2921      	cmp	r1, #33	; 0x21
    3dc6:	d8f6      	bhi.n	3db6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3dc8:	2901      	cmp	r1, #1
    3dca:	d1c2      	bne.n	3d52 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3dcc:	e7f3      	b.n	3db6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3dce:	0000      	.short	0x0000
    3dd0:	2000002c 	.word	0x2000002c

00003dd4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3dd4:	4801      	ldr	r0, [pc, #4]	; (3ddc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3dd6:	8980      	ldrh	r0, [r0, #12]
    3dd8:	4770      	bx	lr
    3dda:	0000      	.short	0x0000
    3ddc:	2000002c 	.word	0x2000002c

00003de0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3de0:	4802      	ldr	r0, [pc, #8]	; (3dec <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3de2:	7a80      	ldrb	r0, [r0, #10]
    3de4:	2800      	cmp	r0, #0
    3de6:	d000      	beq.n	3dea <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3de8:	2001      	movs	r0, #1
    3dea:	4770      	bx	lr
    3dec:	2000002c 	.word	0x2000002c

00003df0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3df2:	4d1f      	ldr	r5, [pc, #124]	; (3e70 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3df4:	7ae8      	ldrb	r0, [r5, #11]
    3df6:	2800      	cmp	r0, #0
    3df8:	d10f      	bne.n	3e1a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3dfa:	7e28      	ldrb	r0, [r5, #24]
    3dfc:	f000 0003 	and.w	r0, r0, #3
    3e00:	f007 f942 	bl	b088 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3e04:	2800      	cmp	r0, #0
    3e06:	d008      	beq.n	3e1a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e08:	f3ef 8110 	mrs	r1, PRIMASK
    3e0c:	b672      	cpsid	i
    3e0e:	f7ff ffe7 	bl	3de0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3e12:	b118      	cbz	r0, 3e1c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3e14:	2900      	cmp	r1, #0
    3e16:	d100      	bne.n	3e1a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e18:	b662      	cpsie	i
    3e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e1c:	2601      	movs	r6, #1
    3e1e:	72ae      	strb	r6, [r5, #10]
    3e20:	b901      	cbnz	r1, 3e24 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3e22:	b662      	cpsie	i
    3e24:	2018      	movs	r0, #24
    3e26:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3e2a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3e2e:	61a6      	str	r6, [r4, #24]
    3e30:	f44f 7020 	mov.w	r0, #640	; 0x280
    3e34:	f8ad 0000 	strh.w	r0, [sp]
    3e38:	f8bd 0000 	ldrh.w	r0, [sp]
    3e3c:	1e41      	subs	r1, r0, #1
    3e3e:	f8ad 1000 	strh.w	r1, [sp]
    3e42:	d2f9      	bcs.n	3e38 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3e44:	2700      	movs	r7, #0
    3e46:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3e4a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3e4e:	4808      	ldr	r0, [pc, #32]	; (3e70 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3e50:	3008      	adds	r0, #8
    3e52:	f007 f97f 	bl	b154 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3e56:	702f      	strb	r7, [r5, #0]
    3e58:	f7ff fd78 	bl	394c <MPSL_IRQ_CLOCK_Handler+0x88>
    3e5c:	6166      	str	r6, [r4, #20]
    3e5e:	7968      	ldrb	r0, [r5, #5]
    3e60:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3e64:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3e68:	2018      	movs	r0, #24
    3e6a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e70:	2000002c 	.word	0x2000002c

00003e74 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3e74:	b510      	push	{r4, lr}
    3e76:	4c04      	ldr	r4, [pc, #16]	; (3e88 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3e78:	7e20      	ldrb	r0, [r4, #24]
    3e7a:	f000 0003 	and.w	r0, r0, #3
    3e7e:	f007 f903 	bl	b088 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3e82:	2800      	cmp	r0, #0
    3e84:	d0f8      	beq.n	3e78 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3e86:	bd10      	pop	{r4, pc}
    3e88:	2000002c 	.word	0x2000002c

00003e8c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3e8c:	4901      	ldr	r1, [pc, #4]	; (3e94 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3e8e:	2001      	movs	r0, #1
    3e90:	7008      	strb	r0, [r1, #0]
    3e92:	4770      	bx	lr
    3e94:	2000026c 	.word	0x2000026c

00003e98 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3e98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3e9c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3ea0:	b918      	cbnz	r0, 3eaa <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3ea2:	4803      	ldr	r0, [pc, #12]	; (3eb0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3ea4:	7800      	ldrb	r0, [r0, #0]
    3ea6:	2800      	cmp	r0, #0
    3ea8:	d000      	beq.n	3eac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3eaa:	2001      	movs	r0, #1
    3eac:	4770      	bx	lr
    3eae:	0000      	.short	0x0000
    3eb0:	2000026c 	.word	0x2000026c

00003eb4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3eb4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3eb8:	2101      	movs	r1, #1
    3eba:	6041      	str	r1, [r0, #4]
    3ebc:	2100      	movs	r1, #0
    3ebe:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3ec2:	4801      	ldr	r0, [pc, #4]	; (3ec8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3ec4:	7001      	strb	r1, [r0, #0]
    3ec6:	4770      	bx	lr
    3ec8:	2000026c 	.word	0x2000026c

00003ecc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3ecc:	4802      	ldr	r0, [pc, #8]	; (3ed8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3ece:	6800      	ldr	r0, [r0, #0]
    3ed0:	f000 0003 	and.w	r0, r0, #3
    3ed4:	4770      	bx	lr
    3ed6:	0000      	.short	0x0000
    3ed8:	4000041c 	.word	0x4000041c
    3edc:	b510      	push	{r4, lr}
    3ede:	b131      	cbz	r1, 3eee <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3ee0:	2901      	cmp	r1, #1
    3ee2:	d007      	beq.n	3ef4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3ee4:	f240 3102 	movw	r1, #770	; 0x302
    3ee8:	a005      	add	r0, pc, #20	; (adr r0, 3f00 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3eea:	f000 f821 	bl	3f30 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3eee:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3ef2:	e001      	b.n	3ef8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3ef4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3ef8:	f000 0001 	and.w	r0, r0, #1
    3efc:	bd10      	pop	{r4, pc}
    3efe:	0000      	.short	0x0000
    3f00:	5f66726e 	.word	0x5f66726e
    3f04:	636f6c63 	.word	0x636f6c63
    3f08:	00682e6b 	.word	0x00682e6b
    3f0c:	f3bf 8f4f 	dsb	sy
    3f10:	4805      	ldr	r0, [pc, #20]	; (3f28 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3f12:	6801      	ldr	r1, [r0, #0]
    3f14:	4a05      	ldr	r2, [pc, #20]	; (3f2c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3f16:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3f1a:	4311      	orrs	r1, r2
    3f1c:	6001      	str	r1, [r0, #0]
    3f1e:	f3bf 8f4f 	dsb	sy
    3f22:	bf00      	nop
    3f24:	e7fd      	b.n	3f22 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3f26:	0000      	.short	0x0000
    3f28:	e000ed0c 	.word	0xe000ed0c
    3f2c:	05fa0004 	.word	0x05fa0004

00003f30 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3f30:	b672      	cpsid	i
    3f32:	4a03      	ldr	r2, [pc, #12]	; (3f40 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3f34:	6852      	ldr	r2, [r2, #4]
    3f36:	b102      	cbz	r2, 3f3a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3f38:	4790      	blx	r2
    3f3a:	f7ff ffe7 	bl	3f0c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3f3e:	0000      	.short	0x0000
    3f40:	2000004c 	.word	0x2000004c
    3f44:	4806      	ldr	r0, [pc, #24]	; (3f60 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3f46:	b510      	push	{r4, lr}
    3f48:	2100      	movs	r1, #0
    3f4a:	6001      	str	r1, [r0, #0]
    3f4c:	2101      	movs	r1, #1
    3f4e:	6001      	str	r1, [r0, #0]
    3f50:	4608      	mov	r0, r1
    3f52:	f007 f8c0 	bl	b0d6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f5a:	2001      	movs	r0, #1
    3f5c:	f007 b8ae 	b.w	b0bc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3f60:	40001ffc 	.word	0x40001ffc
    3f64:	4807      	ldr	r0, [pc, #28]	; (3f84 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    3f66:	b510      	push	{r4, lr}
    3f68:	2101      	movs	r1, #1
    3f6a:	6041      	str	r1, [r0, #4]
    3f6c:	1e89      	subs	r1, r1, #2
    3f6e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3f72:	200c      	movs	r0, #12
    3f74:	f007 f8af 	bl	b0d6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f7c:	200c      	movs	r0, #12
    3f7e:	f007 b89d 	b.w	b0bc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3f82:	0000      	.short	0x0000
    3f84:	4000c000 	.word	0x4000c000

00003f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3f88:	b50e      	push	{r1, r2, r3, lr}
    3f8a:	b672      	cpsid	i
    3f8c:	4a0f      	ldr	r2, [pc, #60]	; (3fcc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3f8e:	6855      	ldr	r5, [r2, #4]
    3f90:	b1d5      	cbz	r5, 3fc8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    3f92:	2200      	movs	r2, #0
    3f94:	4603      	mov	r3, r0
    3f96:	466e      	mov	r6, sp
    3f98:	240a      	movs	r4, #10
    3f9a:	e003      	b.n	3fa4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3f9c:	fbb0 f0f4 	udiv	r0, r0, r4
    3fa0:	1c52      	adds	r2, r2, #1
    3fa2:	b2d2      	uxtb	r2, r2
    3fa4:	2800      	cmp	r0, #0
    3fa6:	d1f9      	bne.n	3f9c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3fa8:	54b0      	strb	r0, [r6, r2]
    3faa:	e009      	b.n	3fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3fac:	fbb3 f0f4 	udiv	r0, r3, r4
    3fb0:	fb04 3010 	mls	r0, r4, r0, r3
    3fb4:	fbb3 f3f4 	udiv	r3, r3, r4
    3fb8:	1e52      	subs	r2, r2, #1
    3fba:	b2d2      	uxtb	r2, r2
    3fbc:	3030      	adds	r0, #48	; 0x30
    3fbe:	54b0      	strb	r0, [r6, r2]
    3fc0:	2a00      	cmp	r2, #0
    3fc2:	d1f3      	bne.n	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3fc4:	4630      	mov	r0, r6
    3fc6:	47a8      	blx	r5
    3fc8:	f7ff ffa0 	bl	3f0c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3fcc:	2000004c 	.word	0x2000004c

00003fd0 <mpsl_init>:
    3fd0:	b570      	push	{r4, r5, r6, lr}
    3fd2:	4c17      	ldr	r4, [pc, #92]	; (4030 <mpsl_init+0x60>)
    3fd4:	4606      	mov	r6, r0
    3fd6:	460d      	mov	r5, r1
    3fd8:	7860      	ldrb	r0, [r4, #1]
    3fda:	b110      	cbz	r0, 3fe2 <mpsl_init+0x12>
    3fdc:	f04f 30ff 	mov.w	r0, #4294967295
    3fe0:	bd70      	pop	{r4, r5, r6, pc}
    3fe2:	b906      	cbnz	r6, 3fe6 <mpsl_init+0x16>
    3fe4:	4e13      	ldr	r6, [pc, #76]	; (4034 <mpsl_init+0x64>)
    3fe6:	6062      	str	r2, [r4, #4]
    3fe8:	7025      	strb	r5, [r4, #0]
    3fea:	f7ff ffab 	bl	3f44 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    3fee:	f7ff ffb9 	bl	3f64 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    3ff2:	4630      	mov	r0, r6
    3ff4:	f7ff fe9c 	bl	3d30 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3ff8:	0006      	movs	r6, r0
    3ffa:	d1f1      	bne.n	3fe0 <mpsl_init+0x10>
    3ffc:	f7fe ff00 	bl	2e00 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4000:	f7ff fef6 	bl	3df0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4004:	f006 ffb4 	bl	af70 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    4008:	4628      	mov	r0, r5
    400a:	f007 f857 	bl	b0bc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    400e:	2001      	movs	r0, #1
    4010:	2d00      	cmp	r5, #0
    4012:	db09      	blt.n	4028 <mpsl_init+0x58>
    4014:	f005 011f 	and.w	r1, r5, #31
    4018:	fa00 f101 	lsl.w	r1, r0, r1
    401c:	096a      	lsrs	r2, r5, #5
    401e:	0092      	lsls	r2, r2, #2
    4020:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4024:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4028:	7060      	strb	r0, [r4, #1]
    402a:	4630      	mov	r0, r6
    402c:	bd70      	pop	{r4, r5, r6, pc}
    402e:	0000      	.short	0x0000
    4030:	2000004c 	.word	0x2000004c
    4034:	0000b0f8 	.word	0x0000b0f8

00004038 <mpsl_is_initialized>:
    4038:	4801      	ldr	r0, [pc, #4]	; (4040 <mpsl_is_initialized+0x8>)
    403a:	7840      	ldrb	r0, [r0, #1]
    403c:	4770      	bx	lr
    403e:	0000      	.short	0x0000
    4040:	2000004c 	.word	0x2000004c

00004044 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4044:	4807      	ldr	r0, [pc, #28]	; (4064 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    4046:	f990 0000 	ldrsb.w	r0, [r0]
    404a:	2800      	cmp	r0, #0
    404c:	db09      	blt.n	4062 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    404e:	f000 021f 	and.w	r2, r0, #31
    4052:	2101      	movs	r1, #1
    4054:	4091      	lsls	r1, r2
    4056:	0940      	lsrs	r0, r0, #5
    4058:	0080      	lsls	r0, r0, #2
    405a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    405e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4062:	4770      	bx	lr
    4064:	2000004c 	.word	0x2000004c

00004068 <mpsl_temperature_get>:
    4068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    406c:	2601      	movs	r6, #1
    406e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4072:	0331      	lsls	r1, r6, #12
    4074:	f04f 0800 	mov.w	r8, #0
    4078:	4640      	mov	r0, r8
    407a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    407e:	f3bf 8f4f 	dsb	sy
    4082:	f3bf 8f6f 	isb	sy
    4086:	4c16      	ldr	r4, [pc, #88]	; (40e0 <mpsl_temperature_get+0x78>)
    4088:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    408c:	200c      	movs	r0, #12
    408e:	f007 f841 	bl	b114 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4092:	4d14      	ldr	r5, [pc, #80]	; (40e4 <mpsl_temperature_get+0x7c>)
    4094:	6828      	ldr	r0, [r5, #0]
    4096:	43c0      	mvns	r0, r0
    4098:	f340 1700 	sbfx	r7, r0, #4, #1
    409c:	6828      	ldr	r0, [r5, #0]
    409e:	f040 0010 	orr.w	r0, r0, #16
    40a2:	6028      	str	r0, [r5, #0]
    40a4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    40a8:	6026      	str	r6, [r4, #0]
    40aa:	1c7f      	adds	r7, r7, #1
    40ac:	e002      	b.n	40b4 <mpsl_temperature_get+0x4c>
    40ae:	bf00      	nop
    40b0:	f000 f890 	bl	41d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    40b4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    40b8:	2800      	cmp	r0, #0
    40ba:	d0f9      	beq.n	40b0 <mpsl_temperature_get+0x48>
    40bc:	b91f      	cbnz	r7, 40c6 <mpsl_temperature_get+0x5e>
    40be:	6828      	ldr	r0, [r5, #0]
    40c0:	f020 0010 	bic.w	r0, r0, #16
    40c4:	6028      	str	r0, [r5, #0]
    40c6:	4808      	ldr	r0, [pc, #32]	; (40e8 <mpsl_temperature_get+0x80>)
    40c8:	6805      	ldr	r5, [r0, #0]
    40ca:	6066      	str	r6, [r4, #4]
    40cc:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    40d0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    40d4:	200c      	movs	r0, #12
    40d6:	f007 f81d 	bl	b114 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    40da:	4628      	mov	r0, r5
    40dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40e0:	4000c000 	.word	0x4000c000
    40e4:	e000ed10 	.word	0xe000ed10
    40e8:	4000c508 	.word	0x4000c508

000040ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    40ec:	b510      	push	{r4, lr}
    40ee:	4602      	mov	r2, r0
    40f0:	2005      	movs	r0, #5
    40f2:	490c      	ldr	r1, [pc, #48]	; (4124 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    40f4:	e004      	b.n	4100 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    40f6:	bf00      	nop
    40f8:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    40fc:	791b      	ldrb	r3, [r3, #4]
    40fe:	b133      	cbz	r3, 410e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4100:	1e40      	subs	r0, r0, #1
    4102:	b2c0      	uxtb	r0, r0
    4104:	d2f8      	bcs.n	40f8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4106:	2148      	movs	r1, #72	; 0x48
    4108:	2069      	movs	r0, #105	; 0x69
    410a:	f7ff ff3d 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    410e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    4112:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4116:	2200      	movs	r2, #0
    4118:	714a      	strb	r2, [r1, #5]
    411a:	718a      	strb	r2, [r1, #6]
    411c:	2201      	movs	r2, #1
    411e:	710a      	strb	r2, [r1, #4]
    4120:	bd10      	pop	{r4, pc}
    4122:	0000      	.short	0x0000
    4124:	20000a58 	.word	0x20000a58

00004128 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4128:	b510      	push	{r4, lr}
    412a:	2805      	cmp	r0, #5
    412c:	d301      	bcc.n	4132 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    412e:	2158      	movs	r1, #88	; 0x58
    4130:	e006      	b.n	4140 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4132:	490a      	ldr	r1, [pc, #40]	; (415c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4134:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4138:	7901      	ldrb	r1, [r0, #4]
    413a:	2901      	cmp	r1, #1
    413c:	d003      	beq.n	4146 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    413e:	2159      	movs	r1, #89	; 0x59
    4140:	2069      	movs	r0, #105	; 0x69
    4142:	f7ff ff21 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4146:	7941      	ldrb	r1, [r0, #5]
    4148:	7982      	ldrb	r2, [r0, #6]
    414a:	1c49      	adds	r1, r1, #1
    414c:	b2c9      	uxtb	r1, r1
    414e:	428a      	cmp	r2, r1
    4150:	d000      	beq.n	4154 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4152:	7141      	strb	r1, [r0, #5]
    4154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4158:	f7ff bf74 	b.w	4044 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    415c:	20000a58 	.word	0x20000a58

00004160 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4160:	b570      	push	{r4, r5, r6, lr}
    4162:	2505      	movs	r5, #5
    4164:	4e0e      	ldr	r6, [pc, #56]	; (41a0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4166:	4c0f      	ldr	r4, [pc, #60]	; (41a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4168:	e016      	b.n	4198 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    416a:	7821      	ldrb	r1, [r4, #0]
    416c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4170:	7902      	ldrb	r2, [r0, #4]
    4172:	2a01      	cmp	r2, #1
    4174:	d108      	bne.n	4188 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4176:	7942      	ldrb	r2, [r0, #5]
    4178:	7983      	ldrb	r3, [r0, #6]
    417a:	429a      	cmp	r2, r3
    417c:	d004      	beq.n	4188 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    417e:	7942      	ldrb	r2, [r0, #5]
    4180:	7182      	strb	r2, [r0, #6]
    4182:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    4186:	4780      	blx	r0
    4188:	7820      	ldrb	r0, [r4, #0]
    418a:	1c40      	adds	r0, r0, #1
    418c:	b2c0      	uxtb	r0, r0
    418e:	7020      	strb	r0, [r4, #0]
    4190:	2805      	cmp	r0, #5
    4192:	d301      	bcc.n	4198 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4194:	2000      	movs	r0, #0
    4196:	7020      	strb	r0, [r4, #0]
    4198:	1e6d      	subs	r5, r5, #1
    419a:	b2ed      	uxtb	r5, r5
    419c:	d2e5      	bcs.n	416a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    419e:	bd70      	pop	{r4, r5, r6, pc}
    41a0:	20000a58 	.word	0x20000a58
    41a4:	2000026d 	.word	0x2000026d

000041a8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    41a8:	b500      	push	{lr}
    41aa:	f006 ffe2 	bl	b172 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    41ae:	b940      	cbnz	r0, 41c2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41b0:	f006 ffe9 	bl	b186 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    41b4:	b928      	cbnz	r0, 41c2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41b6:	f006 fffd 	bl	b1b4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    41ba:	b910      	cbnz	r0, 41c2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41bc:	f007 f80e 	bl	b1dc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41c0:	b108      	cbz	r0, 41c6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    41c2:	4802      	ldr	r0, [pc, #8]	; (41cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    41c4:	bd00      	pop	{pc}
    41c6:	4802      	ldr	r0, [pc, #8]	; (41d0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    41c8:	bd00      	pop	{pc}
    41ca:	0000      	.short	0x0000
    41cc:	4000050c 	.word	0x4000050c
    41d0:	4001e700 	.word	0x4001e700

000041d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    41d4:	b510      	push	{r4, lr}
    41d6:	f007 f801 	bl	b1dc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41da:	b330      	cbz	r0, 422a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    41dc:	f3ef 8010 	mrs	r0, PRIMASK
    41e0:	b1c8      	cbz	r0, 4216 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    41e2:	2100      	movs	r1, #0
    41e4:	b672      	cpsid	i
    41e6:	4812      	ldr	r0, [pc, #72]	; (4230 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    41e8:	6802      	ldr	r2, [r0, #0]
    41ea:	6803      	ldr	r3, [r0, #0]
    41ec:	f3c2 1200 	ubfx	r2, r2, #4, #1
    41f0:	f043 0310 	orr.w	r3, r3, #16
    41f4:	6003      	str	r3, [r0, #0]
    41f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    41fa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    41fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4202:	431c      	orrs	r4, r3
    4204:	d000      	beq.n	4208 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4206:	bf40      	sev
    4208:	bf20      	wfe
    420a:	bf00      	nop
    420c:	bf00      	nop
    420e:	bf00      	nop
    4210:	bf00      	nop
    4212:	b112      	cbz	r2, 421a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4214:	e005      	b.n	4222 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4216:	2101      	movs	r1, #1
    4218:	e7e4      	b.n	41e4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    421a:	6802      	ldr	r2, [r0, #0]
    421c:	f022 0210 	bic.w	r2, r2, #16
    4220:	6002      	str	r2, [r0, #0]
    4222:	2900      	cmp	r1, #0
    4224:	d000      	beq.n	4228 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4226:	b662      	cpsie	i
    4228:	bd10      	pop	{r4, pc}
    422a:	bf20      	wfe
    422c:	bd10      	pop	{r4, pc}
    422e:	0000      	.short	0x0000
    4230:	e000ed10 	.word	0xe000ed10

00004234 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4234:	0000b44d 0000b469 0000b457 0000b463     M...i...W...c...
    4244:	0000b451 0000b44b 0000b449 0000b46f     Q...K...I...o...
    4254:	0000b45d 0000b443 0000b43b 0000b43f     ]...C...;...?...
    4264:	0000b435                                5...

00004268 <mpsl_fem_disable>:
    4268:	4801      	ldr	r0, [pc, #4]	; (4270 <mpsl_fem_disable+0x8>)
    426a:	6800      	ldr	r0, [r0, #0]
    426c:	6800      	ldr	r0, [r0, #0]
    426e:	4700      	bx	r0
    4270:	20000054 	.word	0x20000054

00004274 <mpsl_fem_lna_configuration_clear>:
    4274:	4801      	ldr	r0, [pc, #4]	; (427c <mpsl_fem_lna_configuration_clear+0x8>)
    4276:	6800      	ldr	r0, [r0, #0]
    4278:	6900      	ldr	r0, [r0, #16]
    427a:	4700      	bx	r0
    427c:	20000054 	.word	0x20000054

00004280 <mpsl_fem_lna_configuration_set>:
    4280:	4a01      	ldr	r2, [pc, #4]	; (4288 <mpsl_fem_lna_configuration_set+0x8>)
    4282:	6812      	ldr	r2, [r2, #0]
    4284:	6892      	ldr	r2, [r2, #8]
    4286:	4710      	bx	r2
    4288:	20000054 	.word	0x20000054

0000428c <mpsl_fem_pa_configuration_clear>:
    428c:	4801      	ldr	r0, [pc, #4]	; (4294 <mpsl_fem_pa_configuration_clear+0x8>)
    428e:	6800      	ldr	r0, [r0, #0]
    4290:	68c0      	ldr	r0, [r0, #12]
    4292:	4700      	bx	r0
    4294:	20000054 	.word	0x20000054

00004298 <mpsl_fem_pa_configuration_set>:
    4298:	4a01      	ldr	r2, [pc, #4]	; (42a0 <mpsl_fem_pa_configuration_set+0x8>)
    429a:	6812      	ldr	r2, [r2, #0]
    429c:	6852      	ldr	r2, [r2, #4]
    429e:	4710      	bx	r2
    42a0:	20000054 	.word	0x20000054

000042a4 <mpsl_fem_pa_is_configured>:
    42a4:	4901      	ldr	r1, [pc, #4]	; (42ac <mpsl_fem_pa_is_configured+0x8>)
    42a6:	6809      	ldr	r1, [r1, #0]
    42a8:	6a09      	ldr	r1, [r1, #32]
    42aa:	4708      	bx	r1
    42ac:	20000054 	.word	0x20000054

000042b0 <mpsl_fem_device_config_254_apply_get>:
    42b0:	4801      	ldr	r0, [pc, #4]	; (42b8 <mpsl_fem_device_config_254_apply_get+0x8>)
    42b2:	7800      	ldrb	r0, [r0, #0]
    42b4:	4770      	bx	lr
    42b6:	0000      	.short	0x0000
    42b8:	2000026e 	.word	0x2000026e
    42bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    42be:	4c17      	ldr	r4, [pc, #92]	; (431c <mpsl_fem_device_config_254_apply_get+0x6c>)
    42c0:	7a20      	ldrb	r0, [r4, #8]
    42c2:	2802      	cmp	r0, #2
    42c4:	d200      	bcs.n	42c8 <mpsl_fem_device_config_254_apply_get+0x18>
    42c6:	2002      	movs	r0, #2
    42c8:	f88d 0001 	strb.w	r0, [sp, #1]
    42cc:	79e0      	ldrb	r0, [r4, #7]
    42ce:	2803      	cmp	r0, #3
    42d0:	d200      	bcs.n	42d4 <mpsl_fem_device_config_254_apply_get+0x24>
    42d2:	2003      	movs	r0, #3
    42d4:	f88d 0000 	strb.w	r0, [sp]
    42d8:	79a0      	ldrb	r0, [r4, #6]
    42da:	f8ad 0004 	strh.w	r0, [sp, #4]
    42de:	7960      	ldrb	r0, [r4, #5]
    42e0:	f8ad 0002 	strh.w	r0, [sp, #2]
    42e4:	4668      	mov	r0, sp
    42e6:	f005 fb5b 	bl	99a0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    42ea:	b108      	cbz	r0, 42f0 <mpsl_fem_device_config_254_apply_get+0x40>
    42ec:	2184      	movs	r1, #132	; 0x84
    42ee:	e010      	b.n	4312 <mpsl_fem_device_config_254_apply_get+0x62>
    42f0:	68e0      	ldr	r0, [r4, #12]
    42f2:	9002      	str	r0, [sp, #8]
    42f4:	a802      	add	r0, sp, #8
    42f6:	f005 fb69 	bl	99cc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    42fa:	b108      	cbz	r0, 4300 <mpsl_fem_device_config_254_apply_get+0x50>
    42fc:	2188      	movs	r1, #136	; 0x88
    42fe:	e008      	b.n	4312 <mpsl_fem_device_config_254_apply_get+0x62>
    4300:	4807      	ldr	r0, [pc, #28]	; (4320 <mpsl_fem_device_config_254_apply_get+0x70>)
    4302:	6800      	ldr	r0, [r0, #0]
    4304:	9003      	str	r0, [sp, #12]
    4306:	a803      	add	r0, sp, #12
    4308:	f009 f8ef 	bl	d4ea <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    430c:	2800      	cmp	r0, #0
    430e:	d003      	beq.n	4318 <mpsl_fem_device_config_254_apply_get+0x68>
    4310:	218c      	movs	r1, #140	; 0x8c
    4312:	2003      	movs	r0, #3
    4314:	f000 f918 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4318:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    431a:	0000      	.short	0x0000
    431c:	20000a80 	.word	0x20000a80
    4320:	000045d4 	.word	0x000045d4
    4324:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4326:	4604      	mov	r4, r0
    4328:	460e      	mov	r6, r1
    432a:	f100 0003 	add.w	r0, r0, #3
    432e:	f020 0003 	bic.w	r0, r0, #3
    4332:	f04f 0100 	mov.w	r1, #0
    4336:	e9cd 0100 	strd	r0, r1, [sp]
    433a:	7831      	ldrb	r1, [r6, #0]
    433c:	0015      	movs	r5, r2
    433e:	f88d 1005 	strb.w	r1, [sp, #5]
    4342:	d000      	beq.n	4346 <mpsl_fem_device_config_254_apply_get+0x96>
    4344:	2000      	movs	r0, #0
    4346:	a901      	add	r1, sp, #4
    4348:	f000 fa8e 	bl	4868 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    434c:	9900      	ldr	r1, [sp, #0]
    434e:	4408      	add	r0, r1
    4350:	490c      	ldr	r1, [pc, #48]	; (4384 <mpsl_fem_device_config_254_apply_get+0xd4>)
    4352:	9000      	str	r0, [sp, #0]
    4354:	78c9      	ldrb	r1, [r1, #3]
    4356:	b149      	cbz	r1, 436c <mpsl_fem_device_config_254_apply_get+0xbc>
    4358:	7c31      	ldrb	r1, [r6, #16]
    435a:	b139      	cbz	r1, 436c <mpsl_fem_device_config_254_apply_get+0xbc>
    435c:	2225      	movs	r2, #37	; 0x25
    435e:	b105      	cbz	r5, 4362 <mpsl_fem_device_config_254_apply_get+0xb2>
    4360:	2000      	movs	r0, #0
    4362:	f000 fc03 	bl	4b6c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4366:	9900      	ldr	r1, [sp, #0]
    4368:	4408      	add	r0, r1
    436a:	9000      	str	r0, [sp, #0]
    436c:	462a      	mov	r2, r5
    436e:	4631      	mov	r1, r6
    4370:	4668      	mov	r0, sp
    4372:	f007 f87e 	bl	b472 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4376:	9800      	ldr	r0, [sp, #0]
    4378:	1dc0      	adds	r0, r0, #7
    437a:	f020 0007 	bic.w	r0, r0, #7
    437e:	9000      	str	r0, [sp, #0]
    4380:	1b00      	subs	r0, r0, r4
    4382:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4384:	20000058 	.word	0x20000058

00004388 <sdc_build_revision_get>:
    4388:	b510      	push	{r4, lr}
    438a:	b128      	cbz	r0, 4398 <sdc_build_revision_get+0x10>
    438c:	2214      	movs	r2, #20
    438e:	4904      	ldr	r1, [pc, #16]	; (43a0 <sdc_build_revision_get+0x18>)
    4390:	f006 ff76 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4394:	2000      	movs	r0, #0
    4396:	bd10      	pop	{r4, pc}
    4398:	f06f 0015 	mvn.w	r0, #21
    439c:	bd10      	pop	{r4, pc}
    439e:	0000      	.short	0x0000
    43a0:	000045f0 	.word	0x000045f0

000043a4 <sdc_cfg_set>:
    43a4:	b570      	push	{r4, r5, r6, lr}
    43a6:	0003      	movs	r3, r0
    43a8:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    43ac:	d103      	bne.n	43b6 <sdc_cfg_set+0x12>
    43ae:	4c2a      	ldr	r4, [pc, #168]	; (4458 <sdc_cfg_set+0xb4>)
    43b0:	7863      	ldrb	r3, [r4, #1]
    43b2:	b10b      	cbz	r3, 43b8 <sdc_cfg_set+0x14>
    43b4:	1180      	asrs	r0, r0, #6
    43b6:	bd70      	pop	{r4, r5, r6, pc}
    43b8:	b319      	cbz	r1, 4402 <sdc_cfg_set+0x5e>
    43ba:	f06f 0515 	mvn.w	r5, #21
    43be:	b38a      	cbz	r2, 4424 <sdc_cfg_set+0x80>
    43c0:	4b26      	ldr	r3, [pc, #152]	; (445c <sdc_cfg_set+0xb8>)
    43c2:	290c      	cmp	r1, #12
    43c4:	d243      	bcs.n	444e <sdc_cfg_set+0xaa>
    43c6:	e8df f001 	tbb	[pc, r1]
    43ca:	0642      	.short	0x0642
    43cc:	13100c09 	.word	0x13100c09
    43d0:	2818251d 	.word	0x2818251d
    43d4:	332e      	.short	0x332e
    43d6:	7810      	ldrb	r0, [r2, #0]
    43d8:	7018      	strb	r0, [r3, #0]
    43da:	e02d      	b.n	4438 <sdc_cfg_set+0x94>
    43dc:	7810      	ldrb	r0, [r2, #0]
    43de:	7058      	strb	r0, [r3, #1]
    43e0:	e02a      	b.n	4438 <sdc_cfg_set+0x94>
    43e2:	6810      	ldr	r0, [r2, #0]
    43e4:	f8c3 0005 	str.w	r0, [r3, #5]
    43e8:	e026      	b.n	4438 <sdc_cfg_set+0x94>
    43ea:	6810      	ldr	r0, [r2, #0]
    43ec:	60d8      	str	r0, [r3, #12]
    43ee:	e023      	b.n	4438 <sdc_cfg_set+0x94>
    43f0:	7811      	ldrb	r1, [r2, #0]
    43f2:	2900      	cmp	r1, #0
    43f4:	d1df      	bne.n	43b6 <sdc_cfg_set+0x12>
    43f6:	7099      	strb	r1, [r3, #2]
    43f8:	e01e      	b.n	4438 <sdc_cfg_set+0x94>
    43fa:	7811      	ldrb	r1, [r2, #0]
    43fc:	2900      	cmp	r1, #0
    43fe:	d1da      	bne.n	43b6 <sdc_cfg_set+0x12>
    4400:	70d9      	strb	r1, [r3, #3]
    4402:	e019      	b.n	4438 <sdc_cfg_set+0x94>
    4404:	78e0      	ldrb	r0, [r4, #3]
    4406:	b110      	cbz	r0, 440e <sdc_cfg_set+0x6a>
    4408:	7810      	ldrb	r0, [r2, #0]
    440a:	2802      	cmp	r0, #2
    440c:	d31f      	bcc.n	444e <sdc_cfg_set+0xaa>
    440e:	7810      	ldrb	r0, [r2, #0]
    4410:	7418      	strb	r0, [r3, #16]
    4412:	e011      	b.n	4438 <sdc_cfg_set+0x94>
    4414:	8810      	ldrh	r0, [r2, #0]
    4416:	8258      	strh	r0, [r3, #18]
    4418:	e00e      	b.n	4438 <sdc_cfg_set+0x94>
    441a:	7811      	ldrb	r1, [r2, #0]
    441c:	2900      	cmp	r1, #0
    441e:	d1ca      	bne.n	43b6 <sdc_cfg_set+0x12>
    4420:	7119      	strb	r1, [r3, #4]
    4422:	e009      	b.n	4438 <sdc_cfg_set+0x94>
    4424:	e013      	b.n	444e <sdc_cfg_set+0xaa>
    4426:	7810      	ldrb	r0, [r2, #0]
    4428:	2802      	cmp	r0, #2
    442a:	d310      	bcc.n	444e <sdc_cfg_set+0xaa>
    442c:	7518      	strb	r0, [r3, #20]
    442e:	e003      	b.n	4438 <sdc_cfg_set+0x94>
    4430:	7811      	ldrb	r1, [r2, #0]
    4432:	2900      	cmp	r1, #0
    4434:	d1bf      	bne.n	43b6 <sdc_cfg_set+0x12>
    4436:	7559      	strb	r1, [r3, #21]
    4438:	2201      	movs	r2, #1
    443a:	4908      	ldr	r1, [pc, #32]	; (445c <sdc_cfg_set+0xb8>)
    443c:	2000      	movs	r0, #0
    443e:	f7ff ff71 	bl	4324 <mpsl_fem_device_config_254_apply_get+0x74>
    4442:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4446:	db04      	blt.n	4452 <sdc_cfg_set+0xae>
    4448:	f06f 000b 	mvn.w	r0, #11
    444c:	bd70      	pop	{r4, r5, r6, pc}
    444e:	4628      	mov	r0, r5
    4450:	bd70      	pop	{r4, r5, r6, pc}
    4452:	2101      	movs	r1, #1
    4454:	70a1      	strb	r1, [r4, #2]
    4456:	bd70      	pop	{r4, r5, r6, pc}
    4458:	20000058 	.word	0x20000058
    445c:	20000a80 	.word	0x20000a80

00004460 <sdc_enable>:
    4460:	b570      	push	{r4, r5, r6, lr}
    4462:	460c      	mov	r4, r1
    4464:	0005      	movs	r5, r0
    4466:	d019      	beq.n	449c <sdc_enable+0x3c>
    4468:	b1c4      	cbz	r4, 449c <sdc_enable+0x3c>
    446a:	f000 f8e7 	bl	463c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    446e:	b1c0      	cbz	r0, 44a2 <sdc_enable+0x42>
    4470:	4628      	mov	r0, r5
    4472:	f7ff fe3b 	bl	40ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4476:	4d0c      	ldr	r5, [pc, #48]	; (44a8 <sdc_enable+0x48>)
    4478:	2200      	movs	r2, #0
    447a:	490c      	ldr	r1, [pc, #48]	; (44ac <sdc_enable+0x4c>)
    447c:	7028      	strb	r0, [r5, #0]
    447e:	4620      	mov	r0, r4
    4480:	f7ff ff50 	bl	4324 <mpsl_fem_device_config_254_apply_get+0x74>
    4484:	f009 fadf 	bl	da46 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4488:	2100      	movs	r1, #0
    448a:	7828      	ldrb	r0, [r5, #0]
    448c:	f005 fbe6 	bl	9c5c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4490:	f7ff ff14 	bl	42bc <mpsl_fem_device_config_254_apply_get+0xc>
    4494:	2001      	movs	r0, #1
    4496:	7068      	strb	r0, [r5, #1]
    4498:	2000      	movs	r0, #0
    449a:	bd70      	pop	{r4, r5, r6, pc}
    449c:	f06f 0015 	mvn.w	r0, #21
    44a0:	bd70      	pop	{r4, r5, r6, pc}
    44a2:	f04f 30ff 	mov.w	r0, #4294967295
    44a6:	bd70      	pop	{r4, r5, r6, pc}
    44a8:	20000058 	.word	0x20000058
    44ac:	20000a80 	.word	0x20000a80

000044b0 <sdc_init>:
    44b0:	b530      	push	{r4, r5, lr}
    44b2:	b087      	sub	sp, #28
    44b4:	0005      	movs	r5, r0
    44b6:	d00c      	beq.n	44d2 <sdc_init+0x22>
    44b8:	f7ff fdbe 	bl	4038 <mpsl_is_initialized>
    44bc:	f04f 34ff 	mov.w	r4, #4294967295
    44c0:	b120      	cbz	r0, 44cc <sdc_init+0x1c>
    44c2:	f7ff fc87 	bl	3dd4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    44c6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    44ca:	d905      	bls.n	44d8 <sdc_init+0x28>
    44cc:	4620      	mov	r0, r4
    44ce:	b007      	add	sp, #28
    44d0:	bd30      	pop	{r4, r5, pc}
    44d2:	f06f 0015 	mvn.w	r0, #21
    44d6:	e7fa      	b.n	44ce <sdc_init+0x1e>
    44d8:	4c15      	ldr	r4, [pc, #84]	; (4530 <sdc_init+0x80>)
    44da:	4816      	ldr	r0, [pc, #88]	; (4534 <sdc_init+0x84>)
    44dc:	6065      	str	r5, [r4, #4]
    44de:	f000 f9a1 	bl	4824 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    44e2:	2000      	movs	r0, #0
    44e4:	7060      	strb	r0, [r4, #1]
    44e6:	70a0      	strb	r0, [r4, #2]
    44e8:	70e0      	strb	r0, [r4, #3]
    44ea:	4601      	mov	r1, r0
    44ec:	2218      	movs	r2, #24
    44ee:	4668      	mov	r0, sp
    44f0:	f006 ff40 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    44f4:	2218      	movs	r2, #24
    44f6:	4910      	ldr	r1, [pc, #64]	; (4538 <sdc_init+0x88>)
    44f8:	4668      	mov	r0, sp
    44fa:	f006 fec1 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    44fe:	2218      	movs	r2, #24
    4500:	4669      	mov	r1, sp
    4502:	480e      	ldr	r0, [pc, #56]	; (453c <sdc_init+0x8c>)
    4504:	f006 febc 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4508:	f3ef 8410 	mrs	r4, PRIMASK
    450c:	b672      	cpsid	i
    450e:	480c      	ldr	r0, [pc, #48]	; (4540 <sdc_init+0x90>)
    4510:	f06f 010c 	mvn.w	r1, #12
    4514:	f000 fbcc 	bl	4cb0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4518:	480a      	ldr	r0, [pc, #40]	; (4544 <sdc_init+0x94>)
    451a:	f000 fc99 	bl	4e50 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    451e:	b118      	cbz	r0, 4528 <sdc_init+0x78>
    4520:	219a      	movs	r1, #154	; 0x9a
    4522:	2003      	movs	r0, #3
    4524:	f000 f810 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4528:	b904      	cbnz	r4, 452c <sdc_init+0x7c>
    452a:	b662      	cpsie	i
    452c:	2000      	movs	r0, #0
    452e:	e7ce      	b.n	44ce <sdc_init+0x1e>
    4530:	20000058 	.word	0x20000058
    4534:	000042bd 	.word	0x000042bd
    4538:	000045d8 	.word	0x000045d8
    453c:	20000a80 	.word	0x20000a80
    4540:	4000c000 	.word	0x4000c000
    4544:	00004669 	.word	0x00004669

00004548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4548:	b50e      	push	{r1, r2, r3, lr}
    454a:	b672      	cpsid	i
    454c:	4a15      	ldr	r2, [pc, #84]	; (45a4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    454e:	6855      	ldr	r5, [r2, #4]
    4550:	b1d5      	cbz	r5, 4588 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4552:	2200      	movs	r2, #0
    4554:	4603      	mov	r3, r0
    4556:	466e      	mov	r6, sp
    4558:	240a      	movs	r4, #10
    455a:	e003      	b.n	4564 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    455c:	fbb0 f0f4 	udiv	r0, r0, r4
    4560:	1c52      	adds	r2, r2, #1
    4562:	b2d2      	uxtb	r2, r2
    4564:	2800      	cmp	r0, #0
    4566:	d1f9      	bne.n	455c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4568:	54b0      	strb	r0, [r6, r2]
    456a:	e009      	b.n	4580 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    456c:	fbb3 f0f4 	udiv	r0, r3, r4
    4570:	fb04 3010 	mls	r0, r4, r0, r3
    4574:	fbb3 f3f4 	udiv	r3, r3, r4
    4578:	1e52      	subs	r2, r2, #1
    457a:	b2d2      	uxtb	r2, r2
    457c:	3030      	adds	r0, #48	; 0x30
    457e:	54b0      	strb	r0, [r6, r2]
    4580:	2a00      	cmp	r2, #0
    4582:	d1f3      	bne.n	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4584:	4630      	mov	r0, r6
    4586:	47a8      	blx	r5
    4588:	f3bf 8f4f 	dsb	sy
    458c:	4806      	ldr	r0, [pc, #24]	; (45a8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    458e:	6801      	ldr	r1, [r0, #0]
    4590:	4a06      	ldr	r2, [pc, #24]	; (45ac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4592:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4596:	4311      	orrs	r1, r2
    4598:	6001      	str	r1, [r0, #0]
    459a:	f3bf 8f4f 	dsb	sy
    459e:	bf00      	nop
    45a0:	e7fd      	b.n	459e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    45a2:	0000      	.short	0x0000
    45a4:	20000058 	.word	0x20000058
    45a8:	e000ed0c 	.word	0xe000ed0c
    45ac:	05fa0004 	.word	0x05fa0004

000045b0 <sdc_support_scan>:
    45b0:	4807      	ldr	r0, [pc, #28]	; (45d0 <sdc_support_scan+0x20>)
    45b2:	b510      	push	{r4, lr}
    45b4:	7881      	ldrb	r1, [r0, #2]
    45b6:	7842      	ldrb	r2, [r0, #1]
    45b8:	4311      	orrs	r1, r2
    45ba:	d002      	beq.n	45c2 <sdc_support_scan+0x12>
    45bc:	f04f 30ff 	mov.w	r0, #4294967295
    45c0:	bd10      	pop	{r4, pc}
    45c2:	2101      	movs	r1, #1
    45c4:	70c1      	strb	r1, [r0, #3]
    45c6:	f005 fb6d 	bl	9ca4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    45ca:	2000      	movs	r0, #0
    45cc:	bd10      	pop	{r4, pc}
    45ce:	0000      	.short	0x0000
    45d0:	20000058 	.word	0x20000058
    45d4:	00000001 	.word	0x00000001
    45d8:	00010101 	.word	0x00010101
    45dc:	031b1b00 	.word	0x031b1b00
    45e0:	00000002 	.word	0x00000002
    45e4:	00001d4c 	.word	0x00001d4c
    45e8:	001f0003 	.word	0x001f0003
    45ec:	00000000 	.word	0x00000000
    45f0:	66c5e70e 	.word	0x66c5e70e
    45f4:	ac3c1867 	.word	0xac3c1867
    45f8:	81ccd2b3 	.word	0x81ccd2b3
    45fc:	c0f1dca3 	.word	0xc0f1dca3
    4600:	220236c0 	.word	0x220236c0

00004604 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4604:	4a05      	ldr	r2, [pc, #20]	; (461c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4606:	b510      	push	{r4, lr}
    4608:	6852      	ldr	r2, [r2, #4]
    460a:	b112      	cbz	r2, 4612 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    460c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4610:	4710      	bx	r2
    4612:	2183      	movs	r1, #131	; 0x83
    4614:	2004      	movs	r0, #4
    4616:	f7ff ff97 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    461a:	0000      	.short	0x0000
    461c:	20000a98 	.word	0x20000a98

00004620 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4620:	4a05      	ldr	r2, [pc, #20]	; (4638 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4622:	b510      	push	{r4, lr}
    4624:	6892      	ldr	r2, [r2, #8]
    4626:	b112      	cbz	r2, 462e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    462c:	4710      	bx	r2
    462e:	2189      	movs	r1, #137	; 0x89
    4630:	2004      	movs	r0, #4
    4632:	f7ff ff89 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4636:	0000      	.short	0x0000
    4638:	20000a98 	.word	0x20000a98

0000463c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    463c:	4805      	ldr	r0, [pc, #20]	; (4654 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    463e:	6801      	ldr	r1, [r0, #0]
    4640:	b129      	cbz	r1, 464e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4642:	6841      	ldr	r1, [r0, #4]
    4644:	b119      	cbz	r1, 464e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4646:	6880      	ldr	r0, [r0, #8]
    4648:	b108      	cbz	r0, 464e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    464a:	2001      	movs	r0, #1
    464c:	4770      	bx	lr
    464e:	2000      	movs	r0, #0
    4650:	4770      	bx	lr
    4652:	0000      	.short	0x0000
    4654:	20000a98 	.word	0x20000a98

00004658 <sdc_rand_source_register>:
    4658:	4902      	ldr	r1, [pc, #8]	; (4664 <sdc_rand_source_register+0xc>)
    465a:	c80d      	ldmia	r0, {r0, r2, r3}
    465c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4660:	2000      	movs	r0, #0
    4662:	4770      	bx	lr
    4664:	20000a98 	.word	0x20000a98

00004668 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    466a:	4c12      	ldr	r4, [pc, #72]	; (46b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    466c:	2600      	movs	r6, #0
    466e:	6825      	ldr	r5, [r4, #0]
    4670:	e011      	b.n	4696 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4672:	9800      	ldr	r0, [sp, #0]
    4674:	2802      	cmp	r0, #2
    4676:	d002      	beq.n	467e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4678:	2803      	cmp	r0, #3
    467a:	d10c      	bne.n	4696 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    467c:	e006      	b.n	468c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    467e:	6820      	ldr	r0, [r4, #0]
    4680:	b110      	cbz	r0, 4688 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4682:	2000      	movs	r0, #0
    4684:	6026      	str	r6, [r4, #0]
    4686:	e005      	b.n	4694 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4688:	2128      	movs	r1, #40	; 0x28
    468a:	e00c      	b.n	46a6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    468c:	6820      	ldr	r0, [r4, #0]
    468e:	b168      	cbz	r0, 46ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4690:	2001      	movs	r0, #1
    4692:	6026      	str	r6, [r4, #0]
    4694:	47a8      	blx	r5
    4696:	4668      	mov	r0, sp
    4698:	f000 fbac 	bl	4df4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    469c:	2800      	cmp	r0, #0
    469e:	d0e8      	beq.n	4672 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    46a0:	2805      	cmp	r0, #5
    46a2:	d005      	beq.n	46b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    46a4:	2135      	movs	r1, #53	; 0x35
    46a6:	2004      	movs	r0, #4
    46a8:	f7ff ff4e 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46ac:	212d      	movs	r1, #45	; 0x2d
    46ae:	e7fa      	b.n	46a6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    46b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46b2:	0000      	.short	0x0000
    46b4:	20000060 	.word	0x20000060
    46b8:	b570      	push	{r4, r5, r6, lr}
    46ba:	4c14      	ldr	r4, [pc, #80]	; (470c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    46bc:	4605      	mov	r5, r0
    46be:	7820      	ldrb	r0, [r4, #0]
    46c0:	b140      	cbz	r0, 46d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    46c2:	78a2      	ldrb	r2, [r4, #2]
    46c4:	1c61      	adds	r1, r4, #1
    46c6:	4628      	mov	r0, r5
    46c8:	1c92      	adds	r2, r2, #2
    46ca:	f006 fdd9 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    46ce:	2000      	movs	r0, #0
    46d0:	7020      	strb	r0, [r4, #0]
    46d2:	e013      	b.n	46fc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    46d4:	480e      	ldr	r0, [pc, #56]	; (4710 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    46d6:	f001 fdf9 	bl	62cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    46da:	2800      	cmp	r0, #0
    46dc:	d00f      	beq.n	46fe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    46de:	480c      	ldr	r0, [pc, #48]	; (4710 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    46e0:	7800      	ldrb	r0, [r0, #0]
    46e2:	2814      	cmp	r0, #20
    46e4:	d104      	bne.n	46f0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    46e6:	210a      	movs	r1, #10
    46e8:	203e      	movs	r0, #62	; 0x3e
    46ea:	f006 ff03 	bl	b4f4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    46ee:	b138      	cbz	r0, 4700 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    46f0:	4907      	ldr	r1, [pc, #28]	; (4710 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    46f2:	4628      	mov	r0, r5
    46f4:	f006 ff12 	bl	b51c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    46f8:	2800      	cmp	r0, #0
    46fa:	d000      	beq.n	46fe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    46fc:	2001      	movs	r0, #1
    46fe:	bd70      	pop	{r4, r5, r6, pc}
    4700:	4903      	ldr	r1, [pc, #12]	; (4710 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4702:	4628      	mov	r0, r5
    4704:	f007 f947 	bl	b996 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4708:	e7f8      	b.n	46fc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    470a:	0000      	.short	0x0000
    470c:	20000bac 	.word	0x20000bac
    4710:	20000aa4 	.word	0x20000aa4
    4714:	b570      	push	{r4, r5, r6, lr}
    4716:	780a      	ldrb	r2, [r1, #0]
    4718:	7082      	strb	r2, [r0, #2]
    471a:	b33a      	cbz	r2, 476c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    471c:	2a01      	cmp	r2, #1
    471e:	d825      	bhi.n	476c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    4720:	2313      	movs	r3, #19
    4722:	7003      	strb	r3, [r0, #0]
    4724:	2300      	movs	r3, #0
    4726:	e00a      	b.n	473e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    4728:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    472c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4730:	78a6      	ldrb	r6, [r4, #2]
    4732:	70ee      	strb	r6, [r5, #3]
    4734:	8864      	ldrh	r4, [r4, #2]
    4736:	0a24      	lsrs	r4, r4, #8
    4738:	1c5b      	adds	r3, r3, #1
    473a:	712c      	strb	r4, [r5, #4]
    473c:	b2db      	uxtb	r3, r3
    473e:	4293      	cmp	r3, r2
    4740:	d3f2      	bcc.n	4728 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    4742:	2300      	movs	r3, #0
    4744:	e00b      	b.n	475e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    4746:	bf00      	nop
    4748:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    474c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4750:	792e      	ldrb	r6, [r5, #4]
    4752:	7166      	strb	r6, [r4, #5]
    4754:	88ad      	ldrh	r5, [r5, #4]
    4756:	0a2d      	lsrs	r5, r5, #8
    4758:	1c5b      	adds	r3, r3, #1
    475a:	71a5      	strb	r5, [r4, #6]
    475c:	b2db      	uxtb	r3, r3
    475e:	4293      	cmp	r3, r2
    4760:	d3f2      	bcc.n	4748 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    4762:	2101      	movs	r1, #1
    4764:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4768:	b2c0      	uxtb	r0, r0
    476a:	bd70      	pop	{r4, r5, r6, pc}
    476c:	2000      	movs	r0, #0
    476e:	bd70      	pop	{r4, r5, r6, pc}

00004770 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4770:	2101      	movs	r1, #1
    4772:	4a0c      	ldr	r2, [pc, #48]	; (47a4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4774:	2840      	cmp	r0, #64	; 0x40
    4776:	d20c      	bcs.n	4792 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4778:	2820      	cmp	r0, #32
    477a:	d803      	bhi.n	4784 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    477c:	1e40      	subs	r0, r0, #1
    477e:	4081      	lsls	r1, r0
    4780:	6810      	ldr	r0, [r2, #0]
    4782:	e002      	b.n	478a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4784:	3821      	subs	r0, #33	; 0x21
    4786:	4081      	lsls	r1, r0
    4788:	6850      	ldr	r0, [r2, #4]
    478a:	4201      	tst	r1, r0
    478c:	d107      	bne.n	479e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    478e:	2000      	movs	r0, #0
    4790:	4770      	bx	lr
    4792:	28ff      	cmp	r0, #255	; 0xff
    4794:	d003      	beq.n	479e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4796:	3840      	subs	r0, #64	; 0x40
    4798:	4081      	lsls	r1, r0
    479a:	6890      	ldr	r0, [r2, #8]
    479c:	e7f5      	b.n	478a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    479e:	2001      	movs	r0, #1
    47a0:	4770      	bx	lr
    47a2:	0000      	.short	0x0000
    47a4:	20000064 	.word	0x20000064

000047a8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    47a8:	2101      	movs	r1, #1
    47aa:	1e40      	subs	r0, r0, #1
    47ac:	4081      	lsls	r1, r0
    47ae:	4804      	ldr	r0, [pc, #16]	; (47c0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    47b0:	68c0      	ldr	r0, [r0, #12]
    47b2:	4201      	tst	r1, r0
    47b4:	d001      	beq.n	47ba <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    47b6:	2001      	movs	r0, #1
    47b8:	4770      	bx	lr
    47ba:	2000      	movs	r0, #0
    47bc:	4770      	bx	lr
    47be:	0000      	.short	0x0000
    47c0:	20000064 	.word	0x20000064

000047c4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    47c4:	4901      	ldr	r1, [pc, #4]	; (47cc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    47c6:	6800      	ldr	r0, [r0, #0]
    47c8:	60c8      	str	r0, [r1, #12]
    47ca:	4770      	bx	lr
    47cc:	20000064 	.word	0x20000064

000047d0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    47d0:	4904      	ldr	r1, [pc, #16]	; (47e4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    47d2:	6802      	ldr	r2, [r0, #0]
    47d4:	6840      	ldr	r0, [r0, #4]
    47d6:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    47da:	600a      	str	r2, [r1, #0]
    47dc:	4a02      	ldr	r2, [pc, #8]	; (47e8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    47de:	4310      	orrs	r0, r2
    47e0:	6048      	str	r0, [r1, #4]
    47e2:	4770      	bx	lr
    47e4:	20000064 	.word	0x20000064
    47e8:	024007f8 	.word	0x024007f8

000047ec <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    47ec:	4805      	ldr	r0, [pc, #20]	; (4804 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    47ee:	f04f 31ff 	mov.w	r1, #4294967295
    47f2:	6001      	str	r1, [r0, #0]
    47f4:	0cc9      	lsrs	r1, r1, #19
    47f6:	6041      	str	r1, [r0, #4]
    47f8:	2100      	movs	r1, #0
    47fa:	6081      	str	r1, [r0, #8]
    47fc:	211f      	movs	r1, #31
    47fe:	60c1      	str	r1, [r0, #12]
    4800:	4770      	bx	lr
    4802:	0000      	.short	0x0000
    4804:	20000064 	.word	0x20000064

00004808 <sdc_hci_cmd_cb_reset>:
    4808:	b510      	push	{r4, lr}
    480a:	f7ff ffef 	bl	47ec <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    480e:	f008 fe8c 	bl	d52a <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4812:	4604      	mov	r4, r0
    4814:	4802      	ldr	r0, [pc, #8]	; (4820 <sdc_hci_cmd_cb_reset+0x18>)
    4816:	6800      	ldr	r0, [r0, #0]
    4818:	b100      	cbz	r0, 481c <sdc_hci_cmd_cb_reset+0x14>
    481a:	4780      	blx	r0
    481c:	4620      	mov	r0, r4
    481e:	bd10      	pop	{r4, pc}
    4820:	20000074 	.word	0x20000074

00004824 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4824:	4901      	ldr	r1, [pc, #4]	; (482c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4826:	6008      	str	r0, [r1, #0]
    4828:	4770      	bx	lr
    482a:	0000      	.short	0x0000
    482c:	20000074 	.word	0x20000074

00004830 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4830:	2102      	movs	r1, #2
    4832:	8001      	strh	r1, [r0, #0]
    4834:	8041      	strh	r1, [r0, #2]
    4836:	2100      	movs	r1, #0
    4838:	7101      	strb	r1, [r0, #4]
    483a:	210e      	movs	r1, #14
    483c:	7141      	strb	r1, [r0, #5]
    483e:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    4842:	80c1      	strh	r1, [r0, #6]
    4844:	4901      	ldr	r1, [pc, #4]	; (484c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4846:	6081      	str	r1, [r0, #8]
    4848:	2000      	movs	r0, #0
    484a:	4770      	bx	lr
    484c:	3c186766 	.word	0x3c186766

00004850 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4850:	b510      	push	{r4, lr}
    4852:	b120      	cbz	r0, 485e <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    4854:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4858:	2017      	movs	r0, #23
    485a:	f7ff fe75 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    485e:	4801      	ldr	r0, [pc, #4]	; (4864 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    4860:	7800      	ldrb	r0, [r0, #0]
    4862:	bd10      	pop	{r4, pc}
    4864:	20000cb0 	.word	0x20000cb0

00004868 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    486a:	4605      	mov	r5, r0
    486c:	7808      	ldrb	r0, [r1, #0]
    486e:	784a      	ldrb	r2, [r1, #1]
    4870:	4290      	cmp	r0, r2
    4872:	d902      	bls.n	487a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    4874:	f240 1163 	movw	r1, #355	; 0x163
    4878:	e00a      	b.n	4890 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    487a:	9500      	str	r5, [sp, #0]
    487c:	b15d      	cbz	r5, 4896 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    487e:	2600      	movs	r6, #0
    4880:	1ce8      	adds	r0, r5, #3
    4882:	784c      	ldrb	r4, [r1, #1]
    4884:	f020 0003 	bic.w	r0, r0, #3
    4888:	42a8      	cmp	r0, r5
    488a:	d006      	beq.n	489a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    488c:	f240 1179 	movw	r1, #377	; 0x179
    4890:	2017      	movs	r0, #23
    4892:	f7ff fe59 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4896:	2601      	movs	r6, #1
    4898:	e7f2      	b.n	4880 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    489a:	4f12      	ldr	r7, [pc, #72]	; (48e4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    489c:	4631      	mov	r1, r6
    489e:	4668      	mov	r0, sp
    48a0:	703c      	strb	r4, [r7, #0]
    48a2:	f000 f881 	bl	49a8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x74>
    48a6:	2000      	movs	r0, #0
    48a8:	4603      	mov	r3, r0
    48aa:	9900      	ldr	r1, [sp, #0]
    48ac:	1cc9      	adds	r1, r1, #3
    48ae:	f021 0103 	bic.w	r1, r1, #3
    48b2:	9100      	str	r1, [sp, #0]
    48b4:	b966      	cbnz	r6, 48d0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    48b6:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    48ba:	6091      	str	r1, [r2, #8]
    48bc:	2100      	movs	r1, #0
    48be:	e005      	b.n	48cc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    48c0:	f8d2 c008 	ldr.w	ip, [r2, #8]
    48c4:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    48c8:	1c49      	adds	r1, r1, #1
    48ca:	b2c9      	uxtb	r1, r1
    48cc:	42a1      	cmp	r1, r4
    48ce:	d3f7      	bcc.n	48c0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    48d0:	9900      	ldr	r1, [sp, #0]
    48d2:	1c40      	adds	r0, r0, #1
    48d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    48d8:	9100      	str	r1, [sp, #0]
    48da:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    48de:	d0e4      	beq.n	48aa <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    48e0:	1b48      	subs	r0, r1, r5
    48e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48e4:	20000cb0 	.word	0x20000cb0

000048e8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    48e8:	b570      	push	{r4, r5, r6, lr}
    48ea:	4604      	mov	r4, r0
    48ec:	f007 fc5d 	bl	c1aa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    48f0:	b108      	cbz	r0, 48f6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    48f2:	2010      	movs	r0, #16
    48f4:	bd70      	pop	{r4, r5, r6, pc}
    48f6:	7825      	ldrb	r5, [r4, #0]
    48f8:	f000 f892 	bl	4a20 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xec>
    48fc:	4602      	mov	r2, r0
    48fe:	480c      	ldr	r0, [pc, #48]	; (4930 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4900:	8861      	ldrh	r1, [r4, #2]
    4902:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4906:	e00e      	b.n	4926 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4908:	6883      	ldr	r3, [r0, #8]
    490a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    490e:	b143      	cbz	r3, 4922 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4910:	1c4a      	adds	r2, r1, #1
    4912:	8062      	strh	r2, [r4, #2]
    4914:	80a1      	strh	r1, [r4, #4]
    4916:	6880      	ldr	r0, [r0, #8]
    4918:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    491c:	60a0      	str	r0, [r4, #8]
    491e:	2000      	movs	r0, #0
    4920:	bd70      	pop	{r4, r5, r6, pc}
    4922:	1c49      	adds	r1, r1, #1
    4924:	b289      	uxth	r1, r1
    4926:	4291      	cmp	r1, r2
    4928:	d3ee      	bcc.n	4908 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    492a:	8061      	strh	r1, [r4, #2]
    492c:	2005      	movs	r0, #5
    492e:	bd70      	pop	{r4, r5, r6, pc}
    4930:	20000cb0 	.word	0x20000cb0

00004934 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4934:	b570      	push	{r4, r5, r6, lr}
    4936:	4606      	mov	r6, r0
    4938:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    493c:	f243 0502 	movw	r5, #12290	; 0x3002
    4940:	38ff      	subs	r0, #255	; 0xff
    4942:	d01a      	beq.n	497a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4944:	b109      	cbz	r1, 494a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    4946:	2007      	movs	r0, #7
    4948:	bd70      	pop	{r4, r5, r6, pc}
    494a:	4630      	mov	r0, r6
    494c:	f000 f81c 	bl	4988 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    4950:	0004      	movs	r4, r0
    4952:	d012      	beq.n	497a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4954:	480a      	ldr	r0, [pc, #40]	; (4980 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    4956:	4621      	mov	r1, r4
    4958:	6802      	ldr	r2, [r0, #0]
    495a:	4630      	mov	r0, r6
    495c:	4790      	blx	r2
    495e:	4d09      	ldr	r5, [pc, #36]	; (4984 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    4960:	2000      	movs	r0, #0
    4962:	68a9      	ldr	r1, [r5, #8]
    4964:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    4968:	f000 f850 	bl	4a0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    496c:	4602      	mov	r2, r0
    496e:	4621      	mov	r1, r4
    4970:	6868      	ldr	r0, [r5, #4]
    4972:	f007 fbaa 	bl	c0ca <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4976:	2000      	movs	r0, #0
    4978:	bd70      	pop	{r4, r5, r6, pc}
    497a:	4628      	mov	r0, r5
    497c:	bd70      	pop	{r4, r5, r6, pc}
    497e:	0000      	.short	0x0000
    4980:	00004a34 	.word	0x00004a34
    4984:	20000cb0 	.word	0x20000cb0
    4988:	b570      	push	{r4, r5, r6, lr}
    498a:	460c      	mov	r4, r1
    498c:	4605      	mov	r5, r0
    498e:	f007 fbc2 	bl	c116 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    4992:	2800      	cmp	r0, #0
    4994:	d005      	beq.n	49a2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x6e>
    4996:	4803      	ldr	r0, [pc, #12]	; (49a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x70>)
    4998:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    499c:	6880      	ldr	r0, [r0, #8]
    499e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    49a2:	bd70      	pop	{r4, r5, r6, pc}
    49a4:	20000cb0 	.word	0x20000cb0
    49a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    49ac:	4e16      	ldr	r6, [pc, #88]	; (4a08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    49ae:	4688      	mov	r8, r1
    49b0:	4605      	mov	r5, r0
    49b2:	2400      	movs	r4, #0
    49b4:	6828      	ldr	r0, [r5, #0]
    49b6:	1cc0      	adds	r0, r0, #3
    49b8:	f020 0003 	bic.w	r0, r0, #3
    49bc:	6028      	str	r0, [r5, #0]
    49be:	4620      	mov	r0, r4
    49c0:	f000 f824 	bl	4a0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    49c4:	5d31      	ldrb	r1, [r6, r4]
    49c6:	4348      	muls	r0, r1
    49c8:	f1b8 0f00 	cmp.w	r8, #0
    49cc:	d001      	beq.n	49d2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9e>
    49ce:	2200      	movs	r2, #0
    49d0:	e000      	b.n	49d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa0>
    49d2:	682a      	ldr	r2, [r5, #0]
    49d4:	4601      	mov	r1, r0
    49d6:	9200      	str	r2, [sp, #0]
    49d8:	b132      	cbz	r2, 49e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    49da:	2700      	movs	r7, #0
    49dc:	ea4f 000d 	mov.w	r0, sp
    49e0:	f007 fb52 	bl	c088 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    49e4:	b11f      	cbz	r7, 49ee <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    49e6:	e006      	b.n	49f6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc2>
    49e8:	2701      	movs	r7, #1
    49ea:	2000      	movs	r0, #0
    49ec:	e7f8      	b.n	49e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    49ee:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    49f2:	9a00      	ldr	r2, [sp, #0]
    49f4:	604a      	str	r2, [r1, #4]
    49f6:	6829      	ldr	r1, [r5, #0]
    49f8:	1c64      	adds	r4, r4, #1
    49fa:	4408      	add	r0, r1
    49fc:	6028      	str	r0, [r5, #0]
    49fe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    4a02:	d0d7      	beq.n	49b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x80>
    4a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4a08:	20000cb0 	.word	0x20000cb0
    4a0c:	4903      	ldr	r1, [pc, #12]	; (4a1c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe8>)
    4a0e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4a12:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4a16:	1cc0      	adds	r0, r0, #3
    4a18:	4008      	ands	r0, r1
    4a1a:	4770      	bx	lr
    4a1c:	00004a2c 	.word	0x00004a2c
    4a20:	4801      	ldr	r0, [pc, #4]	; (4a28 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4a22:	7800      	ldrb	r0, [r0, #0]
    4a24:	4770      	bx	lr
    4a26:	0000      	.short	0x0000
    4a28:	20000cb0 	.word	0x20000cb0
    4a2c:	000001e0 	.word	0x000001e0
    4a30:	0000c12b 	.word	0x0000c12b
    4a34:	0000cf9d 	.word	0x0000cf9d

00004a38 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4a38:	b570      	push	{r4, r5, r6, lr}
    4a3a:	4c14      	ldr	r4, [pc, #80]	; (4a8c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4a3c:	6823      	ldr	r3, [r4, #0]
    4a3e:	b18b      	cbz	r3, 4a64 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4a40:	7a19      	ldrb	r1, [r3, #8]
    4a42:	4281      	cmp	r1, r0
    4a44:	d912      	bls.n	4a6c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4a46:	685a      	ldr	r2, [r3, #4]
    4a48:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4a4c:	b171      	cbz	r1, 4a6c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4a4e:	2500      	movs	r5, #0
    4a50:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4a54:	884a      	ldrh	r2, [r1, #2]
    4a56:	6818      	ldr	r0, [r3, #0]
    4a58:	f007 fb37 	bl	c0ca <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4a5c:	6821      	ldr	r1, [r4, #0]
    4a5e:	2000      	movs	r0, #0
    4a60:	7a0a      	ldrb	r2, [r1, #8]
    4a62:	e00c      	b.n	4a7e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4a64:	21c8      	movs	r1, #200	; 0xc8
    4a66:	2018      	movs	r0, #24
    4a68:	f7ff fd6e 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a6c:	f243 0002 	movw	r0, #12290	; 0x3002
    4a70:	bd70      	pop	{r4, r5, r6, pc}
    4a72:	684b      	ldr	r3, [r1, #4]
    4a74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4a78:	b933      	cbnz	r3, 4a88 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4a7a:	1c40      	adds	r0, r0, #1
    4a7c:	b2c0      	uxtb	r0, r0
    4a7e:	4282      	cmp	r2, r0
    4a80:	d8f7      	bhi.n	4a72 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4a82:	6808      	ldr	r0, [r1, #0]
    4a84:	f007 fb16 	bl	c0b4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4a88:	2000      	movs	r0, #0
    4a8a:	bd70      	pop	{r4, r5, r6, pc}
    4a8c:	20000078 	.word	0x20000078

00004a90 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a94:	460d      	mov	r5, r1
    4a96:	0004      	movs	r4, r0
    4a98:	4690      	mov	r8, r2
    4a9a:	f04f 0600 	mov.w	r6, #0
    4a9e:	d009      	beq.n	4ab4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4aa0:	2700      	movs	r7, #0
    4aa2:	1ce0      	adds	r0, r4, #3
    4aa4:	f020 0003 	bic.w	r0, r0, #3
    4aa8:	42a0      	cmp	r0, r4
    4aaa:	d005      	beq.n	4ab8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4aac:	2186      	movs	r1, #134	; 0x86
    4aae:	2018      	movs	r0, #24
    4ab0:	f7ff fd4a 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ab4:	2701      	movs	r7, #1
    4ab6:	e7f4      	b.n	4aa2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4ab8:	b1cd      	cbz	r5, 4aee <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4aba:	4611      	mov	r1, r2
    4abc:	2000      	movs	r0, #0
    4abe:	f007 fae3 	bl	c088 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4ac2:	300c      	adds	r0, #12
    4ac4:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4ac8:	b98f      	cbnz	r7, 4aee <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4aca:	4f0a      	ldr	r7, [pc, #40]	; (4af4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4acc:	f104 000c 	add.w	r0, r4, #12
    4ad0:	00aa      	lsls	r2, r5, #2
    4ad2:	603c      	str	r4, [r7, #0]
    4ad4:	7225      	strb	r5, [r4, #8]
    4ad6:	6060      	str	r0, [r4, #4]
    4ad8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4adc:	6020      	str	r0, [r4, #0]
    4ade:	2100      	movs	r1, #0
    4ae0:	6860      	ldr	r0, [r4, #4]
    4ae2:	f006 fc47 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4ae6:	4641      	mov	r1, r8
    4ae8:	6838      	ldr	r0, [r7, #0]
    4aea:	f007 facd 	bl	c088 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4aee:	4630      	mov	r0, r6
    4af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4af4:	20000078 	.word	0x20000078

00004af8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4af8:	4909      	ldr	r1, [pc, #36]	; (4b20 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4afa:	b510      	push	{r4, lr}
    4afc:	4602      	mov	r2, r0
    4afe:	6809      	ldr	r1, [r1, #0]
    4b00:	2000      	movs	r0, #0
    4b02:	b149      	cbz	r1, 4b18 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4b04:	7a0b      	ldrb	r3, [r1, #8]
    4b06:	4293      	cmp	r3, r2
    4b08:	d905      	bls.n	4b16 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4b0a:	6849      	ldr	r1, [r1, #4]
    4b0c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4b10:	2900      	cmp	r1, #0
    4b12:	d000      	beq.n	4b16 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4b14:	1d08      	adds	r0, r1, #4
    4b16:	bd10      	pop	{r4, pc}
    4b18:	21ee      	movs	r1, #238	; 0xee
    4b1a:	2018      	movs	r0, #24
    4b1c:	f7ff fd14 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b20:	20000078 	.word	0x20000078

00004b24 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4b24:	490a      	ldr	r1, [pc, #40]	; (4b50 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4b26:	b510      	push	{r4, lr}
    4b28:	4602      	mov	r2, r0
    4b2a:	6809      	ldr	r1, [r1, #0]
    4b2c:	2000      	movs	r0, #0
    4b2e:	b159      	cbz	r1, 4b48 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4b30:	7a0b      	ldrb	r3, [r1, #8]
    4b32:	4293      	cmp	r3, r2
    4b34:	d907      	bls.n	4b46 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4b36:	6849      	ldr	r1, [r1, #4]
    4b38:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4b3c:	2900      	cmp	r1, #0
    4b3e:	d002      	beq.n	4b46 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4b40:	f831 0b04 	ldrh.w	r0, [r1], #4
    4b44:	4408      	add	r0, r1
    4b46:	bd10      	pop	{r4, pc}
    4b48:	21fc      	movs	r1, #252	; 0xfc
    4b4a:	2018      	movs	r0, #24
    4b4c:	f7ff fcfc 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b50:	20000078 	.word	0x20000078

00004b54 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    4b54:	4801      	ldr	r0, [pc, #4]	; (4b5c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    4b56:	7840      	ldrb	r0, [r0, #1]
    4b58:	4770      	bx	lr
    4b5a:	0000      	.short	0x0000
    4b5c:	2000007c 	.word	0x2000007c

00004b60 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    4b60:	4801      	ldr	r0, [pc, #4]	; (4b68 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    4b62:	6840      	ldr	r0, [r0, #4]
    4b64:	4770      	bx	lr
    4b66:	0000      	.short	0x0000
    4b68:	2000007c 	.word	0x2000007c

00004b6c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    4b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b70:	460c      	mov	r4, r1
    4b72:	4607      	mov	r7, r0
    4b74:	4616      	mov	r6, r2
    4b76:	211c      	movs	r1, #28
    4b78:	4610      	mov	r0, r2
    4b7a:	460d      	mov	r5, r1
    4b7c:	4622      	mov	r2, r4
    4b7e:	f007 fa3e 	bl	bffe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    4b82:	4680      	mov	r8, r0
    4b84:	b157      	cbz	r7, 4b9c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    4b86:	4638      	mov	r0, r7
    4b88:	4641      	mov	r1, r8
    4b8a:	4632      	mov	r2, r6
    4b8c:	462b      	mov	r3, r5
    4b8e:	9400      	str	r4, [sp, #0]
    4b90:	f007 f9dd 	bl	bf4e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4b94:	4803      	ldr	r0, [pc, #12]	; (4ba4 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    4b96:	6047      	str	r7, [r0, #4]
    4b98:	7004      	strb	r4, [r0, #0]
    4b9a:	7046      	strb	r6, [r0, #1]
    4b9c:	4640      	mov	r0, r8
    4b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4ba2:	0000      	.short	0x0000
    4ba4:	2000007c 	.word	0x2000007c

00004ba8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    4ba8:	4802      	ldr	r0, [pc, #8]	; (4bb4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    4baa:	7842      	ldrb	r2, [r0, #1]
    4bac:	7801      	ldrb	r1, [r0, #0]
    4bae:	6840      	ldr	r0, [r0, #4]
    4bb0:	f7ff bfdc 	b.w	4b6c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4bb4:	2000007c 	.word	0x2000007c
    4bb8:	4909      	ldr	r1, [pc, #36]	; (4be0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    4bba:	b510      	push	{r4, lr}
    4bbc:	4807      	ldr	r0, [pc, #28]	; (4bdc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    4bbe:	6008      	str	r0, [r1, #0]
    4bc0:	4b08      	ldr	r3, [pc, #32]	; (4be4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    4bc2:	2011      	movs	r0, #17
    4bc4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4bc8:	2200      	movs	r2, #0
    4bca:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4bce:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4bd2:	1c40      	adds	r0, r0, #1
    4bd4:	b2c0      	uxtb	r0, r0
    4bd6:	2814      	cmp	r0, #20
    4bd8:	d3f4      	bcc.n	4bc4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    4bda:	bd10      	pop	{r4, pc}
    4bdc:	fffe0000 	.word	0xfffe0000
    4be0:	4001f508 	.word	0x4001f508
    4be4:	4001f000 	.word	0x4001f000
    4be8:	b570      	push	{r4, r5, r6, lr}
    4bea:	2420      	movs	r4, #32
    4bec:	2100      	movs	r1, #0
    4bee:	2301      	movs	r3, #1
    4bf0:	fa20 f201 	lsr.w	r2, r0, r1
    4bf4:	07d2      	lsls	r2, r2, #31
    4bf6:	d020      	beq.n	4c3a <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    4bf8:	b24a      	sxtb	r2, r1
    4bfa:	2a00      	cmp	r2, #0
    4bfc:	db10      	blt.n	4c20 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    4bfe:	bf00      	nop
    4c00:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4c04:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4c08:	f002 051f 	and.w	r5, r2, #31
    4c0c:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4c10:	fa03 f505 	lsl.w	r5, r3, r5
    4c14:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4c18:	f3bf 8f4f 	dsb	sy
    4c1c:	f3bf 8f6f 	isb	sy
    4c20:	db0b      	blt.n	4c3a <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    4c22:	f002 051f 	and.w	r5, r2, #31
    4c26:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4c2a:	ea4f 0282 	mov.w	r2, r2, lsl #2
    4c2e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4c32:	fa03 f505 	lsl.w	r5, r3, r5
    4c36:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    4c3a:	f101 0101 	add.w	r1, r1, #1
    4c3e:	42a1      	cmp	r1, r4
    4c40:	d3d6      	bcc.n	4bf0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    4c42:	bd70      	pop	{r4, r5, r6, pc}
    4c44:	b570      	push	{r4, r5, r6, lr}
    4c46:	0042      	lsls	r2, r0, #1
    4c48:	f04f 0100 	mov.w	r1, #0
    4c4c:	d501      	bpl.n	4c52 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    4c4e:	4a14      	ldr	r2, [pc, #80]	; (4ca0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    4c50:	6011      	str	r1, [r2, #0]
    4c52:	f3c0 3280 	ubfx	r2, r0, #14, #1
    4c56:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    4c5a:	429a      	cmp	r2, r3
    4c5c:	d003      	beq.n	4c66 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    4c5e:	2169      	movs	r1, #105	; 0x69
    4c60:	201b      	movs	r0, #27
    4c62:	f7ff fc71 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c66:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4c6a:	d014      	beq.n	4c96 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    4c6c:	4a0d      	ldr	r2, [pc, #52]	; (4ca4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    4c6e:	2001      	movs	r0, #1
    4c70:	6050      	str	r0, [r2, #4]
    4c72:	1e83      	subs	r3, r0, #2
    4c74:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4c78:	4a0b      	ldr	r2, [pc, #44]	; (4ca8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    4c7a:	6090      	str	r0, [r2, #8]
    4c7c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4c80:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4c84:	4c09      	ldr	r4, [pc, #36]	; (4cac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    4c86:	6021      	str	r1, [r4, #0]
    4c88:	1d25      	adds	r5, r4, #4
    4c8a:	6028      	str	r0, [r5, #0]
    4c8c:	6090      	str	r0, [r2, #8]
    4c8e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4c92:	6021      	str	r1, [r4, #0]
    4c94:	6028      	str	r0, [r5, #0]
    4c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4c9a:	f7ff bf8d 	b.w	4bb8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4c9e:	0000      	.short	0x0000
    4ca0:	4001e504 	.word	0x4001e504
    4ca4:	4000e000 	.word	0x4000e000
    4ca8:	4000f000 	.word	0x4000f000
    4cac:	4000f500 	.word	0x4000f500

00004cb0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4cb0:	b570      	push	{r4, r5, r6, lr}
    4cb2:	4c0a      	ldr	r4, [pc, #40]	; (4cdc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4cb4:	460d      	mov	r5, r1
    4cb6:	6020      	str	r0, [r4, #0]
    4cb8:	f7ff ffc4 	bl	4c44 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    4cbc:	6820      	ldr	r0, [r4, #0]
    4cbe:	f7ff ff93 	bl	4be8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    4cc2:	f000 f883 	bl	4dcc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4cc6:	f7ff ff77 	bl	4bb8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4cca:	f007 fa63 	bl	c194 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4cce:	4628      	mov	r0, r5
    4cd0:	f000 f8b6 	bl	4e40 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4cd8:	f000 b8ce 	b.w	4e78 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4cdc:	20000084 	.word	0x20000084

00004ce0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4ce0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ce4:	4c36      	ldr	r4, [pc, #216]	; (4dc0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    4ce6:	b082      	sub	sp, #8
    4ce8:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    4cec:	2601      	movs	r6, #1
    4cee:	4835      	ldr	r0, [pc, #212]	; (4dc4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4cf0:	f006 fa1d 	bl	b12e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4cf4:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4dc4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    4cf8:	b920      	cbnz	r0, 4d04 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    4cfa:	2600      	movs	r6, #0
    4cfc:	f109 0001 	add.w	r0, r9, #1
    4d00:	f006 fa2c 	bl	b15c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4d04:	f44f 7580 	mov.w	r5, #256	; 0x100
    4d08:	f04f 0800 	mov.w	r8, #0
    4d0c:	1d2f      	adds	r7, r5, #4
    4d0e:	2101      	movs	r1, #1
    4d10:	6061      	str	r1, [r4, #4]
    4d12:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4d16:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4d1a:	9802      	ldr	r0, [sp, #8]
    4d1c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    4d20:	6021      	str	r1, [r4, #0]
    4d22:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 4dc8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    4d26:	e01c      	b.n	4d62 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4d28:	f8da 0000 	ldr.w	r0, [sl]
    4d2c:	06c0      	lsls	r0, r0, #27
    4d2e:	d518      	bpl.n	4d62 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4d30:	200e      	movs	r0, #14
    4d32:	f007 fa1b 	bl	c16c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4d36:	f3ef 8010 	mrs	r0, PRIMASK
    4d3a:	9000      	str	r0, [sp, #0]
    4d3c:	b672      	cpsid	i
    4d3e:	2103      	movs	r1, #3
    4d40:	4620      	mov	r0, r4
    4d42:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    4d46:	4629      	mov	r1, r5
    4d48:	f007 fa1d 	bl	c186 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4d4c:	b930      	cbnz	r0, 4d5c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    4d4e:	4639      	mov	r1, r7
    4d50:	4620      	mov	r0, r4
    4d52:	f007 fa18 	bl	c186 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4d56:	b908      	cbnz	r0, 4d5c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    4d58:	f7ff fa3c 	bl	41d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4d5c:	9800      	ldr	r0, [sp, #0]
    4d5e:	b900      	cbnz	r0, 4d62 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4d60:	b662      	cpsie	i
    4d62:	4629      	mov	r1, r5
    4d64:	4620      	mov	r0, r4
    4d66:	f007 fa0e 	bl	c186 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4d6a:	b928      	cbnz	r0, 4d78 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    4d6c:	4639      	mov	r1, r7
    4d6e:	4620      	mov	r0, r4
    4d70:	f007 fa09 	bl	c186 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4d74:	2800      	cmp	r0, #0
    4d76:	d0d7      	beq.n	4d28 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    4d78:	4639      	mov	r1, r7
    4d7a:	4620      	mov	r0, r4
    4d7c:	f007 fa03 	bl	c186 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4d80:	2800      	cmp	r0, #0
    4d82:	d1c4      	bne.n	4d0e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    4d84:	b136      	cbz	r6, 4d94 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    4d86:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    4d8a:	f109 0001 	add.w	r0, r9, #1
    4d8e:	f006 f9ce 	bl	b12e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4d92:	e012      	b.n	4dba <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    4d94:	f109 0001 	add.w	r0, r9, #1
    4d98:	f006 f9c9 	bl	b12e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4d9c:	2800      	cmp	r0, #0
    4d9e:	d1ad      	bne.n	4cfc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4da0:	2003      	movs	r0, #3
    4da2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4da6:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4daa:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4dae:	200e      	movs	r0, #14
    4db0:	f007 f9dc 	bl	c16c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4db4:	4803      	ldr	r0, [pc, #12]	; (4dc4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4db6:	f006 f9d1 	bl	b15c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4dba:	2000      	movs	r0, #0
    4dbc:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4dc0:	4000e000 	.word	0x4000e000
    4dc4:	2000026f 	.word	0x2000026f
    4dc8:	e000ed10 	.word	0xe000ed10

00004dcc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4dcc:	b510      	push	{r4, lr}
    4dce:	4808      	ldr	r0, [pc, #32]	; (4df0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4dd0:	f006 f9c0 	bl	b154 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4dd4:	b108      	cbz	r0, 4dda <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4dd6:	2125      	movs	r1, #37	; 0x25
    4dd8:	e006      	b.n	4de8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4dda:	4805      	ldr	r0, [pc, #20]	; (4df0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4ddc:	1c40      	adds	r0, r0, #1
    4dde:	f006 f9b9 	bl	b154 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4de2:	2800      	cmp	r0, #0
    4de4:	d003      	beq.n	4dee <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4de6:	2129      	movs	r1, #41	; 0x29
    4de8:	201d      	movs	r0, #29
    4dea:	f7ff fbad 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dee:	bd10      	pop	{r4, pc}
    4df0:	2000026f 	.word	0x2000026f

00004df4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4df4:	b570      	push	{r4, r5, r6, lr}
    4df6:	4911      	ldr	r1, [pc, #68]	; (4e3c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4df8:	680a      	ldr	r2, [r1, #0]
    4dfa:	b1ea      	cbz	r2, 4e38 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4dfc:	2300      	movs	r3, #0
    4dfe:	461d      	mov	r5, r3
    4e00:	2401      	movs	r4, #1
    4e02:	684a      	ldr	r2, [r1, #4]
    4e04:	1c52      	adds	r2, r2, #1
    4e06:	604a      	str	r2, [r1, #4]
    4e08:	2a0c      	cmp	r2, #12
    4e0a:	d300      	bcc.n	4e0e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4e0c:	604d      	str	r5, [r1, #4]
    4e0e:	790e      	ldrb	r6, [r1, #4]
    4e10:	fa04 f206 	lsl.w	r2, r4, r6
    4e14:	680e      	ldr	r6, [r1, #0]
    4e16:	4216      	tst	r6, r2
    4e18:	d00b      	beq.n	4e32 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4e1a:	f3ef 8310 	mrs	r3, PRIMASK
    4e1e:	b672      	cpsid	i
    4e20:	680c      	ldr	r4, [r1, #0]
    4e22:	4394      	bics	r4, r2
    4e24:	600c      	str	r4, [r1, #0]
    4e26:	b903      	cbnz	r3, 4e2a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4e28:	b662      	cpsie	i
    4e2a:	6849      	ldr	r1, [r1, #4]
    4e2c:	6001      	str	r1, [r0, #0]
    4e2e:	2000      	movs	r0, #0
    4e30:	bd70      	pop	{r4, r5, r6, pc}
    4e32:	1c5b      	adds	r3, r3, #1
    4e34:	2b0c      	cmp	r3, #12
    4e36:	d3e4      	bcc.n	4e02 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4e38:	2005      	movs	r0, #5
    4e3a:	bd70      	pop	{r4, r5, r6, pc}
    4e3c:	20000088 	.word	0x20000088

00004e40 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4e40:	4802      	ldr	r0, [pc, #8]	; (4e4c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4e42:	2100      	movs	r1, #0
    4e44:	6001      	str	r1, [r0, #0]
    4e46:	6041      	str	r1, [r0, #4]
    4e48:	4770      	bx	lr
    4e4a:	0000      	.short	0x0000
    4e4c:	20000088 	.word	0x20000088

00004e50 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4e50:	b510      	push	{r4, lr}
    4e52:	4c08      	ldr	r4, [pc, #32]	; (4e74 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4e54:	7861      	ldrb	r1, [r4, #1]
    4e56:	b109      	cbz	r1, 4e5c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4e58:	200f      	movs	r0, #15
    4e5a:	bd10      	pop	{r4, pc}
    4e5c:	f7ff f946 	bl	40ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4e60:	7020      	strb	r0, [r4, #0]
    4e62:	28ff      	cmp	r0, #255	; 0xff
    4e64:	d001      	beq.n	4e6a <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4e66:	2000      	movs	r0, #0
    4e68:	bd10      	pop	{r4, pc}
    4e6a:	2176      	movs	r1, #118	; 0x76
    4e6c:	201f      	movs	r0, #31
    4e6e:	f7ff fb6b 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e72:	0000      	.short	0x0000
    4e74:	20000090 	.word	0x20000090

00004e78 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4e78:	4901      	ldr	r1, [pc, #4]	; (4e80 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4e7a:	2000      	movs	r0, #0
    4e7c:	7048      	strb	r0, [r1, #1]
    4e7e:	4770      	bx	lr
    4e80:	20000090 	.word	0x20000090

00004e84 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4e84:	4806      	ldr	r0, [pc, #24]	; (4ea0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4e86:	4a07      	ldr	r2, [pc, #28]	; (4ea4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4e88:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4e8a:	8852      	ldrh	r2, [r2, #2]
    4e8c:	4291      	cmp	r1, r2
    4e8e:	d104      	bne.n	4e9a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4e90:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4e94:	b108      	cbz	r0, 4e9a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4e96:	2000      	movs	r0, #0
    4e98:	4770      	bx	lr
    4e9a:	2001      	movs	r0, #1
    4e9c:	4770      	bx	lr
    4e9e:	0000      	.short	0x0000
    4ea0:	20000e34 	.word	0x20000e34
    4ea4:	20000254 	.word	0x20000254

00004ea8 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4ea8:	4901      	ldr	r1, [pc, #4]	; (4eb0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4eaa:	8048      	strh	r0, [r1, #2]
    4eac:	4770      	bx	lr
    4eae:	0000      	.short	0x0000
    4eb0:	20000254 	.word	0x20000254

00004eb4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4eb4:	4808      	ldr	r0, [pc, #32]	; (4ed8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4eb6:	4a09      	ldr	r2, [pc, #36]	; (4edc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4eb8:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4eba:	8852      	ldrh	r2, [r2, #2]
    4ebc:	4291      	cmp	r1, r2
    4ebe:	d109      	bne.n	4ed4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4ec0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4ec4:	8481      	strh	r1, [r0, #36]	; 0x24
    4ec6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4eca:	b119      	cbz	r1, 4ed4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4ecc:	2100      	movs	r1, #0
    4ece:	7001      	strb	r1, [r0, #0]
    4ed0:	2001      	movs	r0, #1
    4ed2:	4770      	bx	lr
    4ed4:	2000      	movs	r0, #0
    4ed6:	4770      	bx	lr
    4ed8:	20000e34 	.word	0x20000e34
    4edc:	20000254 	.word	0x20000254

00004ee0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4ee0:	4807      	ldr	r0, [pc, #28]	; (4f00 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4ee2:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4ee6:	2901      	cmp	r1, #1
    4ee8:	d007      	beq.n	4efa <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4eea:	2101      	movs	r1, #1
    4eec:	7001      	strb	r1, [r0, #0]
    4eee:	4805      	ldr	r0, [pc, #20]	; (4f04 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4ef0:	4903      	ldr	r1, [pc, #12]	; (4f00 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4ef2:	8800      	ldrh	r0, [r0, #0]
    4ef4:	8488      	strh	r0, [r1, #36]	; 0x24
    4ef6:	2001      	movs	r0, #1
    4ef8:	4770      	bx	lr
    4efa:	2000      	movs	r0, #0
    4efc:	4770      	bx	lr
    4efe:	0000      	.short	0x0000
    4f00:	20000e34 	.word	0x20000e34
    4f04:	20000254 	.word	0x20000254

00004f08 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4f08:	4906      	ldr	r1, [pc, #24]	; (4f24 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4f0a:	4b07      	ldr	r3, [pc, #28]	; (4f28 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4f0c:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4f0e:	885b      	ldrh	r3, [r3, #2]
    4f10:	429a      	cmp	r2, r3
    4f12:	d105      	bne.n	4f20 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4f14:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4f18:	b112      	cbz	r2, 4f20 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4f1a:	6001      	str	r1, [r0, #0]
    4f1c:	2001      	movs	r0, #1
    4f1e:	4770      	bx	lr
    4f20:	2000      	movs	r0, #0
    4f22:	4770      	bx	lr
    4f24:	20000e34 	.word	0x20000e34
    4f28:	20000254 	.word	0x20000254

00004f2c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4f2c:	4909      	ldr	r1, [pc, #36]	; (4f54 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4f2e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4f30:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4f34:	3bff      	subs	r3, #255	; 0xff
    4f36:	d002      	beq.n	4f3e <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4f38:	2100      	movs	r1, #0
    4f3a:	6001      	str	r1, [r0, #0]
    4f3c:	e007      	b.n	4f4e <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4f3e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4f42:	4904      	ldr	r1, [pc, #16]	; (4f54 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4f44:	2a01      	cmp	r2, #1
    4f46:	d002      	beq.n	4f4e <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4f48:	6001      	str	r1, [r0, #0]
    4f4a:	2001      	movs	r0, #1
    4f4c:	4770      	bx	lr
    4f4e:	2000      	movs	r0, #0
    4f50:	4770      	bx	lr
    4f52:	0000      	.short	0x0000
    4f54:	20000e34 	.word	0x20000e34

00004f58 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4f58:	4901      	ldr	r1, [pc, #4]	; (4f60 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4f5a:	8008      	strh	r0, [r1, #0]
    4f5c:	4770      	bx	lr
    4f5e:	0000      	.short	0x0000
    4f60:	20000254 	.word	0x20000254
    4f64:	4905      	ldr	r1, [pc, #20]	; (4f7c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x24>)
    4f66:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4f68:	4282      	cmp	r2, r0
    4f6a:	d105      	bne.n	4f78 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x20>
    4f6c:	2000      	movs	r0, #0
    4f6e:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4f72:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4f76:	8488      	strh	r0, [r1, #36]	; 0x24
    4f78:	4770      	bx	lr
    4f7a:	0000      	.short	0x0000
    4f7c:	20000e34 	.word	0x20000e34

00004f80 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4f80:	4a0a      	ldr	r2, [pc, #40]	; (4fac <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4f82:	b110      	cbz	r0, 4f8a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4f84:	2801      	cmp	r0, #1
    4f86:	d007      	beq.n	4f98 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4f88:	e00e      	b.n	4fa8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4f8a:	7850      	ldrb	r0, [r2, #1]
    4f8c:	b160      	cbz	r0, 4fa8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4f8e:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4f92:	6008      	str	r0, [r1, #0]
    4f94:	88d0      	ldrh	r0, [r2, #6]
    4f96:	e004      	b.n	4fa2 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4f98:	7810      	ldrb	r0, [r2, #0]
    4f9a:	b128      	cbz	r0, 4fa8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4f9c:	6890      	ldr	r0, [r2, #8]
    4f9e:	6008      	str	r0, [r1, #0]
    4fa0:	8990      	ldrh	r0, [r2, #12]
    4fa2:	8088      	strh	r0, [r1, #4]
    4fa4:	2001      	movs	r0, #1
    4fa6:	4770      	bx	lr
    4fa8:	2000      	movs	r0, #0
    4faa:	4770      	bx	lr
    4fac:	20000271 	.word	0x20000271

00004fb0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4fb0:	4a08      	ldr	r2, [pc, #32]	; (4fd4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4fb2:	2301      	movs	r3, #1
    4fb4:	b138      	cbz	r0, 4fc6 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4fb6:	2801      	cmp	r0, #1
    4fb8:	d104      	bne.n	4fc4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4fba:	7013      	strb	r3, [r2, #0]
    4fbc:	6808      	ldr	r0, [r1, #0]
    4fbe:	6090      	str	r0, [r2, #8]
    4fc0:	8888      	ldrh	r0, [r1, #4]
    4fc2:	8190      	strh	r0, [r2, #12]
    4fc4:	4770      	bx	lr
    4fc6:	7053      	strb	r3, [r2, #1]
    4fc8:	6808      	ldr	r0, [r1, #0]
    4fca:	f8c2 0002 	str.w	r0, [r2, #2]
    4fce:	8888      	ldrh	r0, [r1, #4]
    4fd0:	80d0      	strh	r0, [r2, #6]
    4fd2:	4770      	bx	lr
    4fd4:	20000271 	.word	0x20000271

00004fd8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4fd8:	4906      	ldr	r1, [pc, #24]	; (4ff4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4fda:	b110      	cbz	r0, 4fe2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4fdc:	2801      	cmp	r0, #1
    4fde:	d002      	beq.n	4fe6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4fe0:	e005      	b.n	4fee <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4fe2:	7848      	ldrb	r0, [r1, #1]
    4fe4:	e000      	b.n	4fe8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4fe6:	7808      	ldrb	r0, [r1, #0]
    4fe8:	b108      	cbz	r0, 4fee <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4fea:	2001      	movs	r0, #1
    4fec:	4770      	bx	lr
    4fee:	2000      	movs	r0, #0
    4ff0:	4770      	bx	lr
    4ff2:	0000      	.short	0x0000
    4ff4:	20000271 	.word	0x20000271

00004ff8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4ff8:	4901      	ldr	r1, [pc, #4]	; (5000 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4ffa:	7448      	strb	r0, [r1, #17]
    4ffc:	4770      	bx	lr
    4ffe:	0000      	.short	0x0000
    5000:	20000692 	.word	0x20000692

00005004 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5004:	4901      	ldr	r1, [pc, #4]	; (500c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5006:	2001      	movs	r0, #1
    5008:	7188      	strb	r0, [r1, #6]
    500a:	4770      	bx	lr
    500c:	200000ac 	.word	0x200000ac

00005010 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5014:	4d66      	ldr	r5, [pc, #408]	; (51b0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    5016:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5018:	782e      	ldrb	r6, [r5, #0]
    501a:	bbee      	cbnz	r6, 5098 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    501c:	b3e2      	cbz	r2, 5098 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    501e:	b3db      	cbz	r3, 5098 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5020:	b3d4      	cbz	r4, 5098 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5022:	f105 0614 	add.w	r6, r5, #20
    5026:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    502a:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    502e:	2700      	movs	r7, #0
    5030:	71af      	strb	r7, [r5, #6]
    5032:	716f      	strb	r7, [r5, #5]
    5034:	70ef      	strb	r7, [r5, #3]
    5036:	70af      	strb	r7, [r5, #2]
    5038:	712f      	strb	r7, [r5, #4]
    503a:	81af      	strh	r7, [r5, #12]
    503c:	81ef      	strh	r7, [r5, #14]
    503e:	f000 f963 	bl	5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5042:	4606      	mov	r6, r0
    5044:	f000 f95a 	bl	52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5048:	4604      	mov	r4, r0
    504a:	f005 faa3 	bl	a594 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    504e:	f004 ff87 	bl	9f60 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5052:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    5056:	f005 fb23 	bl	a6a0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    505a:	f104 0018 	add.w	r0, r4, #24
    505e:	f005 fbfd 	bl	a85c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5062:	6920      	ldr	r0, [r4, #16]
    5064:	f005 fbf0 	bl	a848 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5068:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    506c:	f005 fc14 	bl	a898 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5070:	f04f 0b01 	mov.w	fp, #1
    5074:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    5078:	2000      	movs	r0, #0
    507a:	f005 f94f 	bl	a31c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    507e:	2800      	cmp	r0, #0
    5080:	d07e      	beq.n	5180 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    5082:	484c      	ldr	r0, [pc, #304]	; (51b4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    5084:	f005 f9be 	bl	a404 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5088:	8820      	ldrh	r0, [r4, #0]
    508a:	f7ff fd4b 	bl	4b24 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    508e:	6328      	str	r0, [r5, #48]	; 0x30
    5090:	8820      	ldrh	r0, [r4, #0]
    5092:	f7ff fd31 	bl	4af8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5096:	e000      	b.n	509a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    5098:	e00a      	b.n	50b0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    509a:	6368      	str	r0, [r5, #52]	; 0x34
    509c:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    50a0:	f88d 0000 	strb.w	r0, [sp]
    50a4:	9800      	ldr	r0, [sp, #0]
    50a6:	9000      	str	r0, [sp, #0]
    50a8:	f89d 0000 	ldrb.w	r0, [sp]
    50ac:	b118      	cbz	r0, 50b6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    50ae:	e012      	b.n	50d6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    50b0:	f44f 718a 	mov.w	r1, #276	; 0x114
    50b4:	e079      	b.n	51aa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19a>
    50b6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    50b8:	b168      	cbz	r0, 50d6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    50ba:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    50bc:	88b1      	ldrh	r1, [r6, #4]
    50be:	4288      	cmp	r0, r1
    50c0:	d109      	bne.n	50d6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    50c2:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    50c6:	2201      	movs	r2, #1
    50c8:	4408      	add	r0, r1
    50ca:	8670      	strh	r0, [r6, #50]	; 0x32
    50cc:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    50d0:	6f21      	ldr	r1, [r4, #112]	; 0x70
    50d2:	f7fd fedb 	bl	2e8c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    50d6:	f106 0168 	add.w	r1, r6, #104	; 0x68
    50da:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 51b8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    50de:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    50e2:	f109 0808 	add.w	r8, r9, #8
    50e6:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    50ea:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    50ec:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    50f0:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    50f2:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    50f6:	f000 f975 	bl	53e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    50fa:	4601      	mov	r1, r0
    50fc:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    50fe:	46ba      	mov	sl, r7
    5100:	f007 f9dc 	bl	c4bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5104:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    5106:	4281      	cmp	r1, r0
    5108:	d200      	bcs.n	510c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    510a:	4608      	mov	r0, r1
    510c:	7228      	strb	r0, [r5, #8]
    510e:	46a8      	mov	r8, r5
    5110:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5114:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    5116:	7cf7      	ldrb	r7, [r6, #19]
    5118:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    511a:	2908      	cmp	r1, #8
    511c:	d100      	bne.n	5120 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    511e:	2104      	movs	r1, #4
    5120:	f007 f9cc 	bl	c4bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5124:	b90f      	cbnz	r7, 512a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    5126:	1d00      	adds	r0, r0, #4
    5128:	b280      	uxth	r0, r0
    512a:	4285      	cmp	r5, r0
    512c:	d200      	bcs.n	5130 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    512e:	4628      	mov	r0, r5
    5130:	b2c0      	uxtb	r0, r0
    5132:	f888 0009 	strb.w	r0, [r8, #9]
    5136:	7cf2      	ldrb	r2, [r6, #19]
    5138:	b102      	cbz	r2, 513c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    513a:	2204      	movs	r2, #4
    513c:	4410      	add	r0, r2
    513e:	f888 0007 	strb.w	r0, [r8, #7]
    5142:	7cb1      	ldrb	r1, [r6, #18]
    5144:	b1a1      	cbz	r1, 5170 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x160>
    5146:	491c      	ldr	r1, [pc, #112]	; (51b8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    5148:	3108      	adds	r1, #8
    514a:	f881 b018 	strb.w	fp, [r1, #24]
    514e:	e9d6 0216 	ldrd	r0, r2, [r6, #88]	; 0x58
    5152:	e9c1 0204 	strd	r0, r2, [r1, #16]
    5156:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    515a:	f007 f8a3 	bl	c2a4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    515e:	4916      	ldr	r1, [pc, #88]	; (51b8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    5160:	4603      	mov	r3, r0
    5162:	22fb      	movs	r2, #251	; 0xfb
    5164:	3108      	adds	r1, #8
    5166:	2000      	movs	r0, #0
    5168:	f004 ff44 	bl	9ff4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    516c:	f004 ff78 	bl	a060 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5170:	2001      	movs	r0, #1
    5172:	f000 fb87 	bl	5884 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5176:	4811      	ldr	r0, [pc, #68]	; (51bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>)
    5178:	6800      	ldr	r0, [r0, #0]
    517a:	2803      	cmp	r0, #3
    517c:	d013      	beq.n	51a6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    517e:	e000      	b.n	5182 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5180:	e00f      	b.n	51a2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x192>
    5182:	280b      	cmp	r0, #11
    5184:	d00f      	beq.n	51a6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    5186:	4648      	mov	r0, r9
    5188:	f840 af52 	str.w	sl, [r0, #82]!
    518c:	f8c0 a004 	str.w	sl, [r0, #4]
    5190:	4809      	ldr	r0, [pc, #36]	; (51b8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    5192:	88b1      	ldrh	r1, [r6, #4]
    5194:	3052      	adds	r0, #82	; 0x52
    5196:	8041      	strh	r1, [r0, #2]
    5198:	8821      	ldrh	r1, [r4, #0]
    519a:	8001      	strh	r1, [r0, #0]
    519c:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    51a0:	7101      	strb	r1, [r0, #4]
    51a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51a6:	f240 11c1 	movw	r1, #449	; 0x1c1
    51aa:	2027      	movs	r0, #39	; 0x27
    51ac:	f7ff f9cc 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51b0:	200000ac 	.word	0x200000ac
    51b4:	00005a08 	.word	0x00005a08
    51b8:	20000640 	.word	0x20000640
    51bc:	40001550 	.word	0x40001550

000051c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    51c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    51c4:	4605      	mov	r5, r0
    51c6:	f000 f89f 	bl	5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    51ca:	4e33      	ldr	r6, [pc, #204]	; (5298 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    51cc:	4604      	mov	r4, r0
    51ce:	6a70      	ldr	r0, [r6, #36]	; 0x24
    51d0:	7847      	ldrb	r7, [r0, #1]
    51d2:	b10d      	cbz	r5, 51d8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    51d4:	2d01      	cmp	r5, #1
    51d6:	d103      	bne.n	51e0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    51d8:	6b71      	ldr	r1, [r6, #52]	; 0x34
    51da:	f006 f97a 	bl	b4d2 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    51de:	7070      	strb	r0, [r6, #1]
    51e0:	7870      	ldrb	r0, [r6, #1]
    51e2:	f04f 0800 	mov.w	r8, #0
    51e6:	f04f 0901 	mov.w	r9, #1
    51ea:	b150      	cbz	r0, 5202 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    51ec:	2801      	cmp	r0, #1
    51ee:	d01a      	beq.n	5226 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    51f0:	2802      	cmp	r0, #2
    51f2:	d034      	beq.n	525e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    51f4:	2803      	cmp	r0, #3
    51f6:	d048      	beq.n	528a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    51f8:	f240 4115 	movw	r1, #1045	; 0x415
    51fc:	2027      	movs	r0, #39	; 0x27
    51fe:	f7ff f9a3 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5202:	2d01      	cmp	r5, #1
    5204:	d032      	beq.n	526c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5206:	f000 f8d9 	bl	53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    520a:	4639      	mov	r1, r7
    520c:	2201      	movs	r2, #1
    520e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5210:	f006 fd6b 	bl	bcea <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5214:	e028      	b.n	5268 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5216:	bf00      	nop
    5218:	f884 8008 	strb.w	r8, [r4, #8]
    521c:	e031      	b.n	5282 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    521e:	bf00      	nop
    5220:	f884 9008 	strb.w	r9, [r4, #8]
    5224:	e02d      	b.n	5282 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5226:	2d01      	cmp	r5, #1
    5228:	d008      	beq.n	523c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    522a:	f000 f8c7 	bl	53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    522e:	4639      	mov	r1, r7
    5230:	2200      	movs	r2, #0
    5232:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5234:	f006 fd59 	bl	bcea <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5238:	2d02      	cmp	r5, #2
    523a:	d00b      	beq.n	5254 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    523c:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5240:	1c40      	adds	r0, r0, #1
    5242:	f141 0100 	adc.w	r1, r1, #0
    5246:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    524a:	7a20      	ldrb	r0, [r4, #8]
    524c:	2801      	cmp	r0, #1
    524e:	d003      	beq.n	5258 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    5250:	f884 9008 	strb.w	r9, [r4, #8]
    5254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5258:	f884 8008 	strb.w	r8, [r4, #8]
    525c:	e7fa      	b.n	5254 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    525e:	2d01      	cmp	r5, #1
    5260:	d004      	beq.n	526c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5262:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5264:	f006 ff0b 	bl	c07e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5268:	2d02      	cmp	r5, #2
    526a:	d0f3      	beq.n	5254 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    526c:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5270:	1c40      	adds	r0, r0, #1
    5272:	f141 0100 	adc.w	r1, r1, #0
    5276:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    527a:	7a20      	ldrb	r0, [r4, #8]
    527c:	2801      	cmp	r0, #1
    527e:	d1cf      	bne.n	5220 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    5280:	e7ca      	b.n	5218 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    5282:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5286:	f001 b883 	b.w	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    528a:	2d01      	cmp	r5, #1
    528c:	d0e2      	beq.n	5254 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    528e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5290:	f006 fef5 	bl	c07e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5294:	e7f5      	b.n	5282 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5296:	0000      	.short	0x0000
    5298:	200000ac 	.word	0x200000ac

0000529c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    529c:	4812      	ldr	r0, [pc, #72]	; (52e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    529e:	b508      	push	{r3, lr}
    52a0:	7801      	ldrb	r1, [r0, #0]
    52a2:	b139      	cbz	r1, 52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    52a4:	7800      	ldrb	r0, [r0, #0]
    52a6:	2801      	cmp	r0, #1
    52a8:	d006      	beq.n	52b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    52aa:	f240 11d9 	movw	r1, #473	; 0x1d9
    52ae:	2027      	movs	r0, #39	; 0x27
    52b0:	f7ff f94a 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52b4:	f000 f9ce 	bl	5654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    52b8:	f000 f820 	bl	52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    52bc:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    52c0:	f88d 1000 	strb.w	r1, [sp]
    52c4:	9900      	ldr	r1, [sp, #0]
    52c6:	9100      	str	r1, [sp, #0]
    52c8:	f89d 1000 	ldrb.w	r1, [sp]
    52cc:	2900      	cmp	r1, #0
    52ce:	d10a      	bne.n	52e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    52d0:	6f01      	ldr	r1, [r0, #112]	; 0x70
    52d2:	2900      	cmp	r1, #0
    52d4:	d007      	beq.n	52e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    52d6:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    52da:	2200      	movs	r2, #0
    52dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    52e0:	4611      	mov	r1, r2
    52e2:	f7fd bdd3 	b.w	2e8c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    52e6:	bd08      	pop	{r3, pc}
    52e8:	200000ac 	.word	0x200000ac
    52ec:	4a02      	ldr	r2, [pc, #8]	; (52f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    52ee:	8993      	ldrh	r3, [r2, #12]
    52f0:	4303      	orrs	r3, r0
    52f2:	8193      	strh	r3, [r2, #12]
    52f4:	6952      	ldr	r2, [r2, #20]
    52f6:	4710      	bx	r2
    52f8:	200000ac 	.word	0x200000ac
    52fc:	4801      	ldr	r0, [pc, #4]	; (5304 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    52fe:	6840      	ldr	r0, [r0, #4]
    5300:	4770      	bx	lr
    5302:	0000      	.short	0x0000
    5304:	200000e4 	.word	0x200000e4
    5308:	4801      	ldr	r0, [pc, #4]	; (5310 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    530a:	6840      	ldr	r0, [r0, #4]
    530c:	3078      	adds	r0, #120	; 0x78
    530e:	4770      	bx	lr
    5310:	200000e4 	.word	0x200000e4
    5314:	4a01      	ldr	r2, [pc, #4]	; (531c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    5316:	2100      	movs	r1, #0
    5318:	6952      	ldr	r2, [r2, #20]
    531a:	4710      	bx	r2
    531c:	200000ac 	.word	0x200000ac
    5320:	b570      	push	{r4, r5, r6, lr}
    5322:	f7ff fff1 	bl	5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5326:	4604      	mov	r4, r0
    5328:	f7ff ffe8 	bl	52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    532c:	4605      	mov	r5, r0
    532e:	4621      	mov	r1, r4
    5330:	f007 f96f 	bl	c612 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5334:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    5338:	2901      	cmp	r1, #1
    533a:	d114      	bne.n	5366 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    533c:	2800      	cmp	r0, #0
    533e:	d012      	beq.n	5366 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5340:	4909      	ldr	r1, [pc, #36]	; (5368 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    5342:	2001      	movs	r0, #1
    5344:	684a      	ldr	r2, [r1, #4]
    5346:	8829      	ldrh	r1, [r5, #0]
    5348:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    534c:	7a61      	ldrb	r1, [r4, #9]
    534e:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    5352:	7aa1      	ldrb	r1, [r4, #10]
    5354:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    5358:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    535c:	7010      	strb	r0, [r2, #0]
    535e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5362:	f001 b815 	b.w	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5366:	bd70      	pop	{r4, r5, r6, pc}
    5368:	200000e4 	.word	0x200000e4
    536c:	b570      	push	{r4, r5, r6, lr}
    536e:	4605      	mov	r5, r0
    5370:	2901      	cmp	r1, #1
    5372:	d81c      	bhi.n	53ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5374:	4c10      	ldr	r4, [pc, #64]	; (53b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    5376:	69a1      	ldr	r1, [r4, #24]
    5378:	4788      	blx	r1
    537a:	b1c0      	cbz	r0, 53ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    537c:	7960      	ldrb	r0, [r4, #5]
    537e:	b9b0      	cbnz	r0, 53ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5380:	2d01      	cmp	r5, #1
    5382:	d116      	bne.n	53b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    5384:	f104 0010 	add.w	r0, r4, #16
    5388:	7800      	ldrb	r0, [r0, #0]
    538a:	06c1      	lsls	r1, r0, #27
    538c:	d405      	bmi.n	539a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    538e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5390:	7809      	ldrb	r1, [r1, #0]
    5392:	06c9      	lsls	r1, r1, #27
    5394:	d401      	bmi.n	539a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    5396:	2101      	movs	r1, #1
    5398:	e000      	b.n	539c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    539a:	2100      	movs	r1, #0
    539c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    539e:	b91a      	cbnz	r2, 53a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    53a0:	8962      	ldrh	r2, [r4, #10]
    53a2:	b10a      	cbz	r2, 53a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    53a4:	06c0      	lsls	r0, r0, #27
    53a6:	d502      	bpl.n	53ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    53a8:	89a0      	ldrh	r0, [r4, #12]
    53aa:	4301      	orrs	r1, r0
    53ac:	d001      	beq.n	53b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    53ae:	2001      	movs	r0, #1
    53b0:	bd70      	pop	{r4, r5, r6, pc}
    53b2:	2000      	movs	r0, #0
    53b4:	bd70      	pop	{r4, r5, r6, pc}
    53b6:	0000      	.short	0x0000
    53b8:	200000ac 	.word	0x200000ac
    53bc:	b510      	push	{r4, lr}
    53be:	4c08      	ldr	r4, [pc, #32]	; (53e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    53c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    53c2:	b138      	cbz	r0, 53d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    53c4:	8962      	ldrh	r2, [r4, #10]
    53c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    53c8:	1cd2      	adds	r2, r2, #3
    53ca:	f005 ff59 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    53ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    53d0:	6260      	str	r0, [r4, #36]	; 0x24
    53d2:	bd10      	pop	{r4, pc}
    53d4:	f240 415b 	movw	r1, #1115	; 0x45b
    53d8:	2027      	movs	r0, #39	; 0x27
    53da:	f7ff f8b5 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53de:	0000      	.short	0x0000
    53e0:	200000ac 	.word	0x200000ac
    53e4:	b510      	push	{r4, lr}
    53e6:	f7ff ff89 	bl	52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    53ea:	4604      	mov	r4, r0
    53ec:	f7ff ff8c 	bl	5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    53f0:	7b41      	ldrb	r1, [r0, #13]
    53f2:	4a0a      	ldr	r2, [pc, #40]	; (541c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    53f4:	2924      	cmp	r1, #36	; 0x24
    53f6:	d008      	beq.n	540a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    53f8:	7b80      	ldrb	r0, [r0, #14]
    53fa:	2824      	cmp	r0, #36	; 0x24
    53fc:	d005      	beq.n	540a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    53fe:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5402:	2804      	cmp	r0, #4
    5404:	d100      	bne.n	5408 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5406:	2008      	movs	r0, #8
    5408:	bd10      	pop	{r4, pc}
    540a:	6850      	ldr	r0, [r2, #4]
    540c:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    5410:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5418:	f006 bf52 	b.w	c2c0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    541c:	200000e4 	.word	0x200000e4
    5420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5424:	4689      	mov	r9, r1
    5426:	4606      	mov	r6, r0
    5428:	f7ff ff6e 	bl	5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    542c:	4c58      	ldr	r4, [pc, #352]	; (5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    542e:	2700      	movs	r7, #0
    5430:	4605      	mov	r5, r0
    5432:	f88d 7000 	strb.w	r7, [sp]
    5436:	7820      	ldrb	r0, [r4, #0]
    5438:	2802      	cmp	r0, #2
    543a:	d004      	beq.n	5446 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    543c:	f240 41ba 	movw	r1, #1210	; 0x4ba
    5440:	2027      	movs	r0, #39	; 0x27
    5442:	f7ff f881 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5446:	7ba0      	ldrb	r0, [r4, #14]
    5448:	0640      	lsls	r0, r0, #25
    544a:	d406      	bmi.n	545a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    544c:	2040      	movs	r0, #64	; 0x40
    544e:	f7ff ff61 	bl	5314 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5452:	89e0      	ldrh	r0, [r4, #14]
    5454:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5458:	81e0      	strh	r0, [r4, #14]
    545a:	7ce8      	ldrb	r0, [r5, #19]
    545c:	f04f 0801 	mov.w	r8, #1
    5460:	b3c6      	cbz	r6, 54d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    5462:	f004 fe2d 	bl	a0c0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5466:	f004 fe11 	bl	a08c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    546a:	b968      	cbnz	r0, 5488 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    546c:	7ce8      	ldrb	r0, [r5, #19]
    546e:	b158      	cbz	r0, 5488 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5470:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5472:	7841      	ldrb	r1, [r0, #1]
    5474:	b141      	cbz	r1, 5488 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5476:	7800      	ldrb	r0, [r0, #0]
    5478:	7a29      	ldrb	r1, [r5, #8]
    547a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    547e:	4288      	cmp	r0, r1
    5480:	d102      	bne.n	5488 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5482:	f884 8002 	strb.w	r8, [r4, #2]
    5486:	e064      	b.n	5552 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    5488:	6a60      	ldr	r0, [r4, #36]	; 0x24
    548a:	7841      	ldrb	r1, [r0, #1]
    548c:	8161      	strh	r1, [r4, #10]
    548e:	b121      	cbz	r1, 549a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    5490:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5492:	f006 fdc1 	bl	c018 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5496:	62a0      	str	r0, [r4, #40]	; 0x28
    5498:	e000      	b.n	549c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    549a:	62a7      	str	r7, [r4, #40]	; 0x28
    549c:	89e0      	ldrh	r0, [r4, #14]
    549e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    54a2:	81e0      	strh	r0, [r4, #14]
    54a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    54a6:	79e9      	ldrb	r1, [r5, #7]
    54a8:	7800      	ldrb	r0, [r0, #0]
    54aa:	f3c0 0080 	ubfx	r0, r0, #2, #1
    54ae:	4288      	cmp	r0, r1
    54b0:	d005      	beq.n	54be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    54b2:	f000 f963 	bl	577c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    54b6:	89e0      	ldrh	r0, [r4, #14]
    54b8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    54bc:	81e0      	strh	r0, [r4, #14]
    54be:	6a60      	ldr	r0, [r4, #36]	; 0x24
    54c0:	7a29      	ldrb	r1, [r5, #8]
    54c2:	7800      	ldrb	r0, [r0, #0]
    54c4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    54c8:	4288      	cmp	r0, r1
    54ca:	d10e      	bne.n	54ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    54cc:	4668      	mov	r0, sp
    54ce:	f000 f917 	bl	5700 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    54d2:	e00a      	b.n	54ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    54d4:	e7ff      	b.n	54d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    54d6:	b108      	cbz	r0, 54dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    54d8:	f004 fdec 	bl	a0b4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    54dc:	78e0      	ldrb	r0, [r4, #3]
    54de:	1c40      	adds	r0, r0, #1
    54e0:	70e0      	strb	r0, [r4, #3]
    54e2:	89e0      	ldrh	r0, [r4, #14]
    54e4:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    54e8:	81e0      	strh	r0, [r4, #14]
    54ea:	7ca8      	ldrb	r0, [r5, #18]
    54ec:	b1a0      	cbz	r0, 5518 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    54ee:	f7ff ff05 	bl	52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    54f2:	4928      	ldr	r1, [pc, #160]	; (5594 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    54f4:	f881 8018 	strb.w	r8, [r1, #24]
    54f8:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    54fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5500:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5504:	f006 fece 	bl	c2a4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5508:	4603      	mov	r3, r0
    550a:	22fb      	movs	r2, #251	; 0xfb
    550c:	4921      	ldr	r1, [pc, #132]	; (5594 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    550e:	2000      	movs	r0, #0
    5510:	f004 fd70 	bl	9ff4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5514:	f004 fda4 	bl	a060 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5518:	4d1e      	ldr	r5, [pc, #120]	; (5594 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    551a:	354a      	adds	r5, #74	; 0x4a
    551c:	f1b9 0f00 	cmp.w	r9, #0
    5520:	d104      	bne.n	552c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    5522:	78e1      	ldrb	r1, [r4, #3]
    5524:	2001      	movs	r0, #1
    5526:	f7ff ff21 	bl	536c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    552a:	b1b0      	cbz	r0, 555a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    552c:	f005 f968 	bl	a800 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5530:	f89d 0000 	ldrb.w	r0, [sp]
    5534:	b110      	cbz	r0, 553c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    5536:	2000      	movs	r0, #0
    5538:	f7ff fe42 	bl	51c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    553c:	b136      	cbz	r6, 554c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    553e:	70e7      	strb	r7, [r4, #3]
    5540:	7968      	ldrb	r0, [r5, #5]
    5542:	1c40      	adds	r0, r0, #1
    5544:	7168      	strb	r0, [r5, #5]
    5546:	f7ff feeb 	bl	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    554a:	e002      	b.n	5552 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    554c:	79a8      	ldrb	r0, [r5, #6]
    554e:	1c40      	adds	r0, r0, #1
    5550:	71a8      	strb	r0, [r5, #6]
    5552:	f000 f87f 	bl	5654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    555a:	f89d 0000 	ldrb.w	r0, [sp]
    555e:	b110      	cbz	r0, 5566 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    5560:	2001      	movs	r0, #1
    5562:	f7ff fe2d 	bl	51c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5566:	2000      	movs	r0, #0
    5568:	f000 f98c 	bl	5884 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    556c:	f89d 0000 	ldrb.w	r0, [sp]
    5570:	b110      	cbz	r0, 5578 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    5572:	2002      	movs	r0, #2
    5574:	f7ff fe24 	bl	51c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5578:	b136      	cbz	r6, 5588 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    557a:	70e7      	strb	r7, [r4, #3]
    557c:	7968      	ldrb	r0, [r5, #5]
    557e:	1c40      	adds	r0, r0, #1
    5580:	7168      	strb	r0, [r5, #5]
    5582:	f7ff fecd 	bl	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5586:	e7e6      	b.n	5556 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    5588:	79a8      	ldrb	r0, [r5, #6]
    558a:	1c40      	adds	r0, r0, #1
    558c:	71a8      	strb	r0, [r5, #6]
    558e:	e7e2      	b.n	5556 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    5590:	200000ac 	.word	0x200000ac
    5594:	20000648 	.word	0x20000648
    5598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    559c:	4688      	mov	r8, r1
    559e:	4681      	mov	r9, r0
    55a0:	f7ff feb2 	bl	5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    55a4:	4d29      	ldr	r5, [pc, #164]	; (564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    55a6:	4604      	mov	r4, r0
    55a8:	7828      	ldrb	r0, [r5, #0]
    55aa:	2801      	cmp	r0, #1
    55ac:	d004      	beq.n	55b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    55ae:	f240 416a 	movw	r1, #1130	; 0x46a
    55b2:	2027      	movs	r0, #39	; 0x27
    55b4:	f7fe ffc8 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55b8:	7860      	ldrb	r0, [r4, #1]
    55ba:	2600      	movs	r6, #0
    55bc:	2701      	movs	r7, #1
    55be:	b120      	cbz	r0, 55ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    55c0:	7066      	strb	r6, [r4, #1]
    55c2:	2100      	movs	r1, #0
    55c4:	2004      	movs	r0, #4
    55c6:	f7ff fe91 	bl	52ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    55ca:	6a29      	ldr	r1, [r5, #32]
    55cc:	7808      	ldrb	r0, [r1, #0]
    55ce:	43c0      	mvns	r0, r0
    55d0:	0780      	lsls	r0, r0, #30
    55d2:	d109      	bne.n	55e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    55d4:	79a0      	ldrb	r0, [r4, #6]
    55d6:	bb88      	cbnz	r0, 563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    55d8:	2002      	movs	r0, #2
    55da:	f7ff fe87 	bl	52ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    55de:	6a28      	ldr	r0, [r5, #32]
    55e0:	7800      	ldrb	r0, [r0, #0]
    55e2:	43c0      	mvns	r0, r0
    55e4:	0780      	lsls	r0, r0, #30
    55e6:	d029      	beq.n	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    55e8:	6a28      	ldr	r0, [r5, #32]
    55ea:	7840      	ldrb	r0, [r0, #1]
    55ec:	b110      	cbz	r0, 55f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    55ee:	2002      	movs	r0, #2
    55f0:	71a0      	strb	r0, [r4, #6]
    55f2:	e000      	b.n	55f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    55f4:	71a7      	strb	r7, [r4, #6]
    55f6:	7ce0      	ldrb	r0, [r4, #19]
    55f8:	b1a0      	cbz	r0, 5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    55fa:	f7ff fe7f 	bl	52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    55fe:	4914      	ldr	r1, [pc, #80]	; (5650 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5600:	7a6d      	ldrb	r5, [r5, #9]
    5602:	760e      	strb	r6, [r1, #24]
    5604:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    5608:	e9c1 2304 	strd	r2, r3, [r1, #16]
    560c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5610:	f006 fe48 	bl	c2a4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5614:	4603      	mov	r3, r0
    5616:	462a      	mov	r2, r5
    5618:	490d      	ldr	r1, [pc, #52]	; (5650 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    561a:	2001      	movs	r0, #1
    561c:	f004 fcea 	bl	9ff4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5620:	f004 fd1e 	bl	a060 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5624:	ea38 0009 	bics.w	r0, r8, r9
    5628:	d004      	beq.n	5634 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    562a:	2100      	movs	r1, #0
    562c:	4608      	mov	r0, r1
    562e:	f7ff fe9d 	bl	536c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5632:	b128      	cbz	r0, 5640 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    5634:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5638:	f000 b80c 	b.w	5654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    563c:	2003      	movs	r0, #3
    563e:	e7d7      	b.n	55f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5640:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5644:	2000      	movs	r0, #0
    5646:	f000 b8df 	b.w	5808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    564a:	0000      	.short	0x0000
    564c:	200000ac 	.word	0x200000ac
    5650:	20000648 	.word	0x20000648
    5654:	b510      	push	{r4, lr}
    5656:	f004 fdc5 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    565a:	f004 fc81 	bl	9f60 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    565e:	4c0d      	ldr	r4, [pc, #52]	; (5694 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    5660:	89e0      	ldrh	r0, [r4, #14]
    5662:	f7ff fe57 	bl	5314 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5666:	69e2      	ldr	r2, [r4, #28]
    5668:	7961      	ldrb	r1, [r4, #5]
    566a:	78a0      	ldrb	r0, [r4, #2]
    566c:	4790      	blx	r2
    566e:	480a      	ldr	r0, [pc, #40]	; (5698 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    5670:	7c40      	ldrb	r0, [r0, #17]
    5672:	b158      	cbz	r0, 568c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    5674:	4808      	ldr	r0, [pc, #32]	; (5698 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    5676:	3852      	subs	r0, #82	; 0x52
    5678:	f850 1f52 	ldr.w	r1, [r0, #82]!
    567c:	6081      	str	r1, [r0, #8]
    567e:	6841      	ldr	r1, [r0, #4]
    5680:	60c1      	str	r1, [r0, #12]
    5682:	4805      	ldr	r0, [pc, #20]	; (5698 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    5684:	2101      	movs	r1, #1
    5686:	7401      	strb	r1, [r0, #16]
    5688:	f000 fe82 	bl	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    568c:	2000      	movs	r0, #0
    568e:	7020      	strb	r0, [r4, #0]
    5690:	bd10      	pop	{r4, pc}
    5692:	0000      	.short	0x0000
    5694:	200000ac 	.word	0x200000ac
    5698:	20000692 	.word	0x20000692
    569c:	4808      	ldr	r0, [pc, #32]	; (56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    569e:	b510      	push	{r4, lr}
    56a0:	7800      	ldrb	r0, [r0, #0]
    56a2:	2802      	cmp	r0, #2
    56a4:	d004      	beq.n	56b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    56a6:	f240 2111 	movw	r1, #529	; 0x211
    56aa:	2027      	movs	r0, #39	; 0x27
    56ac:	f7fe ff4c 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56b0:	4904      	ldr	r1, [pc, #16]	; (56c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    56b2:	2001      	movs	r0, #1
    56b4:	71c8      	strb	r0, [r1, #7]
    56b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56ba:	f7ff bfcb 	b.w	5654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    56be:	0000      	.short	0x0000
    56c0:	200000ac 	.word	0x200000ac
    56c4:	20000692 	.word	0x20000692
    56c8:	b430      	push	{r4, r5}
    56ca:	4b0c      	ldr	r3, [pc, #48]	; (56fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    56cc:	b942      	cbnz	r2, 56e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    56ce:	79da      	ldrb	r2, [r3, #7]
    56d0:	2aff      	cmp	r2, #255	; 0xff
    56d2:	d105      	bne.n	56e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    56d4:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    56d8:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    56dc:	42a2      	cmp	r2, r4
    56de:	d00b      	beq.n	56f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    56e0:	b131      	cbz	r1, 56f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    56e2:	79da      	ldrb	r2, [r3, #7]
    56e4:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    56e8:	bc30      	pop	{r4, r5}
    56ea:	4610      	mov	r0, r2
    56ec:	f005 b8c0 	b.w	a870 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    56f0:	22ff      	movs	r2, #255	; 0xff
    56f2:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    56f6:	e7f7      	b.n	56e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    56f8:	bc30      	pop	{r4, r5}
    56fa:	4770      	bx	lr
    56fc:	200000ac 	.word	0x200000ac
    5700:	b570      	push	{r4, r5, r6, lr}
    5702:	4606      	mov	r6, r0
    5704:	f7ff fe00 	bl	5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5708:	4a1b      	ldr	r2, [pc, #108]	; (5778 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    570a:	4604      	mov	r4, r0
    570c:	2501      	movs	r5, #1
    570e:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5710:	7808      	ldrb	r0, [r1, #0]
    5712:	f000 0003 	and.w	r0, r0, #3
    5716:	2801      	cmp	r0, #1
    5718:	d00c      	beq.n	5734 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    571a:	2802      	cmp	r0, #2
    571c:	d00a      	beq.n	5734 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    571e:	2803      	cmp	r0, #3
    5720:	d121      	bne.n	5766 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5722:	7065      	strb	r5, [r4, #1]
    5724:	89d0      	ldrh	r0, [r2, #14]
    5726:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    572a:	81d0      	strh	r0, [r2, #14]
    572c:	2001      	movs	r0, #1
    572e:	f7ff fddd 	bl	52ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5732:	e018      	b.n	5766 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5734:	7848      	ldrb	r0, [r1, #1]
    5736:	b1b0      	cbz	r0, 5766 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5738:	89d1      	ldrh	r1, [r2, #14]
    573a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    573e:	81d1      	strh	r1, [r2, #14]
    5740:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5742:	2900      	cmp	r1, #0
    5744:	d009      	beq.n	575a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    5746:	28fb      	cmp	r0, #251	; 0xfb
    5748:	d808      	bhi.n	575c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    574a:	7990      	ldrb	r0, [r2, #6]
    574c:	b120      	cbz	r0, 5758 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    574e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5752:	2020      	movs	r0, #32
    5754:	f7ff bdde 	b.w	5314 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5758:	7035      	strb	r5, [r6, #0]
    575a:	bd70      	pop	{r4, r5, r6, pc}
    575c:	7950      	ldrb	r0, [r2, #5]
    575e:	f040 0010 	orr.w	r0, r0, #16
    5762:	7150      	strb	r0, [r2, #5]
    5764:	bd70      	pop	{r4, r5, r6, pc}
    5766:	7a20      	ldrb	r0, [r4, #8]
    5768:	2801      	cmp	r0, #1
    576a:	d001      	beq.n	5770 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    576c:	7225      	strb	r5, [r4, #8]
    576e:	bd70      	pop	{r4, r5, r6, pc}
    5770:	2000      	movs	r0, #0
    5772:	7220      	strb	r0, [r4, #8]
    5774:	bd70      	pop	{r4, r5, r6, pc}
    5776:	0000      	.short	0x0000
    5778:	200000ac 	.word	0x200000ac
    577c:	b570      	push	{r4, r5, r6, lr}
    577e:	f7ff fdc3 	bl	5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5782:	4604      	mov	r4, r0
    5784:	7980      	ldrb	r0, [r0, #6]
    5786:	2800      	cmp	r0, #0
    5788:	d027      	beq.n	57da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    578a:	2802      	cmp	r0, #2
    578c:	d10d      	bne.n	57aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    578e:	4818      	ldr	r0, [pc, #96]	; (57f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    5790:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5792:	f006 fa83 	bl	bc9c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5796:	b308      	cbz	r0, 57dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5798:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    579c:	1c40      	adds	r0, r0, #1
    579e:	f141 0100 	adc.w	r1, r1, #0
    57a2:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    57a6:	f000 fdf3 	bl	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    57aa:	2500      	movs	r5, #0
    57ac:	71a5      	strb	r5, [r4, #6]
    57ae:	78a0      	ldrb	r0, [r4, #2]
    57b0:	2601      	movs	r6, #1
    57b2:	b170      	cbz	r0, 57d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    57b4:	70a5      	strb	r5, [r4, #2]
    57b6:	f7ff fb7d 	bl	4eb4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    57ba:	b190      	cbz	r0, 57e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    57bc:	2100      	movs	r1, #0
    57be:	2008      	movs	r0, #8
    57c0:	f7ff fd94 	bl	52ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    57c4:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    57c8:	1c40      	adds	r0, r0, #1
    57ca:	f141 0100 	adc.w	r1, r1, #0
    57ce:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    57d2:	79e0      	ldrb	r0, [r4, #7]
    57d4:	2801      	cmp	r0, #1
    57d6:	d009      	beq.n	57ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    57d8:	71e6      	strb	r6, [r4, #7]
    57da:	bd70      	pop	{r4, r5, r6, pc}
    57dc:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    57e0:	e001      	b.n	57e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    57e2:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    57e6:	2027      	movs	r0, #39	; 0x27
    57e8:	f7fe feae 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57ec:	71e5      	strb	r5, [r4, #7]
    57ee:	bd70      	pop	{r4, r5, r6, pc}
    57f0:	200000ac 	.word	0x200000ac
    57f4:	4803      	ldr	r0, [pc, #12]	; (5804 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    57f6:	7800      	ldrb	r0, [r0, #0]
    57f8:	2800      	cmp	r0, #0
    57fa:	d001      	beq.n	5800 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    57fc:	f7ff bf2a 	b.w	5654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5800:	4770      	bx	lr
    5802:	0000      	.short	0x0000
    5804:	200000ac 	.word	0x200000ac
    5808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    580c:	4607      	mov	r7, r0
    580e:	f7ff fd75 	bl	52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5812:	4680      	mov	r8, r0
    5814:	f7ff fd78 	bl	5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5818:	4c17      	ldr	r4, [pc, #92]	; (5878 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    581a:	4605      	mov	r5, r0
    581c:	463a      	mov	r2, r7
    581e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5820:	6260      	str	r0, [r4, #36]	; 0x24
    5822:	2101      	movs	r1, #1
    5824:	4640      	mov	r0, r8
    5826:	f7ff ff4f 	bl	56c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    582a:	7ce8      	ldrb	r0, [r5, #19]
    582c:	2600      	movs	r6, #0
    582e:	b178      	cbz	r0, 5850 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    5830:	4812      	ldr	r0, [pc, #72]	; (587c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5832:	f004 ff3b 	bl	a6ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5836:	4812      	ldr	r0, [pc, #72]	; (5880 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    5838:	7606      	strb	r6, [r0, #24]
    583a:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    583e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5842:	490e      	ldr	r1, [pc, #56]	; (587c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5844:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5846:	f004 fb5d 	bl	9f04 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    584a:	f004 fb6f 	bl	9f2c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    584e:	e004      	b.n	585a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5850:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5852:	f004 ff2b 	bl	a6ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5856:	f004 fb83 	bl	9f60 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    585a:	b917      	cbnz	r7, 5862 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    585c:	4630      	mov	r0, r6
    585e:	f004 fdd9 	bl	a414 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5862:	2100      	movs	r1, #0
    5864:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    5868:	4608      	mov	r0, r1
    586a:	f004 ffab 	bl	a7c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    586e:	2002      	movs	r0, #2
    5870:	7020      	strb	r0, [r4, #0]
    5872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5876:	0000      	.short	0x0000
    5878:	200000ac 	.word	0x200000ac
    587c:	20000540 	.word	0x20000540
    5880:	20000648 	.word	0x20000648
    5884:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5888:	4604      	mov	r4, r0
    588a:	f7ff fd3d 	bl	5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    588e:	4605      	mov	r5, r0
    5890:	f7ff fd34 	bl	52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5894:	4606      	mov	r6, r0
    5896:	f8df 9164 	ldr.w	r9, [pc, #356]	; 59fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    589a:	4622      	mov	r2, r4
    589c:	2100      	movs	r1, #0
    589e:	f7ff ff13 	bl	56c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    58a2:	79a8      	ldrb	r0, [r5, #6]
    58a4:	f04f 0800 	mov.w	r8, #0
    58a8:	2701      	movs	r7, #1
    58aa:	f1a9 0420 	sub.w	r4, r9, #32
    58ae:	b140      	cbz	r0, 58c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    58b0:	2801      	cmp	r0, #1
    58b2:	d01f      	beq.n	58f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    58b4:	2802      	cmp	r0, #2
    58b6:	d030      	beq.n	591a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    58b8:	2803      	cmp	r0, #3
    58ba:	d03c      	beq.n	5936 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    58bc:	f240 21ae 	movw	r1, #686	; 0x2ae
    58c0:	e058      	b.n	5974 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    58c2:	7a20      	ldrb	r0, [r4, #8]
    58c4:	2150      	movs	r1, #80	; 0x50
    58c6:	f8ad 0004 	strh.w	r0, [sp, #4]
    58ca:	5388      	strh	r0, [r1, r6]
    58cc:	4648      	mov	r0, r9
    58ce:	f7ff fb1b 	bl	4f08 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    58d2:	b128      	cbz	r0, 58e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    58d4:	2080      	movs	r0, #128	; 0x80
    58d6:	6a21      	ldr	r1, [r4, #32]
    58d8:	f7ff fd08 	bl	52ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    58dc:	70af      	strb	r7, [r5, #2]
    58de:	e02e      	b.n	593e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    58e0:	466a      	mov	r2, sp
    58e2:	a901      	add	r1, sp, #4
    58e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    58e6:	f006 fcf5 	bl	c2d4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    58ea:	6220      	str	r0, [r4, #32]
    58ec:	b110      	cbz	r0, 58f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    58ee:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    58f2:	b111      	cbz	r1, 58fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    58f4:	4842      	ldr	r0, [pc, #264]	; (5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    58f6:	6220      	str	r0, [r4, #32]
    58f8:	e021      	b.n	593e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    58fa:	f89d 1000 	ldrb.w	r1, [sp]
    58fe:	b931      	cbnz	r1, 590e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    5900:	f8a0 8000 	strh.w	r8, [r0]
    5904:	f880 8002 	strb.w	r8, [r0, #2]
    5908:	2101      	movs	r1, #1
    590a:	f006 ff7b 	bl	c804 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    590e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5912:	6a20      	ldr	r0, [r4, #32]
    5914:	f006 ff48 	bl	c7a8 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5918:	e011      	b.n	593e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    591a:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    591e:	f8ad 0004 	strh.w	r0, [sp, #4]
    5922:	466a      	mov	r2, sp
    5924:	a901      	add	r1, sp, #4
    5926:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5928:	f006 fcd4 	bl	c2d4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    592c:	6220      	str	r0, [r4, #32]
    592e:	b930      	cbnz	r0, 593e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5930:	f240 219f 	movw	r1, #671	; 0x29f
    5934:	e01e      	b.n	5974 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    5936:	4648      	mov	r0, r9
    5938:	f7ff fae6 	bl	4f08 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    593c:	b1c0      	cbz	r0, 5970 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    593e:	6a20      	ldr	r0, [r4, #32]
    5940:	2308      	movs	r3, #8
    5942:	7801      	ldrb	r1, [r0, #0]
    5944:	f021 0108 	bic.w	r1, r1, #8
    5948:	7001      	strb	r1, [r0, #0]
    594a:	79ea      	ldrb	r2, [r5, #7]
    594c:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5950:	4311      	orrs	r1, r2
    5952:	f021 0104 	bic.w	r1, r1, #4
    5956:	7001      	strb	r1, [r0, #0]
    5958:	7a2a      	ldrb	r2, [r5, #8]
    595a:	2304      	movs	r3, #4
    595c:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5960:	4311      	orrs	r1, r2
    5962:	f021 0110 	bic.w	r1, r1, #16
    5966:	7001      	strb	r1, [r0, #0]
    5968:	43c9      	mvns	r1, r1
    596a:	0789      	lsls	r1, r1, #30
    596c:	d005      	beq.n	597a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    596e:	e007      	b.n	5980 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    5970:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    5974:	2027      	movs	r0, #39	; 0x27
    5976:	f7fe fde7 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    597a:	78c0      	ldrb	r0, [r0, #3]
    597c:	2802      	cmp	r0, #2
    597e:	d00f      	beq.n	59a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5980:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5982:	f006 fa8a 	bl	be9a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5986:	b108      	cbz	r0, 598c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    5988:	2101      	movs	r1, #1
    598a:	e00a      	b.n	59a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    598c:	6a20      	ldr	r0, [r4, #32]
    598e:	7800      	ldrb	r0, [r0, #0]
    5990:	43c0      	mvns	r0, r0
    5992:	0780      	lsls	r0, r0, #30
    5994:	d004      	beq.n	59a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5996:	f7ff fa75 	bl	4e84 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    599a:	f080 0101 	eor.w	r1, r0, #1
    599e:	e000      	b.n	59a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    59a0:	2100      	movs	r1, #0
    59a2:	6a20      	ldr	r0, [r4, #32]
    59a4:	7802      	ldrb	r2, [r0, #0]
    59a6:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    59aa:	7001      	strb	r1, [r0, #0]
    59ac:	7ca9      	ldrb	r1, [r5, #18]
    59ae:	b191      	cbz	r1, 59d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    59b0:	7841      	ldrb	r1, [r0, #1]
    59b2:	b181      	cbz	r1, 59d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    59b4:	4813      	ldr	r0, [pc, #76]	; (5a04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    59b6:	f004 fe79 	bl	a6ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    59ba:	4811      	ldr	r0, [pc, #68]	; (5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    59bc:	3828      	subs	r0, #40	; 0x28
    59be:	7607      	strb	r7, [r0, #24]
    59c0:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    59c4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    59c8:	480e      	ldr	r0, [pc, #56]	; (5a04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    59ca:	6a21      	ldr	r1, [r4, #32]
    59cc:	f004 fa9a 	bl	9f04 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    59d0:	f004 fae4 	bl	9f9c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    59d4:	e003      	b.n	59de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    59d6:	f004 fe69 	bl	a6ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    59da:	f004 fac1 	bl	9f60 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    59de:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    59e2:	2101      	movs	r1, #1
    59e4:	2000      	movs	r0, #0
    59e6:	f004 feed 	bl	a7c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    59ea:	7127      	strb	r7, [r4, #4]
    59ec:	6a20      	ldr	r0, [r4, #32]
    59ee:	8801      	ldrh	r1, [r0, #0]
    59f0:	8221      	strh	r1, [r4, #16]
    59f2:	7880      	ldrb	r0, [r0, #2]
    59f4:	74a0      	strb	r0, [r4, #18]
    59f6:	7027      	strb	r7, [r4, #0]
    59f8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    59fc:	200000cc 	.word	0x200000cc
    5a00:	20000670 	.word	0x20000670
    5a04:	20000540 	.word	0x20000540
    5a08:	0000569d 	.word	0x0000569d
    5a0c:	00005421 	.word	0x00005421
    5a10:	00005599 	.word	0x00005599
    5a14:	000057f5 	.word	0x000057f5

00005a18 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5a18:	4800      	ldr	r0, [pc, #0]	; (5a1c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5a1a:	4770      	bx	lr
    5a1c:	2000102d 	.word	0x2000102d

00005a20 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    5a20:	b570      	push	{r4, r5, r6, lr}
    5a22:	2600      	movs	r6, #0
    5a24:	4635      	mov	r5, r6
    5a26:	4c0f      	ldr	r4, [pc, #60]	; (5a64 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    5a28:	e018      	b.n	5a5c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    5a2a:	1960      	adds	r0, r4, r5
    5a2c:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5a30:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5a34:	2a01      	cmp	r2, #1
    5a36:	d002      	beq.n	5a3e <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    5a38:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    5a3c:	b160      	cbz	r0, 5a58 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    5a3e:	480a      	ldr	r0, [pc, #40]	; (5a68 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    5a40:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    5a44:	1c73      	adds	r3, r6, #1
    5a46:	5585      	strb	r5, [r0, r6]
    5a48:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    5a4c:	4630      	mov	r0, r6
    5a4e:	b2de      	uxtb	r6, r3
    5a50:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    5a54:	f004 ffde 	bl	aa14 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5a58:	1c6d      	adds	r5, r5, #1
    5a5a:	b2ed      	uxtb	r5, r5
    5a5c:	78a0      	ldrb	r0, [r4, #2]
    5a5e:	42a8      	cmp	r0, r5
    5a60:	d8e3      	bhi.n	5a2a <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    5a62:	bd70      	pop	{r4, r5, r6, pc}
    5a64:	20000e5a 	.word	0x20000e5a
    5a68:	2000025c 	.word	0x2000025c

00005a6c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5a6c:	4904      	ldr	r1, [pc, #16]	; (5a80 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5a6e:	788a      	ldrb	r2, [r1, #2]
    5a70:	4282      	cmp	r2, r0
    5a72:	d903      	bls.n	5a7c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5a74:	4408      	add	r0, r1
    5a76:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5a7a:	4770      	bx	lr
    5a7c:	2000      	movs	r0, #0
    5a7e:	4770      	bx	lr
    5a80:	20000e5a 	.word	0x20000e5a

00005a84 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5a84:	4904      	ldr	r1, [pc, #16]	; (5a98 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5a86:	788a      	ldrb	r2, [r1, #2]
    5a88:	4282      	cmp	r2, r0
    5a8a:	d903      	bls.n	5a94 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5a8c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5a90:	3083      	adds	r0, #131	; 0x83
    5a92:	4770      	bx	lr
    5a94:	2000      	movs	r0, #0
    5a96:	4770      	bx	lr
    5a98:	20000e5a 	.word	0x20000e5a

00005a9c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5a9c:	4a05      	ldr	r2, [pc, #20]	; (5ab4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5a9e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5aa2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5aa6:	6802      	ldr	r2, [r0, #0]
    5aa8:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5aac:	8880      	ldrh	r0, [r0, #4]
    5aae:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5ab2:	4770      	bx	lr
    5ab4:	20000e5a 	.word	0x20000e5a

00005ab8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    5ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5abc:	4607      	mov	r7, r0
    5abe:	2400      	movs	r4, #0
    5ac0:	4d10      	ldr	r5, [pc, #64]	; (5b04 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    5ac2:	e019      	b.n	5af8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    5ac4:	4620      	mov	r0, r4
    5ac6:	f7ff ffdd 	bl	5a84 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    5aca:	0003      	movs	r3, r0
    5acc:	d012      	beq.n	5af4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5ace:	1928      	adds	r0, r5, r4
    5ad0:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5ad4:	b970      	cbnz	r0, 5af4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5ad6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    5ada:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    5ade:	f206 160b 	addw	r6, r6, #267	; 0x10b
    5ae2:	463a      	mov	r2, r7
    5ae4:	4631      	mov	r1, r6
    5ae6:	4618      	mov	r0, r3
    5ae8:	f006 fb77 	bl	c1da <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    5aec:	4630      	mov	r0, r6
    5aee:	4621      	mov	r1, r4
    5af0:	f7ff ffd4 	bl	5a9c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    5af4:	1c64      	adds	r4, r4, #1
    5af6:	b2e4      	uxtb	r4, r4
    5af8:	78a8      	ldrb	r0, [r5, #2]
    5afa:	42a0      	cmp	r0, r4
    5afc:	d8e2      	bhi.n	5ac4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    5afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b02:	0000      	.short	0x0000
    5b04:	20000e5a 	.word	0x20000e5a

00005b08 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b0c:	460e      	mov	r6, r1
    5b0e:	4607      	mov	r7, r0
    5b10:	4615      	mov	r5, r2
    5b12:	2106      	movs	r1, #6
    5b14:	4630      	mov	r0, r6
    5b16:	f006 fdbf 	bl	c698 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5b1a:	4c0d      	ldr	r4, [pc, #52]	; (5b50 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    5b1c:	b160      	cbz	r0, 5b38 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    5b1e:	2000      	movs	r0, #0
    5b20:	e004      	b.n	5b2c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    5b22:	1821      	adds	r1, r4, r0
    5b24:	1c40      	adds	r0, r0, #1
    5b26:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    5b2a:	b2c0      	uxtb	r0, r0
    5b2c:	78a1      	ldrb	r1, [r4, #2]
    5b2e:	4281      	cmp	r1, r0
    5b30:	d8f7      	bhi.n	5b22 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    5b32:	2001      	movs	r0, #1
    5b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b38:	4631      	mov	r1, r6
    5b3a:	4638      	mov	r0, r7
    5b3c:	f006 fbd9 	bl	c2f2 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5b40:	2808      	cmp	r0, #8
    5b42:	d003      	beq.n	5b4c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5b44:	4420      	add	r0, r4
    5b46:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5b4a:	e7f2      	b.n	5b32 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    5b4c:	2000      	movs	r0, #0
    5b4e:	e7f1      	b.n	5b34 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    5b50:	20000e5a 	.word	0x20000e5a

00005b54 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5b54:	4904      	ldr	r1, [pc, #16]	; (5b68 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5b56:	788a      	ldrb	r2, [r1, #2]
    5b58:	4282      	cmp	r2, r0
    5b5a:	d903      	bls.n	5b64 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5b5c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5b60:	1cc0      	adds	r0, r0, #3
    5b62:	4770      	bx	lr
    5b64:	2000      	movs	r0, #0
    5b66:	4770      	bx	lr
    5b68:	20000e5a 	.word	0x20000e5a

00005b6c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    5b6c:	4908      	ldr	r1, [pc, #32]	; (5b90 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    5b6e:	788a      	ldrb	r2, [r1, #2]
    5b70:	4282      	cmp	r2, r0
    5b72:	d903      	bls.n	5b7c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    5b74:	180a      	adds	r2, r1, r0
    5b76:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    5b7a:	b10a      	cbz	r2, 5b80 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    5b7c:	2000      	movs	r0, #0
    5b7e:	4770      	bx	lr
    5b80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5b84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    5b88:	f200 100b 	addw	r0, r0, #267	; 0x10b
    5b8c:	4770      	bx	lr
    5b8e:	0000      	.short	0x0000
    5b90:	20000e5a 	.word	0x20000e5a

00005b94 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5b94:	b510      	push	{r4, lr}
    5b96:	f240 12d3 	movw	r2, #467	; 0x1d3
    5b9a:	2100      	movs	r1, #0
    5b9c:	4808      	ldr	r0, [pc, #32]	; (5bc0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5b9e:	f005 fbe9 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5ba2:	2208      	movs	r2, #8
    5ba4:	21ff      	movs	r1, #255	; 0xff
    5ba6:	4807      	ldr	r0, [pc, #28]	; (5bc4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5ba8:	f005 fbe4 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5bac:	4805      	ldr	r0, [pc, #20]	; (5bc4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5bae:	2100      	movs	r1, #0
    5bb0:	1f00      	subs	r0, r0, #4
    5bb2:	7001      	strb	r1, [r0, #0]
    5bb4:	7041      	strb	r1, [r0, #1]
    5bb6:	f44f 7161 	mov.w	r1, #900	; 0x384
    5bba:	8041      	strh	r1, [r0, #2]
    5bbc:	bd10      	pop	{r4, pc}
    5bbe:	0000      	.short	0x0000
    5bc0:	20000e5a 	.word	0x20000e5a
    5bc4:	2000025c 	.word	0x2000025c

00005bc8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5bc8:	4901      	ldr	r1, [pc, #4]	; (5bd0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5bca:	7008      	strb	r0, [r1, #0]
    5bcc:	4770      	bx	lr
    5bce:	0000      	.short	0x0000
    5bd0:	20000258 	.word	0x20000258

00005bd4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5bd4:	4801      	ldr	r0, [pc, #4]	; (5bdc <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5bd6:	7800      	ldrb	r0, [r0, #0]
    5bd8:	4770      	bx	lr
    5bda:	0000      	.short	0x0000
    5bdc:	20000258 	.word	0x20000258

00005be0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5be0:	4b0b      	ldr	r3, [pc, #44]	; (5c10 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5be2:	b510      	push	{r4, lr}
    5be4:	789c      	ldrb	r4, [r3, #2]
    5be6:	4284      	cmp	r4, r0
    5be8:	d90f      	bls.n	5c0a <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5bea:	4418      	add	r0, r3
    5bec:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5bf0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5bf4:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5bf8:	700b      	strb	r3, [r1, #0]
    5bfa:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5bfe:	6011      	str	r1, [r2, #0]
    5c00:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5c04:	8090      	strh	r0, [r2, #4]
    5c06:	2001      	movs	r0, #1
    5c08:	bd10      	pop	{r4, pc}
    5c0a:	2000      	movs	r0, #0
    5c0c:	bd10      	pop	{r4, pc}
    5c0e:	0000      	.short	0x0000
    5c10:	20000e5a 	.word	0x20000e5a

00005c14 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5c14:	4907      	ldr	r1, [pc, #28]	; (5c34 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5c16:	788a      	ldrb	r2, [r1, #2]
    5c18:	4282      	cmp	r2, r0
    5c1a:	d909      	bls.n	5c30 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5c1c:	4408      	add	r0, r1
    5c1e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5c22:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5c26:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5c2a:	f000 0001 	and.w	r0, r0, #1
    5c2e:	4770      	bx	lr
    5c30:	2000      	movs	r0, #0
    5c32:	4770      	bx	lr
    5c34:	20000e5a 	.word	0x20000e5a

00005c38 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c3c:	4698      	mov	r8, r3
    5c3e:	4691      	mov	r9, r2
    5c40:	460c      	mov	r4, r1
    5c42:	4605      	mov	r5, r0
    5c44:	f000 f962 	bl	5f0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5c48:	4606      	mov	r6, r0
    5c4a:	2810      	cmp	r0, #16
    5c4c:	d006      	beq.n	5c5c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5c4e:	f000 f92d 	bl	5eac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5c52:	2810      	cmp	r0, #16
    5c54:	d002      	beq.n	5c5c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5c56:	2012      	movs	r0, #18
    5c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c5c:	4f18      	ldr	r7, [pc, #96]	; (5cc0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    5c5e:	78b8      	ldrb	r0, [r7, #2]
    5c60:	2808      	cmp	r0, #8
    5c62:	d22a      	bcs.n	5cba <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    5c64:	2e10      	cmp	r6, #16
    5c66:	d105      	bne.n	5c74 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5c68:	2200      	movs	r2, #0
    5c6a:	4621      	mov	r1, r4
    5c6c:	4628      	mov	r0, r5
    5c6e:	f000 f931 	bl	5ed4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5c72:	4606      	mov	r6, r0
    5c74:	78bc      	ldrb	r4, [r7, #2]
    5c76:	2210      	movs	r2, #16
    5c78:	1c60      	adds	r0, r4, #1
    5c7a:	70b8      	strb	r0, [r7, #2]
    5c7c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5c80:	1ce8      	adds	r0, r5, #3
    5c82:	4649      	mov	r1, r9
    5c84:	f006 fcb8 	bl	c5f8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5c88:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5c8c:	2210      	movs	r2, #16
    5c8e:	4641      	mov	r1, r8
    5c90:	f006 fcb2 	bl	c5f8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5c94:	2110      	movs	r1, #16
    5c96:	4640      	mov	r0, r8
    5c98:	f006 fcfe 	bl	c698 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5c9c:	443c      	add	r4, r7
    5c9e:	2110      	movs	r1, #16
    5ca0:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5ca4:	4648      	mov	r0, r9
    5ca6:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5caa:	f006 fcf5 	bl	c698 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5cae:	77e0      	strb	r0, [r4, #31]
    5cb0:	f804 6c29 	strb.w	r6, [r4, #-41]
    5cb4:	2000      	movs	r0, #0
    5cb6:	73e0      	strb	r0, [r4, #15]
    5cb8:	e7ce      	b.n	5c58 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5cba:	2007      	movs	r0, #7
    5cbc:	e7cc      	b.n	5c58 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5cbe:	0000      	.short	0x0000
    5cc0:	20000e5a 	.word	0x20000e5a

00005cc4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5cc4:	4806      	ldr	r0, [pc, #24]	; (5ce0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5cc6:	b510      	push	{r4, lr}
    5cc8:	7880      	ldrb	r0, [r0, #2]
    5cca:	1e40      	subs	r0, r0, #1
    5ccc:	b244      	sxtb	r4, r0
    5cce:	e004      	b.n	5cda <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5cd0:	b2e0      	uxtb	r0, r4
    5cd2:	f000 f963 	bl	5f9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    5cd6:	1e64      	subs	r4, r4, #1
    5cd8:	b264      	sxtb	r4, r4
    5cda:	2c00      	cmp	r4, #0
    5cdc:	daf8      	bge.n	5cd0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    5cde:	bd10      	pop	{r4, pc}
    5ce0:	20000e5a 	.word	0x20000e5a

00005ce4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5ce4:	4801      	ldr	r0, [pc, #4]	; (5cec <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5ce6:	8840      	ldrh	r0, [r0, #2]
    5ce8:	4770      	bx	lr
    5cea:	0000      	.short	0x0000
    5cec:	20000258 	.word	0x20000258

00005cf0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5cf0:	b138      	cbz	r0, 5d02 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5cf2:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5cf6:	4288      	cmp	r0, r1
    5cf8:	d803      	bhi.n	5d02 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5cfa:	4903      	ldr	r1, [pc, #12]	; (5d08 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5cfc:	8048      	strh	r0, [r1, #2]
    5cfe:	2001      	movs	r0, #1
    5d00:	4770      	bx	lr
    5d02:	2000      	movs	r0, #0
    5d04:	4770      	bx	lr
    5d06:	0000      	.short	0x0000
    5d08:	20000258 	.word	0x20000258

00005d0c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    5d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d10:	4614      	mov	r4, r2
    5d12:	2501      	movs	r5, #1
    5d14:	2200      	movs	r2, #0
    5d16:	461f      	mov	r7, r3
    5d18:	462e      	mov	r6, r5
    5d1a:	7022      	strb	r2, [r4, #0]
    5d1c:	f000 f8f6 	bl	5f0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5d20:	2810      	cmp	r0, #16
    5d22:	d024      	beq.n	5d6e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5d24:	f8df 8054 	ldr.w	r8, [pc, #84]	; 5d7c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    5d28:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    5d2c:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5d30:	f001 0101 	and.w	r1, r1, #1
    5d34:	7021      	strb	r1, [r4, #0]
    5d36:	f000 f8b9 	bl	5eac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5d3a:	4604      	mov	r4, r0
    5d3c:	2810      	cmp	r0, #16
    5d3e:	d016      	beq.n	5d6e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5d40:	b107      	cbz	r7, 5d44 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    5d42:	703c      	strb	r4, [r7, #0]
    5d44:	4620      	mov	r0, r4
    5d46:	f7ff ff05 	bl	5b54 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5d4a:	b180      	cbz	r0, 5d6e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5d4c:	f898 1002 	ldrb.w	r1, [r8, #2]
    5d50:	4640      	mov	r0, r8
    5d52:	42a1      	cmp	r1, r4
    5d54:	d903      	bls.n	5d5e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    5d56:	1901      	adds	r1, r0, r4
    5d58:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    5d5c:	e000      	b.n	5d60 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    5d5e:	2600      	movs	r6, #0
    5d60:	eb08 0004 	add.w	r0, r8, r4
    5d64:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5d68:	2801      	cmp	r0, #1
    5d6a:	d004      	beq.n	5d76 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    5d6c:	2500      	movs	r5, #0
    5d6e:	ea45 0006 	orr.w	r0, r5, r6
    5d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d76:	2501      	movs	r5, #1
    5d78:	e7f9      	b.n	5d6e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5d7a:	0000      	.short	0x0000
    5d7c:	20000e5a 	.word	0x20000e5a

00005d80 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5d80:	b570      	push	{r4, r5, r6, lr}
    5d82:	460d      	mov	r5, r1
    5d84:	4606      	mov	r6, r0
    5d86:	f000 f8c1 	bl	5f0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5d8a:	4c10      	ldr	r4, [pc, #64]	; (5dcc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5d8c:	2810      	cmp	r0, #16
    5d8e:	d007      	beq.n	5da0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5d90:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5d94:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5d98:	07c9      	lsls	r1, r1, #31
    5d9a:	d001      	beq.n	5da0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5d9c:	2001      	movs	r0, #1
    5d9e:	bd70      	pop	{r4, r5, r6, pc}
    5da0:	7861      	ldrb	r1, [r4, #1]
    5da2:	2908      	cmp	r1, #8
    5da4:	d210      	bcs.n	5dc8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5da6:	2810      	cmp	r0, #16
    5da8:	d008      	beq.n	5dbc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5daa:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5dae:	2101      	movs	r1, #1
    5db0:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5db4:	7860      	ldrb	r0, [r4, #1]
    5db6:	1c40      	adds	r0, r0, #1
    5db8:	7060      	strb	r0, [r4, #1]
    5dba:	e7ef      	b.n	5d9c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5dbc:	2201      	movs	r2, #1
    5dbe:	4629      	mov	r1, r5
    5dc0:	4630      	mov	r0, r6
    5dc2:	f000 f887 	bl	5ed4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5dc6:	e7f5      	b.n	5db4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5dc8:	2000      	movs	r0, #0
    5dca:	bd70      	pop	{r4, r5, r6, pc}
    5dcc:	20000e5a 	.word	0x20000e5a

00005dd0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5dd0:	b570      	push	{r4, r5, r6, lr}
    5dd2:	4d0b      	ldr	r5, [pc, #44]	; (5e00 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5dd4:	7828      	ldrb	r0, [r5, #0]
    5dd6:	1e40      	subs	r0, r0, #1
    5dd8:	b244      	sxtb	r4, r0
    5dda:	e00a      	b.n	5df2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5ddc:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5de0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5de4:	07c0      	lsls	r0, r0, #31
    5de6:	d002      	beq.n	5dee <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5de8:	b2e0      	uxtb	r0, r4
    5dea:	f000 f91f 	bl	602c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    5dee:	1e64      	subs	r4, r4, #1
    5df0:	b264      	sxtb	r4, r4
    5df2:	2c00      	cmp	r4, #0
    5df4:	daf2      	bge.n	5ddc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5df6:	4903      	ldr	r1, [pc, #12]	; (5e04 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5df8:	2000      	movs	r0, #0
    5dfa:	7048      	strb	r0, [r1, #1]
    5dfc:	bd70      	pop	{r4, r5, r6, pc}
    5dfe:	0000      	.short	0x0000
    5e00:	20000e5a 	.word	0x20000e5a
    5e04:	20000258 	.word	0x20000258

00005e08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e0c:	2400      	movs	r4, #0
    5e0e:	4625      	mov	r5, r4
    5e10:	4e18      	ldr	r6, [pc, #96]	; (5e74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5e12:	e029      	b.n	5e68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5e14:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5e18:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5e1c:	07c0      	lsls	r0, r0, #31
    5e1e:	d021      	beq.n	5e64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5e20:	4628      	mov	r0, r5
    5e22:	f000 f843 	bl	5eac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5e26:	4603      	mov	r3, r0
    5e28:	f7ff fe94 	bl	5b54 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5e2c:	4601      	mov	r1, r0
    5e2e:	2000      	movs	r0, #0
    5e30:	2b10      	cmp	r3, #16
    5e32:	d009      	beq.n	5e48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5e34:	18f2      	adds	r2, r6, r3
    5e36:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5e3a:	f1bc 0f01 	cmp.w	ip, #1
    5e3e:	d002      	beq.n	5e46 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5e40:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5e44:	b102      	cbz	r2, 5e48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5e46:	2001      	movs	r0, #1
    5e48:	1e40      	subs	r0, r0, #1
    5e4a:	4201      	tst	r1, r0
    5e4c:	d10a      	bne.n	5e64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5e4e:	480a      	ldr	r0, [pc, #40]	; (5e78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5e50:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5e54:	5503      	strb	r3, [r0, r4]
    5e56:	4620      	mov	r0, r4
    5e58:	1c64      	adds	r4, r4, #1
    5e5a:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5e5e:	b2e4      	uxtb	r4, r4
    5e60:	f004 fdd8 	bl	aa14 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5e64:	1c6d      	adds	r5, r5, #1
    5e66:	b2ed      	uxtb	r5, r5
    5e68:	7830      	ldrb	r0, [r6, #0]
    5e6a:	42a8      	cmp	r0, r5
    5e6c:	d8d2      	bhi.n	5e14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e72:	0000      	.short	0x0000
    5e74:	20000e5a 	.word	0x20000e5a
    5e78:	2000025c 	.word	0x2000025c
    5e7c:	4602      	mov	r2, r0
    5e7e:	4809      	ldr	r0, [pc, #36]	; (5ea4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5e80:	b510      	push	{r4, lr}
    5e82:	7800      	ldrb	r0, [r0, #0]
    5e84:	460b      	mov	r3, r1
    5e86:	b158      	cbz	r0, 5ea0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5e88:	4807      	ldr	r0, [pc, #28]	; (5ea8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5e8a:	7881      	ldrb	r1, [r0, #2]
    5e8c:	b141      	cbz	r1, 5ea0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5e8e:	b10b      	cbz	r3, 5e94 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5e90:	1cc0      	adds	r0, r0, #3
    5e92:	e001      	b.n	5e98 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5e94:	4804      	ldr	r0, [pc, #16]	; (5ea8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5e96:	3083      	adds	r0, #131	; 0x83
    5e98:	f003 ff56 	bl	9d48 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5e9c:	2001      	movs	r0, #1
    5e9e:	bd10      	pop	{r4, pc}
    5ea0:	2000      	movs	r0, #0
    5ea2:	bd10      	pop	{r4, pc}
    5ea4:	20000258 	.word	0x20000258
    5ea8:	20000e5a 	.word	0x20000e5a
    5eac:	4908      	ldr	r1, [pc, #32]	; (5ed0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    5eae:	b510      	push	{r4, lr}
    5eb0:	4603      	mov	r3, r0
    5eb2:	2000      	movs	r0, #0
    5eb4:	788a      	ldrb	r2, [r1, #2]
    5eb6:	e006      	b.n	5ec6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5eb8:	180c      	adds	r4, r1, r0
    5eba:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5ebe:	429c      	cmp	r4, r3
    5ec0:	d004      	beq.n	5ecc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    5ec2:	1c40      	adds	r0, r0, #1
    5ec4:	b2c0      	uxtb	r0, r0
    5ec6:	4282      	cmp	r2, r0
    5ec8:	d8f6      	bhi.n	5eb8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5eca:	2010      	movs	r0, #16
    5ecc:	bd10      	pop	{r4, pc}
    5ece:	0000      	.short	0x0000
    5ed0:	20000e5a 	.word	0x20000e5a
    5ed4:	b570      	push	{r4, r5, r6, lr}
    5ed6:	4b0c      	ldr	r3, [pc, #48]	; (5f08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5ed8:	4604      	mov	r4, r0
    5eda:	7818      	ldrb	r0, [r3, #0]
    5edc:	1c45      	adds	r5, r0, #1
    5ede:	701d      	strb	r5, [r3, #0]
    5ee0:	2810      	cmp	r0, #16
    5ee2:	d303      	bcc.n	5eec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    5ee4:	2146      	movs	r1, #70	; 0x46
    5ee6:	2028      	movs	r0, #40	; 0x28
    5ee8:	f7fe fb2e 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eec:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5ef0:	680d      	ldr	r5, [r1, #0]
    5ef2:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5ef6:	8889      	ldrh	r1, [r1, #4]
    5ef8:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5efc:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5f00:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5f04:	bd70      	pop	{r4, r5, r6, pc}
    5f06:	0000      	.short	0x0000
    5f08:	20000e5a 	.word	0x20000e5a
    5f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f10:	460f      	mov	r7, r1
    5f12:	4606      	mov	r6, r0
    5f14:	2400      	movs	r4, #0
    5f16:	4d0d      	ldr	r5, [pc, #52]	; (5f4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    5f18:	e00f      	b.n	5f3a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5f1a:	bf00      	nop
    5f1c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5f20:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5f24:	42b1      	cmp	r1, r6
    5f26:	d106      	bne.n	5f36 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    5f28:	2206      	movs	r2, #6
    5f2a:	4639      	mov	r1, r7
    5f2c:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5f30:	f005 f994 	bl	b25c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5f34:	b138      	cbz	r0, 5f46 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5f36:	1c64      	adds	r4, r4, #1
    5f38:	b2e4      	uxtb	r4, r4
    5f3a:	7828      	ldrb	r0, [r5, #0]
    5f3c:	42a0      	cmp	r0, r4
    5f3e:	d8ed      	bhi.n	5f1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    5f40:	2010      	movs	r0, #16
    5f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f46:	4620      	mov	r0, r4
    5f48:	e7fb      	b.n	5f42 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5f4a:	0000      	.short	0x0000
    5f4c:	20000e5a 	.word	0x20000e5a
    5f50:	b570      	push	{r4, r5, r6, lr}
    5f52:	4605      	mov	r5, r0
    5f54:	f7ff ffaa 	bl	5eac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5f58:	2810      	cmp	r0, #16
    5f5a:	d11c      	bne.n	5f96 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5f5c:	4c0e      	ldr	r4, [pc, #56]	; (5f98 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5f5e:	7820      	ldrb	r0, [r4, #0]
    5f60:	1e40      	subs	r0, r0, #1
    5f62:	b2c0      	uxtb	r0, r0
    5f64:	7020      	strb	r0, [r4, #0]
    5f66:	42a8      	cmp	r0, r5
    5f68:	d015      	beq.n	5f96 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5f6a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5f6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5f72:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5f76:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5f7a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5f7e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5f82:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5f86:	7820      	ldrb	r0, [r4, #0]
    5f88:	f7ff ff90 	bl	5eac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5f8c:	2810      	cmp	r0, #16
    5f8e:	d002      	beq.n	5f96 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5f90:	4420      	add	r0, r4
    5f92:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5f96:	bd70      	pop	{r4, r5, r6, pc}
    5f98:	20000e5a 	.word	0x20000e5a
    5f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5fa0:	4c21      	ldr	r4, [pc, #132]	; (6028 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5fa2:	4606      	mov	r6, r0
    5fa4:	19a7      	adds	r7, r4, r6
    5fa6:	78a0      	ldrb	r0, [r4, #2]
    5fa8:	1e40      	subs	r0, r0, #1
    5faa:	b2c5      	uxtb	r5, r0
    5fac:	70a5      	strb	r5, [r4, #2]
    5fae:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5fb2:	42ae      	cmp	r6, r5
    5fb4:	d02a      	beq.n	600c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5fb6:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5fba:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5fbe:	f10a 0103 	add.w	r1, sl, #3
    5fc2:	f109 0003 	add.w	r0, r9, #3
    5fc6:	2210      	movs	r2, #16
    5fc8:	f005 f95a 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5fcc:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5fd0:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5fd4:	2210      	movs	r2, #16
    5fd6:	f005 f953 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5fda:	1960      	adds	r0, r4, r5
    5fdc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5fe0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5fe4:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5fe8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5fec:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5ff0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5ff4:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5ff8:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5ffc:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6000:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6004:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6008:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    600c:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6010:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6014:	07c0      	lsls	r0, r0, #31
    6016:	d104      	bne.n	6022 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    6018:	4640      	mov	r0, r8
    601a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    601e:	f7ff bf97 	b.w	5f50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6026:	0000      	.short	0x0000
    6028:	20000e5a 	.word	0x20000e5a
    602c:	4905      	ldr	r1, [pc, #20]	; (6044 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    602e:	784a      	ldrb	r2, [r1, #1]
    6030:	1e52      	subs	r2, r2, #1
    6032:	704a      	strb	r2, [r1, #1]
    6034:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6038:	2200      	movs	r2, #0
    603a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    603e:	f7ff bf87 	b.w	5f50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6042:	0000      	.short	0x0000
    6044:	20000e5a 	.word	0x20000e5a

00006048 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    6048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    604c:	4604      	mov	r4, r0
    604e:	f100 0778 	add.w	r7, r0, #120	; 0x78
    6052:	b171      	cbz	r1, 6072 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    6054:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    6058:	1e75      	subs	r5, r6, #1
    605a:	2901      	cmp	r1, #1
    605c:	d016      	beq.n	608c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    605e:	2902      	cmp	r1, #2
    6060:	d025      	beq.n	60ae <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    6062:	2903      	cmp	r1, #3
    6064:	d110      	bne.n	6088 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    6066:	4631      	mov	r1, r6
    6068:	4628      	mov	r0, r5
    606a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    606e:	f006 bb65 	b.w	c73c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6072:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    6076:	2100      	movs	r1, #0
    6078:	f005 f97c 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    607c:	4638      	mov	r0, r7
    607e:	f006 fb1a 	bl	c6b6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    6082:	2020      	movs	r0, #32
    6084:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    6088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    608c:	68e1      	ldr	r1, [r4, #12]
    608e:	480d      	ldr	r0, [pc, #52]	; (60c4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    6090:	460a      	mov	r2, r1
    6092:	4408      	add	r0, r1
    6094:	fbb0 f0f1 	udiv	r0, r0, r1
    6098:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    609c:	f640 30b8 	movw	r0, #3000	; 0xbb8
    60a0:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    60a4:	8ae3      	ldrh	r3, [r4, #22]
    60a6:	4638      	mov	r0, r7
    60a8:	f000 f80e 	bl	60c8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    60ac:	e7db      	b.n	6066 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    60ae:	68c1      	ldr	r1, [r0, #12]
    60b0:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    60b4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    60b8:	4638      	mov	r0, r7
    60ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    60be:	f000 b803 	b.w	60c8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    60c2:	0000      	.short	0x0000
    60c4:	01c9c37f 	.word	0x01c9c37f
    60c8:	b530      	push	{r4, r5, lr}
    60ca:	2400      	movs	r4, #0
    60cc:	86c4      	strh	r4, [r0, #54]	; 0x36
    60ce:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    60d0:	4d13      	ldr	r5, [pc, #76]	; (6120 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    60d2:	434c      	muls	r4, r1
    60d4:	fbb4 f4f2 	udiv	r4, r4, r2
    60d8:	8744      	strh	r4, [r0, #58]	; 0x3a
    60da:	f242 7410 	movw	r4, #10000	; 0x2710
    60de:	4363      	muls	r3, r4
    60e0:	fbb3 f3f2 	udiv	r3, r3, r2
    60e4:	1c5b      	adds	r3, r3, #1
    60e6:	b29b      	uxth	r3, r3
    60e8:	fb03 f402 	mul.w	r4, r3, r2
    60ec:	8703      	strh	r3, [r0, #56]	; 0x38
    60ee:	42ac      	cmp	r4, r5
    60f0:	d901      	bls.n	60f6 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    60f2:	1e5b      	subs	r3, r3, #1
    60f4:	8703      	strh	r3, [r0, #56]	; 0x38
    60f6:	4b0b      	ldr	r3, [pc, #44]	; (6124 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    60f8:	f240 2471 	movw	r4, #625	; 0x271
    60fc:	fbb3 f3f2 	udiv	r3, r3, r2
    6100:	1c5b      	adds	r3, r3, #1
    6102:	87c3      	strh	r3, [r0, #62]	; 0x3e
    6104:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    6106:	4363      	muls	r3, r4
    6108:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    610c:	1e5b      	subs	r3, r3, #1
    610e:	fbb3 f3f2 	udiv	r3, r3, r2
    6112:	62c3      	str	r3, [r0, #44]	; 0x2c
    6114:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6116:	434b      	muls	r3, r1
    6118:	fbb3 f1f2 	udiv	r1, r3, r2
    611c:	6281      	str	r1, [r0, #40]	; 0x28
    611e:	bd30      	pop	{r4, r5, pc}
    6120:	01e84800 	.word	0x01e84800
    6124:	02625a00 	.word	0x02625a00

00006128 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    6128:	4909      	ldr	r1, [pc, #36]	; (6150 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    612a:	b508      	push	{r3, lr}
    612c:	7809      	ldrb	r1, [r1, #0]
    612e:	f88d 1000 	strb.w	r1, [sp]
    6132:	9900      	ldr	r1, [sp, #0]
    6134:	9100      	str	r1, [sp, #0]
    6136:	f89d 1000 	ldrb.w	r1, [sp]
    613a:	b109      	cbz	r1, 6140 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    613c:	2000      	movs	r0, #0
    613e:	bd08      	pop	{r3, pc}
    6140:	4903      	ldr	r1, [pc, #12]	; (6150 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    6142:	f8d1 2001 	ldr.w	r2, [r1, #1]
    6146:	6002      	str	r2, [r0, #0]
    6148:	7949      	ldrb	r1, [r1, #5]
    614a:	7101      	strb	r1, [r0, #4]
    614c:	2001      	movs	r0, #1
    614e:	bd08      	pop	{r3, pc}
    6150:	2000027f 	.word	0x2000027f

00006154 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6154:	b570      	push	{r4, r5, r6, lr}
    6156:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    615a:	b28b      	uxth	r3, r1
    615c:	7ac5      	ldrb	r5, [r0, #11]
    615e:	ea83 0102 	eor.w	r1, r3, r2
    6162:	2200      	movs	r2, #0
    6164:	b2cc      	uxtb	r4, r1
    6166:	0a09      	lsrs	r1, r1, #8
    6168:	fa94 f4a4 	rbit	r4, r4
    616c:	fa91 f1a1 	rbit	r1, r1
    6170:	0e24      	lsrs	r4, r4, #24
    6172:	0e09      	lsrs	r1, r1, #24
    6174:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6178:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    617c:	1c52      	adds	r2, r2, #1
    617e:	4419      	add	r1, r3
    6180:	b2d2      	uxtb	r2, r2
    6182:	b289      	uxth	r1, r1
    6184:	2a03      	cmp	r2, #3
    6186:	d3ed      	bcc.n	6164 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6188:	4059      	eors	r1, r3
    618a:	2225      	movs	r2, #37	; 0x25
    618c:	fbb1 f3f2 	udiv	r3, r1, r2
    6190:	fb02 1213 	mls	r2, r2, r3, r1
    6194:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6198:	f002 0607 	and.w	r6, r2, #7
    619c:	785b      	ldrb	r3, [r3, #1]
    619e:	2401      	movs	r4, #1
    61a0:	fa04 f606 	lsl.w	r6, r4, r6
    61a4:	4233      	tst	r3, r6
    61a6:	d001      	beq.n	61ac <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    61a8:	4610      	mov	r0, r2
    61aa:	bd70      	pop	{r4, r5, r6, pc}
    61ac:	434d      	muls	r5, r1
    61ae:	0c29      	lsrs	r1, r5, #16
    61b0:	1c49      	adds	r1, r1, #1
    61b2:	b2c9      	uxtb	r1, r1
    61b4:	2200      	movs	r2, #0
    61b6:	1885      	adds	r5, r0, r2
    61b8:	79ab      	ldrb	r3, [r5, #6]
    61ba:	428b      	cmp	r3, r1
    61bc:	d312      	bcc.n	61e4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    61be:	f895 5001 	ldrb.w	r5, [r5, #1]
    61c2:	2300      	movs	r3, #0
    61c4:	fa04 f603 	lsl.w	r6, r4, r3
    61c8:	4235      	tst	r5, r6
    61ca:	d001      	beq.n	61d0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    61cc:	1e49      	subs	r1, r1, #1
    61ce:	b2c9      	uxtb	r1, r1
    61d0:	b121      	cbz	r1, 61dc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    61d2:	1c5b      	adds	r3, r3, #1
    61d4:	b2db      	uxtb	r3, r3
    61d6:	2b08      	cmp	r3, #8
    61d8:	d3f4      	bcc.n	61c4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    61da:	e005      	b.n	61e8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    61dc:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    61e0:	b2c0      	uxtb	r0, r0
    61e2:	bd70      	pop	{r4, r5, r6, pc}
    61e4:	1ac9      	subs	r1, r1, r3
    61e6:	b2c9      	uxtb	r1, r1
    61e8:	1c52      	adds	r2, r2, #1
    61ea:	b2d2      	uxtb	r2, r2
    61ec:	2a05      	cmp	r2, #5
    61ee:	d3e2      	bcc.n	61b6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    61f0:	f240 110d 	movw	r1, #269	; 0x10d
    61f4:	2046      	movs	r0, #70	; 0x46
    61f6:	f7fe f9a7 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61fa:	0000      	movs	r0, r0
    61fc:	b570      	push	{r4, r5, r6, lr}
    61fe:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6202:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6206:	2401      	movs	r4, #1
    6208:	fb03 2101 	mla	r1, r3, r1, r2
    620c:	2225      	movs	r2, #37	; 0x25
    620e:	fbb1 f3f2 	udiv	r3, r1, r2
    6212:	fb02 1113 	mls	r1, r2, r3, r1
    6216:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    621a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    621e:	f001 0307 	and.w	r3, r1, #7
    6222:	7d92      	ldrb	r2, [r2, #22]
    6224:	fa04 f303 	lsl.w	r3, r4, r3
    6228:	421a      	tst	r2, r3
    622a:	d003      	beq.n	6234 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    622c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6230:	2000      	movs	r0, #0
    6232:	bd70      	pop	{r4, r5, r6, pc}
    6234:	f890 2020 	ldrb.w	r2, [r0, #32]
    6238:	fbb1 f3f2 	udiv	r3, r1, r2
    623c:	fb02 1113 	mls	r1, r2, r3, r1
    6240:	1c49      	adds	r1, r1, #1
    6242:	b2c9      	uxtb	r1, r1
    6244:	2300      	movs	r3, #0
    6246:	18c5      	adds	r5, r0, r3
    6248:	7eea      	ldrb	r2, [r5, #27]
    624a:	428a      	cmp	r2, r1
    624c:	d311      	bcc.n	6272 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    624e:	f895 5016 	ldrb.w	r5, [r5, #22]
    6252:	2200      	movs	r2, #0
    6254:	fa04 f602 	lsl.w	r6, r4, r2
    6258:	4235      	tst	r5, r6
    625a:	d001      	beq.n	6260 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    625c:	1e49      	subs	r1, r1, #1
    625e:	b2c9      	uxtb	r1, r1
    6260:	b121      	cbz	r1, 626c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6262:	1c52      	adds	r2, r2, #1
    6264:	b2d2      	uxtb	r2, r2
    6266:	2a08      	cmp	r2, #8
    6268:	d3f4      	bcc.n	6254 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    626a:	e004      	b.n	6276 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    626c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6270:	e7dc      	b.n	622c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6272:	1a89      	subs	r1, r1, r2
    6274:	b2c9      	uxtb	r1, r1
    6276:	1c5b      	adds	r3, r3, #1
    6278:	b2db      	uxtb	r3, r3
    627a:	2b05      	cmp	r3, #5
    627c:	d3e3      	bcc.n	6246 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    627e:	201f      	movs	r0, #31
    6280:	bd70      	pop	{r4, r5, r6, pc}
	...

00006284 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6284:	7841      	ldrb	r1, [r0, #1]
    6286:	b141      	cbz	r1, 629a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6288:	78c0      	ldrb	r0, [r0, #3]
    628a:	2819      	cmp	r0, #25
    628c:	d203      	bcs.n	6296 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    628e:	4a04      	ldr	r2, [pc, #16]	; (62a0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6290:	5c10      	ldrb	r0, [r2, r0]
    6292:	4288      	cmp	r0, r1
    6294:	d101      	bne.n	629a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6296:	2001      	movs	r0, #1
    6298:	4770      	bx	lr
    629a:	2000      	movs	r0, #0
    629c:	4770      	bx	lr
    629e:	0000      	.short	0x0000
    62a0:	0000dcb4 	.word	0x0000dcb4

000062a4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    62a4:	b510      	push	{r4, lr}
    62a6:	2201      	movs	r2, #1
    62a8:	70c1      	strb	r1, [r0, #3]
    62aa:	2919      	cmp	r1, #25
    62ac:	d202      	bcs.n	62b4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    62ae:	4a06      	ldr	r2, [pc, #24]	; (62c8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    62b0:	5c52      	ldrb	r2, [r2, r1]
    62b2:	e006      	b.n	62c2 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    62b4:	29ff      	cmp	r1, #255	; 0xff
    62b6:	d004      	beq.n	62c2 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    62b8:	f240 31d5 	movw	r1, #981	; 0x3d5
    62bc:	202a      	movs	r0, #42	; 0x2a
    62be:	f7fe f943 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62c2:	7042      	strb	r2, [r0, #1]
    62c4:	bd10      	pop	{r4, pc}
    62c6:	0000      	.short	0x0000
    62c8:	0000dcb4 	.word	0x0000dcb4

000062cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    62cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62d0:	0006      	movs	r6, r0
    62d2:	d00a      	beq.n	62ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    62d4:	4926      	ldr	r1, [pc, #152]	; (6370 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    62d6:	2201      	movs	r2, #1
    62d8:	7808      	ldrb	r0, [r1, #0]
    62da:	b148      	cbz	r0, 62f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    62dc:	2000      	movs	r0, #0
    62de:	7070      	strb	r0, [r6, #1]
    62e0:	2303      	movs	r3, #3
    62e2:	7033      	strb	r3, [r6, #0]
    62e4:	7132      	strb	r2, [r6, #4]
    62e6:	7008      	strb	r0, [r1, #0]
    62e8:	e03c      	b.n	6364 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    62ea:	f240 21da 	movw	r1, #730	; 0x2da
    62ee:	e009      	b.n	6304 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    62f0:	4c1f      	ldr	r4, [pc, #124]	; (6370 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    62f2:	1ce4      	adds	r4, r4, #3
    62f4:	7820      	ldrb	r0, [r4, #0]
    62f6:	b940      	cbnz	r0, 630a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    62f8:	1ca0      	adds	r0, r4, #2
    62fa:	f006 fb0b 	bl	c914 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    62fe:	b120      	cbz	r0, 630a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6300:	f240 21e9 	movw	r1, #745	; 0x2e9
    6304:	2010      	movs	r0, #16
    6306:	f7fe f91f 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    630a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    630e:	2000      	movs	r0, #0
    6310:	f7fe fa9e 	bl	4850 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6314:	4f17      	ldr	r7, [pc, #92]	; (6374 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    6316:	f8df 9060 	ldr.w	r9, [pc, #96]	; 6378 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    631a:	4605      	mov	r5, r0
    631c:	6838      	ldr	r0, [r7, #0]
    631e:	b130      	cbz	r0, 632e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    6320:	8860      	ldrh	r0, [r4, #2]
    6322:	42a8      	cmp	r0, r5
    6324:	d103      	bne.n	632e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    6326:	4630      	mov	r0, r6
    6328:	f000 f9b4 	bl	6694 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f8>
    632c:	e006      	b.n	633c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x70>
    632e:	f8d9 0000 	ldr.w	r0, [r9]
    6332:	b120      	cbz	r0, 633e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x72>
    6334:	8860      	ldrh	r0, [r4, #2]
    6336:	4631      	mov	r1, r6
    6338:	f000 f902 	bl	6540 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a4>
    633c:	b990      	cbnz	r0, 6364 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    633e:	1ca0      	adds	r0, r4, #2
    6340:	f006 fae8 	bl	c914 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6344:	b910      	cbnz	r0, 634c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    6346:	8861      	ldrh	r1, [r4, #2]
    6348:	4541      	cmp	r1, r8
    634a:	d1e7      	bne.n	631c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x50>
    634c:	480b      	ldr	r0, [pc, #44]	; (637c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb0>)
    634e:	6801      	ldr	r1, [r0, #0]
    6350:	b111      	cbz	r1, 6358 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    6352:	4630      	mov	r0, r6
    6354:	4788      	blx	r1
    6356:	b928      	cbnz	r0, 6364 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    6358:	4809      	ldr	r0, [pc, #36]	; (6380 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>)
    635a:	6801      	ldr	r1, [r0, #0]
    635c:	b129      	cbz	r1, 636a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    635e:	4630      	mov	r0, r6
    6360:	4788      	blx	r1
    6362:	b110      	cbz	r0, 636a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    6364:	2001      	movs	r0, #1
    6366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    636a:	2000      	movs	r0, #0
    636c:	e7fb      	b.n	6366 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    636e:	0000      	.short	0x0000
    6370:	20000265 	.word	0x20000265
    6374:	200000f4 	.word	0x200000f4
    6378:	200000f0 	.word	0x200000f0
    637c:	200000f8 	.word	0x200000f8
    6380:	200000ec 	.word	0x200000ec

00006384 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6384:	4901      	ldr	r1, [pc, #4]	; (638c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    6386:	7008      	strb	r0, [r1, #0]
    6388:	f000 b978 	b.w	667c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    638c:	20000264 	.word	0x20000264

00006390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6390:	4801      	ldr	r0, [pc, #4]	; (6398 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6392:	7800      	ldrb	r0, [r0, #0]
    6394:	f7fd bec8 	b.w	4128 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6398:	20000264 	.word	0x20000264

0000639c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
    639c:	4902      	ldr	r1, [pc, #8]	; (63a8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
    639e:	4801      	ldr	r0, [pc, #4]	; (63a4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
    63a0:	6008      	str	r0, [r1, #0]
    63a2:	4770      	bx	lr
    63a4:	000067d9 	.word	0x000067d9
    63a8:	200000f4 	.word	0x200000f4
    63ac:	b570      	push	{r4, r5, r6, lr}
    63ae:	4604      	mov	r4, r0
    63b0:	7800      	ldrb	r0, [r0, #0]
    63b2:	2805      	cmp	r0, #5
    63b4:	d001      	beq.n	63ba <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e>
    63b6:	216d      	movs	r1, #109	; 0x6d
    63b8:	e056      	b.n	6468 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    63ba:	7ba0      	ldrb	r0, [r4, #14]
    63bc:	06c0      	lsls	r0, r0, #27
    63be:	d401      	bmi.n	63c4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x28>
    63c0:	216e      	movs	r1, #110	; 0x6e
    63c2:	e051      	b.n	6468 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    63c4:	221c      	movs	r2, #28
    63c6:	1d21      	adds	r1, r4, #4
    63c8:	482d      	ldr	r0, [pc, #180]	; (6480 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    63ca:	f004 ff59 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    63ce:	482c      	ldr	r0, [pc, #176]	; (6480 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    63d0:	7b22      	ldrb	r2, [r4, #12]
    63d2:	f104 0120 	add.w	r1, r4, #32
    63d6:	301c      	adds	r0, #28
    63d8:	f004 ff52 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    63dc:	4828      	ldr	r0, [pc, #160]	; (6480 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    63de:	f04f 0201 	mov.w	r2, #1
    63e2:	7a81      	ldrb	r1, [r0, #10]
    63e4:	0749      	lsls	r1, r1, #29
    63e6:	d502      	bpl.n	63ee <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x52>
    63e8:	7cc1      	ldrb	r1, [r0, #19]
    63ea:	29fe      	cmp	r1, #254	; 0xfe
    63ec:	d00c      	beq.n	6408 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x6c>
    63ee:	2304      	movs	r3, #4
    63f0:	7023      	strb	r3, [r4, #0]
    63f2:	6801      	ldr	r1, [r0, #0]
    63f4:	6061      	str	r1, [r4, #4]
    63f6:	6841      	ldr	r1, [r0, #4]
    63f8:	60a1      	str	r1, [r4, #8]
    63fa:	8901      	ldrh	r1, [r0, #8]
    63fc:	81a1      	strh	r1, [r4, #12]
    63fe:	7a81      	ldrb	r1, [r0, #10]
    6400:	070d      	lsls	r5, r1, #28
    6402:	d519      	bpl.n	6438 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x9c>
    6404:	73a3      	strb	r3, [r4, #14]
    6406:	e02b      	b.n	6460 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    6408:	2113      	movs	r1, #19
    640a:	7021      	strb	r1, [r4, #0]
    640c:	7801      	ldrb	r1, [r0, #0]
    640e:	7121      	strb	r1, [r4, #4]
    6410:	7162      	strb	r2, [r4, #5]
    6412:	7841      	ldrb	r1, [r0, #1]
    6414:	71a1      	strb	r1, [r4, #6]
    6416:	f8d0 1002 	ldr.w	r1, [r0, #2]
    641a:	f8c4 1007 	str.w	r1, [r4, #7]
    641e:	88c1      	ldrh	r1, [r0, #6]
    6420:	f8a4 100b 	strh.w	r1, [r4, #11]
    6424:	21fe      	movs	r1, #254	; 0xfe
    6426:	7361      	strb	r1, [r4, #13]
    6428:	6941      	ldr	r1, [r0, #20]
    642a:	f8c4 100e 	str.w	r1, [r4, #14]
    642e:	8b01      	ldrh	r1, [r0, #24]
    6430:	8261      	strh	r1, [r4, #18]
    6432:	7a40      	ldrb	r0, [r0, #9]
    6434:	7520      	strb	r0, [r4, #20]
    6436:	bd70      	pop	{r4, r5, r6, pc}
    6438:	07cb      	lsls	r3, r1, #31
    643a:	d003      	beq.n	6444 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    643c:	078b      	lsls	r3, r1, #30
    643e:	d501      	bpl.n	6444 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    6440:	2100      	movs	r1, #0
    6442:	e00c      	b.n	645e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    6444:	074b      	lsls	r3, r1, #29
    6446:	d501      	bpl.n	644c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb0>
    6448:	73a2      	strb	r2, [r4, #14]
    644a:	e009      	b.n	6460 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    644c:	07ca      	lsls	r2, r1, #31
    644e:	d001      	beq.n	6454 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb8>
    6450:	21b5      	movs	r1, #181	; 0xb5
    6452:	e009      	b.n	6468 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    6454:	0789      	lsls	r1, r1, #30
    6456:	d501      	bpl.n	645c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc0>
    6458:	2102      	movs	r1, #2
    645a:	e000      	b.n	645e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    645c:	2103      	movs	r1, #3
    645e:	73a1      	strb	r1, [r4, #14]
    6460:	7a02      	ldrb	r2, [r0, #8]
    6462:	2a1f      	cmp	r2, #31
    6464:	d903      	bls.n	646e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd2>
    6466:	21b8      	movs	r1, #184	; 0xb8
    6468:	2010      	movs	r0, #16
    646a:	f7fe f86d 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    646e:	f104 000f 	add.w	r0, r4, #15
    6472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6476:	4902      	ldr	r1, [pc, #8]	; (6480 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    6478:	311c      	adds	r1, #28
    647a:	f004 bf01 	b.w	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    647e:	0000      	.short	0x0000
    6480:	20000cd8 	.word	0x20000cd8
    6484:	b510      	push	{r4, lr}
    6486:	492d      	ldr	r1, [pc, #180]	; (653c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a0>)
    6488:	b086      	sub	sp, #24
    648a:	7c8a      	ldrb	r2, [r1, #18]
    648c:	7801      	ldrb	r1, [r0, #0]
    648e:	07d3      	lsls	r3, r2, #31
    6490:	d101      	bne.n	6496 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xfa>
    6492:	291d      	cmp	r1, #29
    6494:	d004      	beq.n	64a0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x104>
    6496:	291c      	cmp	r1, #28
    6498:	d01f      	beq.n	64da <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x13e>
    649a:	2915      	cmp	r1, #21
    649c:	d046      	beq.n	652c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x190>
    649e:	e04a      	b.n	6536 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    64a0:	8880      	ldrh	r0, [r0, #4]
    64a2:	f8ad 0000 	strh.w	r0, [sp]
    64a6:	a902      	add	r1, sp, #8
    64a8:	f005 ff6e 	bl	c388 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    64ac:	b110      	cbz	r0, 64b4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x118>
    64ae:	f44f 71c4 	mov.w	r1, #392	; 0x188
    64b2:	e035      	b.n	6520 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    64b4:	9803      	ldr	r0, [sp, #12]
    64b6:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    64ba:	f88d 1002 	strb.w	r1, [sp, #2]
    64be:	7841      	ldrb	r1, [r0, #1]
    64c0:	f88d 1003 	strb.w	r1, [sp, #3]
    64c4:	8840      	ldrh	r0, [r0, #2]
    64c6:	f8ad 0004 	strh.w	r0, [sp, #4]
    64ca:	2102      	movs	r1, #2
    64cc:	4668      	mov	r0, sp
    64ce:	f003 fad3 	bl	9a78 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    64d2:	b340      	cbz	r0, 6526 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    64d4:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    64d8:	e022      	b.n	6520 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    64da:	0791      	lsls	r1, r2, #30
    64dc:	d42b      	bmi.n	6536 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    64de:	8884      	ldrh	r4, [r0, #4]
    64e0:	a903      	add	r1, sp, #12
    64e2:	4620      	mov	r0, r4
    64e4:	f006 ffde 	bl	d4a4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    64e8:	b110      	cbz	r0, 64f0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x154>
    64ea:	f240 11a5 	movw	r1, #421	; 0x1a5
    64ee:	e017      	b.n	6520 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    64f0:	f8ad 4000 	strh.w	r4, [sp]
    64f4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    64f8:	f8ad 0002 	strh.w	r0, [sp, #2]
    64fc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6500:	f8ad 0004 	strh.w	r0, [sp, #4]
    6504:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6508:	f8ad 0006 	strh.w	r0, [sp, #6]
    650c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6510:	f8ad 0008 	strh.w	r0, [sp, #8]
    6514:	4668      	mov	r0, sp
    6516:	f006 fff0 	bl	d4fa <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    651a:	b120      	cbz	r0, 6526 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    651c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    6520:	2010      	movs	r0, #16
    6522:	f7fe f811 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6526:	2001      	movs	r0, #1
    6528:	b006      	add	sp, #24
    652a:	bd10      	pop	{r4, pc}
    652c:	0751      	lsls	r1, r2, #29
    652e:	d402      	bmi.n	6536 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    6530:	7b80      	ldrb	r0, [r0, #14]
    6532:	07c0      	lsls	r0, r0, #31
    6534:	d0f7      	beq.n	6526 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    6536:	2000      	movs	r0, #0
    6538:	e7f6      	b.n	6528 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18c>
    653a:	0000      	.short	0x0000
    653c:	20000cbc 	.word	0x20000cbc
    6540:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6544:	b087      	sub	sp, #28
    6546:	460c      	mov	r4, r1
    6548:	a902      	add	r1, sp, #8
    654a:	9807      	ldr	r0, [sp, #28]
    654c:	f005 ff1c 	bl	c388 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6550:	2800      	cmp	r0, #0
    6552:	d17d      	bne.n	6650 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    6554:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6678 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2dc>
    6558:	f04f 0801 	mov.w	r8, #1
    655c:	4682      	mov	sl, r0
    655e:	9803      	ldr	r0, [sp, #12]
    6560:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    6564:	2800      	cmp	r0, #0
    6566:	d00c      	beq.n	6582 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    6568:	f8d9 2000 	ldr.w	r2, [r9]
    656c:	b162      	cbz	r2, 6588 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    656e:	4621      	mov	r1, r4
    6570:	9807      	ldr	r0, [sp, #28]
    6572:	4790      	blx	r2
    6574:	b140      	cbz	r0, 6588 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    6576:	4620      	mov	r0, r4
    6578:	f7ff ff84 	bl	6484 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe8>
    657c:	2800      	cmp	r0, #0
    657e:	d1ee      	bne.n	655e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1c2>
    6580:	2001      	movs	r0, #1
    6582:	b009      	add	sp, #36	; 0x24
    6584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6588:	9d03      	ldr	r5, [sp, #12]
    658a:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    658e:	3578      	adds	r5, #120	; 0x78
    6590:	b950      	cbnz	r0, 65a8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    6592:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6596:	f88d 0004 	strb.w	r0, [sp, #4]
    659a:	9801      	ldr	r0, [sp, #4]
    659c:	9001      	str	r0, [sp, #4]
    659e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    65a2:	b108      	cbz	r0, 65a8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    65a4:	2001      	movs	r0, #1
    65a6:	e000      	b.n	65aa <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20e>
    65a8:	2000      	movs	r0, #0
    65aa:	4683      	mov	fp, r0
    65ac:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    65b0:	b1c0      	cbz	r0, 65e4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    65b2:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    65b6:	0780      	lsls	r0, r0, #30
    65b8:	d514      	bpl.n	65e4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    65ba:	f884 a001 	strb.w	sl, [r4, #1]
    65be:	f884 8000 	strb.w	r8, [r4]
    65c2:	f884 a004 	strb.w	sl, [r4, #4]
    65c6:	9907      	ldr	r1, [sp, #28]
    65c8:	f8a4 1005 	strh.w	r1, [r4, #5]
    65cc:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    65d0:	71e1      	strb	r1, [r4, #7]
    65d2:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    65d6:	8121      	strh	r1, [r4, #8]
    65d8:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    65dc:	8161      	strh	r1, [r4, #10]
    65de:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    65e2:	e7c8      	b.n	6576 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    65e4:	9807      	ldr	r0, [sp, #28]
    65e6:	f7fe fa9d 	bl	4b24 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    65ea:	0007      	movs	r7, r0
    65ec:	d00d      	beq.n	660a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26e>
    65ee:	f005 fc07 	bl	be00 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    65f2:	0006      	movs	r6, r0
    65f4:	d015      	beq.n	6622 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x286>
    65f6:	f884 a001 	strb.w	sl, [r4, #1]
    65fa:	200f      	movs	r0, #15
    65fc:	7020      	strb	r0, [r4, #0]
    65fe:	9807      	ldr	r0, [sp, #28]
    6600:	80e0      	strh	r0, [r4, #6]
    6602:	8126      	strh	r6, [r4, #8]
    6604:	f884 8004 	strb.w	r8, [r4, #4]
    6608:	e007      	b.n	661a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x27e>
    660a:	f240 2133 	movw	r1, #563	; 0x233
    660e:	e02d      	b.n	666c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d0>
    6610:	2100      	movs	r1, #0
    6612:	4638      	mov	r0, r7
    6614:	460a      	mov	r2, r1
    6616:	f005 fccb 	bl	bfb0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    661a:	1e76      	subs	r6, r6, #1
    661c:	b2b6      	uxth	r6, r6
    661e:	d2f7      	bcs.n	6610 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x274>
    6620:	e7a9      	b.n	6576 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    6622:	9807      	ldr	r0, [sp, #28]
    6624:	f7fe fa68 	bl	4af8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6628:	b1f0      	cbz	r0, 6668 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2cc>
    662a:	f1bb 0f00 	cmp.w	fp, #0
    662e:	d020      	beq.n	6672 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    6630:	f005 fb24 	bl	bc7c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6634:	b160      	cbz	r0, 6650 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    6636:	9807      	ldr	r0, [sp, #28]
    6638:	f005 fdbc 	bl	c1b4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    663c:	2100      	movs	r1, #0
    663e:	9807      	ldr	r0, [sp, #28]
    6640:	f7fe f978 	bl	4934 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6644:	f884 a001 	strb.w	sl, [r4, #1]
    6648:	210c      	movs	r1, #12
    664a:	4650      	mov	r0, sl
    664c:	7021      	strb	r1, [r4, #0]
    664e:	e000      	b.n	6652 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b6>
    6650:	e00f      	b.n	6672 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    6652:	f884 a004 	strb.w	sl, [r4, #4]
    6656:	9907      	ldr	r1, [sp, #28]
    6658:	f8a4 1005 	strh.w	r1, [r4, #5]
    665c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6660:	71e1      	strb	r1, [r4, #7]
    6662:	3524      	adds	r5, #36	; 0x24
    6664:	7028      	strb	r0, [r5, #0]
    6666:	e786      	b.n	6576 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    6668:	f240 2151 	movw	r1, #593	; 0x251
    666c:	2010      	movs	r0, #16
    666e:	f7fd ff6b 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6672:	2000      	movs	r0, #0
    6674:	e785      	b.n	6582 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    6676:	0000      	.short	0x0000
    6678:	200000f0 	.word	0x200000f0
    667c:	4804      	ldr	r0, [pc, #16]	; (6690 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f4>)
    667e:	2100      	movs	r1, #0
    6680:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6684:	7001      	strb	r1, [r0, #0]
    6686:	8042      	strh	r2, [r0, #2]
    6688:	1f00      	subs	r0, r0, #4
    668a:	f8a0 1001 	strh.w	r1, [r0, #1]
    668e:	4770      	bx	lr
    6690:	20000268 	.word	0x20000268
    6694:	b570      	push	{r4, r5, r6, lr}
    6696:	4604      	mov	r4, r0
    6698:	481b      	ldr	r0, [pc, #108]	; (6708 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x36c>)
    669a:	6801      	ldr	r1, [r0, #0]
    669c:	b319      	cbz	r1, 66e6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    669e:	4620      	mov	r0, r4
    66a0:	4788      	blx	r1
    66a2:	b300      	cbz	r0, 66e6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    66a4:	7820      	ldrb	r0, [r4, #0]
    66a6:	2818      	cmp	r0, #24
    66a8:	d002      	beq.n	66b0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x314>
    66aa:	2805      	cmp	r0, #5
    66ac:	d016      	beq.n	66dc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x340>
    66ae:	e018      	b.n	66e2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    66b0:	7920      	ldrb	r0, [r4, #4]
    66b2:	2801      	cmp	r0, #1
    66b4:	d115      	bne.n	66e2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    66b6:	88e0      	ldrh	r0, [r4, #6]
    66b8:	2100      	movs	r1, #0
    66ba:	f005 fd13 	bl	c0e4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    66be:	0004      	movs	r4, r0
    66c0:	d00f      	beq.n	66e2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    66c2:	8820      	ldrh	r0, [r4, #0]
    66c4:	f005 fd76 	bl	c1b4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    66c8:	8820      	ldrh	r0, [r4, #0]
    66ca:	2100      	movs	r1, #0
    66cc:	f7fe f932 	bl	4934 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    66d0:	b138      	cbz	r0, 66e2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    66d2:	f44f 7185 	mov.w	r1, #266	; 0x10a
    66d6:	2010      	movs	r0, #16
    66d8:	f7fd ff36 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66dc:	4620      	mov	r0, r4
    66de:	f7ff fe65 	bl	63ac <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    66e2:	2001      	movs	r0, #1
    66e4:	bd70      	pop	{r4, r5, r6, pc}
    66e6:	4d09      	ldr	r5, [pc, #36]	; (670c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x370>)
    66e8:	7868      	ldrb	r0, [r5, #1]
    66ea:	2800      	cmp	r0, #0
    66ec:	d0fa      	beq.n	66e4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x348>
    66ee:	2600      	movs	r6, #0
    66f0:	7066      	strb	r6, [r4, #1]
    66f2:	2014      	movs	r0, #20
    66f4:	7020      	strb	r0, [r4, #0]
    66f6:	2220      	movs	r2, #32
    66f8:	4631      	mov	r1, r6
    66fa:	1d20      	adds	r0, r4, #4
    66fc:	f004 fe3a 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6700:	2002      	movs	r0, #2
    6702:	7120      	strb	r0, [r4, #4]
    6704:	706e      	strb	r6, [r5, #1]
    6706:	e7ec      	b.n	66e2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6708:	200000f4 	.word	0x200000f4
    670c:	20000265 	.word	0x20000265

00006710 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>:
    6710:	4801      	ldr	r0, [pc, #4]	; (6718 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA+0x8>)
    6712:	f006 ba3f 	b.w	cb94 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    6716:	0000      	.short	0x0000
    6718:	200000fc 	.word	0x200000fc

0000671c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    671c:	4801      	ldr	r0, [pc, #4]	; (6724 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    671e:	6840      	ldr	r0, [r0, #4]
    6720:	3080      	adds	r0, #128	; 0x80
    6722:	4770      	bx	lr
    6724:	20000104 	.word	0x20000104

00006728 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    6728:	b510      	push	{r4, lr}
    672a:	4c1f      	ldr	r4, [pc, #124]	; (67a8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    672c:	6860      	ldr	r0, [r4, #4]
    672e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6732:	f006 fa50 	bl	cbd6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6736:	6861      	ldr	r1, [r4, #4]
    6738:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    673c:	3132      	adds	r1, #50	; 0x32
    673e:	f7fe fc1f 	bl	4f80 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6742:	6860      	ldr	r0, [r4, #4]
    6744:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6748:	f006 fa4c 	bl	cbe4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    674c:	6861      	ldr	r1, [r4, #4]
    674e:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    6752:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    6756:	3132      	adds	r1, #50	; 0x32
    6758:	f006 fa29 	bl	cbae <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    675c:	b930      	cbnz	r0, 676c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    675e:	6861      	ldr	r1, [r4, #4]
    6760:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    6764:	3132      	adds	r1, #50	; 0x32
    6766:	f006 fa2b 	bl	cbc0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    676a:	b108      	cbz	r0, 6770 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    676c:	2101      	movs	r1, #1
    676e:	e000      	b.n	6772 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    6770:	2100      	movs	r1, #0
    6772:	6860      	ldr	r0, [r4, #4]
    6774:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    6778:	b919      	cbnz	r1, 6782 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    677a:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    677e:	2900      	cmp	r1, #0
    6780:	d010      	beq.n	67a4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    6782:	2100      	movs	r1, #0
    6784:	6781      	str	r1, [r0, #120]	; 0x78
    6786:	f004 fc06 	bl	af96 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    678a:	6861      	ldr	r1, [r4, #4]
    678c:	6448      	str	r0, [r1, #68]	; 0x44
    678e:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    6792:	b110      	cbz	r0, 679a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    6794:	2000      	movs	r0, #0
    6796:	f7ff f98f 	bl	5ab8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    679a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    679e:	2000      	movs	r0, #0
    67a0:	f000 bd82 	b.w	72a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a8>
    67a4:	bd10      	pop	{r4, pc}
    67a6:	0000      	.short	0x0000
    67a8:	20000104 	.word	0x20000104

000067ac <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    67ac:	b510      	push	{r4, lr}
    67ae:	4c09      	ldr	r4, [pc, #36]	; (67d4 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    67b0:	2803      	cmp	r0, #3
    67b2:	6864      	ldr	r4, [r4, #4]
    67b4:	d109      	bne.n	67ca <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    67b6:	63e1      	str	r1, [r4, #60]	; 0x3c
    67b8:	b13b      	cbz	r3, 67ca <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    67ba:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    67be:	6819      	ldr	r1, [r3, #0]
    67c0:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    67c4:	8899      	ldrh	r1, [r3, #4]
    67c6:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    67ca:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    67ce:	2000      	movs	r0, #0
    67d0:	bd10      	pop	{r4, pc}
    67d2:	0000      	.short	0x0000
    67d4:	20000104 	.word	0x20000104

000067d8 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    67d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67da:	4604      	mov	r4, r0
    67dc:	f006 fa4a 	bl	cc74 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    67e0:	bb48      	cbnz	r0, 6836 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    67e2:	4e17      	ldr	r6, [pc, #92]	; (6840 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    67e4:	6870      	ldr	r0, [r6, #4]
    67e6:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    67ea:	f88d 1000 	strb.w	r1, [sp]
    67ee:	9900      	ldr	r1, [sp, #0]
    67f0:	9100      	str	r1, [sp, #0]
    67f2:	f89d 1000 	ldrb.w	r1, [sp]
    67f6:	2500      	movs	r5, #0
    67f8:	b139      	cbz	r1, 680a <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    67fa:	7065      	strb	r5, [r4, #1]
    67fc:	2107      	movs	r1, #7
    67fe:	7021      	strb	r1, [r4, #0]
    6800:	6a41      	ldr	r1, [r0, #36]	; 0x24
    6802:	6061      	str	r1, [r4, #4]
    6804:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    6808:	e015      	b.n	6836 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    680a:	4620      	mov	r0, r4
    680c:	f000 f96a 	bl	6ae4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    6810:	b988      	cbnz	r0, 6836 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    6812:	6870      	ldr	r0, [r6, #4]
    6814:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    6818:	f88d 1000 	strb.w	r1, [sp]
    681c:	9900      	ldr	r1, [sp, #0]
    681e:	9100      	str	r1, [sp, #0]
    6820:	f89d 1000 	ldrb.w	r1, [sp]
    6824:	b149      	cbz	r1, 683a <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    6826:	7065      	strb	r5, [r4, #1]
    6828:	2118      	movs	r1, #24
    682a:	7021      	strb	r1, [r4, #0]
    682c:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    6830:	6061      	str	r1, [r4, #4]
    6832:	300a      	adds	r0, #10
    6834:	7785      	strb	r5, [r0, #30]
    6836:	2001      	movs	r0, #1
    6838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    683a:	2000      	movs	r0, #0
    683c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    683e:	0000      	.short	0x0000
    6840:	20000104 	.word	0x20000104

00006844 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    6844:	4809      	ldr	r0, [pc, #36]	; (686c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    6846:	6841      	ldr	r1, [r0, #4]
    6848:	6d48      	ldr	r0, [r1, #84]	; 0x54
    684a:	b168      	cbz	r0, 6868 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    684c:	f101 0059 	add.w	r0, r1, #89	; 0x59
    6850:	2201      	movs	r2, #1
    6852:	7002      	strb	r2, [r0, #0]
    6854:	2300      	movs	r3, #0
    6856:	654b      	str	r3, [r1, #84]	; 0x54
    6858:	7003      	strb	r3, [r0, #0]
    685a:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    685e:	4082      	lsls	r2, r0
    6860:	4803      	ldr	r0, [pc, #12]	; (6870 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    6862:	6002      	str	r2, [r0, #0]
    6864:	2000      	movs	r0, #0
    6866:	4770      	bx	lr
    6868:	200c      	movs	r0, #12
    686a:	4770      	bx	lr
    686c:	20000104 	.word	0x20000104
    6870:	4001f508 	.word	0x4001f508

00006874 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    6874:	4909      	ldr	r1, [pc, #36]	; (689c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    6876:	b510      	push	{r4, lr}
    6878:	6088      	str	r0, [r1, #8]
    687a:	68c8      	ldr	r0, [r1, #12]
    687c:	b150      	cbz	r0, 6894 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    687e:	f000 ff15 	bl	76ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ac>
    6882:	f000 f82f 	bl	68e4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    6886:	2800      	cmp	r0, #0
    6888:	d007      	beq.n	689a <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    688a:	f640 01f9 	movw	r1, #2297	; 0x8f9
    688e:	2032      	movs	r0, #50	; 0x32
    6890:	f7fd fe5a 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6894:	f640 01f5 	movw	r1, #2293	; 0x8f5
    6898:	e7f9      	b.n	688e <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    689a:	bd10      	pop	{r4, pc}
    689c:	20000104 	.word	0x20000104

000068a0 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    68a0:	4902      	ldr	r1, [pc, #8]	; (68ac <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    68a2:	4801      	ldr	r0, [pc, #4]	; (68a8 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    68a4:	60c8      	str	r0, [r1, #12]
    68a6:	4770      	bx	lr
    68a8:	000078f4 	.word	0x000078f4
    68ac:	20000104 	.word	0x20000104

000068b0 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    68b0:	b570      	push	{r4, r5, r6, lr}
    68b2:	4605      	mov	r5, r0
    68b4:	f7fe f94e 	bl	4b54 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    68b8:	4604      	mov	r4, r0
    68ba:	f7fe f951 	bl	4b60 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    68be:	4621      	mov	r1, r4
    68c0:	f006 f9d6 	bl	cc70 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    68c4:	0001      	movs	r1, r0
    68c6:	d006      	beq.n	68d6 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    68c8:	4805      	ldr	r0, [pc, #20]	; (68e0 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    68ca:	68c0      	ldr	r0, [r0, #12]
    68cc:	6802      	ldr	r2, [r0, #0]
    68ce:	4628      	mov	r0, r5
    68d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    68d4:	4710      	bx	r2
    68d6:	f640 11f2 	movw	r1, #2546	; 0x9f2
    68da:	2032      	movs	r0, #50	; 0x32
    68dc:	f7fd fe34 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68e0:	20000104 	.word	0x20000104

000068e4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    68e4:	b570      	push	{r4, r5, r6, lr}
    68e6:	4d19      	ldr	r5, [pc, #100]	; (694c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    68e8:	6868      	ldr	r0, [r5, #4]
    68ea:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    68ee:	2901      	cmp	r1, #1
    68f0:	d004      	beq.n	68fc <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    68f2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    68f6:	b108      	cbz	r0, 68fc <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    68f8:	200c      	movs	r0, #12
    68fa:	bd70      	pop	{r4, r5, r6, pc}
    68fc:	f7fe f954 	bl	4ba8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    6900:	f006 fa1c 	bl	cd3c <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    6904:	6868      	ldr	r0, [r5, #4]
    6906:	2400      	movs	r4, #0
    6908:	7004      	strb	r4, [r0, #0]
    690a:	f100 0122 	add.w	r1, r0, #34	; 0x22
    690e:	700c      	strb	r4, [r1, #0]
    6910:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    6914:	f000 f8ac 	bl	6a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    6918:	6868      	ldr	r0, [r5, #4]
    691a:	2201      	movs	r2, #1
    691c:	2107      	movs	r1, #7
    691e:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    6922:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    6926:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    692a:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    692e:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    6932:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
    6936:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    693a:	f100 0159 	add.w	r1, r0, #89	; 0x59
    693e:	700a      	strb	r2, [r1, #0]
    6940:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    6944:	6544      	str	r4, [r0, #84]	; 0x54
    6946:	700c      	strb	r4, [r1, #0]
    6948:	2000      	movs	r0, #0
    694a:	bd70      	pop	{r4, r5, r6, pc}
    694c:	20000104 	.word	0x20000104

00006950 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    6950:	4805      	ldr	r0, [pc, #20]	; (6968 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    6952:	b510      	push	{r4, lr}
    6954:	6840      	ldr	r0, [r0, #4]
    6956:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    695a:	f006 f93c 	bl	cbd6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    695e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6962:	f7fe bb39 	b.w	4fd8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    6966:	0000      	.short	0x0000
    6968:	20000104 	.word	0x20000104

0000696c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    696c:	b140      	cbz	r0, 6980 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    696e:	2802      	cmp	r0, #2
    6970:	d006      	beq.n	6980 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    6972:	2200      	movs	r2, #0
    6974:	4903      	ldr	r1, [pc, #12]	; (6984 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    6976:	6849      	ldr	r1, [r1, #4]
    6978:	f801 2f39 	strb.w	r2, [r1, #57]!
    697c:	7208      	strb	r0, [r1, #8]
    697e:	4770      	bx	lr
    6980:	2201      	movs	r2, #1
    6982:	e7f7      	b.n	6974 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    6984:	20000104 	.word	0x20000104

00006988 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    6988:	b510      	push	{r4, lr}
    698a:	4604      	mov	r4, r0
    698c:	7800      	ldrb	r0, [r0, #0]
    698e:	07c0      	lsls	r0, r0, #31
    6990:	d007      	beq.n	69a2 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    6992:	2300      	movs	r3, #0
    6994:	7860      	ldrb	r0, [r4, #1]
    6996:	461a      	mov	r2, r3
    6998:	4619      	mov	r1, r3
    699a:	f7ff ff07 	bl	67ac <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    699e:	2800      	cmp	r0, #0
    69a0:	d10c      	bne.n	69bc <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    69a2:	4b07      	ldr	r3, [pc, #28]	; (69c0 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    69a4:	78a0      	ldrb	r0, [r4, #2]
    69a6:	6859      	ldr	r1, [r3, #4]
    69a8:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    69ac:	78e0      	ldrb	r0, [r4, #3]
    69ae:	f7ff ffdd 	bl	696c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    69b2:	6859      	ldr	r1, [r3, #4]
    69b4:	7920      	ldrb	r0, [r4, #4]
    69b6:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    69ba:	2000      	movs	r0, #0
    69bc:	bd10      	pop	{r4, pc}
    69be:	0000      	.short	0x0000
    69c0:	20000104 	.word	0x20000104

000069c4 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    69c4:	4801      	ldr	r0, [pc, #4]	; (69cc <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    69c6:	68c0      	ldr	r0, [r0, #12]
    69c8:	6840      	ldr	r0, [r0, #4]
    69ca:	4700      	bx	r0
    69cc:	20000104 	.word	0x20000104

000069d0 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    69d0:	b510      	push	{r4, lr}
    69d2:	2000      	movs	r0, #0
    69d4:	f000 fc8e 	bl	72f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f4>
    69d8:	f000 f84a 	bl	6a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    69dc:	f000 fe66 	bl	76ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ac>
    69e0:	4803      	ldr	r0, [pc, #12]	; (69f0 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    69e2:	6840      	ldr	r0, [r0, #4]
    69e4:	2100      	movs	r1, #0
    69e6:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    69ea:	4608      	mov	r0, r1
    69ec:	bd10      	pop	{r4, pc}
    69ee:	0000      	.short	0x0000
    69f0:	20000104 	.word	0x20000104

000069f4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    69f4:	b510      	push	{r4, lr}
    69f6:	f000 f941 	bl	6c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    69fa:	4909      	ldr	r1, [pc, #36]	; (6a20 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    69fc:	2201      	movs	r2, #1
    69fe:	b130      	cbz	r0, 6a0e <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    6a00:	6848      	ldr	r0, [r1, #4]
    6a02:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    6a06:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6a08:	881b      	ldrh	r3, [r3, #0]
    6a0a:	8583      	strh	r3, [r0, #44]	; 0x2c
    6a0c:	e004      	b.n	6a18 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    6a0e:	684b      	ldr	r3, [r1, #4]
    6a10:	2000      	movs	r0, #0
    6a12:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    6a16:	8598      	strh	r0, [r3, #44]	; 0x2c
    6a18:	6848      	ldr	r0, [r1, #4]
    6a1a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    6a1e:	bd10      	pop	{r4, pc}
    6a20:	20000104 	.word	0x20000104

00006a24 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    6a24:	4802      	ldr	r0, [pc, #8]	; (6a30 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    6a26:	6840      	ldr	r0, [r0, #4]
    6a28:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6a2c:	4770      	bx	lr
    6a2e:	0000      	.short	0x0000
    6a30:	20000104 	.word	0x20000104

00006a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    6a34:	b510      	push	{r4, lr}
    6a36:	f000 f921 	bl	6c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6a3a:	490c      	ldr	r1, [pc, #48]	; (6a6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    6a3c:	b128      	cbz	r0, 6a4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    6a3e:	6848      	ldr	r0, [r1, #4]
    6a40:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    6a44:	2801      	cmp	r0, #1
    6a46:	d00e      	beq.n	6a66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    6a48:	e00c      	b.n	6a64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    6a4a:	6849      	ldr	r1, [r1, #4]
    6a4c:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    6a50:	2801      	cmp	r0, #1
    6a52:	d001      	beq.n	6a58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    6a54:	2802      	cmp	r0, #2
    6a56:	d105      	bne.n	6a64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    6a58:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    6a5c:	2801      	cmp	r0, #1
    6a5e:	d003      	beq.n	6a68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    6a60:	2803      	cmp	r0, #3
    6a62:	d001      	beq.n	6a68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    6a64:	2000      	movs	r0, #0
    6a66:	bd10      	pop	{r4, pc}
    6a68:	2001      	movs	r0, #1
    6a6a:	bd10      	pop	{r4, pc}
    6a6c:	20000104 	.word	0x20000104
    6a70:	b510      	push	{r4, lr}
    6a72:	4c07      	ldr	r4, [pc, #28]	; (6a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    6a74:	6860      	ldr	r0, [r4, #4]
    6a76:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    6a7a:	2800      	cmp	r0, #0
    6a7c:	d007      	beq.n	6a8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    6a7e:	f003 fb97 	bl	a1b0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6a82:	f003 f979 	bl	9d78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6a86:	6861      	ldr	r1, [r4, #4]
    6a88:	2000      	movs	r0, #0
    6a8a:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    6a8e:	bd10      	pop	{r4, pc}
    6a90:	20000104 	.word	0x20000104
    6a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a98:	4d10      	ldr	r5, [pc, #64]	; (6adc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    6a9a:	4606      	mov	r6, r0
    6a9c:	460f      	mov	r7, r1
    6a9e:	6868      	ldr	r0, [r5, #4]
    6aa0:	490f      	ldr	r1, [pc, #60]	; (6ae0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    6aa2:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    6aa6:	5c0c      	ldrb	r4, [r1, r0]
    6aa8:	4620      	mov	r0, r4
    6aaa:	f003 fef5 	bl	a898 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    6aae:	6868      	ldr	r0, [r5, #4]
    6ab0:	2101      	movs	r1, #1
    6ab2:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    6ab6:	2025      	movs	r0, #37	; 0x25
    6ab8:	f007 f862 	bl	db80 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    6abc:	4638      	mov	r0, r7
    6abe:	f003 fdf5 	bl	a6ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6ac2:	f04f 0101 	mov.w	r1, #1
    6ac6:	4608      	mov	r0, r1
    6ac8:	b126      	cbz	r6, 6ad4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    6aca:	f003 fc27 	bl	a31c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6ace:	b918      	cbnz	r0, 6ad8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    6ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ad4:	f003 fbd6 	bl	a284 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6ad8:	2001      	movs	r0, #1
    6ada:	e7f9      	b.n	6ad0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    6adc:	20000104 	.word	0x20000104
    6ae0:	0000dcd0 	.word	0x0000dcd0
    6ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ae6:	4e20      	ldr	r6, [pc, #128]	; (6b68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    6ae8:	4604      	mov	r4, r0
    6aea:	6870      	ldr	r0, [r6, #4]
    6aec:	7801      	ldrb	r1, [r0, #0]
    6aee:	f88d 1000 	strb.w	r1, [sp]
    6af2:	9900      	ldr	r1, [sp, #0]
    6af4:	9100      	str	r1, [sp, #0]
    6af6:	f89d 1000 	ldrb.w	r1, [sp]
    6afa:	b389      	cbz	r1, 6b60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    6afc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6afe:	6882      	ldr	r2, [r0, #8]
    6b00:	f841 2f03 	str.w	r2, [r1, #3]!
    6b04:	8982      	ldrh	r2, [r0, #12]
    6b06:	808a      	strh	r2, [r1, #4]
    6b08:	79c0      	ldrb	r0, [r0, #7]
    6b0a:	f006 f864 	bl	cbd6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6b0e:	6871      	ldr	r1, [r6, #4]
    6b10:	2500      	movs	r5, #0
    6b12:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    6b14:	1c89      	adds	r1, r1, #2
    6b16:	7090      	strb	r0, [r2, #2]
    6b18:	7065      	strb	r5, [r4, #1]
    6b1a:	2014      	movs	r0, #20
    6b1c:	7020      	strb	r0, [r4, #0]
    6b1e:	2220      	movs	r2, #32
    6b20:	1d20      	adds	r0, r4, #4
    6b22:	f004 fbad 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6b26:	4a11      	ldr	r2, [pc, #68]	; (6b6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    6b28:	7225      	strb	r5, [r4, #8]
    6b2a:	2301      	movs	r3, #1
    6b2c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    6b2e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    6b32:	6871      	ldr	r1, [r6, #4]
    6b34:	700d      	strb	r5, [r1, #0]
    6b36:	f101 0028 	add.w	r0, r1, #40	; 0x28
    6b3a:	7005      	strb	r5, [r0, #0]
    6b3c:	88e0      	ldrh	r0, [r4, #6]
    6b3e:	8490      	strh	r0, [r2, #36]	; 0x24
    6b40:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    6b42:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    6b46:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    6b4a:	4610      	mov	r0, r2
    6b4c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    6b50:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6b52:	8800      	ldrh	r0, [r0, #0]
    6b54:	f7fd ffd0 	bl	4af8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6b58:	f005 f9df 	bl	bf1a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    6b5c:	2001      	movs	r0, #1
    6b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b60:	e7ff      	b.n	6b62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    6b62:	2000      	movs	r0, #0
    6b64:	e7fb      	b.n	6b5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    6b66:	0000      	.short	0x0000
    6b68:	20000104 	.word	0x20000104
    6b6c:	20000d14 	.word	0x20000d14
    6b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b72:	2600      	movs	r6, #0
    6b74:	460f      	mov	r7, r1
    6b76:	4605      	mov	r5, r0
    6b78:	f88d 6000 	strb.w	r6, [sp]
    6b7c:	466b      	mov	r3, sp
    6b7e:	f000 f89d 	bl	6cbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    6b82:	0001      	movs	r1, r0
    6b84:	4810      	ldr	r0, [pc, #64]	; (6bc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x194>)
    6b86:	d003      	beq.n	6b90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15c>
    6b88:	6840      	ldr	r0, [r0, #4]
    6b8a:	f880 606d 	strb.w	r6, [r0, #109]	; 0x6d
    6b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b90:	6840      	ldr	r0, [r0, #4]
    6b92:	f89d 1000 	ldrb.w	r1, [sp]
    6b96:	2f07      	cmp	r7, #7
    6b98:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
    6b9c:	d301      	bcc.n	6ba2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16e>
    6b9e:	4634      	mov	r4, r6
    6ba0:	e002      	b.n	6ba8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    6ba2:	0022      	movs	r2, r4
    6ba4:	d100      	bne.n	6ba8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    6ba6:	460c      	mov	r4, r1
    6ba8:	f880 406d 	strb.w	r4, [r0, #109]	; 0x6d
    6bac:	6869      	ldr	r1, [r5, #4]
    6bae:	2900      	cmp	r1, #0
    6bb0:	d0ed      	beq.n	6b8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15a>
    6bb2:	7c69      	ldrb	r1, [r5, #17]
    6bb4:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    6bb8:	6869      	ldr	r1, [r5, #4]
    6bba:	680a      	ldr	r2, [r1, #0]
    6bbc:	f840 2f6e 	str.w	r2, [r0, #110]!
    6bc0:	8889      	ldrh	r1, [r1, #4]
    6bc2:	8081      	strh	r1, [r0, #4]
    6bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bc6:	0000      	.short	0x0000
    6bc8:	20000104 	.word	0x20000104
    6bcc:	b510      	push	{r4, lr}
    6bce:	4915      	ldr	r1, [pc, #84]	; (6c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1f0>)
    6bd0:	6842      	ldr	r2, [r0, #4]
    6bd2:	6849      	ldr	r1, [r1, #4]
    6bd4:	7813      	ldrb	r3, [r2, #0]
    6bd6:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    6bda:	42a3      	cmp	r3, r4
    6bdc:	d11f      	bne.n	6c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6bde:	7853      	ldrb	r3, [r2, #1]
    6be0:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    6be4:	42a3      	cmp	r3, r4
    6be6:	d11a      	bne.n	6c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6be8:	7893      	ldrb	r3, [r2, #2]
    6bea:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    6bee:	42a3      	cmp	r3, r4
    6bf0:	d115      	bne.n	6c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6bf2:	78d3      	ldrb	r3, [r2, #3]
    6bf4:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    6bf8:	42a3      	cmp	r3, r4
    6bfa:	d110      	bne.n	6c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6bfc:	7913      	ldrb	r3, [r2, #4]
    6bfe:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    6c02:	42a3      	cmp	r3, r4
    6c04:	d10b      	bne.n	6c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6c06:	7952      	ldrb	r2, [r2, #5]
    6c08:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    6c0c:	429a      	cmp	r2, r3
    6c0e:	d106      	bne.n	6c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6c10:	7c40      	ldrb	r0, [r0, #17]
    6c12:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    6c16:	4288      	cmp	r0, r1
    6c18:	d101      	bne.n	6c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6c1a:	2001      	movs	r0, #1
    6c1c:	bd10      	pop	{r4, pc}
    6c1e:	2000      	movs	r0, #0
    6c20:	bd10      	pop	{r4, pc}
    6c22:	0000      	.short	0x0000
    6c24:	20000104 	.word	0x20000104
    6c28:	b530      	push	{r4, r5, lr}
    6c2a:	7801      	ldrb	r1, [r0, #0]
    6c2c:	b08b      	sub	sp, #44	; 0x2c
    6c2e:	f001 040f 	and.w	r4, r1, #15
    6c32:	4622      	mov	r2, r4
    6c34:	a901      	add	r1, sp, #4
    6c36:	f000 fee9 	bl	7a0c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    6c3a:	a801      	add	r0, sp, #4
    6c3c:	f7ff ffc6 	bl	6bcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x198>
    6c40:	4605      	mov	r5, r0
    6c42:	f003 facf 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6c46:	f000 fb6f 	bl	7328 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x328>
    6c4a:	2c04      	cmp	r4, #4
    6c4c:	d111      	bne.n	6c72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    6c4e:	b185      	cbz	r5, 6c72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    6c50:	a80a      	add	r0, sp, #40	; 0x28
    6c52:	f000 fb75 	bl	7340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    6c56:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    6c5a:	9000      	str	r0, [sp, #0]
    6c5c:	4806      	ldr	r0, [pc, #24]	; (6c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x244>)
    6c5e:	6840      	ldr	r0, [r0, #4]
    6c60:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    6c64:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    6c68:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    6c6c:	a801      	add	r0, sp, #4
    6c6e:	f006 f867 	bl	cd40 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    6c72:	b00b      	add	sp, #44	; 0x2c
    6c74:	2005      	movs	r0, #5
    6c76:	bd30      	pop	{r4, r5, pc}
    6c78:	20000104 	.word	0x20000104
    6c7c:	4804      	ldr	r0, [pc, #16]	; (6c90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25c>)
    6c7e:	6840      	ldr	r0, [r0, #4]
    6c80:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6c84:	2803      	cmp	r0, #3
    6c86:	d001      	beq.n	6c8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    6c88:	2000      	movs	r0, #0
    6c8a:	4770      	bx	lr
    6c8c:	2001      	movs	r0, #1
    6c8e:	4770      	bx	lr
    6c90:	20000104 	.word	0x20000104
    6c94:	4908      	ldr	r1, [pc, #32]	; (6cb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    6c96:	b510      	push	{r4, lr}
    6c98:	6849      	ldr	r1, [r1, #4]
    6c9a:	7c83      	ldrb	r3, [r0, #18]
    6c9c:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    6ca0:	429a      	cmp	r2, r3
    6ca2:	d105      	bne.n	6cb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>
    6ca4:	6880      	ldr	r0, [r0, #8]
    6ca6:	2206      	movs	r2, #6
    6ca8:	3132      	adds	r1, #50	; 0x32
    6caa:	f004 fad7 	bl	b25c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6cae:	b108      	cbz	r0, 6cb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    6cb0:	2000      	movs	r0, #0
    6cb2:	bd10      	pop	{r4, pc}
    6cb4:	2001      	movs	r0, #1
    6cb6:	bd10      	pop	{r4, pc}
    6cb8:	20000104 	.word	0x20000104
    6cbc:	b570      	push	{r4, r5, r6, lr}
    6cbe:	6841      	ldr	r1, [r0, #4]
    6cc0:	461e      	mov	r6, r3
    6cc2:	4604      	mov	r4, r0
    6cc4:	b1c1      	cbz	r1, 6cf8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    6cc6:	7c60      	ldrb	r0, [r4, #17]
    6cc8:	f005 ff7a 	bl	cbc0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6ccc:	4d10      	ldr	r5, [pc, #64]	; (6d10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    6cce:	6869      	ldr	r1, [r5, #4]
    6cd0:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    6cd4:	b141      	cbz	r1, 6ce8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    6cd6:	b138      	cbz	r0, 6ce8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    6cd8:	f005 fb01 	bl	c2de <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6cdc:	6869      	ldr	r1, [r5, #4]
    6cde:	f801 0f64 	strb.w	r0, [r1, #100]!
    6ce2:	7048      	strb	r0, [r1, #1]
    6ce4:	2001      	movs	r0, #1
    6ce6:	71c8      	strb	r0, [r1, #7]
    6ce8:	686b      	ldr	r3, [r5, #4]
    6cea:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    6cee:	28ff      	cmp	r0, #255	; 0xff
    6cf0:	d004      	beq.n	6cfc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    6cf2:	f7fe ff8f 	bl	5c14 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6cf6:	7030      	strb	r0, [r6, #0]
    6cf8:	2000      	movs	r0, #0
    6cfa:	bd70      	pop	{r4, r5, r6, pc}
    6cfc:	7c60      	ldrb	r0, [r4, #17]
    6cfe:	4632      	mov	r2, r6
    6d00:	3364      	adds	r3, #100	; 0x64
    6d02:	6861      	ldr	r1, [r4, #4]
    6d04:	f7ff f802 	bl	5d0c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    6d08:	f080 0001 	eor.w	r0, r0, #1
    6d0c:	bd70      	pop	{r4, r5, r6, pc}
    6d0e:	0000      	.short	0x0000
    6d10:	20000104 	.word	0x20000104
    6d14:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6d16:	4c3d      	ldr	r4, [pc, #244]	; (6e0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3d8>)
    6d18:	466f      	mov	r7, sp
    6d1a:	6860      	ldr	r0, [r4, #4]
    6d1c:	7801      	ldrb	r1, [r0, #0]
    6d1e:	f88d 1008 	strb.w	r1, [sp, #8]
    6d22:	9902      	ldr	r1, [sp, #8]
    6d24:	9102      	str	r1, [sp, #8]
    6d26:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6d2a:	b111      	cbz	r1, 6d32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2fe>
    6d2c:	f241 41b1 	movw	r1, #5297	; 0x14b1
    6d30:	e04f      	b.n	6dd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39e>
    6d32:	2500      	movs	r5, #0
    6d34:	7085      	strb	r5, [r0, #2]
    6d36:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6d38:	880a      	ldrh	r2, [r1, #0]
    6d3a:	8082      	strh	r2, [r0, #4]
    6d3c:	68c8      	ldr	r0, [r1, #12]
    6d3e:	f005 fb33 	bl	c3a8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6d42:	6861      	ldr	r1, [r4, #4]
    6d44:	8348      	strh	r0, [r1, #26]
    6d46:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6d48:	8a82      	ldrh	r2, [r0, #20]
    6d4a:	838a      	strh	r2, [r1, #28]
    6d4c:	8ac0      	ldrh	r0, [r0, #22]
    6d4e:	83c8      	strh	r0, [r1, #30]
    6d50:	f881 5020 	strb.w	r5, [r1, #32]
    6d54:	4669      	mov	r1, sp
    6d56:	68a0      	ldr	r0, [r4, #8]
    6d58:	f005 fd8c 	bl	c874 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    6d5c:	68a0      	ldr	r0, [r4, #8]
    6d5e:	7800      	ldrb	r0, [r0, #0]
    6d60:	f3c0 1680 	ubfx	r6, r0, #6, #1
    6d64:	6860      	ldr	r0, [r4, #4]
    6d66:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6d6a:	b120      	cbz	r0, 6d76 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x342>
    6d6c:	4639      	mov	r1, r7
    6d6e:	4630      	mov	r0, r6
    6d70:	f005 ff26 	bl	cbc0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6d74:	b940      	cbnz	r0, 6d88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x354>
    6d76:	6860      	ldr	r0, [r4, #4]
    6d78:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    6d7c:	b160      	cbz	r0, 6d98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    6d7e:	4639      	mov	r1, r7
    6d80:	4630      	mov	r0, r6
    6d82:	f005 ff14 	bl	cbae <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6d86:	b138      	cbz	r0, 6d98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    6d88:	6860      	ldr	r0, [r4, #4]
    6d8a:	9900      	ldr	r1, [sp, #0]
    6d8c:	f8c0 100e 	str.w	r1, [r0, #14]
    6d90:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6d94:	8241      	strh	r1, [r0, #18]
    6d96:	e003      	b.n	6da0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    6d98:	6860      	ldr	r0, [r4, #4]
    6d9a:	f8c0 500e 	str.w	r5, [r0, #14]
    6d9e:	8245      	strh	r5, [r0, #18]
    6da0:	6861      	ldr	r1, [r4, #4]
    6da2:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    6da6:	28ff      	cmp	r0, #255	; 0xff
    6da8:	d016      	beq.n	6dd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    6daa:	f101 0208 	add.w	r2, r1, #8
    6dae:	1dc9      	adds	r1, r1, #7
    6db0:	f7fe ff16 	bl	5be0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6db4:	b158      	cbz	r0, 6dce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
    6db6:	6860      	ldr	r0, [r4, #4]
    6db8:	79c1      	ldrb	r1, [r0, #7]
    6dba:	f041 0102 	orr.w	r1, r1, #2
    6dbe:	71c1      	strb	r1, [r0, #7]
    6dc0:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    6dc4:	6141      	str	r1, [r0, #20]
    6dc6:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    6dca:	8301      	strh	r1, [r0, #24]
    6dcc:	e00f      	b.n	6dee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
    6dce:	f241 41dc 	movw	r1, #5340	; 0x14dc
    6dd2:	2032      	movs	r0, #50	; 0x32
    6dd4:	f7fd fbb8 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dd8:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    6ddc:	71c8      	strb	r0, [r1, #7]
    6dde:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    6de2:	6088      	str	r0, [r1, #8]
    6de4:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    6de8:	8188      	strh	r0, [r1, #12]
    6dea:	614d      	str	r5, [r1, #20]
    6dec:	830d      	strh	r5, [r1, #24]
    6dee:	6860      	ldr	r0, [r4, #4]
    6df0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    6df2:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    6df6:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    6dfa:	2101      	movs	r1, #1
    6dfc:	7001      	strb	r1, [r0, #0]
    6dfe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e00:	8800      	ldrh	r0, [r0, #0]
    6e02:	f7fd fe79 	bl	4af8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6e06:	f005 f88e 	bl	bf26 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6e0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6e0c:	20000104 	.word	0x20000104
    6e10:	b570      	push	{r4, r5, r6, lr}
    6e12:	4d39      	ldr	r5, [pc, #228]	; (6ef8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>)
    6e14:	4601      	mov	r1, r0
    6e16:	2200      	movs	r2, #0
    6e18:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    6e1c:	365c      	adds	r6, #92	; 0x5c
    6e1e:	8002      	strh	r2, [r0, #0]
    6e20:	2903      	cmp	r1, #3
    6e22:	d002      	beq.n	6e2a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f6>
    6e24:	2905      	cmp	r1, #5
    6e26:	d004      	beq.n	6e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fe>
    6e28:	e056      	b.n	6ed8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6e2a:	2103      	movs	r1, #3
    6e2c:	f005 fd39 	bl	c8a2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6e30:	e052      	b.n	6ed8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6e32:	2105      	movs	r1, #5
    6e34:	f005 fd35 	bl	c8a2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6e38:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e3c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e3e:	6909      	ldr	r1, [r1, #16]
    6e40:	f844 1f0f 	str.w	r1, [r4, #15]!
    6e44:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e46:	8b0a      	ldrh	r2, [r1, #24]
    6e48:	80a2      	strh	r2, [r4, #4]
    6e4a:	7e89      	ldrb	r1, [r1, #26]
    6e4c:	71a1      	strb	r1, [r4, #6]
    6e4e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e50:	68c1      	ldr	r1, [r0, #12]
    6e52:	8b80      	ldrh	r0, [r0, #28]
    6e54:	f005 fc1a 	bl	c68c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6e58:	71e0      	strb	r0, [r4, #7]
    6e5a:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e5e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e60:	68c1      	ldr	r1, [r0, #12]
    6e62:	6a00      	ldr	r0, [r0, #32]
    6e64:	f005 fc07 	bl	c676 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    6e68:	75e0      	strb	r0, [r4, #23]
    6e6a:	0a00      	lsrs	r0, r0, #8
    6e6c:	7620      	strb	r0, [r4, #24]
    6e6e:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e72:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e74:	68c0      	ldr	r0, [r0, #12]
    6e76:	f005 fa97 	bl	c3a8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6e7a:	7660      	strb	r0, [r4, #25]
    6e7c:	0a00      	lsrs	r0, r0, #8
    6e7e:	76a0      	strb	r0, [r4, #26]
    6e80:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e84:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e86:	8a89      	ldrh	r1, [r1, #20]
    6e88:	76e1      	strb	r1, [r4, #27]
    6e8a:	0a09      	lsrs	r1, r1, #8
    6e8c:	7721      	strb	r1, [r4, #28]
    6e8e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e90:	8ac9      	ldrh	r1, [r1, #22]
    6e92:	7761      	strb	r1, [r4, #29]
    6e94:	0a09      	lsrs	r1, r1, #8
    6e96:	77a1      	strb	r1, [r4, #30]
    6e98:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e9a:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    6e9e:	f8c4 201f 	str.w	r2, [r4, #31]
    6ea2:	7909      	ldrb	r1, [r1, #4]
    6ea4:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    6ea8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6eaa:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    6eae:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    6eb2:	f001 011f 	and.w	r1, r1, #31
    6eb6:	f020 001f 	bic.w	r0, r0, #31
    6eba:	4308      	orrs	r0, r1
    6ebc:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    6ec0:	f002 ff3c 	bl	9d3c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    6ec4:	2807      	cmp	r0, #7
    6ec6:	d900      	bls.n	6eca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x496>
    6ec8:	2007      	movs	r0, #7
    6eca:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    6ece:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    6ed2:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    6ed6:	7021      	strb	r1, [r4, #0]
    6ed8:	f106 0112 	add.w	r1, r6, #18
    6edc:	68a8      	ldr	r0, [r5, #8]
    6ede:	f005 fcfb 	bl	c8d8 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6ee2:	7e71      	ldrb	r1, [r6, #25]
    6ee4:	68a8      	ldr	r0, [r5, #8]
    6ee6:	f005 fcfd 	bl	c8e4 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6eea:	f000 fba7 	bl	763c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63c>
    6eee:	68a8      	ldr	r0, [r5, #8]
    6ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6ef4:	f003 bbda 	b.w	a6ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6ef8:	20000104 	.word	0x20000104
    6efc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6f00:	4f65      	ldr	r7, [pc, #404]	; (7098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    6f02:	4604      	mov	r4, r0
    6f04:	6878      	ldr	r0, [r7, #4]
    6f06:	f890 806d 	ldrb.w	r8, [r0, #109]	; 0x6d
    6f0a:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6f0e:	b180      	cbz	r0, 6f32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    6f10:	2600      	movs	r6, #0
    6f12:	2500      	movs	r5, #0
    6f14:	7ca0      	ldrb	r0, [r4, #18]
    6f16:	68a1      	ldr	r1, [r4, #8]
    6f18:	f005 fe52 	bl	cbc0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6f1c:	4682      	mov	sl, r0
    6f1e:	f7ff fead 	bl	6c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6f22:	b140      	cbz	r0, 6f36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6f24:	6878      	ldr	r0, [r7, #4]
    6f26:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    6f2a:	b121      	cbz	r1, 6f36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6f2c:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    6f30:	e004      	b.n	6f3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x508>
    6f32:	2601      	movs	r6, #1
    6f34:	e7ed      	b.n	6f12 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4de>
    6f36:	6878      	ldr	r0, [r7, #4]
    6f38:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6f3c:	4683      	mov	fp, r0
    6f3e:	f7fe fda1 	bl	5a84 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6f42:	ea5f 0900 	movs.w	r9, r0
    6f46:	d00c      	beq.n	6f62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    6f48:	4658      	mov	r0, fp
    6f4a:	f7fe fd8f 	bl	5a6c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    6f4e:	b100      	cbz	r0, 6f52 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x51e>
    6f50:	2601      	movs	r6, #1
    6f52:	f1ba 0f00 	cmp.w	sl, #0
    6f56:	d004      	beq.n	6f62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    6f58:	4648      	mov	r0, r9
    6f5a:	68a1      	ldr	r1, [r4, #8]
    6f5c:	f005 f972 	bl	c244 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    6f60:	4605      	mov	r5, r0
    6f62:	6878      	ldr	r0, [r7, #4]
    6f64:	46b9      	mov	r9, r7
    6f66:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    6f6a:	b10d      	cbz	r5, 6f70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    6f6c:	f047 0702 	orr.w	r7, r7, #2
    6f70:	f7ff fe84 	bl	6c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6f74:	b3a0      	cbz	r0, 6fe0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    6f76:	6860      	ldr	r0, [r4, #4]
    6f78:	f8d9 1004 	ldr.w	r1, [r9, #4]
    6f7c:	7802      	ldrb	r2, [r0, #0]
    6f7e:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6f82:	429a      	cmp	r2, r3
    6f84:	d11f      	bne.n	6fc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f86:	7842      	ldrb	r2, [r0, #1]
    6f88:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6f8c:	429a      	cmp	r2, r3
    6f8e:	d11a      	bne.n	6fc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f90:	7882      	ldrb	r2, [r0, #2]
    6f92:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6f96:	429a      	cmp	r2, r3
    6f98:	d115      	bne.n	6fc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f9a:	78c2      	ldrb	r2, [r0, #3]
    6f9c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6fa0:	429a      	cmp	r2, r3
    6fa2:	d110      	bne.n	6fc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6fa4:	7902      	ldrb	r2, [r0, #4]
    6fa6:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6faa:	429a      	cmp	r2, r3
    6fac:	d10b      	bne.n	6fc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6fae:	7940      	ldrb	r0, [r0, #5]
    6fb0:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6fb4:	4290      	cmp	r0, r2
    6fb6:	d106      	bne.n	6fc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6fb8:	7c60      	ldrb	r0, [r4, #17]
    6fba:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    6fbe:	4288      	cmp	r0, r1
    6fc0:	d101      	bne.n	6fc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6fc2:	2001      	movs	r0, #1
    6fc4:	e000      	b.n	6fc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x594>
    6fc6:	2000      	movs	r0, #0
    6fc8:	4f34      	ldr	r7, [pc, #208]	; (709c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    6fca:	4682      	mov	sl, r0
    6fcc:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    6fd0:	2808      	cmp	r0, #8
    6fd2:	d006      	beq.n	6fe2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    6fd4:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    6fd8:	4288      	cmp	r0, r1
    6fda:	d102      	bne.n	6fe2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    6fdc:	2001      	movs	r0, #1
    6fde:	e001      	b.n	6fe4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b0>
    6fe0:	e021      	b.n	7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    6fe2:	2000      	movs	r0, #0
    6fe4:	4681      	mov	r9, r0
    6fe6:	b925      	cbnz	r5, 6ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5be>
    6fe8:	b12e      	cbz	r6, 6ff6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    6fea:	4620      	mov	r0, r4
    6fec:	f7ff fe52 	bl	6c94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    6ff0:	b108      	cbz	r0, 6ff6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    6ff2:	2001      	movs	r0, #1
    6ff4:	e000      	b.n	6ff8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c4>
    6ff6:	2000      	movs	r0, #0
    6ff8:	f1b8 0f00 	cmp.w	r8, #0
    6ffc:	d009      	beq.n	7012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    6ffe:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    7002:	2901      	cmp	r1, #1
    7004:	d003      	beq.n	700e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    7006:	b921      	cbnz	r1, 7012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    7008:	ea5a 0109 	orrs.w	r1, sl, r9
    700c:	d001      	beq.n	7012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    700e:	2101      	movs	r1, #1
    7010:	e000      	b.n	7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    7012:	2100      	movs	r1, #0
    7014:	4208      	tst	r0, r1
    7016:	d003      	beq.n	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    7018:	200c      	movs	r0, #12
    701a:	b004      	add	sp, #16
    701c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    7020:	f003 f8e0 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7024:	e036      	b.n	7094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    7026:	f003 f8dd 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    702a:	f1b8 0f00 	cmp.w	r8, #0
    702e:	d031      	beq.n	7094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    7030:	4620      	mov	r0, r4
    7032:	f7ff fe2f 	bl	6c94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    7036:	b900      	cbnz	r0, 703a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
    7038:	b175      	cbz	r5, 7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    703a:	a803      	add	r0, sp, #12
    703c:	f000 f980 	bl	7340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    7040:	f8d9 2004 	ldr.w	r2, [r9, #4]
    7044:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7048:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    704c:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7050:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7054:	463b      	mov	r3, r7
    7056:	e018      	b.n	708a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8a>
    7058:	f8d9 0004 	ldr.w	r0, [r9, #4]
    705c:	464d      	mov	r5, r9
    705e:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    7062:	2803      	cmp	r0, #3
    7064:	d001      	beq.n	706a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6a>
    7066:	2802      	cmp	r0, #2
    7068:	d114      	bne.n	7094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    706a:	f1ba 0f00 	cmp.w	sl, #0
    706e:	d011      	beq.n	7094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    7070:	a803      	add	r0, sp, #12
    7072:	f000 f965 	bl	7340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    7076:	686a      	ldr	r2, [r5, #4]
    7078:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    707c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7080:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7084:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7088:	23fe      	movs	r3, #254	; 0xfe
    708a:	2101      	movs	r1, #1
    708c:	4620      	mov	r0, r4
    708e:	3232      	adds	r2, #50	; 0x32
    7090:	f000 fc46 	bl	7920 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7094:	2005      	movs	r0, #5
    7096:	e7c0      	b.n	701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    7098:	20000104 	.word	0x20000104
    709c:	20000d14 	.word	0x20000d14
    70a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    70a2:	4c3f      	ldr	r4, [pc, #252]	; (71a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>)
    70a4:	4605      	mov	r5, r0
    70a6:	6860      	ldr	r0, [r4, #4]
    70a8:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    70ac:	2900      	cmp	r1, #0
    70ae:	d06c      	beq.n	718a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a>
    70b0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    70b4:	2802      	cmp	r0, #2
    70b6:	d02c      	beq.n	7112 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x112>
    70b8:	2801      	cmp	r0, #1
    70ba:	d043      	beq.n	7144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>
    70bc:	f7ff fdde 	bl	6c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    70c0:	2800      	cmp	r0, #0
    70c2:	d067      	beq.n	7194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>
    70c4:	686a      	ldr	r2, [r5, #4]
    70c6:	6861      	ldr	r1, [r4, #4]
    70c8:	7810      	ldrb	r0, [r2, #0]
    70ca:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    70ce:	4298      	cmp	r0, r3
    70d0:	d14c      	bne.n	716c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    70d2:	7850      	ldrb	r0, [r2, #1]
    70d4:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    70d8:	4298      	cmp	r0, r3
    70da:	d147      	bne.n	716c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    70dc:	7890      	ldrb	r0, [r2, #2]
    70de:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    70e2:	4298      	cmp	r0, r3
    70e4:	d142      	bne.n	716c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    70e6:	78d0      	ldrb	r0, [r2, #3]
    70e8:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    70ec:	4298      	cmp	r0, r3
    70ee:	d13d      	bne.n	716c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    70f0:	7910      	ldrb	r0, [r2, #4]
    70f2:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    70f6:	4298      	cmp	r0, r3
    70f8:	d138      	bne.n	716c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    70fa:	7950      	ldrb	r0, [r2, #5]
    70fc:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    7100:	4290      	cmp	r0, r2
    7102:	d133      	bne.n	716c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    7104:	7c68      	ldrb	r0, [r5, #17]
    7106:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    710a:	4290      	cmp	r0, r2
    710c:	d12e      	bne.n	716c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    710e:	2001      	movs	r0, #1
    7110:	e02d      	b.n	716e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16e>
    7112:	a803      	add	r0, sp, #12
    7114:	f000 f914 	bl	7340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    7118:	6862      	ldr	r2, [r4, #4]
    711a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    711e:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7122:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7126:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    712a:	23ff      	movs	r3, #255	; 0xff
    712c:	2100      	movs	r1, #0
    712e:	4628      	mov	r0, r5
    7130:	3232      	adds	r2, #50	; 0x32
    7132:	f000 fbf5 	bl	7920 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7136:	6861      	ldr	r1, [r4, #4]
    7138:	2001      	movs	r0, #1
    713a:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    713e:	200b      	movs	r0, #11
    7140:	b004      	add	sp, #16
    7142:	bd70      	pop	{r4, r5, r6, pc}
    7144:	a803      	add	r0, sp, #12
    7146:	f000 f8fb 	bl	7340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    714a:	6862      	ldr	r2, [r4, #4]
    714c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7150:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7154:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7158:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    715c:	23ff      	movs	r3, #255	; 0xff
    715e:	2100      	movs	r1, #0
    7160:	4628      	mov	r0, r5
    7162:	3232      	adds	r2, #50	; 0x32
    7164:	f000 fbdc 	bl	7920 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7168:	2005      	movs	r0, #5
    716a:	e7e9      	b.n	7140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>
    716c:	2000      	movs	r0, #0
    716e:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    7172:	2901      	cmp	r1, #1
    7174:	d00c      	beq.n	7190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>
    7176:	b958      	cbnz	r0, 7190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>
    7178:	490a      	ldr	r1, [pc, #40]	; (71a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4>)
    717a:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    717e:	2808      	cmp	r0, #8
    7180:	d003      	beq.n	718a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a>
    7182:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    7186:	4281      	cmp	r1, r0
    7188:	d002      	beq.n	7190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>
    718a:	f003 f82b 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    718e:	e7eb      	b.n	7168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    7190:	200c      	movs	r0, #12
    7192:	e7d5      	b.n	7140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>
    7194:	f640 6158 	movw	r1, #3672	; 0xe58
    7198:	2032      	movs	r0, #50	; 0x32
    719a:	f7fd f9d5 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    719e:	0000      	.short	0x0000
    71a0:	20000104 	.word	0x20000104
    71a4:	20000d14 	.word	0x20000d14
    71a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    71aa:	4c1e      	ldr	r4, [pc, #120]	; (7224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>)
    71ac:	4605      	mov	r5, r0
    71ae:	6860      	ldr	r0, [r4, #4]
    71b0:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    71b4:	b129      	cbz	r1, 71c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c2>
    71b6:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    71ba:	2802      	cmp	r0, #2
    71bc:	d004      	beq.n	71c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c8>
    71be:	2801      	cmp	r0, #1
    71c0:	d01b      	beq.n	71fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fa>
    71c2:	f003 f80f 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    71c6:	e02a      	b.n	721e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21e>
    71c8:	a803      	add	r0, sp, #12
    71ca:	f000 f8b9 	bl	7340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    71ce:	6862      	ldr	r2, [r4, #4]
    71d0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    71d4:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    71d8:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    71dc:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    71e0:	23ff      	movs	r3, #255	; 0xff
    71e2:	2106      	movs	r1, #6
    71e4:	4628      	mov	r0, r5
    71e6:	3232      	adds	r2, #50	; 0x32
    71e8:	f000 fb9a 	bl	7920 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    71ec:	6862      	ldr	r2, [r4, #4]
    71ee:	200b      	movs	r0, #11
    71f0:	2100      	movs	r1, #0
    71f2:	f882 107c 	strb.w	r1, [r2, #124]	; 0x7c
    71f6:	b004      	add	sp, #16
    71f8:	bd70      	pop	{r4, r5, r6, pc}
    71fa:	a803      	add	r0, sp, #12
    71fc:	f000 f8a0 	bl	7340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    7200:	6862      	ldr	r2, [r4, #4]
    7202:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7206:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    720a:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    720e:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7212:	23ff      	movs	r3, #255	; 0xff
    7214:	2106      	movs	r1, #6
    7216:	4628      	mov	r0, r5
    7218:	3232      	adds	r2, #50	; 0x32
    721a:	f000 fb81 	bl	7920 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    721e:	2005      	movs	r0, #5
    7220:	e7e9      	b.n	71f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f6>
    7222:	0000      	.short	0x0000
    7224:	20000104 	.word	0x20000104
    7228:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    722a:	b389      	cbz	r1, 7290 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x290>
    722c:	2901      	cmp	r1, #1
    722e:	d034      	beq.n	729a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29a>
    7230:	2505      	movs	r5, #5
    7232:	2902      	cmp	r1, #2
    7234:	d004      	beq.n	7240 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x240>
    7236:	2906      	cmp	r1, #6
    7238:	d025      	beq.n	7286 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x286>
    723a:	f002 ffd3 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    723e:	e01f      	b.n	7280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>
    7240:	4606      	mov	r6, r0
    7242:	f002 ffcf 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7246:	4c17      	ldr	r4, [pc, #92]	; (72a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a4>)
    7248:	6860      	ldr	r0, [r4, #4]
    724a:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    724e:	b1b9      	cbz	r1, 7280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>
    7250:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7254:	2801      	cmp	r0, #1
    7256:	d001      	beq.n	725c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25c>
    7258:	2802      	cmp	r0, #2
    725a:	d111      	bne.n	7280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>
    725c:	a803      	add	r0, sp, #12
    725e:	f000 f86f 	bl	7340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    7262:	6862      	ldr	r2, [r4, #4]
    7264:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7268:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    726c:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7270:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7274:	23ff      	movs	r3, #255	; 0xff
    7276:	2102      	movs	r1, #2
    7278:	4630      	mov	r0, r6
    727a:	3232      	adds	r2, #50	; 0x32
    727c:	f000 fb50 	bl	7920 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7280:	b004      	add	sp, #16
    7282:	4628      	mov	r0, r5
    7284:	bd70      	pop	{r4, r5, r6, pc}
    7286:	b004      	add	sp, #16
    7288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    728c:	f7ff bf8c 	b.w	71a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8>
    7290:	b004      	add	sp, #16
    7292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7296:	f7ff bf03 	b.w	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    729a:	b004      	add	sp, #16
    729c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    72a0:	f7ff be2c 	b.w	6efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    72a4:	20000104 	.word	0x20000104
    72a8:	b570      	push	{r4, r5, r6, lr}
    72aa:	4c11      	ldr	r4, [pc, #68]	; (72f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>)
    72ac:	4605      	mov	r5, r0
    72ae:	6861      	ldr	r1, [r4, #4]
    72b0:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    72b4:	2800      	cmp	r0, #0
    72b6:	d019      	beq.n	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    72b8:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    72bc:	2800      	cmp	r0, #0
    72be:	d015      	beq.n	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    72c0:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    72c4:	3132      	adds	r1, #50	; 0x32
    72c6:	f005 fc7b 	bl	cbc0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    72ca:	b140      	cbz	r0, 72de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2de>
    72cc:	f7fe fba4 	bl	5a18 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    72d0:	6861      	ldr	r1, [r4, #4]
    72d2:	462a      	mov	r2, r5
    72d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    72d8:	3132      	adds	r1, #50	; 0x32
    72da:	f004 bf7e 	b.w	c1da <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    72de:	6860      	ldr	r0, [r4, #4]
    72e0:	4629      	mov	r1, r5
    72e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    72e6:	3032      	adds	r0, #50	; 0x32
    72e8:	f004 bf66 	b.w	c1b8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    72ec:	bd70      	pop	{r4, r5, r6, pc}
    72ee:	0000      	.short	0x0000
    72f0:	20000104 	.word	0x20000104
    72f4:	4602      	mov	r2, r0
    72f6:	480b      	ldr	r0, [pc, #44]	; (7324 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x324>)
    72f8:	b082      	sub	sp, #8
    72fa:	6840      	ldr	r0, [r0, #4]
    72fc:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    7300:	f88d 1000 	strb.w	r1, [sp]
    7304:	9900      	ldr	r1, [sp, #0]
    7306:	9100      	str	r1, [sp, #0]
    7308:	f89d 1000 	ldrb.w	r1, [sp]
    730c:	2900      	cmp	r1, #0
    730e:	d107      	bne.n	7320 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x320>
    7310:	6d41      	ldr	r1, [r0, #84]	; 0x54
    7312:	2900      	cmp	r1, #0
    7314:	d004      	beq.n	7320 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x320>
    7316:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    731a:	b002      	add	sp, #8
    731c:	f7fb bdb6 	b.w	2e8c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    7320:	b002      	add	sp, #8
    7322:	4770      	bx	lr
    7324:	20000104 	.word	0x20000104
    7328:	b510      	push	{r4, lr}
    732a:	4804      	ldr	r0, [pc, #16]	; (733c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33c>)
    732c:	f003 fa70 	bl	a810 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7330:	2800      	cmp	r0, #0
    7332:	d102      	bne.n	733a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33a>
    7334:	4901      	ldr	r1, [pc, #4]	; (733c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33c>)
    7336:	207f      	movs	r0, #127	; 0x7f
    7338:	7008      	strb	r0, [r1, #0]
    733a:	bd10      	pop	{r4, pc}
    733c:	20000104 	.word	0x20000104
    7340:	4a07      	ldr	r2, [pc, #28]	; (7360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x360>)
    7342:	b510      	push	{r4, lr}
    7344:	f992 1000 	ldrsb.w	r1, [r2]
    7348:	297f      	cmp	r1, #127	; 0x7f
    734a:	d003      	beq.n	7354 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x354>
    734c:	7001      	strb	r1, [r0, #0]
    734e:	207f      	movs	r0, #127	; 0x7f
    7350:	7010      	strb	r0, [r2, #0]
    7352:	bd10      	pop	{r4, pc}
    7354:	f240 319f 	movw	r1, #927	; 0x39f
    7358:	2032      	movs	r0, #50	; 0x32
    735a:	f7fd f8f5 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    735e:	0000      	.short	0x0000
    7360:	20000104 	.word	0x20000104
    7364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7368:	4607      	mov	r7, r0
    736a:	f7fd fbf3 	bl	4b54 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    736e:	4604      	mov	r4, r0
    7370:	f7fd fbf6 	bl	4b60 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7374:	4621      	mov	r1, r4
    7376:	f005 fc7b 	bl	cc70 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    737a:	0005      	movs	r5, r0
    737c:	d012      	beq.n	73a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a4>
    737e:	4c2d      	ldr	r4, [pc, #180]	; (7434 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x434>)
    7380:	6860      	ldr	r0, [r4, #4]
    7382:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7386:	2801      	cmp	r0, #1
    7388:	d004      	beq.n	7394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>
    738a:	2802      	cmp	r0, #2
    738c:	d002      	beq.n	7394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>
    738e:	f7ff fc75 	bl	6c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7392:	b150      	cbz	r0, 73aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3aa>
    7394:	f06f 0613 	mvn.w	r6, #19
    7398:	b33f      	cbz	r7, 73ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ea>
    739a:	4628      	mov	r0, r5
    739c:	f005 fa52 	bl	c844 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    73a0:	b950      	cbnz	r0, 73b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b8>
    73a2:	e005      	b.n	73b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b0>
    73a4:	f241 4181 	movw	r1, #5249	; 0x1481
    73a8:	e03a      	b.n	7420 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x420>
    73aa:	f241 4187 	movw	r1, #5255	; 0x1487
    73ae:	e037      	b.n	7420 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x420>
    73b0:	4628      	mov	r0, r5
    73b2:	f005 fa69 	bl	c888 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    73b6:	b1c0      	cbz	r0, 73ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ea>
    73b8:	6861      	ldr	r1, [r4, #4]
    73ba:	4628      	mov	r0, r5
    73bc:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    73c0:	2a05      	cmp	r2, #5
    73c2:	d202      	bcs.n	73ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ca>
    73c4:	f241 410b 	movw	r1, #5131	; 0x140b
    73c8:	e02a      	b.n	7420 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x420>
    73ca:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    73ce:	2a0b      	cmp	r2, #11
    73d0:	d302      	bcc.n	73d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    73d2:	f241 410c 	movw	r1, #5132	; 0x140c
    73d6:	e023      	b.n	7420 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x420>
    73d8:	68e2      	ldr	r2, [r4, #12]
    73da:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    73de:	6952      	ldr	r2, [r2, #20]
    73e0:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    73e4:	5851      	ldr	r1, [r2, r1]
    73e6:	4788      	blx	r1
    73e8:	e016      	b.n	7418 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x418>
    73ea:	6860      	ldr	r0, [r4, #4]
    73ec:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    73f0:	2905      	cmp	r1, #5
    73f2:	d202      	bcs.n	73fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3fa>
    73f4:	f241 4177 	movw	r1, #5239	; 0x1477
    73f8:	e012      	b.n	7420 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x420>
    73fa:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    73fe:	290b      	cmp	r1, #11
    7400:	d302      	bcc.n	7408 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x408>
    7402:	f241 4178 	movw	r1, #5240	; 0x1478
    7406:	e00b      	b.n	7420 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x420>
    7408:	68e1      	ldr	r1, [r4, #12]
    740a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    740e:	6989      	ldr	r1, [r1, #24]
    7410:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    7414:	5808      	ldr	r0, [r1, r0]
    7416:	4780      	blx	r0
    7418:	280f      	cmp	r0, #15
    741a:	d304      	bcc.n	7426 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x426>
    741c:	f241 419c 	movw	r1, #5276	; 0x149c
    7420:	2032      	movs	r0, #50	; 0x32
    7422:	f7fd f891 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7426:	68e1      	ldr	r1, [r4, #12]
    7428:	6909      	ldr	r1, [r1, #16]
    742a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    742e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7432:	4700      	bx	r0
    7434:	20000104 	.word	0x20000104
    7438:	b510      	push	{r4, lr}
    743a:	b118      	cbz	r0, 7444 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x444>
    743c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7440:	f000 b924 	b.w	768c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68c>
    7444:	2900      	cmp	r1, #0
    7446:	d01d      	beq.n	7484 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x484>
    7448:	480f      	ldr	r0, [pc, #60]	; (7488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x488>)
    744a:	6841      	ldr	r1, [r0, #4]
    744c:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7450:	2a0b      	cmp	r2, #11
    7452:	d202      	bcs.n	745a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45a>
    7454:	f241 5143 	movw	r1, #5443	; 0x1543
    7458:	e005      	b.n	7466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x466>
    745a:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    745e:	2a0f      	cmp	r2, #15
    7460:	d304      	bcc.n	746c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46c>
    7462:	f241 5144 	movw	r1, #5444	; 0x1544
    7466:	2032      	movs	r0, #50	; 0x32
    7468:	f7fd f86e 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    746c:	68c0      	ldr	r0, [r0, #12]
    746e:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    7472:	6880      	ldr	r0, [r0, #8]
    7474:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    7478:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    747c:	5840      	ldr	r0, [r0, r1]
    747e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7482:	4700      	bx	r0
    7484:	bd10      	pop	{r4, pc}
    7486:	0000      	.short	0x0000
    7488:	20000104 	.word	0x20000104
    748c:	b510      	push	{r4, lr}
    748e:	f7ff faef 	bl	6a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    7492:	f000 f90b 	bl	76ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ac>
    7496:	4805      	ldr	r0, [pc, #20]	; (74ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ac>)
    7498:	6881      	ldr	r1, [r0, #8]
    749a:	2000      	movs	r0, #0
    749c:	f7ff fc3a 	bl	6d14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    74a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    74a4:	2003      	movs	r0, #3
    74a6:	f000 bb79 	b.w	7b9c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    74aa:	0000      	.short	0x0000
    74ac:	20000104 	.word	0x20000104
    74b0:	b510      	push	{r4, lr}
    74b2:	f7fd fb4f 	bl	4b54 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    74b6:	4604      	mov	r4, r0
    74b8:	f7fd fb52 	bl	4b60 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    74bc:	4621      	mov	r1, r4
    74be:	f005 fbd7 	bl	cc70 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    74c2:	b150      	cbz	r0, 74da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4da>
    74c4:	f003 f8f2 	bl	a6ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    74c8:	2000      	movs	r0, #0
    74ca:	f002 ffa3 	bl	a414 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    74ce:	4905      	ldr	r1, [pc, #20]	; (74e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e4>)
    74d0:	2006      	movs	r0, #6
    74d2:	6849      	ldr	r1, [r1, #4]
    74d4:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    74d8:	bd10      	pop	{r4, pc}
    74da:	f240 5184 	movw	r1, #1412	; 0x584
    74de:	2032      	movs	r0, #50	; 0x32
    74e0:	f7fd f832 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74e4:	20000104 	.word	0x20000104
    74e8:	490f      	ldr	r1, [pc, #60]	; (7528 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x528>)
    74ea:	b510      	push	{r4, lr}
    74ec:	6848      	ldr	r0, [r1, #4]
    74ee:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    74f2:	2a06      	cmp	r2, #6
    74f4:	d202      	bcs.n	74fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4fc>
    74f6:	f241 5171 	movw	r1, #5489	; 0x1571
    74fa:	e005      	b.n	7508 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x508>
    74fc:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    7500:	2a0b      	cmp	r2, #11
    7502:	d304      	bcc.n	750e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50e>
    7504:	f241 5172 	movw	r1, #5490	; 0x1572
    7508:	2032      	movs	r0, #50	; 0x32
    750a:	f7fd f81d 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    750e:	68c9      	ldr	r1, [r1, #12]
    7510:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7514:	68c9      	ldr	r1, [r1, #12]
    7516:	f06f 0213 	mvn.w	r2, #19
    751a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    751e:	5808      	ldr	r0, [r1, r0]
    7520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7524:	4700      	bx	r0
    7526:	0000      	.short	0x0000
    7528:	20000104 	.word	0x20000104
    752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7530:	4c31      	ldr	r4, [pc, #196]	; (75f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f8>)
    7532:	4605      	mov	r5, r0
    7534:	460e      	mov	r6, r1
    7536:	6860      	ldr	r0, [r4, #4]
    7538:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    753c:	b120      	cbz	r0, 7548 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x548>
    753e:	2801      	cmp	r0, #1
    7540:	d002      	beq.n	7548 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x548>
    7542:	200c      	movs	r0, #12
    7544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7548:	f003 f824 	bl	a594 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    754c:	f002 fe30 	bl	a1b0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7550:	f002 fc12 	bl	9d78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7554:	f003 fa8c 	bl	aa70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7558:	4828      	ldr	r0, [pc, #160]	; (75fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5fc>)
    755a:	f002 ff53 	bl	a404 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    755e:	4828      	ldr	r0, [pc, #160]	; (7600 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x600>)
    7560:	f003 f97c 	bl	a85c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7564:	4827      	ldr	r0, [pc, #156]	; (7604 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x604>)
    7566:	f003 f96f 	bl	a848 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    756a:	4630      	mov	r0, r6
    756c:	f003 f89e 	bl	a6ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7570:	7968      	ldrb	r0, [r5, #5]
    7572:	b110      	cbz	r0, 757a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x57a>
    7574:	2001      	movs	r0, #1
    7576:	f7ff febd 	bl	72f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f4>
    757a:	7928      	ldrb	r0, [r5, #4]
    757c:	2803      	cmp	r0, #3
    757e:	d001      	beq.n	7584 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x584>
    7580:	b118      	cbz	r0, 758a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58a>
    7582:	e018      	b.n	75b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b6>
    7584:	f640 1188 	movw	r1, #2440	; 0x988
    7588:	e033      	b.n	75f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f2>
    758a:	6861      	ldr	r1, [r4, #4]
    758c:	2000      	movs	r0, #0
    758e:	2503      	movs	r5, #3
    7590:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    7594:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    7598:	1c52      	adds	r2, r2, #1
    759a:	fbb2 f7f5 	udiv	r7, r2, r5
    759e:	fb05 2217 	mls	r2, r5, r7, r2
    75a2:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    75a6:	fa23 f202 	lsr.w	r2, r3, r2
    75aa:	07d2      	lsls	r2, r2, #31
    75ac:	d103      	bne.n	75b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b6>
    75ae:	1c40      	adds	r0, r0, #1
    75b0:	b2c0      	uxtb	r0, r0
    75b2:	2803      	cmp	r0, #3
    75b4:	d3ee      	bcc.n	7594 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x594>
    75b6:	6860      	ldr	r0, [r4, #4]
    75b8:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    75bc:	f003 f870 	bl	a6a0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    75c0:	4631      	mov	r1, r6
    75c2:	2001      	movs	r0, #1
    75c4:	f7ff fa66 	bl	6a94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    75c8:	2800      	cmp	r0, #0
    75ca:	d0bb      	beq.n	7544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    75cc:	f000 f922 	bl	7814 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x814>
    75d0:	6860      	ldr	r0, [r4, #4]
    75d2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    75d6:	b138      	cbz	r0, 75e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e8>
    75d8:	f7fe fa22 	bl	5a20 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    75dc:	480a      	ldr	r0, [pc, #40]	; (7608 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x608>)
    75de:	6800      	ldr	r0, [r0, #0]
    75e0:	2803      	cmp	r0, #3
    75e2:	d004      	beq.n	75ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ee>
    75e4:	2000      	movs	r0, #0
    75e6:	e7ad      	b.n	7544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    75e8:	f7fe fc0e 	bl	5e08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    75ec:	e7f6      	b.n	75dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5dc>
    75ee:	f640 119a 	movw	r1, #2458	; 0x99a
    75f2:	2032      	movs	r0, #50	; 0x32
    75f4:	f7fc ffa8 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75f8:	20000104 	.word	0x20000104
    75fc:	00007910 	.word	0x00007910
    7600:	0000dccd 	.word	0x0000dccd
    7604:	8e89bed6 	.word	0x8e89bed6
    7608:	40001550 	.word	0x40001550
    760c:	b510      	push	{r4, lr}
    760e:	2000      	movs	r0, #0
    7610:	f7ff fe70 	bl	72f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f4>
    7614:	4808      	ldr	r0, [pc, #32]	; (7638 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x638>)
    7616:	6840      	ldr	r0, [r0, #4]
    7618:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    761c:	b128      	cbz	r0, 762a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62a>
    761e:	2801      	cmp	r0, #1
    7620:	d003      	beq.n	762a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62a>
    7622:	2802      	cmp	r0, #2
    7624:	d004      	beq.n	7630 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x630>
    7626:	200c      	movs	r0, #12
    7628:	bd10      	pop	{r4, pc}
    762a:	f000 f82f 	bl	768c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68c>
    762e:	e001      	b.n	7634 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x634>
    7630:	f000 f844 	bl	76bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6bc>
    7634:	2000      	movs	r0, #0
    7636:	bd10      	pop	{r4, pc}
    7638:	20000104 	.word	0x20000104
    763c:	b570      	push	{r4, r5, r6, lr}
    763e:	4c12      	ldr	r4, [pc, #72]	; (7688 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x688>)
    7640:	6860      	ldr	r0, [r4, #4]
    7642:	f100 0532 	add.w	r5, r0, #50	; 0x32
    7646:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    764a:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    764e:	b188      	cbz	r0, 7674 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x674>
    7650:	f7ff fb14 	bl	6c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7654:	b130      	cbz	r0, 7664 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x664>
    7656:	6860      	ldr	r0, [r4, #4]
    7658:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    765c:	b111      	cbz	r1, 7664 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x664>
    765e:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    7662:	e002      	b.n	766a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66a>
    7664:	6860      	ldr	r0, [r4, #4]
    7666:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    766a:	f7fe fa7f 	bl	5b6c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    766e:	b108      	cbz	r0, 7674 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x674>
    7670:	2601      	movs	r6, #1
    7672:	4605      	mov	r5, r0
    7674:	4629      	mov	r1, r5
    7676:	68a0      	ldr	r0, [r4, #8]
    7678:	f005 f93b 	bl	c8f2 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    767c:	4631      	mov	r1, r6
    767e:	68a0      	ldr	r0, [r4, #8]
    7680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7684:	f005 b93b 	b.w	c8fe <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7688:	20000104 	.word	0x20000104
    768c:	b510      	push	{r4, lr}
    768e:	f7ff f9ef 	bl	6a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    7692:	4905      	ldr	r1, [pc, #20]	; (76a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6a8>)
    7694:	2001      	movs	r0, #1
    7696:	6849      	ldr	r1, [r1, #4]
    7698:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    769c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    76a0:	2000      	movs	r0, #0
    76a2:	f000 ba7b 	b.w	7b9c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    76a6:	0000      	.short	0x0000
    76a8:	20000104 	.word	0x20000104
    76ac:	4902      	ldr	r1, [pc, #8]	; (76b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b8>)
    76ae:	2000      	movs	r0, #0
    76b0:	6849      	ldr	r1, [r1, #4]
    76b2:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    76b6:	4770      	bx	lr
    76b8:	20000104 	.word	0x20000104
    76bc:	b570      	push	{r4, r5, r6, lr}
    76be:	f7fd fa49 	bl	4b54 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    76c2:	4604      	mov	r4, r0
    76c4:	f7fd fa4c 	bl	4b60 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    76c8:	4621      	mov	r1, r4
    76ca:	f005 fad1 	bl	cc70 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    76ce:	0004      	movs	r4, r0
    76d0:	d020      	beq.n	7714 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x714>
    76d2:	f005 fb1d 	bl	cd10 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    76d6:	2000      	movs	r0, #0
    76d8:	f000 fa2a 	bl	7b30 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    76dc:	b1f8      	cbz	r0, 771e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x71e>
    76de:	4d1e      	ldr	r5, [pc, #120]	; (7758 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x758>)
    76e0:	6868      	ldr	r0, [r5, #4]
    76e2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    76e6:	2802      	cmp	r0, #2
    76e8:	d003      	beq.n	76f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f2>
    76ea:	4621      	mov	r1, r4
    76ec:	2000      	movs	r0, #0
    76ee:	f7ff f9d1 	bl	6a94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    76f2:	1ce0      	adds	r0, r4, #3
    76f4:	f004 fdf0 	bl	c2d8 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    76f8:	6869      	ldr	r1, [r5, #4]
    76fa:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    76fe:	b128      	cbz	r0, 770c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70c>
    7700:	2440      	movs	r4, #64	; 0x40
    7702:	f002 fb59 	bl	9db8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7706:	4620      	mov	r0, r4
    7708:	f002 fd60 	bl	a1cc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    770c:	f7ff fab6 	bl	6c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7710:	b970      	cbnz	r0, 7730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x730>
    7712:	e008      	b.n	7726 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x726>
    7714:	f240 4177 	movw	r1, #1143	; 0x477
    7718:	2032      	movs	r0, #50	; 0x32
    771a:	f7fc ff15 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    771e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7722:	f7ff bfb3 	b.w	768c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68c>
    7726:	6868      	ldr	r0, [r5, #4]
    7728:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    772c:	2802      	cmp	r0, #2
    772e:	d104      	bne.n	773a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x73a>
    7730:	2100      	movs	r1, #0
    7732:	2201      	movs	r2, #1
    7734:	4608      	mov	r0, r1
    7736:	f003 f845 	bl	a7c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    773a:	6868      	ldr	r0, [r5, #4]
    773c:	21ff      	movs	r1, #255	; 0xff
    773e:	f800 1f64 	strb.w	r1, [r0, #100]!
    7742:	7041      	strb	r1, [r0, #1]
    7744:	2100      	movs	r1, #0
    7746:	7201      	strb	r1, [r0, #8]
    7748:	71c1      	strb	r1, [r0, #7]
    774a:	7241      	strb	r1, [r0, #9]
    774c:	7601      	strb	r1, [r0, #24]
    774e:	2105      	movs	r1, #5
    7750:	f800 1c08 	strb.w	r1, [r0, #-8]
    7754:	bd70      	pop	{r4, r5, r6, pc}
    7756:	0000      	.short	0x0000
    7758:	20000104 	.word	0x20000104
    775c:	b570      	push	{r4, r5, r6, lr}
    775e:	f7fd f9f9 	bl	4b54 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7762:	4604      	mov	r4, r0
    7764:	f7fd f9fc 	bl	4b60 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7768:	4621      	mov	r1, r4
    776a:	f005 fa81 	bl	cc70 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    776e:	0005      	movs	r5, r0
    7770:	d028      	beq.n	77c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c4>
    7772:	4e19      	ldr	r6, [pc, #100]	; (77d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7d8>)
    7774:	2004      	movs	r0, #4
    7776:	6874      	ldr	r4, [r6, #4]
    7778:	345c      	adds	r4, #92	; 0x5c
    777a:	f000 f9d9 	bl	7b30 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    777e:	b330      	cbz	r0, 77ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ce>
    7780:	200c      	movs	r0, #12
    7782:	7020      	strb	r0, [r4, #0]
    7784:	2001      	movs	r0, #1
    7786:	f000 fa09 	bl	7b9c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    778a:	7828      	ldrb	r0, [r5, #0]
    778c:	6871      	ldr	r1, [r6, #4]
    778e:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7792:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    7796:	2005      	movs	r0, #5
    7798:	f7ff fb3a 	bl	6e10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    779c:	4a0f      	ldr	r2, [pc, #60]	; (77dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7dc>)
    779e:	68b1      	ldr	r1, [r6, #8]
    77a0:	2520      	movs	r5, #32
    77a2:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    77a4:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    77a8:	7808      	ldrb	r0, [r1, #0]
    77aa:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    77ae:	f020 0020 	bic.w	r0, r0, #32
    77b2:	4318      	orrs	r0, r3
    77b4:	7008      	strb	r0, [r1, #0]
    77b6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    77b8:	7ea2      	ldrb	r2, [r4, #26]
    77ba:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    77be:	4011      	ands	r1, r2
    77c0:	7001      	strb	r1, [r0, #0]
    77c2:	bd70      	pop	{r4, r5, r6, pc}
    77c4:	f240 51ef 	movw	r1, #1519	; 0x5ef
    77c8:	2032      	movs	r0, #50	; 0x32
    77ca:	f7fc febd 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77d2:	f7ff bf5b 	b.w	768c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68c>
    77d6:	0000      	.short	0x0000
    77d8:	20000104 	.word	0x20000104
    77dc:	20000d14 	.word	0x20000d14
    77e0:	b510      	push	{r4, lr}
    77e2:	2003      	movs	r0, #3
    77e4:	f000 f9a4 	bl	7b30 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    77e8:	b168      	cbz	r0, 7806 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x806>
    77ea:	2003      	movs	r0, #3
    77ec:	f7ff fb10 	bl	6e10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    77f0:	2201      	movs	r2, #1
    77f2:	4611      	mov	r1, r2
    77f4:	2000      	movs	r0, #0
    77f6:	f002 ffe5 	bl	a7c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    77fa:	4905      	ldr	r1, [pc, #20]	; (7810 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x810>)
    77fc:	200b      	movs	r0, #11
    77fe:	6849      	ldr	r1, [r1, #4]
    7800:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7804:	bd10      	pop	{r4, pc}
    7806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    780a:	f7ff bf3f 	b.w	768c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68c>
    780e:	0000      	.short	0x0000
    7810:	20000104 	.word	0x20000104
    7814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7818:	4c1d      	ldr	r4, [pc, #116]	; (7890 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x890>)
    781a:	2600      	movs	r6, #0
    781c:	6860      	ldr	r0, [r4, #4]
    781e:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
    7822:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    7826:	b911      	cbnz	r1, 782e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82e>
    7828:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    782c:	b350      	cbz	r0, 7884 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x884>
    782e:	f003 fbb2 	bl	af96 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7832:	4680      	mov	r8, r0
    7834:	6860      	ldr	r0, [r4, #4]
    7836:	4641      	mov	r1, r8
    7838:	6c40      	ldr	r0, [r0, #68]	; 0x44
    783a:	f7fa faaf 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    783e:	4f15      	ldr	r7, [pc, #84]	; (7894 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x894>)
    7840:	4605      	mov	r5, r0
    7842:	fb90 f0f7 	sdiv	r0, r0, r7
    7846:	fb07 5010 	mls	r0, r7, r0, r5
    784a:	4241      	negs	r1, r0
    784c:	4640      	mov	r0, r8
    784e:	f7fa fa73 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7852:	6861      	ldr	r1, [r4, #4]
    7854:	6448      	str	r0, [r1, #68]	; 0x44
    7856:	fb95 f0f7 	sdiv	r0, r5, r7
    785a:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    785c:	4410      	add	r0, r2
    785e:	6788      	str	r0, [r1, #120]	; 0x78
    7860:	f7fe fa40 	bl	5ce4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7864:	6861      	ldr	r1, [r4, #4]
    7866:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    7868:	4290      	cmp	r0, r2
    786a:	d80b      	bhi.n	7884 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x884>
    786c:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    7870:	678e      	str	r6, [r1, #120]	; 0x78
    7872:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    7876:	b110      	cbz	r0, 787e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x87e>
    7878:	2001      	movs	r0, #1
    787a:	f7fe f91d 	bl	5ab8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    787e:	2001      	movs	r0, #1
    7880:	f7ff fd12 	bl	72a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a8>
    7884:	6861      	ldr	r1, [r4, #4]
    7886:	2002      	movs	r0, #2
    7888:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    788c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7890:	20000104 	.word	0x20000104
    7894:	000f4240 	.word	0x000f4240
    7898:	000076ad 	.word	0x000076ad
    789c:	0000768d 	.word	0x0000768d
    78a0:	0000cc51 	.word	0x0000cc51
    78a4:	0000cc51 	.word	0x0000cc51
    78a8:	0000cc51 	.word	0x0000cc51
    78ac:	000076bd 	.word	0x000076bd
    78b0:	0000cc51 	.word	0x0000cc51
    78b4:	0000cc51 	.word	0x0000cc51
    78b8:	0000cc51 	.word	0x0000cc51
    78bc:	0000cc51 	.word	0x0000cc51
    78c0:	0000cc51 	.word	0x0000cc51
    78c4:	000077e1 	.word	0x000077e1
    78c8:	0000775d 	.word	0x0000775d
    78cc:	0000cc51 	.word	0x0000cc51
    78d0:	0000cc51 	.word	0x0000cc51
    78d4:	000074b1 	.word	0x000074b1
    78d8:	0000748d 	.word	0x0000748d
    78dc:	00000000 	.word	0x00000000
    78e0:	0000cc5b 	.word	0x0000cc5b
    78e4:	0000cbf9 	.word	0x0000cbf9
    78e8:	0000cc0b 	.word	0x0000cc0b
    78ec:	0000cc19 	.word	0x0000cc19
    78f0:	00006c29 	.word	0x00006c29
    78f4:	0000752d 	.word	0x0000752d
    78f8:	0000760d 	.word	0x0000760d
    78fc:	000078d4 	.word	0x000078d4
    7900:	000078dc 	.word	0x000078dc
    7904:	00007898 	.word	0x00007898
    7908:	000078ec 	.word	0x000078ec
    790c:	000078e4 	.word	0x000078e4
    7910:	000074e9 	.word	0x000074e9
    7914:	00007365 	.word	0x00007365
    7918:	00007439 	.word	0x00007439
    791c:	0000cc6d 	.word	0x0000cc6d

00007920 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    7920:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7924:	461d      	mov	r5, r3
    7926:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    792a:	4616      	mov	r6, r2
    792c:	4688      	mov	r8, r1
    792e:	4681      	mov	r9, r0
    7930:	f7fd f916 	bl	4b60 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7934:	4604      	mov	r4, r0
    7936:	f004 fa32 	bl	bd9e <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    793a:	2801      	cmp	r0, #1
    793c:	d063      	beq.n	7a06 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    793e:	4620      	mov	r0, r4
    7940:	f005 fa5f 	bl	ce02 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    7944:	4604      	mov	r4, r0
    7946:	221c      	movs	r2, #28
    7948:	2100      	movs	r1, #0
    794a:	f003 fd13 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    794e:	2701      	movs	r7, #1
    7950:	7027      	strb	r7, [r4, #0]
    7952:	ea5f 0008 	movs.w	r0, r8
    7956:	d009      	beq.n	796c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    7958:	2801      	cmp	r0, #1
    795a:	d00b      	beq.n	7974 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    795c:	2802      	cmp	r0, #2
    795e:	d02d      	beq.n	79bc <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    7960:	f1b8 0f06 	cmp.w	r8, #6
    7964:	d02c      	beq.n	79c0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    7966:	f240 217d 	movw	r1, #637	; 0x27d
    796a:	e049      	b.n	7a00 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    796c:	7aa0      	ldrb	r0, [r4, #10]
    796e:	f040 0001 	orr.w	r0, r0, #1
    7972:	e026      	b.n	79c2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    7974:	7aa0      	ldrb	r0, [r4, #10]
    7976:	f040 0005 	orr.w	r0, r0, #5
    797a:	bf00      	nop
    797c:	f040 0010 	orr.w	r0, r0, #16
    7980:	72a0      	strb	r0, [r4, #10]
    7982:	1c63      	adds	r3, r4, #1
    7984:	1ca2      	adds	r2, r4, #2
    7986:	4648      	mov	r0, r9
    7988:	990a      	ldr	r1, [sp, #40]	; 0x28
    798a:	f005 fa1f 	bl	cdcc <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    798e:	f884 a009 	strb.w	sl, [r4, #9]
    7992:	7327      	strb	r7, [r4, #12]
    7994:	2000      	movs	r0, #0
    7996:	7360      	strb	r0, [r4, #13]
    7998:	20ff      	movs	r0, #255	; 0xff
    799a:	73a0      	strb	r0, [r4, #14]
    799c:	7aa1      	ldrb	r1, [r4, #10]
    799e:	0749      	lsls	r1, r1, #29
    79a0:	d518      	bpl.n	79d4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    79a2:	f104 0014 	add.w	r0, r4, #20
    79a6:	1e41      	subs	r1, r0, #1
    79a8:	2d02      	cmp	r5, #2
    79aa:	d00d      	beq.n	79c8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    79ac:	2d03      	cmp	r5, #3
    79ae:	d00b      	beq.n	79c8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    79b0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    79b4:	6813      	ldr	r3, [r2, #0]
    79b6:	6003      	str	r3, [r0, #0]
    79b8:	8892      	ldrh	r2, [r2, #4]
    79ba:	e008      	b.n	79ce <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    79bc:	7aa0      	ldrb	r0, [r4, #10]
    79be:	e7dd      	b.n	797c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    79c0:	7aa0      	ldrb	r0, [r4, #10]
    79c2:	f040 0002 	orr.w	r0, r0, #2
    79c6:	e7d9      	b.n	797c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    79c8:	6832      	ldr	r2, [r6, #0]
    79ca:	6002      	str	r2, [r0, #0]
    79cc:	88b2      	ldrh	r2, [r6, #4]
    79ce:	8082      	strh	r2, [r0, #4]
    79d0:	700d      	strb	r5, [r1, #0]
    79d2:	e000      	b.n	79d6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    79d4:	74e0      	strb	r0, [r4, #19]
    79d6:	207f      	movs	r0, #127	; 0x7f
    79d8:	76a0      	strb	r0, [r4, #26]
    79da:	f884 b01b 	strb.w	fp, [r4, #27]
    79de:	f7fd f8b9 	bl	4b54 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    79e2:	4604      	mov	r4, r0
    79e4:	f7fd f8bc 	bl	4b60 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    79e8:	2201      	movs	r2, #1
    79ea:	4621      	mov	r1, r4
    79ec:	f005 fa12 	bl	ce14 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    79f0:	b120      	cbz	r0, 79fc <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    79f2:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    79f6:	2005      	movs	r0, #5
    79f8:	f000 b8d0 	b.w	7b9c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    79fc:	f240 219d 	movw	r1, #669	; 0x29d
    7a00:	2033      	movs	r0, #51	; 0x33
    7a02:	f7fc fda1 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a06:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

00007a0c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    7a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a10:	4616      	mov	r6, r2
    7a12:	460c      	mov	r4, r1
    7a14:	4605      	mov	r5, r0
    7a16:	f004 ff33 	bl	c880 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    7a1a:	7460      	strb	r0, [r4, #17]
    7a1c:	4628      	mov	r0, r5
    7a1e:	f004 ff26 	bl	c86e <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    7a22:	74a0      	strb	r0, [r4, #18]
    7a24:	1cea      	adds	r2, r5, #3
    7a26:	4b14      	ldr	r3, [pc, #80]	; (7a78 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    7a28:	1d90      	adds	r0, r2, #6
    7a2a:	2100      	movs	r1, #0
    7a2c:	2e07      	cmp	r6, #7
    7a2e:	d21f      	bcs.n	7a70 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    7a30:	e8df f006 	tbb	[pc, r6]
    7a34:	1e110b04 	.word	0x1e110b04
    7a38:	00041e13 	.word	0x00041e13
    7a3c:	781b      	ldrb	r3, [r3, #0]
    7a3e:	e00d      	b.n	7a5c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    7a40:	60e0      	str	r0, [r4, #12]
    7a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a46:	60e1      	str	r1, [r4, #12]
    7a48:	e7fb      	b.n	7a42 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    7a4a:	785b      	ldrb	r3, [r3, #1]
    7a4c:	7063      	strb	r3, [r4, #1]
    7a4e:	e9c4 2001 	strd	r2, r0, [r4, #4]
    7a52:	7421      	strb	r1, [r4, #16]
    7a54:	e7f7      	b.n	7a46 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    7a56:	789b      	ldrb	r3, [r3, #2]
    7a58:	e000      	b.n	7a5c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    7a5a:	78db      	ldrb	r3, [r3, #3]
    7a5c:	7063      	strb	r3, [r4, #1]
    7a5e:	e9c4 2101 	strd	r2, r1, [r4, #4]
    7a62:	786a      	ldrb	r2, [r5, #1]
    7a64:	1f92      	subs	r2, r2, #6
    7a66:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    7a6a:	7422      	strb	r2, [r4, #16]
    7a6c:	d0eb      	beq.n	7a46 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    7a6e:	e7e7      	b.n	7a40 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    7a70:	7061      	strb	r1, [r4, #1]
    7a72:	6061      	str	r1, [r4, #4]
    7a74:	60a1      	str	r1, [r4, #8]
    7a76:	e7ec      	b.n	7a52 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    7a78:	0000dcd3 	.word	0x0000dcd3

00007a7c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    7a7c:	b570      	push	{r4, r5, r6, lr}
    7a7e:	f002 fd21 	bl	a4c4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7a82:	4c0e      	ldr	r4, [pc, #56]	; (7abc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    7a84:	4606      	mov	r6, r0
    7a86:	7860      	ldrb	r0, [r4, #1]
    7a88:	b170      	cbz	r0, 7aa8 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7a8a:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    7a8e:	4632      	mov	r2, r6
    7a90:	4628      	mov	r0, r5
    7a92:	f004 fc8f 	bl	c3b4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7a96:	6060      	str	r0, [r4, #4]
    7a98:	42a8      	cmp	r0, r5
    7a9a:	d005      	beq.n	7aa8 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7a9c:	68e1      	ldr	r1, [r4, #12]
    7a9e:	1b40      	subs	r0, r0, r5
    7aa0:	4408      	add	r0, r1
    7aa2:	60e0      	str	r0, [r4, #12]
    7aa4:	f7fb f93c 	bl	2d20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7aa8:	6860      	ldr	r0, [r4, #4]
    7aaa:	42b0      	cmp	r0, r6
    7aac:	d301      	bcc.n	7ab2 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    7aae:	7820      	ldrb	r0, [r4, #0]
    7ab0:	b108      	cbz	r0, 7ab6 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    7ab2:	2000      	movs	r0, #0
    7ab4:	bd70      	pop	{r4, r5, r6, pc}
    7ab6:	2001      	movs	r0, #1
    7ab8:	bd70      	pop	{r4, r5, r6, pc}
    7aba:	0000      	.short	0x0000
    7abc:	20000d98 	.word	0x20000d98

00007ac0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    7ac0:	b510      	push	{r4, lr}
    7ac2:	2905      	cmp	r1, #5
    7ac4:	d22d      	bcs.n	7b22 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    7ac6:	e8df f001 	tbb	[pc, r1]
    7aca:	0a05      	.short	0x0a05
    7acc:	00280e03 	.word	0x00280e03
    7ad0:	2100      	movs	r1, #0
    7ad2:	e000      	b.n	7ad6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    7ad4:	2101      	movs	r1, #1
    7ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ada:	f000 ba6f 	b.w	7fbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x20c>
    7ade:	2103      	movs	r1, #3
    7ae0:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    7ae4:	bd10      	pop	{r4, pc}
    7ae6:	4911      	ldr	r1, [pc, #68]	; (7b2c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    7ae8:	4604      	mov	r4, r0
    7aea:	68c0      	ldr	r0, [r0, #12]
    7aec:	6008      	str	r0, [r1, #0]
    7aee:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    7af2:	6220      	str	r0, [r4, #32]
    7af4:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    7af8:	83a0      	strh	r0, [r4, #28]
    7afa:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7afe:	60e0      	str	r0, [r4, #12]
    7b00:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    7b04:	82a0      	strh	r0, [r4, #20]
    7b06:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    7b0a:	82e0      	strh	r0, [r4, #22]
    7b0c:	4620      	mov	r0, r4
    7b0e:	f005 f9b8 	bl	ce82 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x6a>
    7b12:	2002      	movs	r0, #2
    7b14:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7b18:	bd10      	pop	{r4, pc}
    7b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b1e:	f005 b9b0 	b.w	ce82 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x6a>
    7b22:	f640 3158 	movw	r1, #2904	; 0xb58
    7b26:	2035      	movs	r0, #53	; 0x35
    7b28:	f7fc fd0e 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b2c:	20000114 	.word	0x20000114

00007b30 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    7b30:	b570      	push	{r4, r5, r6, lr}
    7b32:	4606      	mov	r6, r0
    7b34:	f003 fa2f 	bl	af96 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7b38:	4c17      	ldr	r4, [pc, #92]	; (7b98 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x68>)
    7b3a:	4601      	mov	r1, r0
    7b3c:	6920      	ldr	r0, [r4, #16]
    7b3e:	f7fa f92d 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7b42:	4605      	mov	r5, r0
    7b44:	b156      	cbz	r6, 7b5c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    7b46:	2e03      	cmp	r6, #3
    7b48:	d00d      	beq.n	7b66 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    7b4a:	2e04      	cmp	r6, #4
    7b4c:	d00e      	beq.n	7b6c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3c>
    7b4e:	2e06      	cmp	r6, #6
    7b50:	d01d      	beq.n	7b8e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    7b52:	f44f 61b2 	mov.w	r1, #1424	; 0x590
    7b56:	2035      	movs	r0, #53	; 0x35
    7b58:	f7fc fcf6 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b5c:	2001      	movs	r0, #1
    7b5e:	f005 f974 	bl	ce4a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x32>
    7b62:	3098      	adds	r0, #152	; 0x98
    7b64:	e004      	b.n	7b70 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    7b66:	f44f 7057 	mov.w	r0, #860	; 0x35c
    7b6a:	e001      	b.n	7b70 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    7b6c:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    7b70:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7b72:	4405      	add	r5, r0
    7b74:	39f1      	subs	r1, #241	; 0xf1
    7b76:	428d      	cmp	r5, r1
    7b78:	d307      	bcc.n	7b8a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    7b7a:	2600      	movs	r6, #0
    7b7c:	f000 fcea 	bl	8554 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x554>
    7b80:	b140      	cbz	r0, 7b94 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    7b82:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7b84:	38f1      	subs	r0, #241	; 0xf1
    7b86:	4285      	cmp	r5, r0
    7b88:	d203      	bcs.n	7b92 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x62>
    7b8a:	2601      	movs	r6, #1
    7b8c:	e002      	b.n	7b94 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    7b8e:	2001      	movs	r0, #1
    7b90:	bd70      	pop	{r4, r5, r6, pc}
    7b92:	2600      	movs	r6, #0
    7b94:	4630      	mov	r0, r6
    7b96:	bd70      	pop	{r4, r5, r6, pc}
    7b98:	20000da8 	.word	0x20000da8

00007b9c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    7b9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7b9e:	2501      	movs	r5, #1
    7ba0:	4c24      	ldr	r4, [pc, #144]	; (7c34 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    7ba2:	2806      	cmp	r0, #6
    7ba4:	d243      	bcs.n	7c2e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    7ba6:	e8df f000 	tbb	[pc, r0]
    7baa:	1903      	.short	0x1903
    7bac:	3e232319 	.word	0x3e232319
    7bb0:	f7fe fbee 	bl	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7bb4:	7860      	ldrb	r0, [r4, #1]
    7bb6:	bb88      	cbnz	r0, 7c1c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7bb8:	2200      	movs	r2, #0
    7bba:	4611      	mov	r1, r2
    7bbc:	4668      	mov	r0, sp
    7bbe:	f000 fd13 	bl	85e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e8>
    7bc2:	b148      	cbz	r0, 7bd8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    7bc4:	f7fe fdaa 	bl	671c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7bc8:	7800      	ldrb	r0, [r0, #0]
    7bca:	4669      	mov	r1, sp
    7bcc:	f005 f96b 	bl	cea6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x8e>
    7bd0:	bb20      	cbnz	r0, 7c1c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7bd2:	f640 2163 	movw	r1, #2659	; 0xa63
    7bd6:	e01c      	b.n	7c12 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7bd8:	70e5      	strb	r5, [r4, #3]
    7bda:	e020      	b.n	7c1e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7bdc:	2802      	cmp	r0, #2
    7bde:	d005      	beq.n	7bec <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    7be0:	2000      	movs	r0, #0
    7be2:	b004      	add	sp, #16
    7be4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7be8:	f000 ba04 	b.w	7ff4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x244>
    7bec:	2001      	movs	r0, #1
    7bee:	e7f8      	b.n	7be2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    7bf0:	2804      	cmp	r0, #4
    7bf2:	d011      	beq.n	7c18 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    7bf4:	f05f 0600 	movs.w	r6, #0
    7bf8:	f7fe fbca 	bl	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7bfc:	7725      	strb	r5, [r4, #28]
    7bfe:	7766      	strb	r6, [r4, #29]
    7c00:	69a1      	ldr	r1, [r4, #24]
    7c02:	2000      	movs	r0, #0
    7c04:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    7c08:	f000 fa7e 	bl	8108 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108>
    7c0c:	b130      	cbz	r0, 7c1c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7c0e:	f640 3118 	movw	r1, #2840	; 0xb18
    7c12:	2035      	movs	r0, #53	; 0x35
    7c14:	f7fc fc98 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c18:	2601      	movs	r6, #1
    7c1a:	e7ed      	b.n	7bf8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    7c1c:	e7ff      	b.n	7c1e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7c1e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7c22:	f000 ba61 	b.w	80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>
    7c26:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7c2a:	f7fe bbb1 	b.w	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7c2e:	f640 31d4 	movw	r1, #3028	; 0xbd4
    7c32:	e7ee      	b.n	7c12 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7c34:	20000da8 	.word	0x20000da8

00007c38 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    7c38:	b508      	push	{r3, lr}
    7c3a:	2244      	movs	r2, #68	; 0x44
    7c3c:	2100      	movs	r1, #0
    7c3e:	480c      	ldr	r0, [pc, #48]	; (7c70 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    7c40:	f003 fb98 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c44:	f7fe fd6a 	bl	671c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7c48:	2120      	movs	r1, #32
    7c4a:	7001      	strb	r1, [r0, #0]
    7c4c:	4808      	ldr	r0, [pc, #32]	; (7c70 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    7c4e:	3810      	subs	r0, #16
    7c50:	2100      	movs	r1, #0
    7c52:	6001      	str	r1, [r0, #0]
    7c54:	6041      	str	r1, [r0, #4]
    7c56:	6081      	str	r1, [r0, #8]
    7c58:	60c1      	str	r1, [r0, #12]
    7c5a:	f000 f80b 	bl	7c74 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    7c5e:	f242 7010 	movw	r0, #10000	; 0x2710
    7c62:	9000      	str	r0, [sp, #0]
    7c64:	2201      	movs	r2, #1
    7c66:	4669      	mov	r1, sp
    7c68:	1080      	asrs	r0, r0, #2
    7c6a:	f000 fa8b 	bl	8184 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x184>
    7c6e:	bd08      	pop	{r3, pc}
    7c70:	20000da8 	.word	0x20000da8

00007c74 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    7c74:	4804      	ldr	r0, [pc, #16]	; (7c88 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x14>)
    7c76:	b510      	push	{r4, lr}
    7c78:	7800      	ldrb	r0, [r0, #0]
    7c7a:	b108      	cbz	r0, 7c80 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc>
    7c7c:	f000 f85c 	bl	7d38 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    7c80:	f000 f8b2 	bl	7de8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    7c84:	2000      	movs	r0, #0
    7c86:	bd10      	pop	{r4, pc}
    7c88:	20000da8 	.word	0x20000da8

00007c8c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    7c8c:	4901      	ldr	r1, [pc, #4]	; (7c94 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    7c8e:	7048      	strb	r0, [r1, #1]
    7c90:	4770      	bx	lr
    7c92:	0000      	.short	0x0000
    7c94:	20000d98 	.word	0x20000d98

00007c98 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    7c98:	b570      	push	{r4, r5, r6, lr}
    7c9a:	4605      	mov	r5, r0
    7c9c:	4907      	ldr	r1, [pc, #28]	; (7cbc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x24>)
    7c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7ca2:	fbb1 f4f0 	udiv	r4, r1, r0
    7ca6:	f005 f94e 	bl	cf46 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12e>
    7caa:	1901      	adds	r1, r0, r4
    7cac:	4628      	mov	r0, r5
    7cae:	f201 1137 	addw	r1, r1, #311	; 0x137
    7cb2:	f004 ff1c 	bl	caee <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7cb6:	b280      	uxth	r0, r0
    7cb8:	bd70      	pop	{r4, r5, r6, pc}
    7cba:	0000      	.short	0x0000
    7cbc:	00012105 	.word	0x00012105

00007cc0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    7cc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7cc2:	4606      	mov	r6, r0
    7cc4:	b111      	cbz	r1, 7ccc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xc>
    7cc6:	2011      	movs	r0, #17
    7cc8:	b004      	add	sp, #16
    7cca:	bd70      	pop	{r4, r5, r6, pc}
    7ccc:	4c18      	ldr	r4, [pc, #96]	; (7d30 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    7cce:	7820      	ldrb	r0, [r4, #0]
    7cd0:	b108      	cbz	r0, 7cd6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x16>
    7cd2:	200c      	movs	r0, #12
    7cd4:	e7f8      	b.n	7cc8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    7cd6:	f7fe fd21 	bl	671c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7cda:	4605      	mov	r5, r0
    7cdc:	2000      	movs	r0, #0
    7cde:	7060      	strb	r0, [r4, #1]
    7ce0:	2004      	movs	r0, #4
    7ce2:	7020      	strb	r0, [r4, #0]
    7ce4:	4630      	mov	r0, r6
    7ce6:	f000 f8b3 	bl	7e50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    7cea:	f000 fbe3 	bl	84b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b4>
    7cee:	6320      	str	r0, [r4, #48]	; 0x30
    7cf0:	2100      	movs	r1, #0
    7cf2:	4810      	ldr	r0, [pc, #64]	; (7d34 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x74>)
    7cf4:	f7fa ff0a 	bl	2b0c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7cf8:	7028      	strb	r0, [r5, #0]
    7cfa:	2820      	cmp	r0, #32
    7cfc:	d00c      	beq.n	7d18 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x58>
    7cfe:	2200      	movs	r2, #0
    7d00:	2101      	movs	r1, #1
    7d02:	4668      	mov	r0, sp
    7d04:	f000 fc70 	bl	85e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e8>
    7d08:	b148      	cbz	r0, 7d1e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5e>
    7d0a:	7828      	ldrb	r0, [r5, #0]
    7d0c:	4669      	mov	r1, sp
    7d0e:	f005 f8ca 	bl	cea6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x8e>
    7d12:	b138      	cbz	r0, 7d24 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x64>
    7d14:	2000      	movs	r0, #0
    7d16:	e7d7      	b.n	7cc8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    7d18:	f240 4196 	movw	r1, #1174	; 0x496
    7d1c:	e004      	b.n	7d28 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    7d1e:	f44f 6193 	mov.w	r1, #1176	; 0x498
    7d22:	e001      	b.n	7d28 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    7d24:	f240 4199 	movw	r1, #1177	; 0x499
    7d28:	2035      	movs	r0, #53	; 0x35
    7d2a:	f7fc fc0d 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d2e:	0000      	.short	0x0000
    7d30:	20000da8 	.word	0x20000da8
    7d34:	00007e71 	.word	0x00007e71

00007d38 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    7d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d3c:	2700      	movs	r7, #0
    7d3e:	f7fe fced 	bl	671c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7d42:	4c17      	ldr	r4, [pc, #92]	; (7da0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x68>)
    7d44:	4605      	mov	r5, r0
    7d46:	7820      	ldrb	r0, [r4, #0]
    7d48:	2804      	cmp	r0, #4
    7d4a:	d005      	beq.n	7d58 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    7d4c:	7820      	ldrb	r0, [r4, #0]
    7d4e:	2805      	cmp	r0, #5
    7d50:	d002      	beq.n	7d58 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    7d52:	200c      	movs	r0, #12
    7d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d58:	2001      	movs	r0, #1
    7d5a:	7060      	strb	r0, [r4, #1]
    7d5c:	7b20      	ldrb	r0, [r4, #12]
    7d5e:	b160      	cbz	r0, 7d7a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    7d60:	f3ef 8610 	mrs	r6, PRIMASK
    7d64:	b672      	cpsid	i
    7d66:	7b20      	ldrb	r0, [r4, #12]
    7d68:	b128      	cbz	r0, 7d76 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    7d6a:	7b60      	ldrb	r0, [r4, #13]
    7d6c:	b118      	cbz	r0, 7d76 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    7d6e:	f7fe fe2f 	bl	69d0 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7d72:	f000 f9b9 	bl	80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>
    7d76:	b126      	cbz	r6, 7d82 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    7d78:	e004      	b.n	7d84 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    7d7a:	7828      	ldrb	r0, [r5, #0]
    7d7c:	f7fa fc7c 	bl	2678 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    7d80:	e000      	b.n	7d84 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    7d82:	b662      	cpsie	i
    7d84:	7828      	ldrb	r0, [r5, #0]
    7d86:	f7fa fdb5 	bl	28f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7d8a:	f000 fd5d 	bl	8848 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x848>
    7d8e:	2000      	movs	r0, #0
    7d90:	7060      	strb	r0, [r4, #1]
    7d92:	7f20      	ldrb	r0, [r4, #28]
    7d94:	b100      	cbz	r0, 7d98 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x60>
    7d96:	270c      	movs	r7, #12
    7d98:	f000 fd80 	bl	889c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x89c>
    7d9c:	4638      	mov	r0, r7
    7d9e:	e7d9      	b.n	7d54 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    7da0:	20000da8 	.word	0x20000da8

00007da4 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    7da4:	4801      	ldr	r0, [pc, #4]	; (7dac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    7da6:	7800      	ldrb	r0, [r0, #0]
    7da8:	4770      	bx	lr
    7daa:	0000      	.short	0x0000
    7dac:	20000da8 	.word	0x20000da8

00007db0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    7db0:	490c      	ldr	r1, [pc, #48]	; (7de4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    7db2:	b508      	push	{r3, lr}
    7db4:	7809      	ldrb	r1, [r1, #0]
    7db6:	b121      	cbz	r1, 7dc2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    7db8:	f240 414f 	movw	r1, #1103	; 0x44f
    7dbc:	2035      	movs	r0, #53	; 0x35
    7dbe:	f7fc fbc3 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7dc2:	2300      	movs	r3, #0
    7dc4:	9300      	str	r3, [sp, #0]
    7dc6:	7801      	ldrb	r1, [r0, #0]
    7dc8:	461a      	mov	r2, r3
    7dca:	07c9      	lsls	r1, r1, #31
    7dcc:	d003      	beq.n	7dd6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    7dce:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    7dd2:	2201      	movs	r2, #1
    7dd4:	9000      	str	r0, [sp, #0]
    7dd6:	4669      	mov	r1, sp
    7dd8:	4618      	mov	r0, r3
    7dda:	f000 f9d3 	bl	8184 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x184>
    7dde:	2000      	movs	r0, #0
    7de0:	bd08      	pop	{r3, pc}
    7de2:	0000      	.short	0x0000
    7de4:	20000da8 	.word	0x20000da8
    7de8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7dea:	4c18      	ldr	r4, [pc, #96]	; (7e4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>)
    7dec:	2001      	movs	r0, #1
    7dee:	7020      	strb	r0, [r4, #0]
    7df0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7df4:	e00b      	b.n	7e0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e>
    7df6:	2100      	movs	r1, #0
    7df8:	f004 f974 	bl	c0e4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7dfc:	0006      	movs	r6, r0
    7dfe:	d010      	beq.n	7e22 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72>
    7e00:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    7e04:	f7fa fd76 	bl	28f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7e08:	4630      	mov	r0, r6
    7e0a:	f005 f864 	bl	ced6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xbe>
    7e0e:	4669      	mov	r1, sp
    7e10:	2000      	movs	r0, #0
    7e12:	f004 f970 	bl	c0f6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7e16:	b180      	cbz	r0, 7e3a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7e18:	f44f 710f 	mov.w	r1, #572	; 0x23c
    7e1c:	2035      	movs	r0, #53	; 0x35
    7e1e:	f7fc fb93 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e22:	f240 5141 	movw	r1, #1345	; 0x541
    7e26:	e7f9      	b.n	7e1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c>
    7e28:	9802      	ldr	r0, [sp, #8]
    7e2a:	b130      	cbz	r0, 7e3a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7e2c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    7e30:	b119      	cbz	r1, 7e3a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7e32:	8800      	ldrh	r0, [r0, #0]
    7e34:	42a8      	cmp	r0, r5
    7e36:	d1de      	bne.n	7df6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x46>
    7e38:	e004      	b.n	7e44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x94>
    7e3a:	4668      	mov	r0, sp
    7e3c:	f7fc fd54 	bl	48e8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7e40:	2800      	cmp	r0, #0
    7e42:	d0f1      	beq.n	7e28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x78>
    7e44:	2000      	movs	r0, #0
    7e46:	7020      	strb	r0, [r4, #0]
    7e48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7e4a:	0000      	.short	0x0000
    7e4c:	20000d98 	.word	0x20000d98
    7e50:	4906      	ldr	r1, [pc, #24]	; (7e6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>)
    7e52:	b140      	cbz	r0, 7e66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb6>
    7e54:	2201      	movs	r2, #1
    7e56:	708a      	strb	r2, [r1, #2]
    7e58:	f242 7210 	movw	r2, #10000	; 0x2710
    7e5c:	4350      	muls	r0, r2
    7e5e:	684a      	ldr	r2, [r1, #4]
    7e60:	4410      	add	r0, r2
    7e62:	6208      	str	r0, [r1, #32]
    7e64:	4770      	bx	lr
    7e66:	2000      	movs	r0, #0
    7e68:	7088      	strb	r0, [r1, #2]
    7e6a:	4770      	bx	lr
    7e6c:	20000da8 	.word	0x20000da8
    7e70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7e72:	460d      	mov	r5, r1
    7e74:	2001      	movs	r0, #1
    7e76:	f004 ffd4 	bl	ce22 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7e7a:	b2c4      	uxtb	r4, r0
    7e7c:	200b      	movs	r0, #11
    7e7e:	f004 ffd0 	bl	ce22 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7e82:	b2c0      	uxtb	r0, r0
    7e84:	4284      	cmp	r4, r0
    7e86:	d002      	beq.n	7e8e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xde>
    7e88:	f240 21c5 	movw	r1, #709	; 0x2c5
    7e8c:	e073      	b.n	7f76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7e8e:	f7fe fc45 	bl	671c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7e92:	2601      	movs	r6, #1
    7e94:	4c3b      	ldr	r4, [pc, #236]	; (7f84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    7e96:	2d09      	cmp	r5, #9
    7e98:	d270      	bcs.n	7f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
    7e9a:	e8df f005 	tbb	[pc, r5]
    7e9e:	3605      	.short	0x3605
    7ea0:	6f464a4a 	.word	0x6f464a4a
    7ea4:	006a665e 	.word	0x006a665e
    7ea8:	7326      	strb	r6, [r4, #12]
    7eaa:	7861      	ldrb	r1, [r4, #1]
    7eac:	2900      	cmp	r1, #0
    7eae:	d12b      	bne.n	7f08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7eb0:	7800      	ldrb	r0, [r0, #0]
    7eb2:	f7f9 ff97 	bl	1de4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    7eb6:	4605      	mov	r5, r0
    7eb8:	6120      	str	r0, [r4, #16]
    7eba:	f000 fd09 	bl	88d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8d0>
    7ebe:	b118      	cbz	r0, 7ec8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    7ec0:	2000      	movs	r0, #0
    7ec2:	f88d 0004 	strb.w	r0, [sp, #4]
    7ec6:	e001      	b.n	7ecc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>
    7ec8:	f88d 6004 	strb.w	r6, [sp, #4]
    7ecc:	4629      	mov	r1, r5
    7ece:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7ed0:	f7f9 ff64 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7ed4:	6861      	ldr	r1, [r4, #4]
    7ed6:	fbb0 f2f1 	udiv	r2, r0, r1
    7eda:	fb01 0012 	mls	r0, r1, r2, r0
    7ede:	b150      	cbz	r0, 7ef6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x146>
    7ee0:	f05f 0000 	movs.w	r0, #0
    7ee4:	f88d 0005 	strb.w	r0, [sp, #5]
    7ee8:	4668      	mov	r0, sp
    7eea:	f7fe fce1 	bl	68b0 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    7eee:	b120      	cbz	r0, 7efa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x14a>
    7ef0:	f240 21ff 	movw	r1, #767	; 0x2ff
    7ef4:	e03f      	b.n	7f76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7ef6:	2001      	movs	r0, #1
    7ef8:	e7f4      	b.n	7ee4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x134>
    7efa:	4922      	ldr	r1, [pc, #136]	; (7f84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    7efc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7efe:	3910      	subs	r1, #16
    7f00:	38e0      	subs	r0, #224	; 0xe0
    7f02:	60c8      	str	r0, [r1, #12]
    7f04:	f7fa ff0c 	bl	2d20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7f08:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7f0a:	7860      	ldrb	r0, [r4, #1]
    7f0c:	b128      	cbz	r0, 7f1a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x16a>
    7f0e:	f7fe fd5f 	bl	69d0 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7f12:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7f16:	f000 b8e7 	b.w	80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>
    7f1a:	7366      	strb	r6, [r4, #13]
    7f1c:	f7fe fd52 	bl	69c4 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    7f20:	2800      	cmp	r0, #0
    7f22:	d0f1      	beq.n	7f08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7f24:	f240 3112 	movw	r1, #786	; 0x312
    7f28:	e025      	b.n	7f76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7f2a:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7f2e:	f002 bcb9 	b.w	a8a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7f32:	7805      	ldrb	r5, [r0, #0]
    7f34:	2201      	movs	r2, #1
    7f36:	2100      	movs	r1, #0
    7f38:	4668      	mov	r0, sp
    7f3a:	f000 fb55 	bl	85e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e8>
    7f3e:	b140      	cbz	r0, 7f52 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a2>
    7f40:	4669      	mov	r1, sp
    7f42:	4628      	mov	r0, r5
    7f44:	f004 ffaf 	bl	cea6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x8e>
    7f48:	2800      	cmp	r0, #0
    7f4a:	d1dd      	bne.n	7f08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7f4c:	f640 217f 	movw	r1, #2687	; 0xa7f
    7f50:	e011      	b.n	7f76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7f52:	70e6      	strb	r6, [r4, #3]
    7f54:	f000 f818 	bl	7f88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    7f58:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7f5a:	f000 fafb 	bl	8554 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x554>
    7f5e:	2800      	cmp	r0, #0
    7f60:	d1fa      	bne.n	7f58 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a8>
    7f62:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7f66:	f004 be45 	b.w	cbf4 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    7f6a:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7f6e:	f000 b80b 	b.w	7f88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    7f72:	f240 3136 	movw	r1, #822	; 0x336
    7f76:	2035      	movs	r0, #53	; 0x35
    7f78:	f7fc fae6 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f7c:	f240 313a 	movw	r1, #826	; 0x33a
    7f80:	e7f9      	b.n	7f76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7f82:	0000      	.short	0x0000
    7f84:	20000da8 	.word	0x20000da8
    7f88:	b510      	push	{r4, lr}
    7f8a:	4c0b      	ldr	r4, [pc, #44]	; (7fb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x208>)
    7f8c:	7820      	ldrb	r0, [r4, #0]
    7f8e:	b130      	cbz	r0, 7f9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ee>
    7f90:	f000 fc5a 	bl	8848 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x848>
    7f94:	78e0      	ldrb	r0, [r4, #3]
    7f96:	b158      	cbz	r0, 7fb0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    7f98:	7f20      	ldrb	r0, [r4, #28]
    7f9a:	b128      	cbz	r0, 7fa8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f8>
    7f9c:	e008      	b.n	7fb0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    7f9e:	f240 21b1 	movw	r1, #689	; 0x2b1
    7fa2:	2035      	movs	r0, #53	; 0x35
    7fa4:	f7fc fad0 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fa8:	f7fe fd24 	bl	69f4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    7fac:	f7fe f9f0 	bl	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fb4:	f000 bc72 	b.w	889c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x89c>
    7fb8:	20000da8 	.word	0x20000da8
    7fbc:	b510      	push	{r4, lr}
    7fbe:	4604      	mov	r4, r0
    7fc0:	2901      	cmp	r1, #1
    7fc2:	d102      	bne.n	7fca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21a>
    7fc4:	480a      	ldr	r0, [pc, #40]	; (7ff0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x240>)
    7fc6:	7800      	ldrb	r0, [r0, #0]
    7fc8:	b140      	cbz	r0, 7fdc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>
    7fca:	2004      	movs	r0, #4
    7fcc:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7fd0:	f002 fab4 	bl	a53c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    7fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fd8:	f7fa bdc0 	b.w	2b5c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    7fdc:	2200      	movs	r2, #0
    7fde:	2101      	movs	r1, #1
    7fe0:	4620      	mov	r0, r4
    7fe2:	f004 ff90 	bl	cf06 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xee>
    7fe6:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    7fea:	1c40      	adds	r0, r0, #1
    7fec:	8020      	strh	r0, [r4, #0]
    7fee:	e7ef      	b.n	7fd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x220>
    7ff0:	20000d98 	.word	0x20000d98
    7ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ff8:	4c39      	ldr	r4, [pc, #228]	; (80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>)
    7ffa:	4682      	mov	sl, r0
    7ffc:	6926      	ldr	r6, [r4, #16]
    7ffe:	f002 fa61 	bl	a4c4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8002:	4605      	mov	r5, r0
    8004:	69a0      	ldr	r0, [r4, #24]
    8006:	2201      	movs	r2, #1
    8008:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    800c:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    8010:	3062      	adds	r0, #98	; 0x62
    8012:	2101      	movs	r1, #1
    8014:	7281      	strb	r1, [r0, #10]
    8016:	69a0      	ldr	r0, [r4, #24]
    8018:	2100      	movs	r1, #0
    801a:	302c      	adds	r0, #44	; 0x2c
    801c:	f004 fd4e 	bl	cabc <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8020:	2101      	movs	r1, #1
    8022:	2000      	movs	r0, #0
    8024:	f004 ff9b 	bl	cf5e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x146>
    8028:	69a7      	ldr	r7, [r4, #24]
    802a:	1971      	adds	r1, r6, r5
    802c:	4408      	add	r0, r1
    802e:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    8032:	f8d7 800c 	ldr.w	r8, [r7, #12]
    8036:	f001 fc87 	bl	9948 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    803a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    803e:	4288      	cmp	r0, r1
    8040:	d00a      	beq.n	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    8042:	464a      	mov	r2, r9
    8044:	4641      	mov	r1, r8
    8046:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    804a:	f005 f8aa 	bl	d1a2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    804e:	4540      	cmp	r0, r8
    8050:	d903      	bls.n	805a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a>
    8052:	f240 51f6 	movw	r1, #1526	; 0x5f6
    8056:	e022      	b.n	809e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e>
    8058:	2000      	movs	r0, #0
    805a:	4922      	ldr	r1, [pc, #136]	; (80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>)
    805c:	4607      	mov	r7, r0
    805e:	6849      	ldr	r1, [r1, #4]
    8060:	4288      	cmp	r0, r1
    8062:	69a0      	ldr	r0, [r4, #24]
    8064:	68c1      	ldr	r1, [r0, #12]
    8066:	d202      	bcs.n	806e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e>
    8068:	440f      	add	r7, r1
    806a:	6201      	str	r1, [r0, #32]
    806c:	e008      	b.n	8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>
    806e:	4638      	mov	r0, r7
    8070:	f004 fb01 	bl	c676 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    8074:	69a1      	ldr	r1, [r4, #24]
    8076:	68c9      	ldr	r1, [r1, #12]
    8078:	f004 faf9 	bl	c66e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    807c:	69a1      	ldr	r1, [r4, #24]
    807e:	6208      	str	r0, [r1, #32]
    8080:	69a0      	ldr	r0, [r4, #24]
    8082:	68c1      	ldr	r1, [r0, #12]
    8084:	2005      	movs	r0, #5
    8086:	f004 fafc 	bl	c682 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    808a:	69a1      	ldr	r1, [r4, #24]
    808c:	b280      	uxth	r0, r0
    808e:	8388      	strh	r0, [r1, #28]
    8090:	69a1      	ldr	r1, [r4, #24]
    8092:	6a09      	ldr	r1, [r1, #32]
    8094:	1a79      	subs	r1, r7, r1
    8096:	4288      	cmp	r0, r1
    8098:	d804      	bhi.n	80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
    809a:	f640 21ee 	movw	r1, #2798	; 0xaee
    809e:	2035      	movs	r0, #53	; 0x35
    80a0:	f7fc fa52 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80a4:	2101      	movs	r1, #1
    80a6:	4650      	mov	r0, sl
    80a8:	f004 ff59 	bl	cf5e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x146>
    80ac:	4428      	add	r0, r5
    80ae:	19c5      	adds	r5, r0, r7
    80b0:	2101      	movs	r1, #1
    80b2:	4650      	mov	r0, sl
    80b4:	f004 fa3b 	bl	c52e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    80b8:	4405      	add	r5, r0
    80ba:	2001      	movs	r0, #1
    80bc:	f005 fd50 	bl	db60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    80c0:	f64a 2113 	movw	r1, #43539	; 0xaa13
    80c4:	4408      	add	r0, r1
    80c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    80ca:	fbb0 f0f1 	udiv	r0, r0, r1
    80ce:	1a29      	subs	r1, r5, r0
    80d0:	4630      	mov	r0, r6
    80d2:	f7f9 fe31 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    80d6:	69a1      	ldr	r1, [r4, #24]
    80d8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    80dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    80e0:	20000da8 	.word	0x20000da8
    80e4:	20000114 	.word	0x20000114
    80e8:	b510      	push	{r4, lr}
    80ea:	4c06      	ldr	r4, [pc, #24]	; (8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>)
    80ec:	7b20      	ldrb	r0, [r4, #12]
    80ee:	2800      	cmp	r0, #0
    80f0:	d006      	beq.n	8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>
    80f2:	f002 fa23 	bl	a53c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    80f6:	f7fa fd31 	bl	2b5c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    80fa:	2000      	movs	r0, #0
    80fc:	7320      	strb	r0, [r4, #12]
    80fe:	7360      	strb	r0, [r4, #13]
    8100:	bd10      	pop	{r4, pc}
    8102:	0000      	.short	0x0000
    8104:	20000da8 	.word	0x20000da8
    8108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    810a:	4c1c      	ldr	r4, [pc, #112]	; (817c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17c>)
    810c:	7820      	ldrb	r0, [r4, #0]
    810e:	2805      	cmp	r0, #5
    8110:	d002      	beq.n	8118 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x118>
    8112:	200c      	movs	r0, #12
    8114:	b004      	add	sp, #16
    8116:	bd10      	pop	{r4, pc}
    8118:	69a1      	ldr	r1, [r4, #24]
    811a:	b129      	cbz	r1, 8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>
    811c:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    8120:	b128      	cbz	r0, 812e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12e>
    8122:	f240 41fa 	movw	r1, #1274	; 0x4fa
    8126:	e025      	b.n	8174 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x174>
    8128:	f240 41f9 	movw	r1, #1273	; 0x4f9
    812c:	e022      	b.n	8174 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x174>
    812e:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    8132:	2820      	cmp	r0, #32
    8134:	d002      	beq.n	813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>
    8136:	f240 41fc 	movw	r1, #1276	; 0x4fc
    813a:	e01b      	b.n	8174 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x174>
    813c:	4810      	ldr	r0, [pc, #64]	; (8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>)
    813e:	f7fa fce5 	bl	2b0c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8142:	69a1      	ldr	r1, [r4, #24]
    8144:	2820      	cmp	r0, #32
    8146:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    814a:	d00e      	beq.n	816a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a>
    814c:	2300      	movs	r3, #0
    814e:	2201      	movs	r2, #1
    8150:	4668      	mov	r0, sp
    8152:	f000 f8bd 	bl	82d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d0>
    8156:	69a0      	ldr	r0, [r4, #24]
    8158:	4669      	mov	r1, sp
    815a:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    815e:	f004 fea2 	bl	cea6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x8e>
    8162:	b128      	cbz	r0, 8170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x170>
    8164:	2000      	movs	r0, #0
    8166:	61a0      	str	r0, [r4, #24]
    8168:	e7d4      	b.n	8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>
    816a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    816e:	e001      	b.n	8174 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x174>
    8170:	f240 5103 	movw	r1, #1283	; 0x503
    8174:	2035      	movs	r0, #53	; 0x35
    8176:	f7fc f9e7 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    817a:	0000      	.short	0x0000
    817c:	20000da8 	.word	0x20000da8
    8180:	000081d9 	.word	0x000081d9
    8184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8188:	4d11      	ldr	r5, [pc, #68]	; (81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>)
    818a:	4616      	mov	r6, r2
    818c:	460f      	mov	r7, r1
    818e:	2400      	movs	r4, #0
    8190:	6068      	str	r0, [r5, #4]
    8192:	f004 fed8 	bl	cf46 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12e>
    8196:	f8df c03c 	ldr.w	ip, [pc, #60]	; 81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>
    819a:	2100      	movs	r1, #0
    819c:	f81c 2001 	ldrb.w	r2, [ip, r1]
    81a0:	4232      	tst	r2, r6
    81a2:	d007      	beq.n	81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>
    81a4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    81a8:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    81ac:	1a1b      	subs	r3, r3, r0
    81ae:	1c64      	adds	r4, r4, #1
    81b0:	b2e4      	uxtb	r4, r4
    81b2:	6093      	str	r3, [r2, #8]
    81b4:	1c49      	adds	r1, r1, #1
    81b6:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    81ba:	d0ef      	beq.n	819c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19c>
    81bc:	f016 0f0e 	tst.w	r6, #14
    81c0:	d004      	beq.n	81cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cc>
    81c2:	f640 11b6 	movw	r1, #2486	; 0x9b6
    81c6:	2035      	movs	r0, #53	; 0x35
    81c8:	f7fc f9be 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    81d0:	20000da8 	.word	0x20000da8
    81d4:	0000dcd7 	.word	0x0000dcd7
    81d8:	b570      	push	{r4, r5, r6, lr}
    81da:	460d      	mov	r5, r1
    81dc:	0004      	movs	r4, r0
    81de:	d00c      	beq.n	81fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fa>
    81e0:	2001      	movs	r0, #1
    81e2:	f004 fe1e 	bl	ce22 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    81e6:	b2c6      	uxtb	r6, r0
    81e8:	200b      	movs	r0, #11
    81ea:	f004 fe1a 	bl	ce22 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    81ee:	b2c0      	uxtb	r0, r0
    81f0:	4286      	cmp	r6, r0
    81f2:	d005      	beq.n	8200 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x200>
    81f4:	f240 215f 	movw	r1, #607	; 0x25f
    81f8:	e061      	b.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    81fa:	f44f 7117 	mov.w	r1, #604	; 0x25c
    81fe:	e05e      	b.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    8200:	2d09      	cmp	r5, #9
    8202:	d25f      	bcs.n	82c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c4>
    8204:	e8df f005 	tbb	[pc, r5]
    8208:	3d3d3505 	.word	0x3d3d3505
    820c:	4b445e39 	.word	0x4b445e39
    8210:	0059      	.short	0x0059
    8212:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8216:	b348      	cbz	r0, 826c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26c>
    8218:	4620      	mov	r0, r4
    821a:	f000 fbc7 	bl	89ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    821e:	f004 fe92 	bl	cf46 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12e>
    8222:	f500 709c 	add.w	r0, r0, #312	; 0x138
    8226:	b285      	uxth	r5, r0
    8228:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    822c:	2128      	movs	r1, #40	; 0x28
    822e:	f004 fe26 	bl	ce7e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x66>
    8232:	182e      	adds	r6, r5, r0
    8234:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8236:	68e0      	ldr	r0, [r4, #12]
    8238:	4288      	cmp	r0, r1
    823a:	d200      	bcs.n	823e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23e>
    823c:	4601      	mov	r1, r0
    823e:	4632      	mov	r2, r6
    8240:	4620      	mov	r0, r4
    8242:	f004 fbc4 	bl	c9ce <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8246:	4d21      	ldr	r5, [pc, #132]	; (82cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2cc>)
    8248:	4632      	mov	r2, r6
    824a:	6068      	str	r0, [r5, #4]
    824c:	4620      	mov	r0, r4
    824e:	68e1      	ldr	r1, [r4, #12]
    8250:	f004 fbbd 	bl	c9ce <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8254:	60a8      	str	r0, [r5, #8]
    8256:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    825a:	f004 fc19 	bl	ca90 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    825e:	f2a0 1027 	subw	r0, r0, #295	; 0x127
    8262:	60e8      	str	r0, [r5, #12]
    8264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8268:	f7fa bd5a 	b.w	2d20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    826c:	f240 2165 	movw	r1, #613	; 0x265
    8270:	e025      	b.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    8272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8276:	f004 beec 	b.w	d052 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    827a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    827e:	f002 bb11 	b.w	a8a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    8282:	4620      	mov	r0, r4
    8284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8288:	2201      	movs	r2, #1
    828a:	2100      	movs	r1, #0
    828c:	f004 be3b 	b.w	cf06 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xee>
    8290:	2001      	movs	r0, #1
    8292:	f7f9 fc25 	bl	1ae0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    8296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    829a:	f004 b801 	b.w	c2a0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    829e:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    82a2:	2804      	cmp	r0, #4
    82a4:	d002      	beq.n	82ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ac>
    82a6:	f240 2199 	movw	r1, #665	; 0x299
    82aa:	e008      	b.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    82ac:	4620      	mov	r0, r4
    82ae:	f004 fe12 	bl	ced6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xbe>
    82b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82b6:	f7fe b86b 	b.w	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    82ba:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    82be:	2035      	movs	r0, #53	; 0x35
    82c0:	f7fc f942 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82c4:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    82c8:	e7f9      	b.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    82ca:	0000      	.short	0x0000
    82cc:	20000d98 	.word	0x20000d98
    82d0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    82d4:	4605      	mov	r5, r0
    82d6:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    82da:	2600      	movs	r6, #0
    82dc:	f8d1 b020 	ldr.w	fp, [r1, #32]
    82e0:	469a      	mov	sl, r3
    82e2:	460c      	mov	r4, r1
    82e4:	280d      	cmp	r0, #13
    82e6:	d020      	beq.n	832a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32a>
    82e8:	280c      	cmp	r0, #12
    82ea:	d01e      	beq.n	832a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32a>
    82ec:	2824      	cmp	r0, #36	; 0x24
    82ee:	d01c      	beq.n	832a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32a>
    82f0:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    82f4:	2824      	cmp	r0, #36	; 0x24
    82f6:	d018      	beq.n	832a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32a>
    82f8:	2000      	movs	r0, #0
    82fa:	4680      	mov	r8, r0
    82fc:	f004 fe18 	bl	cf30 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x118>
    8300:	4681      	mov	r9, r0
    8302:	f1ba 0f00 	cmp.w	sl, #0
    8306:	d003      	beq.n	8310 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x310>
    8308:	2101      	movs	r1, #1
    830a:	4620      	mov	r0, r4
    830c:	f004 fe48 	bl	cfa0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8310:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8314:	2701      	movs	r7, #1
    8316:	b150      	cbz	r0, 832e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32e>
    8318:	2801      	cmp	r0, #1
    831a:	d01b      	beq.n	8354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x354>
    831c:	2802      	cmp	r0, #2
    831e:	d011      	beq.n	8344 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x344>
    8320:	2803      	cmp	r0, #3
    8322:	d017      	beq.n	8354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x354>
    8324:	f640 1139 	movw	r1, #2361	; 0x939
    8328:	e07b      	b.n	8422 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x422>
    832a:	2001      	movs	r0, #1
    832c:	e7e5      	b.n	82fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2fa>
    832e:	9802      	ldr	r0, [sp, #8]
    8330:	b128      	cbz	r0, 833e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33e>
    8332:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    8336:	4620      	mov	r0, r4
    8338:	f004 fda3 	bl	ce82 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x6a>
    833c:	e00b      	b.n	8356 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x356>
    833e:	f640 01ff 	movw	r1, #2303	; 0x8ff
    8342:	e06e      	b.n	8422 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x422>
    8344:	4838      	ldr	r0, [pc, #224]	; (8428 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x428>)
    8346:	6801      	ldr	r1, [r0, #0]
    8348:	2003      	movs	r0, #3
    834a:	eb01 060b 	add.w	r6, r1, fp
    834e:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8352:	e000      	b.n	8356 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x356>
    8354:	68e6      	ldr	r6, [r4, #12]
    8356:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    835a:	4631      	mov	r1, r6
    835c:	f7f9 fcec 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8360:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    8364:	60e8      	str	r0, [r5, #12]
    8366:	2000      	movs	r0, #0
    8368:	7028      	strb	r0, [r5, #0]
    836a:	f8a5 9008 	strh.w	r9, [r5, #8]
    836e:	4620      	mov	r0, r4
    8370:	f000 faee 	bl	8950 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    8374:	f1a8 0101 	sub.w	r1, r8, #1
    8378:	4208      	tst	r0, r1
    837a:	d101      	bne.n	8380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x380>
    837c:	72af      	strb	r7, [r5, #10]
    837e:	e005      	b.n	838c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38c>
    8380:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8384:	2801      	cmp	r0, #1
    8386:	d017      	beq.n	83b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b8>
    8388:	2003      	movs	r0, #3
    838a:	72a8      	strb	r0, [r5, #10]
    838c:	46b9      	mov	r9, r7
    838e:	72ef      	strb	r7, [r5, #11]
    8390:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8394:	f004 fb7c 	bl	ca90 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8398:	6068      	str	r0, [r5, #4]
    839a:	f1ba 0f00 	cmp.w	sl, #0
    839e:	d03c      	beq.n	841a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x41a>
    83a0:	4631      	mov	r1, r6
    83a2:	4628      	mov	r0, r5
    83a4:	f004 f905 	bl	c5b2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    83a8:	b287      	uxth	r7, r0
    83aa:	4620      	mov	r0, r4
    83ac:	f000 fad0 	bl	8950 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    83b0:	f1b8 0f00 	cmp.w	r8, #0
    83b4:	d002      	beq.n	83bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3bc>
    83b6:	e014      	b.n	83e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e2>
    83b8:	2002      	movs	r0, #2
    83ba:	e7e6      	b.n	838a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38a>
    83bc:	42b8      	cmp	r0, r7
    83be:	d810      	bhi.n	83e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e2>
    83c0:	4607      	mov	r7, r0
    83c2:	f885 900a 	strb.w	r9, [r5, #10]
    83c6:	fb06 f107 	mul.w	r1, r6, r7
    83ca:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    83ce:	f7f9 fcb3 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    83d2:	60e8      	str	r0, [r5, #12]
    83d4:	b31e      	cbz	r6, 841e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x41e>
    83d6:	4631      	mov	r1, r6
    83d8:	4628      	mov	r0, r5
    83da:	f004 f8ea 	bl	c5b2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    83de:	4438      	add	r0, r7
    83e0:	b287      	uxth	r7, r0
    83e2:	4639      	mov	r1, r7
    83e4:	4620      	mov	r0, r4
    83e6:	f004 fddb 	bl	cfa0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    83ea:	68e8      	ldr	r0, [r5, #12]
    83ec:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    83f0:	6f20      	ldr	r0, [r4, #112]	; 0x70
    83f2:	2800      	cmp	r0, #0
    83f4:	d011      	beq.n	841a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x41a>
    83f6:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    83fa:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    83fe:	1a40      	subs	r0, r0, r1
    8400:	b202      	sxth	r2, r0
    8402:	2a00      	cmp	r2, #0
    8404:	dd09      	ble.n	841a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x41a>
    8406:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    840a:	4402      	add	r2, r0
    840c:	1e52      	subs	r2, r2, #1
    840e:	fb92 f2f0 	sdiv	r2, r2, r0
    8412:	b292      	uxth	r2, r2
    8414:	fb02 1000 	mla	r0, r2, r0, r1
    8418:	86e0      	strh	r0, [r4, #54]	; 0x36
    841a:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    841e:	f640 1174 	movw	r1, #2420	; 0x974
    8422:	2035      	movs	r0, #53	; 0x35
    8424:	f7fc f890 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8428:	20000114 	.word	0x20000114
    842c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8430:	460d      	mov	r5, r1
    8432:	4607      	mov	r7, r0
    8434:	f000 fa58 	bl	88e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e8>
    8438:	4c1d      	ldr	r4, [pc, #116]	; (84b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b0>)
    843a:	6861      	ldr	r1, [r4, #4]
    843c:	f7f9 fc7c 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8440:	4606      	mov	r6, r0
    8442:	4601      	mov	r1, r0
    8444:	4638      	mov	r0, r7
    8446:	f7f9 fca9 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    844a:	4607      	mov	r7, r0
    844c:	f004 fd81 	bl	cf52 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x13a>
    8450:	4287      	cmp	r7, r0
    8452:	da10      	bge.n	8476 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x476>
    8454:	6960      	ldr	r0, [r4, #20]
    8456:	f000 fa47 	bl	88e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e8>
    845a:	4631      	mov	r1, r6
    845c:	f7f9 fc9e 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8460:	6861      	ldr	r1, [r4, #4]
    8462:	fbb0 f0f1 	udiv	r0, r0, r1
    8466:	6028      	str	r0, [r5, #0]
    8468:	6861      	ldr	r1, [r4, #4]
    846a:	b004      	add	sp, #16
    846c:	4630      	mov	r0, r6
    846e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8472:	f7f9 bc61 	b.w	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8476:	2000      	movs	r0, #0
    8478:	f88d 0000 	strb.w	r0, [sp]
    847c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    847e:	9001      	str	r0, [sp, #4]
    8480:	f004 fd56 	bl	cf30 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x118>
    8484:	f8ad 0008 	strh.w	r0, [sp, #8]
    8488:	2001      	movs	r0, #1
    848a:	f88d 000b 	strb.w	r0, [sp, #11]
    848e:	6960      	ldr	r0, [r4, #20]
    8490:	f000 fa2a 	bl	88e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e8>
    8494:	9003      	str	r0, [sp, #12]
    8496:	f000 f9c1 	bl	881c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x81c>
    849a:	f88d 000a 	strb.w	r0, [sp, #10]
    849e:	4668      	mov	r0, sp
    84a0:	6861      	ldr	r1, [r4, #4]
    84a2:	f004 f886 	bl	c5b2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    84a6:	6028      	str	r0, [r5, #0]
    84a8:	9803      	ldr	r0, [sp, #12]
    84aa:	b004      	add	sp, #16
    84ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84b0:	20000da8 	.word	0x20000da8
    84b4:	b510      	push	{r4, lr}
    84b6:	2400      	movs	r4, #0
    84b8:	f004 fd45 	bl	cf46 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12e>
    84bc:	4a06      	ldr	r2, [pc, #24]	; (84d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d8>)
    84be:	2100      	movs	r1, #0
    84c0:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    84c4:	4404      	add	r4, r0
    84c6:	689b      	ldr	r3, [r3, #8]
    84c8:	1c49      	adds	r1, r1, #1
    84ca:	441c      	add	r4, r3
    84cc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    84d0:	d0f6      	beq.n	84c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c0>
    84d2:	4620      	mov	r0, r4
    84d4:	bd10      	pop	{r4, pc}
    84d6:	0000      	.short	0x0000
    84d8:	20000da8 	.word	0x20000da8
    84dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    84de:	4c1b      	ldr	r4, [pc, #108]	; (854c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54c>)
    84e0:	4606      	mov	r6, r0
    84e2:	460d      	mov	r5, r1
    84e4:	78a0      	ldrb	r0, [r4, #2]
    84e6:	b360      	cbz	r0, 8542 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x542>
    84e8:	4919      	ldr	r1, [pc, #100]	; (8550 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x550>)
    84ea:	6a20      	ldr	r0, [r4, #32]
    84ec:	4288      	cmp	r0, r1
    84ee:	d828      	bhi.n	8542 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x542>
    84f0:	2000      	movs	r0, #0
    84f2:	f88d 0000 	strb.w	r0, [sp]
    84f6:	9501      	str	r5, [sp, #4]
    84f8:	f004 fd1a 	bl	cf30 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x118>
    84fc:	f8ad 0008 	strh.w	r0, [sp, #8]
    8500:	2001      	movs	r0, #1
    8502:	f88d 000b 	strb.w	r0, [sp, #11]
    8506:	f004 fd24 	bl	cf52 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x13a>
    850a:	4601      	mov	r1, r0
    850c:	4630      	mov	r0, r6
    850e:	f7f9 fc13 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8512:	9003      	str	r0, [sp, #12]
    8514:	2003      	movs	r0, #3
    8516:	f88d 000a 	strb.w	r0, [sp, #10]
    851a:	4668      	mov	r0, sp
    851c:	f7f9 ff4a 	bl	23b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    8520:	4606      	mov	r6, r0
    8522:	4629      	mov	r1, r5
    8524:	9803      	ldr	r0, [sp, #12]
    8526:	f7f9 fc07 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    852a:	4605      	mov	r5, r0
    852c:	6a21      	ldr	r1, [r4, #32]
    852e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8530:	f7f9 fc02 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8534:	4601      	mov	r1, r0
    8536:	b13e      	cbz	r6, 8548 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x548>
    8538:	4628      	mov	r0, r5
    853a:	f7f9 fc2f 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    853e:	2800      	cmp	r0, #0
    8540:	db02      	blt.n	8548 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x548>
    8542:	2001      	movs	r0, #1
    8544:	b004      	add	sp, #16
    8546:	bd70      	pop	{r4, r5, r6, pc}
    8548:	2000      	movs	r0, #0
    854a:	e7fb      	b.n	8544 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x544>
    854c:	20000da8 	.word	0x20000da8
    8550:	07a12000 	.word	0x07a12000
    8554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8558:	f002 fd1d 	bl	af96 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    855c:	4c21      	ldr	r4, [pc, #132]	; (85e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e4>)
    855e:	4607      	mov	r7, r0
    8560:	6920      	ldr	r0, [r4, #16]
    8562:	f000 f95b 	bl	881c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x81c>
    8566:	4606      	mov	r6, r0
    8568:	f7f9 fb8c 	bl	1c84 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    856c:	4605      	mov	r5, r0
    856e:	2865      	cmp	r0, #101	; 0x65
    8570:	d326      	bcc.n	85c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c0>
    8572:	1c68      	adds	r0, r5, #1
    8574:	d027      	beq.n	85c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c6>
    8576:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8578:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    857a:	1948      	adds	r0, r1, r5
    857c:	4282      	cmp	r2, r0
    857e:	d800      	bhi.n	8582 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x582>
    8580:	1a55      	subs	r5, r2, r1
    8582:	f06f 0139 	mvn.w	r1, #57	; 0x39
    8586:	4638      	mov	r0, r7
    8588:	f7f9 fbd6 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    858c:	4629      	mov	r1, r5
    858e:	f000 f9bd 	bl	890c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90c>
    8592:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8594:	4408      	add	r0, r1
    8596:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8598:	1a45      	subs	r5, r0, r1
    859a:	f241 3088 	movw	r0, #5000	; 0x1388
    859e:	4285      	cmp	r5, r0
    85a0:	d900      	bls.n	85a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a4>
    85a2:	4605      	mov	r5, r0
    85a4:	f002 fcf7 	bl	af96 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    85a8:	4601      	mov	r1, r0
    85aa:	4638      	mov	r0, r7
    85ac:	f7f9 fbf6 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    85b0:	309d      	adds	r0, #157	; 0x9d
    85b2:	4285      	cmp	r5, r0
    85b4:	d304      	bcc.n	85c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c0>
    85b6:	4631      	mov	r1, r6
    85b8:	4628      	mov	r0, r5
    85ba:	f7f9 faa1 	bl	1b00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    85be:	b120      	cbz	r0, 85ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ca>
    85c0:	2000      	movs	r0, #0
    85c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    85c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    85c8:	e7e5      	b.n	8596 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x596>
    85ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    85cc:	4905      	ldr	r1, [pc, #20]	; (85e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e4>)
    85ce:	4428      	add	r0, r5
    85d0:	3910      	subs	r1, #16
    85d2:	6260      	str	r0, [r4, #36]	; 0x24
    85d4:	68c8      	ldr	r0, [r1, #12]
    85d6:	4428      	add	r0, r5
    85d8:	60c8      	str	r0, [r1, #12]
    85da:	f7fa fba1 	bl	2d20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    85de:	2001      	movs	r0, #1
    85e0:	e7ef      	b.n	85c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c2>
    85e2:	0000      	.short	0x0000
    85e4:	20000da8 	.word	0x20000da8
    85e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85ec:	b08c      	sub	sp, #48	; 0x30
    85ee:	4616      	mov	r6, r2
    85f0:	4607      	mov	r7, r0
    85f2:	f002 fcd0 	bl	af96 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    85f6:	4c87      	ldr	r4, [pc, #540]	; (8814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x814>)
    85f8:	9002      	str	r0, [sp, #8]
    85fa:	2500      	movs	r5, #0
    85fc:	f8d4 a008 	ldr.w	sl, [r4, #8]
    8600:	f004 fca1 	bl	cf46 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12e>
    8604:	68a1      	ldr	r1, [r4, #8]
    8606:	4408      	add	r0, r1
    8608:	6861      	ldr	r1, [r4, #4]
    860a:	4288      	cmp	r0, r1
    860c:	d101      	bne.n	8612 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x612>
    860e:	2001      	movs	r0, #1
    8610:	e000      	b.n	8614 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x614>
    8612:	2000      	movs	r0, #0
    8614:	4683      	mov	fp, r0
    8616:	980d      	ldr	r0, [sp, #52]	; 0x34
    8618:	ea06 090b 	and.w	r9, r6, fp
    861c:	2800      	cmp	r0, #0
    861e:	d065      	beq.n	86ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ec>
    8620:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    8624:	9802      	ldr	r0, [sp, #8]
    8626:	f7f9 fb87 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    862a:	9000      	str	r0, [sp, #0]
    862c:	f001 f992 	bl	9954 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    8630:	4680      	mov	r8, r0
    8632:	4878      	ldr	r0, [pc, #480]	; (8814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x814>)
    8634:	7800      	ldrb	r0, [r0, #0]
    8636:	4e77      	ldr	r6, [pc, #476]	; (8814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x814>)
    8638:	362c      	adds	r6, #44	; 0x2c
    863a:	2805      	cmp	r0, #5
    863c:	d12e      	bne.n	869c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x69c>
    863e:	4875      	ldr	r0, [pc, #468]	; (8814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x814>)
    8640:	6980      	ldr	r0, [r0, #24]
    8642:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    8646:	f001 f965 	bl	9914 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    864a:	4604      	mov	r4, r0
    864c:	4540      	cmp	r0, r8
    864e:	d009      	beq.n	8664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x664>
    8650:	4870      	ldr	r0, [pc, #448]	; (8814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x814>)
    8652:	4621      	mov	r1, r4
    8654:	6980      	ldr	r0, [r0, #24]
    8656:	f500 7084 	add.w	r0, r0, #264	; 0x108
    865a:	f001 f91f 	bl	989c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    865e:	2000      	movs	r0, #0
    8660:	6170      	str	r0, [r6, #20]
    8662:	e00c      	b.n	867e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x67e>
    8664:	496b      	ldr	r1, [pc, #428]	; (8814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x814>)
    8666:	6988      	ldr	r0, [r1, #24]
    8668:	f500 7084 	add.w	r0, r0, #264	; 0x108
    866c:	6170      	str	r0, [r6, #20]
    866e:	698a      	ldr	r2, [r1, #24]
    8670:	6b08      	ldr	r0, [r1, #48]	; 0x30
    8672:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    8676:	4290      	cmp	r0, r2
    8678:	d200      	bcs.n	867c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x67c>
    867a:	4610      	mov	r0, r2
    867c:	6308      	str	r0, [r1, #48]	; 0x30
    867e:	4865      	ldr	r0, [pc, #404]	; (8814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x814>)
    8680:	6980      	ldr	r0, [r0, #24]
    8682:	b130      	cbz	r0, 8692 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x692>
    8684:	b144      	cbz	r4, 8698 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x698>
    8686:	e9d4 1200 	ldrd	r1, r2, [r4]
    868a:	4411      	add	r1, r2
    868c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8690:	e004      	b.n	869c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x69c>
    8692:	f240 51c5 	movw	r1, #1477	; 0x5c5
    8696:	e017      	b.n	86c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c8>
    8698:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    869c:	4641      	mov	r1, r8
    869e:	4630      	mov	r0, r6
    86a0:	f001 f8fc 	bl	989c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    86a4:	ea5f 0008 	movs.w	r0, r8
    86a8:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x814>
    86ac:	9a00      	ldr	r2, [sp, #0]
    86ae:	f8d8 4004 	ldr.w	r4, [r8, #4]
    86b2:	d00c      	beq.n	86ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ce>
    86b4:	e9d0 1000 	ldrd	r1, r0, [r0]
    86b8:	4408      	add	r0, r1
    86ba:	4621      	mov	r1, r4
    86bc:	f004 fd71 	bl	d1a2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    86c0:	42a0      	cmp	r0, r4
    86c2:	d904      	bls.n	86ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ce>
    86c4:	f240 51e3 	movw	r1, #1507	; 0x5e3
    86c8:	2035      	movs	r0, #53	; 0x35
    86ca:	f7fb ff3d 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86ce:	4601      	mov	r1, r0
    86d0:	9800      	ldr	r0, [sp, #0]
    86d2:	f7f9 fb31 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    86d6:	4606      	mov	r6, r0
    86d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
    86dc:	4644      	mov	r4, r8
    86de:	4241      	negs	r1, r0
    86e0:	4630      	mov	r0, r6
    86e2:	f7f9 fb29 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    86e6:	62e0      	str	r0, [r4, #44]	; 0x2c
    86e8:	2001      	movs	r0, #1
    86ea:	e042      	b.n	8772 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x772>
    86ec:	f1b9 0f00 	cmp.w	r9, #0
    86f0:	d018      	beq.n	8724 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x724>
    86f2:	2001      	movs	r0, #1
    86f4:	f004 fba9 	bl	ce4a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x32>
    86f8:	4604      	mov	r4, r0
    86fa:	2001      	movs	r0, #1
    86fc:	f005 fa30 	bl	db60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8700:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8704:	4401      	add	r1, r0
    8706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    870a:	fbb1 f0f0 	udiv	r0, r1, r0
    870e:	1821      	adds	r1, r4, r0
    8710:	31f1      	adds	r1, #241	; 0xf1
    8712:	9802      	ldr	r0, [sp, #8]
    8714:	f7ff fee2 	bl	84dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4dc>
    8718:	b908      	cbnz	r0, 871e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x71e>
    871a:	f04f 0a00 	mov.w	sl, #0
    871e:	9e02      	ldr	r6, [sp, #8]
    8720:	9508      	str	r5, [sp, #32]
    8722:	e027      	b.n	8774 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x774>
    8724:	b12e      	cbz	r6, 8732 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x732>
    8726:	a908      	add	r1, sp, #32
    8728:	9802      	ldr	r0, [sp, #8]
    872a:	f7ff fe7f 	bl	842c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42c>
    872e:	4606      	mov	r6, r0
    8730:	e020      	b.n	8774 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x774>
    8732:	9802      	ldr	r0, [sp, #8]
    8734:	f000 f8d8 	bl	88e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e8>
    8738:	4c36      	ldr	r4, [pc, #216]	; (8814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x814>)
    873a:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    873e:	f7f9 fafb 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8742:	4606      	mov	r6, r0
    8744:	6920      	ldr	r0, [r4, #16]
    8746:	f000 f8c3 	bl	88d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8d0>
    874a:	6861      	ldr	r1, [r4, #4]
    874c:	4348      	muls	r0, r1
    874e:	78a1      	ldrb	r1, [r4, #2]
    8750:	b131      	cbz	r1, 8760 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x760>
    8752:	6a21      	ldr	r1, [r4, #32]
    8754:	4281      	cmp	r1, r0
    8756:	d302      	bcc.n	875e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x75e>
    8758:	1a09      	subs	r1, r1, r0
    875a:	6221      	str	r1, [r4, #32]
    875c:	e000      	b.n	8760 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x760>
    875e:	6225      	str	r5, [r4, #32]
    8760:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    8762:	4601      	mov	r1, r0
    8764:	4610      	mov	r0, r2
    8766:	f7f9 fae7 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    876a:	62e0      	str	r0, [r4, #44]	; 0x2c
    876c:	4630      	mov	r0, r6
    876e:	f000 f8af 	bl	88d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8d0>
    8772:	9008      	str	r0, [sp, #32]
    8774:	2001      	movs	r0, #1
    8776:	f004 fb68 	bl	ce4a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x32>
    877a:	4604      	mov	r4, r0
    877c:	2001      	movs	r0, #1
    877e:	f005 f9ef 	bl	db60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8782:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8786:	4401      	add	r1, r0
    8788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    878c:	fbb1 f0f0 	udiv	r0, r1, r0
    8790:	4404      	add	r4, r0
    8792:	4651      	mov	r1, sl
    8794:	4630      	mov	r0, r6
    8796:	34f1      	adds	r4, #241	; 0xf1
    8798:	f000 f8b8 	bl	890c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90c>
    879c:	491d      	ldr	r1, [pc, #116]	; (8814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x814>)
    879e:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    87a2:	6892      	ldr	r2, [r2, #8]
    87a4:	4282      	cmp	r2, r0
    87a6:	d800      	bhi.n	87aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7aa>
    87a8:	4610      	mov	r0, r2
    87aa:	6288      	str	r0, [r1, #40]	; 0x28
    87ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    87ae:	b102      	cbz	r2, 87b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b2>
    87b0:	610e      	str	r6, [r1, #16]
    87b2:	4688      	mov	r8, r1
    87b4:	614e      	str	r6, [r1, #20]
    87b6:	f1bb 0f00 	cmp.w	fp, #0
    87ba:	d002      	beq.n	87c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c2>
    87bc:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    87c0:	e001      	b.n	87c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c6>
    87c2:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    87c6:	f04f 0a01 	mov.w	sl, #1
    87ca:	f887 a00b 	strb.w	sl, [r7, #11]
    87ce:	f004 fbaf 	bl	cf30 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x118>
    87d2:	8138      	strh	r0, [r7, #8]
    87d4:	4630      	mov	r0, r6
    87d6:	f000 f821 	bl	881c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x81c>
    87da:	72b8      	strb	r0, [r7, #10]
    87dc:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    87e0:	6078      	str	r0, [r7, #4]
    87e2:	f1b9 0f00 	cmp.w	r9, #0
    87e6:	d008      	beq.n	87fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fa>
    87e8:	f887 a000 	strb.w	sl, [r7]
    87ec:	490a      	ldr	r1, [pc, #40]	; (8818 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x818>)
    87ee:	9802      	ldr	r0, [sp, #8]
    87f0:	f000 f88c 	bl	890c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90c>
    87f4:	1b00      	subs	r0, r0, r4
    87f6:	60f8      	str	r0, [r7, #12]
    87f8:	e001      	b.n	87fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fe>
    87fa:	703d      	strb	r5, [r7, #0]
    87fc:	60fe      	str	r6, [r7, #12]
    87fe:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    8802:	42a0      	cmp	r0, r4
    8804:	d303      	bcc.n	880e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80e>
    8806:	2001      	movs	r0, #1
    8808:	b00f      	add	sp, #60	; 0x3c
    880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    880e:	2000      	movs	r0, #0
    8810:	e7fa      	b.n	8808 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x808>
    8812:	0000      	.short	0x0000
    8814:	20000da8 	.word	0x20000da8
    8818:	07a12000 	.word	0x07a12000
    881c:	4a09      	ldr	r2, [pc, #36]	; (8844 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x844>)
    881e:	b510      	push	{r4, lr}
    8820:	7811      	ldrb	r1, [r2, #0]
    8822:	2904      	cmp	r1, #4
    8824:	d10c      	bne.n	8840 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x840>
    8826:	6851      	ldr	r1, [r2, #4]
    8828:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    882a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    882e:	004c      	lsls	r4, r1, #1
    8830:	4601      	mov	r1, r0
    8832:	4610      	mov	r0, r2
    8834:	f7f9 fab2 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8838:	42a0      	cmp	r0, r4
    883a:	d201      	bcs.n	8840 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x840>
    883c:	2003      	movs	r0, #3
    883e:	bd10      	pop	{r4, pc}
    8840:	2002      	movs	r0, #2
    8842:	bd10      	pop	{r4, pc}
    8844:	20000da8 	.word	0x20000da8
    8848:	b570      	push	{r4, r5, r6, lr}
    884a:	4d13      	ldr	r5, [pc, #76]	; (8898 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x898>)
    884c:	7f28      	ldrb	r0, [r5, #28]
    884e:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    8852:	2800      	cmp	r0, #0
    8854:	7828      	ldrb	r0, [r5, #0]
    8856:	d00f      	beq.n	8878 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x878>
    8858:	2805      	cmp	r0, #5
    885a:	d004      	beq.n	8866 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x866>
    885c:	f240 318f 	movw	r1, #911	; 0x38f
    8860:	2035      	movs	r0, #53	; 0x35
    8862:	f7fb fe71 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8866:	4620      	mov	r0, r4
    8868:	f004 faea 	bl	ce40 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    886c:	b178      	cbz	r0, 888e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88e>
    886e:	4620      	mov	r0, r4
    8870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8874:	f000 bff0 	b.w	9858 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    8878:	2805      	cmp	r0, #5
    887a:	d108      	bne.n	888e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88e>
    887c:	4620      	mov	r0, r4
    887e:	f004 fadf 	bl	ce40 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    8882:	b920      	cbnz	r0, 888e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88e>
    8884:	69a8      	ldr	r0, [r5, #24]
    8886:	f500 7084 	add.w	r0, r0, #264	; 0x108
    888a:	f001 f827 	bl	98dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    888e:	4620      	mov	r0, r4
    8890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8894:	f001 b822 	b.w	98dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    8898:	20000da8 	.word	0x20000da8
    889c:	b510      	push	{r4, lr}
    889e:	f7fd ffd1 	bl	6844 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    88a2:	490a      	ldr	r1, [pc, #40]	; (88cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8cc>)
    88a4:	2000      	movs	r0, #0
    88a6:	70c8      	strb	r0, [r1, #3]
    88a8:	7708      	strb	r0, [r1, #28]
    88aa:	6188      	str	r0, [r1, #24]
    88ac:	7008      	strb	r0, [r1, #0]
    88ae:	f7fd ff35 	bl	671c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    88b2:	4604      	mov	r4, r0
    88b4:	7800      	ldrb	r0, [r0, #0]
    88b6:	f7f9 fffb 	bl	28b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    88ba:	b110      	cbz	r0, 88c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c2>
    88bc:	2020      	movs	r0, #32
    88be:	7020      	strb	r0, [r4, #0]
    88c0:	bd10      	pop	{r4, pc}
    88c2:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    88c6:	2035      	movs	r0, #53	; 0x35
    88c8:	f7fb fe3e 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88cc:	20000da8 	.word	0x20000da8
    88d0:	b510      	push	{r4, lr}
    88d2:	4c04      	ldr	r4, [pc, #16]	; (88e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e4>)
    88d4:	4601      	mov	r1, r0
    88d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    88d8:	f7f9 fa60 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    88dc:	6861      	ldr	r1, [r4, #4]
    88de:	fbb0 f0f1 	udiv	r0, r0, r1
    88e2:	bd10      	pop	{r4, pc}
    88e4:	20000da8 	.word	0x20000da8
    88e8:	b510      	push	{r4, lr}
    88ea:	4c07      	ldr	r4, [pc, #28]	; (8908 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x908>)
    88ec:	4601      	mov	r1, r0
    88ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    88f0:	f7f9 fa54 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    88f4:	6861      	ldr	r1, [r4, #4]
    88f6:	fbb0 f2f1 	udiv	r2, r0, r1
    88fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    88fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8900:	4351      	muls	r1, r2
    8902:	f7f9 ba19 	b.w	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8906:	0000      	.short	0x0000
    8908:	20000da8 	.word	0x20000da8
    890c:	b570      	push	{r4, r5, r6, lr}
    890e:	4605      	mov	r5, r0
    8910:	480d      	ldr	r0, [pc, #52]	; (8948 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x948>)
    8912:	460c      	mov	r4, r1
    8914:	7881      	ldrb	r1, [r0, #2]
    8916:	b1a9      	cbz	r1, 8944 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x944>
    8918:	4a0c      	ldr	r2, [pc, #48]	; (894c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94c>)
    891a:	6a01      	ldr	r1, [r0, #32]
    891c:	4291      	cmp	r1, r2
    891e:	d211      	bcs.n	8944 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x944>
    8920:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8922:	f7f9 fa09 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8926:	4606      	mov	r6, r0
    8928:	4621      	mov	r1, r4
    892a:	4628      	mov	r0, r5
    892c:	f7f9 fa04 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8930:	4601      	mov	r1, r0
    8932:	4630      	mov	r0, r6
    8934:	f7f9 fa32 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8938:	2800      	cmp	r0, #0
    893a:	dd03      	ble.n	8944 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x944>
    893c:	1a20      	subs	r0, r4, r0
    893e:	d500      	bpl.n	8942 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x942>
    8940:	2000      	movs	r0, #0
    8942:	bd70      	pop	{r4, r5, r6, pc}
    8944:	4620      	mov	r0, r4
    8946:	bd70      	pop	{r4, r5, r6, pc}
    8948:	20000da8 	.word	0x20000da8
    894c:	07a12000 	.word	0x07a12000

00008950 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    8950:	b570      	push	{r4, r5, r6, lr}
    8952:	4605      	mov	r5, r0
    8954:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    8958:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    895c:	b1c9      	cbz	r1, 8992 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    895e:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    8962:	1a0c      	subs	r4, r1, r0
    8964:	f1b4 0404 	subs.w	r4, r4, #4
    8968:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    896c:	b140      	cbz	r0, 8980 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    896e:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    8972:	2300      	movs	r3, #0
    8974:	2109      	movs	r1, #9
    8976:	f105 0078 	add.w	r0, r5, #120	; 0x78
    897a:	f003 fd2e 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    897e:	b160      	cbz	r0, 899a <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    8980:	4628      	mov	r0, r5
    8982:	f004 fbff 	bl	d184 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    8986:	b138      	cbz	r0, 8998 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    8988:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    898c:	1a40      	subs	r0, r0, r1
    898e:	1f00      	subs	r0, r0, #4
    8990:	e003      	b.n	899a <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    8992:	f1c0 0402 	rsb	r4, r0, #2
    8996:	e7e7      	b.n	8968 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    8998:	4620      	mov	r0, r4
    899a:	42a0      	cmp	r0, r4
    899c:	da00      	bge.n	89a0 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    899e:	4604      	mov	r4, r0
    89a0:	2c00      	cmp	r4, #0
    89a2:	dc01      	bgt.n	89a8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    89a4:	2000      	movs	r0, #0
    89a6:	bd70      	pop	{r4, r5, r6, pc}
    89a8:	b2a0      	uxth	r0, r4
    89aa:	bd70      	pop	{r4, r5, r6, pc}

000089ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    89ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89ae:	4d36      	ldr	r5, [pc, #216]	; (8a88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    89b0:	2600      	movs	r6, #0
    89b2:	4604      	mov	r4, r0
    89b4:	6068      	str	r0, [r5, #4]
    89b6:	806e      	strh	r6, [r5, #2]
    89b8:	706e      	strb	r6, [r5, #1]
    89ba:	702e      	strb	r6, [r5, #0]
    89bc:	8800      	ldrh	r0, [r0, #0]
    89be:	f7fc facb 	bl	4f58 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    89c2:	6868      	ldr	r0, [r5, #4]
    89c4:	8800      	ldrh	r0, [r0, #0]
    89c6:	f7fc fa6f 	bl	4ea8 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    89ca:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    89ce:	6869      	ldr	r1, [r5, #4]
    89d0:	1c40      	adds	r0, r0, #1
    89d2:	b282      	uxth	r2, r0
    89d4:	f101 0078 	add.w	r0, r1, #120	; 0x78
    89d8:	f003 fe8f 	bl	c6fa <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    89dc:	b120      	cbz	r0, 89e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    89de:	f44f 71ac 	mov.w	r1, #344	; 0x158
    89e2:	2036      	movs	r0, #54	; 0x36
    89e4:	f7fb fdb0 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89e8:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    89ec:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    89f0:	4630      	mov	r0, r6
    89f2:	2924      	cmp	r1, #36	; 0x24
    89f4:	d10a      	bne.n	8a0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    89f6:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    89fa:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    89fe:	1a51      	subs	r1, r2, r1
    8a00:	b209      	sxth	r1, r1
    8a02:	2900      	cmp	r1, #0
    8a04:	db02      	blt.n	8a0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8a06:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    8a0a:	e00f      	b.n	8a2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    8a0c:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    8a10:	2924      	cmp	r1, #36	; 0x24
    8a12:	d001      	beq.n	8a18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    8a14:	2925      	cmp	r1, #37	; 0x25
    8a16:	d10c      	bne.n	8a32 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8a18:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8a1c:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8a20:	1a51      	subs	r1, r2, r1
    8a22:	b209      	sxth	r1, r1
    8a24:	2900      	cmp	r1, #0
    8a26:	db04      	blt.n	8a32 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8a28:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    8a2c:	f000 fd5a 	bl	94e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    8a30:	b318      	cbz	r0, 8a7a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    8a32:	f000 fbfd 	bl	9230 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    8a36:	2800      	cmp	r0, #0
    8a38:	d125      	bne.n	8a86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8a3a:	6868      	ldr	r0, [r5, #4]
    8a3c:	3078      	adds	r0, #120	; 0x78
    8a3e:	f004 fb16 	bl	d06e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8a42:	b120      	cbz	r0, 8a4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    8a44:	6868      	ldr	r0, [r5, #4]
    8a46:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    8a4a:	f000 faad 	bl	8fa8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    8a4e:	480f      	ldr	r0, [pc, #60]	; (8a8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    8a50:	9000      	str	r0, [sp, #0]
    8a52:	4b0f      	ldr	r3, [pc, #60]	; (8a90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    8a54:	4a0f      	ldr	r2, [pc, #60]	; (8a94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    8a56:	4621      	mov	r1, r4
    8a58:	4630      	mov	r0, r6
    8a5a:	f7fc fad9 	bl	5010 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8a5e:	6868      	ldr	r0, [r5, #4]
    8a60:	2300      	movs	r3, #0
    8a62:	2105      	movs	r1, #5
    8a64:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8a68:	3078      	adds	r0, #120	; 0x78
    8a6a:	f003 fcb6 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a6e:	2800      	cmp	r0, #0
    8a70:	d009      	beq.n	8a86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8a72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8a76:	f7fc bac5 	b.w	5004 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8a7e:	2100      	movs	r1, #0
    8a80:	4608      	mov	r0, r1
    8a82:	f000 bb81 	b.w	9188 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    8a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a88:	2000011c 	.word	0x2000011c
    8a8c:	00009189 	.word	0x00009189
    8a90:	00008bb9 	.word	0x00008bb9
    8a94:	0000945d 	.word	0x0000945d
    8a98:	4411      	add	r1, r2
    8a9a:	78c2      	ldrb	r2, [r0, #3]
    8a9c:	480c      	ldr	r0, [pc, #48]	; (8ad0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    8a9e:	1d89      	adds	r1, r1, #6
    8aa0:	b289      	uxth	r1, r1
    8aa2:	6840      	ldr	r0, [r0, #4]
    8aa4:	2a01      	cmp	r2, #1
    8aa6:	d006      	beq.n	8ab6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    8aa8:	b142      	cbz	r2, 8abc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    8aaa:	2a18      	cmp	r2, #24
    8aac:	d105      	bne.n	8aba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    8aae:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    8ab2:	b132      	cbz	r2, 8ac2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    8ab4:	e009      	b.n	8aca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8ab6:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    8aba:	4770      	bx	lr
    8abc:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    8ac0:	4770      	bx	lr
    8ac2:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    8ac6:	b902      	cbnz	r2, 8aca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8ac8:	2100      	movs	r1, #0
    8aca:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    8ace:	4770      	bx	lr
    8ad0:	2000011c 	.word	0x2000011c
    8ad4:	490b      	ldr	r1, [pc, #44]	; (8b04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    8ad6:	78c2      	ldrb	r2, [r0, #3]
    8ad8:	6849      	ldr	r1, [r1, #4]
    8ada:	2a01      	cmp	r2, #1
    8adc:	d006      	beq.n	8aec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    8ade:	b15a      	cbz	r2, 8af8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    8ae0:	2a18      	cmp	r2, #24
    8ae2:	d108      	bne.n	8af6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    8ae4:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    8ae8:	f003 bea6 	b.w	c838 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    8aec:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    8af0:	7241      	strb	r1, [r0, #9]
    8af2:	0a09      	lsrs	r1, r1, #8
    8af4:	7281      	strb	r1, [r0, #10]
    8af6:	4770      	bx	lr
    8af8:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    8afc:	7341      	strb	r1, [r0, #13]
    8afe:	0a09      	lsrs	r1, r1, #8
    8b00:	7381      	strb	r1, [r0, #14]
    8b02:	4770      	bx	lr
    8b04:	2000011c 	.word	0x2000011c
    8b08:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8b0a:	4c2a      	ldr	r4, [pc, #168]	; (8bb4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    8b0c:	2300      	movs	r3, #0
    8b0e:	4619      	mov	r1, r3
    8b10:	6860      	ldr	r0, [r4, #4]
    8b12:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8b16:	3078      	adds	r0, #120	; 0x78
    8b18:	f003 fc5f 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b1c:	2800      	cmp	r0, #0
    8b1e:	d048      	beq.n	8bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8b20:	6860      	ldr	r0, [r4, #4]
    8b22:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    8b26:	f88d 1000 	strb.w	r1, [sp]
    8b2a:	9900      	ldr	r1, [sp, #0]
    8b2c:	9100      	str	r1, [sp, #0]
    8b2e:	f89d 1000 	ldrb.w	r1, [sp]
    8b32:	2900      	cmp	r1, #0
    8b34:	d03d      	beq.n	8bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8b36:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    8b3a:	f003 fca7 	bl	c48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8b3e:	2800      	cmp	r0, #0
    8b40:	d137      	bne.n	8bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8b42:	6860      	ldr	r0, [r4, #4]
    8b44:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    8b48:	280a      	cmp	r0, #10
    8b4a:	d932      	bls.n	8bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8b4c:	4668      	mov	r0, sp
    8b4e:	f7fd faeb 	bl	6128 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    8b52:	2800      	cmp	r0, #0
    8b54:	d02d      	beq.n	8bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8b56:	6861      	ldr	r1, [r4, #4]
    8b58:	2205      	movs	r2, #5
    8b5a:	4668      	mov	r0, sp
    8b5c:	318e      	adds	r1, #142	; 0x8e
    8b5e:	f002 fb7d 	bl	b25c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8b62:	2500      	movs	r5, #0
    8b64:	b310      	cbz	r0, 8bac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    8b66:	6860      	ldr	r0, [r4, #4]
    8b68:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8b6c:	7808      	ldrb	r0, [r1, #0]
    8b6e:	b158      	cbz	r0, 8b88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    8b70:	2205      	movs	r2, #5
    8b72:	4668      	mov	r0, sp
    8b74:	1c49      	adds	r1, r1, #1
    8b76:	f002 fb71 	bl	b25c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8b7a:	2800      	cmp	r0, #0
    8b7c:	d119      	bne.n	8bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8b7e:	6860      	ldr	r0, [r4, #4]
    8b80:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8b84:	7800      	ldrb	r0, [r0, #0]
    8b86:	b940      	cbnz	r0, 8b9a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    8b88:	6860      	ldr	r0, [r4, #4]
    8b8a:	9900      	ldr	r1, [sp, #0]
    8b8c:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8b90:	f8c0 1001 	str.w	r1, [r0, #1]
    8b94:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8b98:	7141      	strb	r1, [r0, #5]
    8b9a:	6860      	ldr	r0, [r4, #4]
    8b9c:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8ba0:	7808      	ldrb	r0, [r1, #0]
    8ba2:	1c40      	adds	r0, r0, #1
    8ba4:	7008      	strb	r0, [r1, #0]
    8ba6:	2001      	movs	r0, #1
    8ba8:	f000 fd04 	bl	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8bac:	6860      	ldr	r0, [r4, #4]
    8bae:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    8bb2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8bb4:	2000011c 	.word	0x2000011c
    8bb8:	4a0c      	ldr	r2, [pc, #48]	; (8bec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    8bba:	7851      	ldrb	r1, [r2, #1]
    8bbc:	b999      	cbnz	r1, 8be6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8bbe:	4611      	mov	r1, r2
    8bc0:	2801      	cmp	r0, #1
    8bc2:	6849      	ldr	r1, [r1, #4]
    8bc4:	d008      	beq.n	8bd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    8bc6:	7890      	ldrb	r0, [r2, #2]
    8bc8:	0740      	lsls	r0, r0, #29
    8bca:	d503      	bpl.n	8bd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    8bcc:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    8bd0:	2807      	cmp	r0, #7
    8bd2:	d008      	beq.n	8be6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8bd4:	2001      	movs	r0, #1
    8bd6:	4770      	bx	lr
    8bd8:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    8bdc:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    8bde:	4288      	cmp	r0, r1
    8be0:	d801      	bhi.n	8be6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8be2:	f7fe bf4b 	b.w	7a7c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    8be6:	2000      	movs	r0, #0
    8be8:	4770      	bx	lr
    8bea:	0000      	.short	0x0000
    8bec:	2000011c 	.word	0x2000011c
    8bf0:	b538      	push	{r3, r4, r5, lr}
    8bf2:	4c87      	ldr	r4, [pc, #540]	; (8e10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    8bf4:	6860      	ldr	r0, [r4, #4]
    8bf6:	3078      	adds	r0, #120	; 0x78
    8bf8:	f004 fa39 	bl	d06e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8bfc:	2800      	cmp	r0, #0
    8bfe:	d15b      	bne.n	8cb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8c00:	6860      	ldr	r0, [r4, #4]
    8c02:	2300      	movs	r3, #0
    8c04:	2101      	movs	r1, #1
    8c06:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8c0a:	3078      	adds	r0, #120	; 0x78
    8c0c:	f003 fbe5 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c10:	2800      	cmp	r0, #0
    8c12:	d151      	bne.n	8cb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8c14:	6860      	ldr	r0, [r4, #4]
    8c16:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    8c1a:	f88d 1000 	strb.w	r1, [sp]
    8c1e:	9900      	ldr	r1, [sp, #0]
    8c20:	9100      	str	r1, [sp, #0]
    8c22:	f89d 1000 	ldrb.w	r1, [sp]
    8c26:	b109      	cbz	r1, 8c2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    8c28:	2002      	movs	r0, #2
    8c2a:	e038      	b.n	8c9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8c2c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8c30:	2300      	movs	r3, #0
    8c32:	4619      	mov	r1, r3
    8c34:	3078      	adds	r0, #120	; 0x78
    8c36:	f003 fbd0 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c3a:	b128      	cbz	r0, 8c48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8c3c:	6860      	ldr	r0, [r4, #4]
    8c3e:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8c42:	b108      	cbz	r0, 8c48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8c44:	2012      	movs	r0, #18
    8c46:	e02a      	b.n	8c9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8c48:	6860      	ldr	r0, [r4, #4]
    8c4a:	2500      	movs	r5, #0
    8c4c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8c50:	2a12      	cmp	r2, #18
    8c52:	d01d      	beq.n	8c90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    8c54:	dc04      	bgt.n	8c60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    8c56:	2a03      	cmp	r2, #3
    8c58:	d025      	beq.n	8ca6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    8c5a:	2a11      	cmp	r2, #17
    8c5c:	d104      	bne.n	8c68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    8c5e:	e019      	b.n	8c94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    8c60:	2a18      	cmp	r2, #24
    8c62:	d01b      	beq.n	8c9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    8c64:	2a23      	cmp	r2, #35	; 0x23
    8c66:	d028      	beq.n	8cba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    8c68:	2300      	movs	r3, #0
    8c6a:	2104      	movs	r1, #4
    8c6c:	3078      	adds	r0, #120	; 0x78
    8c6e:	f003 fbb4 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c72:	2800      	cmp	r0, #0
    8c74:	d120      	bne.n	8cb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8c76:	6860      	ldr	r0, [r4, #4]
    8c78:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8c7c:	2919      	cmp	r1, #25
    8c7e:	d07c      	beq.n	8d7a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    8c80:	dc22      	bgt.n	8cc8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    8c82:	2901      	cmp	r1, #1
    8c84:	d02c      	beq.n	8ce0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    8c86:	2902      	cmp	r1, #2
    8c88:	d037      	beq.n	8cfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    8c8a:	2903      	cmp	r1, #3
    8c8c:	d134      	bne.n	8cf8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    8c8e:	e022      	b.n	8cd6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    8c90:	200b      	movs	r0, #11
    8c92:	e004      	b.n	8c9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8c98:	f000 bba0 	b.w	93dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    8c9c:	2006      	movs	r0, #6
    8c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8ca2:	f000 bc87 	b.w	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8ca6:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    8caa:	7101      	strb	r1, [r0, #4]
    8cac:	2007      	movs	r0, #7
    8cae:	f000 fc81 	bl	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8cb2:	6860      	ldr	r0, [r4, #4]
    8cb4:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    8cb8:	bd38      	pop	{r3, r4, r5, pc}
    8cba:	2018      	movs	r0, #24
    8cbc:	f000 fc7a 	bl	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8cc0:	6860      	ldr	r0, [r4, #4]
    8cc2:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    8cc6:	bd38      	pop	{r3, r4, r5, pc}
    8cc8:	291d      	cmp	r1, #29
    8cca:	d018      	beq.n	8cfe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8ccc:	291e      	cmp	r1, #30
    8cce:	d016      	beq.n	8cfe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8cd0:	2921      	cmp	r1, #33	; 0x21
    8cd2:	d176      	bne.n	8dc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8cd4:	e056      	b.n	8d84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    8cd6:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    8cda:	7141      	strb	r1, [r0, #5]
    8cdc:	2007      	movs	r0, #7
    8cde:	e07e      	b.n	8dde <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    8ce0:	200c      	movs	r0, #12
    8ce2:	f000 fc67 	bl	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8ce6:	6860      	ldr	r0, [r4, #4]
    8ce8:	f820 5fba 	strh.w	r5, [r0, #186]!
    8cec:	7981      	ldrb	r1, [r0, #6]
    8cee:	f041 0101 	orr.w	r1, r1, #1
    8cf2:	7181      	strb	r1, [r0, #6]
    8cf4:	f800 5c34 	strb.w	r5, [r0, #-52]
    8cf8:	e063      	b.n	8dc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8cfa:	2013      	movs	r0, #19
    8cfc:	e037      	b.n	8d6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    8cfe:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    8d02:	f88d 2000 	strb.w	r2, [sp]
    8d06:	9a00      	ldr	r2, [sp, #0]
    8d08:	9200      	str	r2, [sp, #0]
    8d0a:	f89d 2000 	ldrb.w	r2, [sp]
    8d0e:	bbaa      	cbnz	r2, 8d7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    8d10:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    8d14:	f88d 2000 	strb.w	r2, [sp]
    8d18:	9a00      	ldr	r2, [sp, #0]
    8d1a:	9200      	str	r2, [sp, #0]
    8d1c:	f89d 2000 	ldrb.w	r2, [sp]
    8d20:	b1aa      	cbz	r2, 8d4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    8d22:	2924      	cmp	r1, #36	; 0x24
    8d24:	d011      	beq.n	8d4a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8d26:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8d2a:	2924      	cmp	r1, #36	; 0x24
    8d2c:	d00d      	beq.n	8d4a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8d2e:	2300      	movs	r3, #0
    8d30:	f500 7293 	add.w	r2, r0, #294	; 0x126
    8d34:	f500 7199 	add.w	r1, r0, #306	; 0x132
    8d38:	f003 fe3b 	bl	c9b2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8d3c:	6860      	ldr	r0, [r4, #4]
    8d3e:	211e      	movs	r1, #30
    8d40:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    8d44:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    8d48:	e003      	b.n	8d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    8d4a:	2301      	movs	r3, #1
    8d4c:	e7f0      	b.n	8d30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    8d4e:	291e      	cmp	r1, #30
    8d50:	d137      	bne.n	8dc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8d52:	6860      	ldr	r0, [r4, #4]
    8d54:	f003 fe48 	bl	c9e8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8d58:	f000 f85c 	bl	8e14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    8d5c:	6861      	ldr	r1, [r4, #4]
    8d5e:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8d62:	8bc2      	ldrh	r2, [r0, #30]
    8d64:	f821 2ffe 	strh.w	r2, [r1, #254]!
    8d68:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8d6a:	8048      	strh	r0, [r1, #2]
    8d6c:	2015      	movs	r0, #21
    8d6e:	f000 fc21 	bl	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8d72:	6860      	ldr	r0, [r4, #4]
    8d74:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    8d78:	e001      	b.n	8d7e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    8d7a:	e02f      	b.n	8ddc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    8d7c:	e021      	b.n	8dc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8d7e:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8d82:	e01e      	b.n	8dc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8d84:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8d88:	2901      	cmp	r1, #1
    8d8a:	d108      	bne.n	8d9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    8d8c:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    8d90:	f88d 1000 	strb.w	r1, [sp]
    8d94:	9900      	ldr	r1, [sp, #0]
    8d96:	9100      	str	r1, [sp, #0]
    8d98:	f89d 1000 	ldrb.w	r1, [sp]
    8d9c:	b121      	cbz	r1, 8da8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    8d9e:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8da2:	2902      	cmp	r1, #2
    8da4:	d005      	beq.n	8db2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    8da6:	e00c      	b.n	8dc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8da8:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    8dac:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    8db0:	e002      	b.n	8db8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    8db2:	f850 1f62 	ldr.w	r1, [r0, #98]!
    8db6:	6840      	ldr	r0, [r0, #4]
    8db8:	f000 fc1e 	bl	95f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    8dbc:	2018      	movs	r0, #24
    8dbe:	f000 fbf9 	bl	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8dc2:	6860      	ldr	r0, [r4, #4]
    8dc4:	3078      	adds	r0, #120	; 0x78
    8dc6:	f004 f952 	bl	d06e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8dca:	2800      	cmp	r0, #0
    8dcc:	f47f af7b 	bne.w	8cc6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    8dd0:	6860      	ldr	r0, [r4, #4]
    8dd2:	3078      	adds	r0, #120	; 0x78
    8dd4:	f004 f94b 	bl	d06e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8dd8:	b128      	cbz	r0, 8de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    8dda:	e00f      	b.n	8dfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    8ddc:	2011      	movs	r0, #17
    8dde:	f000 fbe9 	bl	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8de2:	6860      	ldr	r0, [r4, #4]
    8de4:	e7c8      	b.n	8d78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    8de6:	6860      	ldr	r0, [r4, #4]
    8de8:	2300      	movs	r3, #0
    8dea:	4619      	mov	r1, r3
    8dec:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8df0:	3078      	adds	r0, #120	; 0x78
    8df2:	f003 faf2 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8df6:	b108      	cbz	r0, 8dfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    8df8:	f000 fa44 	bl	9284 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    8dfc:	6860      	ldr	r0, [r4, #4]
    8dfe:	3078      	adds	r0, #120	; 0x78
    8e00:	f004 f935 	bl	d06e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8e04:	2800      	cmp	r0, #0
    8e06:	d1e1      	bne.n	8dcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    8e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e0c:	f7ff be7c 	b.w	8b08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    8e10:	2000011c 	.word	0x2000011c
    8e14:	480a      	ldr	r0, [pc, #40]	; (8e40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    8e16:	b510      	push	{r4, lr}
    8e18:	6841      	ldr	r1, [r0, #4]
    8e1a:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    8e1e:	2801      	cmp	r0, #1
    8e20:	d009      	beq.n	8e36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    8e22:	8808      	ldrh	r0, [r1, #0]
    8e24:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    8e28:	312c      	adds	r1, #44	; 0x2c
    8e2a:	f003 fd9e 	bl	c96a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e32:	f7fd baad 	b.w	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8e36:	2002      	movs	r0, #2
    8e38:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    8e3c:	bd10      	pop	{r4, pc}
    8e3e:	0000      	.short	0x0000
    8e40:	2000011c 	.word	0x2000011c
    8e44:	b570      	push	{r4, r5, r6, lr}
    8e46:	4c22      	ldr	r4, [pc, #136]	; (8ed0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    8e48:	f04f 0500 	mov.w	r5, #0
    8e4c:	8861      	ldrh	r1, [r4, #2]
    8e4e:	0748      	lsls	r0, r1, #29
    8e50:	d510      	bpl.n	8e74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    8e52:	6860      	ldr	r0, [r4, #4]
    8e54:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8e58:	2a03      	cmp	r2, #3
    8e5a:	d004      	beq.n	8e66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    8e5c:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8e60:	2a07      	cmp	r2, #7
    8e62:	d107      	bne.n	8e74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    8e64:	e002      	b.n	8e6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    8e66:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    8e6a:	e026      	b.n	8eba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    8e6c:	2201      	movs	r2, #1
    8e6e:	7022      	strb	r2, [r4, #0]
    8e70:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    8e74:	0788      	lsls	r0, r1, #30
    8e76:	d508      	bpl.n	8e8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    8e78:	68a0      	ldr	r0, [r4, #8]
    8e7a:	78c0      	ldrb	r0, [r0, #3]
    8e7c:	2819      	cmp	r0, #25
    8e7e:	d21a      	bcs.n	8eb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    8e80:	4914      	ldr	r1, [pc, #80]	; (8ed4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    8e82:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8e86:	b1b0      	cbz	r0, 8eb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    8e88:	4780      	blx	r0
    8e8a:	f000 f867 	bl	8f5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    8e8e:	f000 f823 	bl	8ed8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    8e92:	4606      	mov	r6, r0
    8e94:	7860      	ldrb	r0, [r4, #1]
    8e96:	0700      	lsls	r0, r0, #28
    8e98:	d515      	bpl.n	8ec6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    8e9a:	6860      	ldr	r0, [r4, #4]
    8e9c:	2300      	movs	r3, #0
    8e9e:	2105      	movs	r1, #5
    8ea0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8ea4:	3078      	adds	r0, #120	; 0x78
    8ea6:	f003 fa98 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8eaa:	b148      	cbz	r0, 8ec0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    8eac:	6860      	ldr	r0, [r4, #4]
    8eae:	2608      	movs	r6, #8
    8eb0:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    8eb4:	e007      	b.n	8ec6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    8eb6:	f240 61b1 	movw	r1, #1713	; 0x6b1
    8eba:	2036      	movs	r0, #54	; 0x36
    8ebc:	f7fb fb44 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ec0:	2000      	movs	r0, #0
    8ec2:	f7fc f97d 	bl	51c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    8ec6:	6860      	ldr	r0, [r4, #4]
    8ec8:	f004 f901 	bl	d0ce <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    8ecc:	4630      	mov	r0, r6
    8ece:	bd70      	pop	{r4, r5, r6, pc}
    8ed0:	2000011c 	.word	0x2000011c
    8ed4:	20000190 	.word	0x20000190
    8ed8:	b570      	push	{r4, r5, r6, lr}
    8eda:	4c1e      	ldr	r4, [pc, #120]	; (8f54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    8edc:	2000      	movs	r0, #0
    8ede:	78a1      	ldrb	r1, [r4, #2]
    8ee0:	07c9      	lsls	r1, r1, #31
    8ee2:	d01b      	beq.n	8f1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    8ee4:	68e0      	ldr	r0, [r4, #12]
    8ee6:	2300      	movs	r3, #0
    8ee8:	2105      	movs	r1, #5
    8eea:	78c5      	ldrb	r5, [r0, #3]
    8eec:	6860      	ldr	r0, [r4, #4]
    8eee:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8ef2:	3078      	adds	r0, #120	; 0x78
    8ef4:	f003 fa71 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ef8:	b188      	cbz	r0, 8f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8efa:	2d06      	cmp	r5, #6
    8efc:	d00f      	beq.n	8f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8efe:	dc06      	bgt.n	8f0e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    8f00:	2d02      	cmp	r5, #2
    8f02:	d00c      	beq.n	8f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f04:	2d04      	cmp	r5, #4
    8f06:	d00a      	beq.n	8f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f08:	2d05      	cmp	r5, #5
    8f0a:	d106      	bne.n	8f1a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    8f0c:	e007      	b.n	8f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f0e:	2d0b      	cmp	r5, #11
    8f10:	d005      	beq.n	8f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f12:	2d0d      	cmp	r5, #13
    8f14:	d003      	beq.n	8f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f16:	2d11      	cmp	r5, #17
    8f18:	d001      	beq.n	8f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f1a:	2008      	movs	r0, #8
    8f1c:	bd70      	pop	{r4, r5, r6, pc}
    8f1e:	68e0      	ldr	r0, [r4, #12]
    8f20:	f7fd f9b0 	bl	6284 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    8f24:	b148      	cbz	r0, 8f3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    8f26:	68e0      	ldr	r0, [r4, #12]
    8f28:	78c0      	ldrb	r0, [r0, #3]
    8f2a:	2819      	cmp	r0, #25
    8f2c:	d205      	bcs.n	8f3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    8f2e:	490a      	ldr	r1, [pc, #40]	; (8f58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    8f30:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8f34:	b108      	cbz	r0, 8f3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    8f36:	4780      	blx	r0
    8f38:	e002      	b.n	8f40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    8f3a:	2000      	movs	r0, #0
    8f3c:	f000 fb82 	bl	9644 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc98>
    8f40:	6861      	ldr	r1, [r4, #4]
    8f42:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    8f46:	1c52      	adds	r2, r2, #1
    8f48:	f143 0300 	adc.w	r3, r3, #0
    8f4c:	e9c1 2300 	strd	r2, r3, [r1]
    8f50:	bd70      	pop	{r4, r5, r6, pc}
    8f52:	0000      	.short	0x0000
    8f54:	2000011c 	.word	0x2000011c
    8f58:	2000012c 	.word	0x2000012c
    8f5c:	b510      	push	{r4, lr}
    8f5e:	4c11      	ldr	r4, [pc, #68]	; (8fa4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    8f60:	78a0      	ldrb	r0, [r4, #2]
    8f62:	0700      	lsls	r0, r0, #28
    8f64:	d517      	bpl.n	8f96 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    8f66:	6860      	ldr	r0, [r4, #4]
    8f68:	2100      	movs	r1, #0
    8f6a:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    8f6e:	f000 fc3d 	bl	97ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe40>
    8f72:	6860      	ldr	r0, [r4, #4]
    8f74:	3078      	adds	r0, #120	; 0x78
    8f76:	f004 f87a 	bl	d06e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8f7a:	b168      	cbz	r0, 8f98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    8f7c:	6860      	ldr	r0, [r4, #4]
    8f7e:	21fe      	movs	r1, #254	; 0xfe
    8f80:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    8f84:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    8f88:	2908      	cmp	r1, #8
    8f8a:	d104      	bne.n	8f96 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    8f8c:	2102      	movs	r1, #2
    8f8e:	7021      	strb	r1, [r4, #0]
    8f90:	2100      	movs	r1, #0
    8f92:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    8f96:	bd10      	pop	{r4, pc}
    8f98:	f240 61bd 	movw	r1, #1725	; 0x6bd
    8f9c:	2036      	movs	r0, #54	; 0x36
    8f9e:	f7fb fad3 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fa2:	0000      	.short	0x0000
    8fa4:	2000011c 	.word	0x2000011c
    8fa8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    8faa:	4605      	mov	r5, r0
    8fac:	4668      	mov	r0, sp
    8fae:	f7fb ffbd 	bl	4f2c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    8fb2:	b318      	cbz	r0, 8ffc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    8fb4:	2222      	movs	r2, #34	; 0x22
    8fb6:	2100      	movs	r1, #0
    8fb8:	9800      	ldr	r0, [sp, #0]
    8fba:	f002 f9db 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8fbe:	2103      	movs	r1, #3
    8fc0:	9800      	ldr	r0, [sp, #0]
    8fc2:	f003 fc1f 	bl	c804 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    8fc6:	9800      	ldr	r0, [sp, #0]
    8fc8:	7801      	ldrb	r1, [r0, #0]
    8fca:	f021 0110 	bic.w	r1, r1, #16
    8fce:	7001      	strb	r1, [r0, #0]
    8fd0:	4629      	mov	r1, r5
    8fd2:	f7fd f967 	bl	62a4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    8fd6:	2100      	movs	r1, #0
    8fd8:	4c6a      	ldr	r4, [pc, #424]	; (9184 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    8fda:	2d19      	cmp	r5, #25
    8fdc:	d270      	bcs.n	90c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    8fde:	e8df f005 	tbb	[pc, r5]
    8fe2:	1c24      	.short	0x1c24
    8fe4:	c9c94c10 	.word	0xc9c94c10
    8fe8:	c97016c2 	.word	0xc97016c2
    8fec:	c964c2c2 	.word	0xc964c2c2
    8ff0:	b6c9c9c9 	.word	0xb6c9c9c9
    8ff4:	8181c2c2 	.word	0x8181c2c2
    8ff8:	00a3c99a 	.word	0x00a3c99a
    8ffc:	f640 014f 	movw	r1, #2127	; 0x84f
    9000:	e0bd      	b.n	917e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    9002:	6860      	ldr	r0, [r4, #4]
    9004:	9900      	ldr	r1, [sp, #0]
    9006:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    900a:	7108      	strb	r0, [r1, #4]
    900c:	e0ab      	b.n	9166 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    900e:	6861      	ldr	r1, [r4, #4]
    9010:	9800      	ldr	r0, [sp, #0]
    9012:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    9016:	7101      	strb	r1, [r0, #4]
    9018:	e0a5      	b.n	9166 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    901a:	6860      	ldr	r0, [r4, #4]
    901c:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9020:	9800      	ldr	r0, [sp, #0]
    9022:	1c49      	adds	r1, r1, #1
    9024:	f003 fbce 	bl	c7c4 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    9028:	e09d      	b.n	9166 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    902a:	6860      	ldr	r0, [r4, #4]
    902c:	9d00      	ldr	r5, [sp, #0]
    902e:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    9032:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    9036:	f003 fb29 	bl	c68c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    903a:	7128      	strb	r0, [r5, #4]
    903c:	6860      	ldr	r0, [r4, #4]
    903e:	9d00      	ldr	r5, [sp, #0]
    9040:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    9044:	c803      	ldmia	r0, {r0, r1}
    9046:	f003 fb16 	bl	c676 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    904a:	7168      	strb	r0, [r5, #5]
    904c:	0a00      	lsrs	r0, r0, #8
    904e:	71a8      	strb	r0, [r5, #6]
    9050:	6860      	ldr	r0, [r4, #4]
    9052:	9d00      	ldr	r5, [sp, #0]
    9054:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    9058:	f003 f9a6 	bl	c3a8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    905c:	71e8      	strb	r0, [r5, #7]
    905e:	0a00      	lsrs	r0, r0, #8
    9060:	7228      	strb	r0, [r5, #8]
    9062:	6862      	ldr	r2, [r4, #4]
    9064:	9800      	ldr	r0, [sp, #0]
    9066:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    906a:	7241      	strb	r1, [r0, #9]
    906c:	0a09      	lsrs	r1, r1, #8
    906e:	7281      	strb	r1, [r0, #10]
    9070:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    9074:	f003 fbab 	bl	c7ce <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    9078:	e075      	b.n	9166 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    907a:	6861      	ldr	r1, [r4, #4]
    907c:	9800      	ldr	r0, [sp, #0]
    907e:	f201 115b 	addw	r1, r1, #347	; 0x15b
    9082:	f003 fbaf 	bl	c7e4 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    9086:	6861      	ldr	r1, [r4, #4]
    9088:	9800      	ldr	r0, [sp, #0]
    908a:	f201 1163 	addw	r1, r1, #355	; 0x163
    908e:	f003 fba2 	bl	c7d6 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    9092:	6861      	ldr	r1, [r4, #4]
    9094:	9800      	ldr	r0, [sp, #0]
    9096:	f201 1175 	addw	r1, r1, #373	; 0x175
    909a:	f003 fba8 	bl	c7ee <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    909e:	6861      	ldr	r1, [r4, #4]
    90a0:	9800      	ldr	r0, [sp, #0]
    90a2:	31f0      	adds	r1, #240	; 0xf0
    90a4:	f003 fb9a 	bl	c7dc <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    90a8:	e05d      	b.n	9166 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    90aa:	9800      	ldr	r0, [sp, #0]
    90ac:	220b      	movs	r2, #11
    90ae:	7102      	strb	r2, [r0, #4]
    90b0:	2259      	movs	r2, #89	; 0x59
    90b2:	7142      	strb	r2, [r0, #5]
    90b4:	7181      	strb	r1, [r0, #6]
    90b6:	21fe      	movs	r1, #254	; 0xfe
    90b8:	71c1      	strb	r1, [r0, #7]
    90ba:	2112      	movs	r1, #18
    90bc:	7201      	strb	r1, [r0, #8]
    90be:	e052      	b.n	9166 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    90c0:	e058      	b.n	9174 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    90c2:	9101      	str	r1, [sp, #4]
    90c4:	9102      	str	r1, [sp, #8]
    90c6:	f000 fe0f 	bl	9ce8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    90ca:	f644 112f 	movw	r1, #18735	; 0x492f
    90ce:	4008      	ands	r0, r1
    90d0:	f88d 0004 	strb.w	r0, [sp, #4]
    90d4:	0a00      	lsrs	r0, r0, #8
    90d6:	f88d 0005 	strb.w	r0, [sp, #5]
    90da:	a901      	add	r1, sp, #4
    90dc:	9800      	ldr	r0, [sp, #0]
    90de:	f003 fb8c 	bl	c7fa <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    90e2:	e040      	b.n	9166 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    90e4:	6860      	ldr	r0, [r4, #4]
    90e6:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    90ea:	9800      	ldr	r0, [sp, #0]
    90ec:	f003 fb9c 	bl	c828 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    90f0:	6860      	ldr	r0, [r4, #4]
    90f2:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    90f6:	9800      	ldr	r0, [sp, #0]
    90f8:	f003 fb9a 	bl	c830 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    90fc:	6860      	ldr	r0, [r4, #4]
    90fe:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9102:	9800      	ldr	r0, [sp, #0]
    9104:	f003 fb88 	bl	c818 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9108:	6860      	ldr	r0, [r4, #4]
    910a:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    910e:	9800      	ldr	r0, [sp, #0]
    9110:	f003 fb86 	bl	c820 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9114:	e027      	b.n	9166 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9116:	6861      	ldr	r1, [r4, #4]
    9118:	9800      	ldr	r0, [sp, #0]
    911a:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    911e:	7102      	strb	r2, [r0, #4]
    9120:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    9124:	7141      	strb	r1, [r0, #5]
    9126:	e01e      	b.n	9166 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9128:	6860      	ldr	r0, [r4, #4]
    912a:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    912e:	f003 f9f8 	bl	c522 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    9132:	4601      	mov	r1, r0
    9134:	9800      	ldr	r0, [sp, #0]
    9136:	f003 fb83 	bl	c840 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    913a:	6860      	ldr	r0, [r4, #4]
    913c:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    9140:	f003 f9ef 	bl	c522 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    9144:	4601      	mov	r1, r0
    9146:	9800      	ldr	r0, [sp, #0]
    9148:	f003 fb64 	bl	c814 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    914c:	e00b      	b.n	9166 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    914e:	6860      	ldr	r0, [r4, #4]
    9150:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    9154:	9800      	ldr	r0, [sp, #0]
    9156:	f003 fb31 	bl	c7bc <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    915a:	6860      	ldr	r0, [r4, #4]
    915c:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    9160:	9800      	ldr	r0, [sp, #0]
    9162:	f003 fb2d 	bl	c7c0 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    9166:	f7fb febb 	bl	4ee0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    916a:	b130      	cbz	r0, 917a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    916c:	9800      	ldr	r0, [sp, #0]
    916e:	f7ff fcb1 	bl	8ad4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    9172:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9174:	f640 01db 	movw	r1, #2267	; 0x8db
    9178:	e001      	b.n	917e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    917a:	f640 01e1 	movw	r1, #2273	; 0x8e1
    917e:	2036      	movs	r0, #54	; 0x36
    9180:	f7fb f9e2 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9184:	2000011c 	.word	0x2000011c
    9188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    918c:	4c27      	ldr	r4, [pc, #156]	; (922c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    918e:	4680      	mov	r8, r0
    9190:	460d      	mov	r5, r1
    9192:	8860      	ldrh	r0, [r4, #2]
    9194:	f04f 0600 	mov.w	r6, #0
    9198:	05c1      	lsls	r1, r0, #23
    919a:	4620      	mov	r0, r4
    919c:	6840      	ldr	r0, [r0, #4]
    919e:	d502      	bpl.n	91a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    91a0:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    91a4:	e004      	b.n	91b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    91a6:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    91aa:	1c49      	adds	r1, r1, #1
    91ac:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    91b0:	f003 ffe8 	bl	d184 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    91b4:	2701      	movs	r7, #1
    91b6:	b1e0      	cbz	r0, 91f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    91b8:	8860      	ldrh	r0, [r4, #2]
    91ba:	0500      	lsls	r0, r0, #20
    91bc:	d506      	bpl.n	91cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    91be:	6860      	ldr	r0, [r4, #4]
    91c0:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    91c4:	b111      	cbz	r1, 91cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    91c6:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    91ca:	e012      	b.n	91f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    91cc:	6860      	ldr	r0, [r4, #4]
    91ce:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    91d2:	1c49      	adds	r1, r1, #1
    91d4:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    91d8:	f003 ff6a 	bl	d0b0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    91dc:	6860      	ldr	r0, [r4, #4]
    91de:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    91e2:	4291      	cmp	r1, r2
    91e4:	d305      	bcc.n	91f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    91e6:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    91ea:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    91ee:	f7fd f8cf 	bl	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    91f2:	8860      	ldrh	r0, [r4, #2]
    91f4:	f410 7f40 	tst.w	r0, #768	; 0x300
    91f8:	d008      	beq.n	920c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    91fa:	6860      	ldr	r0, [r4, #4]
    91fc:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9200:	b921      	cbnz	r1, 920c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    9202:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    9206:	2101      	movs	r1, #1
    9208:	f7fe fc5a 	bl	7ac0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    920c:	ea58 0005 	orrs.w	r0, r8, r5
    9210:	d104      	bne.n	921c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    9212:	f7ff fe17 	bl	8e44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    9216:	4605      	mov	r5, r0
    9218:	f7ff fcea 	bl	8bf0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    921c:	4629      	mov	r1, r5
    921e:	4640      	mov	r0, r8
    9220:	f000 fa48 	bl	96b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd08>
    9224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9228:	f7fb be44 	b.w	4eb4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    922c:	2000011c 	.word	0x2000011c
    9230:	4813      	ldr	r0, [pc, #76]	; (9280 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    9232:	6840      	ldr	r0, [r0, #4]
    9234:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    9238:	b129      	cbz	r1, 9246 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    923a:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    923e:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    9242:	4291      	cmp	r1, r2
    9244:	d215      	bcs.n	9272 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9246:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    924a:	b129      	cbz	r1, 9258 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    924c:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    9250:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    9254:	4291      	cmp	r1, r2
    9256:	d20c      	bcs.n	9272 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9258:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    925c:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    9260:	428a      	cmp	r2, r1
    9262:	d206      	bcs.n	9272 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9264:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    9268:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    926c:	b11a      	cbz	r2, 9276 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    926e:	4288      	cmp	r0, r1
    9270:	d303      	bcc.n	927a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    9272:	2001      	movs	r0, #1
    9274:	4770      	bx	lr
    9276:	2806      	cmp	r0, #6
    9278:	d2fb      	bcs.n	9272 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    927a:	2000      	movs	r0, #0
    927c:	4770      	bx	lr
    927e:	0000      	.short	0x0000
    9280:	2000011c 	.word	0x2000011c
    9284:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9286:	4c54      	ldr	r4, [pc, #336]	; (93d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    9288:	6860      	ldr	r0, [r4, #4]
    928a:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    928e:	f88d 1000 	strb.w	r1, [sp]
    9292:	9900      	ldr	r1, [sp, #0]
    9294:	9100      	str	r1, [sp, #0]
    9296:	f89d 1000 	ldrb.w	r1, [sp]
    929a:	b129      	cbz	r1, 92a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    929c:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    92a0:	f003 f8f4 	bl	c48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    92a4:	2800      	cmp	r0, #0
    92a6:	d00a      	beq.n	92be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    92a8:	6860      	ldr	r0, [r4, #4]
    92aa:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    92ae:	b181      	cbz	r1, 92d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    92b0:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    92b4:	b149      	cbz	r1, 92ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    92b6:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    92ba:	b108      	cbz	r0, 92c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    92bc:	200a      	movs	r0, #10
    92be:	e087      	b.n	93d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    92c0:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    92c4:	2036      	movs	r0, #54	; 0x36
    92c6:	f7fb f93f 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92ca:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    92ce:	f000 b885 	b.w	93dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    92d2:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    92d6:	b109      	cbz	r1, 92dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    92d8:	2008      	movs	r0, #8
    92da:	e079      	b.n	93d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    92dc:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    92e0:	2500      	movs	r5, #0
    92e2:	b181      	cbz	r1, 9306 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    92e4:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    92e8:	0780      	lsls	r0, r0, #30
    92ea:	d10b      	bne.n	9304 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    92ec:	200c      	movs	r0, #12
    92ee:	f000 f961 	bl	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    92f2:	6860      	ldr	r0, [r4, #4]
    92f4:	2101      	movs	r1, #1
    92f6:	f820 5fb4 	strh.w	r5, [r0, #180]!
    92fa:	7101      	strb	r1, [r0, #4]
    92fc:	7b01      	ldrb	r1, [r0, #12]
    92fe:	f041 0101 	orr.w	r1, r1, #1
    9302:	7301      	strb	r1, [r0, #12]
    9304:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9306:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    930a:	f88d 1004 	strb.w	r1, [sp, #4]
    930e:	9901      	ldr	r1, [sp, #4]
    9310:	9101      	str	r1, [sp, #4]
    9312:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9316:	b141      	cbz	r1, 932a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    9318:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    931c:	f88d 1000 	strb.w	r1, [sp]
    9320:	9900      	ldr	r1, [sp, #0]
    9322:	9100      	str	r1, [sp, #0]
    9324:	f89d 1000 	ldrb.w	r1, [sp]
    9328:	b391      	cbz	r1, 9390 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    932a:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    932e:	2901      	cmp	r1, #1
    9330:	d1e8      	bne.n	9304 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9332:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    9336:	f88d 1000 	strb.w	r1, [sp]
    933a:	9900      	ldr	r1, [sp, #0]
    933c:	9100      	str	r1, [sp, #0]
    933e:	f89d 1000 	ldrb.w	r1, [sp]
    9342:	2900      	cmp	r1, #0
    9344:	d1de      	bne.n	9304 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9346:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    934a:	f003 f89f 	bl	c48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    934e:	2800      	cmp	r0, #0
    9350:	d1d8      	bne.n	9304 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9352:	6860      	ldr	r0, [r4, #4]
    9354:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    9358:	f003 fe91 	bl	d07e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    935c:	4605      	mov	r5, r0
    935e:	6860      	ldr	r0, [r4, #4]
    9360:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9364:	f003 fe8b 	bl	d07e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9368:	4606      	mov	r6, r0
    936a:	6860      	ldr	r0, [r4, #4]
    936c:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    9370:	4628      	mov	r0, r5
    9372:	f003 fe8f 	bl	d094 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    9376:	b350      	cbz	r0, 93ce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    9378:	6860      	ldr	r0, [r4, #4]
    937a:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    937e:	4630      	mov	r0, r6
    9380:	f003 fe88 	bl	d094 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    9384:	b318      	cbz	r0, 93ce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    9386:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    938a:	2000      	movs	r0, #0
    938c:	f000 b8ee 	b.w	956c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9390:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9394:	2924      	cmp	r1, #36	; 0x24
    9396:	d018      	beq.n	93ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    9398:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    939c:	2924      	cmp	r1, #36	; 0x24
    939e:	d014      	beq.n	93ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    93a0:	f05f 0300 	movs.w	r3, #0
    93a4:	f500 7293 	add.w	r2, r0, #294	; 0x126
    93a8:	f500 7199 	add.w	r1, r0, #306	; 0x132
    93ac:	f003 fb01 	bl	c9b2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    93b0:	6860      	ldr	r0, [r4, #4]
    93b2:	4602      	mov	r2, r0
    93b4:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    93b8:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    93bc:	8bc8      	ldrh	r0, [r1, #30]
    93be:	f822 0ffe 	strh.w	r0, [r2, #254]!
    93c2:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    93c4:	8050      	strh	r0, [r2, #2]
    93c6:	2014      	movs	r0, #20
    93c8:	e002      	b.n	93d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    93ca:	2301      	movs	r3, #1
    93cc:	e7ea      	b.n	93a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    93ce:	2016      	movs	r0, #22
    93d0:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    93d4:	f000 b8ee 	b.w	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    93d8:	2000011c 	.word	0x2000011c
    93dc:	b510      	push	{r4, lr}
    93de:	4c1e      	ldr	r4, [pc, #120]	; (9458 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    93e0:	6862      	ldr	r2, [r4, #4]
    93e2:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    93e6:	2808      	cmp	r0, #8
    93e8:	d20d      	bcs.n	9406 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    93ea:	f1c0 0108 	rsb	r1, r0, #8
    93ee:	4410      	add	r0, r2
    93f0:	b2c9      	uxtb	r1, r1
    93f2:	f200 1075 	addw	r0, r0, #373	; 0x175
    93f6:	f7fb f905 	bl	4604 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    93fa:	6861      	ldr	r1, [r4, #4]
    93fc:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    9400:	4410      	add	r0, r2
    9402:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    9406:	6862      	ldr	r2, [r4, #4]
    9408:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    940c:	3808      	subs	r0, #8
    940e:	2804      	cmp	r0, #4
    9410:	d20c      	bcs.n	942c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    9412:	f1c0 0104 	rsb	r1, r0, #4
    9416:	4410      	add	r0, r2
    9418:	b2c9      	uxtb	r1, r1
    941a:	30f0      	adds	r0, #240	; 0xf0
    941c:	f7fb f8f2 	bl	4604 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9420:	6861      	ldr	r1, [r4, #4]
    9422:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    9426:	4410      	add	r0, r2
    9428:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    942c:	6860      	ldr	r0, [r4, #4]
    942e:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    9432:	290c      	cmp	r1, #12
    9434:	d30e      	bcc.n	9454 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    9436:	d005      	beq.n	9444 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    9438:	f640 1131 	movw	r1, #2353	; 0x931
    943c:	f04f 0036 	mov.w	r0, #54	; 0x36
    9440:	f7fb f882 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9444:	2100      	movs	r1, #0
    9446:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    944a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    944e:	2003      	movs	r0, #3
    9450:	f000 b8b0 	b.w	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9454:	bd10      	pop	{r4, pc}
    9456:	0000      	.short	0x0000
    9458:	2000011c 	.word	0x2000011c
    945c:	b570      	push	{r4, r5, r6, lr}
    945e:	4b20      	ldr	r3, [pc, #128]	; (94e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    9460:	4602      	mov	r2, r0
    9462:	460c      	mov	r4, r1
    9464:	8858      	ldrh	r0, [r3, #2]
    9466:	4310      	orrs	r0, r2
    9468:	8058      	strh	r0, [r3, #2]
    946a:	4618      	mov	r0, r3
    946c:	0791      	lsls	r1, r2, #30
    946e:	6840      	ldr	r0, [r0, #4]
    9470:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    9474:	d507      	bpl.n	9486 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    9476:	b121      	cbz	r1, 9482 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    9478:	f640 21c5 	movw	r1, #2757	; 0xac5
    947c:	2036      	movs	r0, #54	; 0x36
    947e:	f7fb f863 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9482:	609c      	str	r4, [r3, #8]
    9484:	e003      	b.n	948e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    9486:	b101      	cbz	r1, 948a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    9488:	60dc      	str	r4, [r3, #12]
    948a:	0791      	lsls	r1, r2, #30
    948c:	d515      	bpl.n	94ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    948e:	78e1      	ldrb	r1, [r4, #3]
    9490:	2906      	cmp	r1, #6
    9492:	d002      	beq.n	949a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    9494:	290b      	cmp	r1, #11
    9496:	d110      	bne.n	94ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9498:	e008      	b.n	94ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    949a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    949e:	2918      	cmp	r1, #24
    94a0:	d10b      	bne.n	94ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    94a2:	2100      	movs	r1, #0
    94a4:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    94a8:	2101      	movs	r1, #1
    94aa:	e004      	b.n	94b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    94ac:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    94b0:	2912      	cmp	r1, #18
    94b2:	d102      	bne.n	94ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    94b4:	2100      	movs	r1, #0
    94b6:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    94ba:	0691      	lsls	r1, r2, #26
    94bc:	d501      	bpl.n	94c2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    94be:	2108      	movs	r1, #8
    94c0:	7059      	strb	r1, [r3, #1]
    94c2:	0611      	lsls	r1, r2, #24
    94c4:	d50a      	bpl.n	94dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    94c6:	8a82      	ldrh	r2, [r0, #20]
    94c8:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    94cc:	4620      	mov	r0, r4
    94ce:	f7ff fae3 	bl	8a98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    94d2:	4620      	mov	r0, r4
    94d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    94d8:	f7ff bafc 	b.w	8ad4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    94dc:	bd70      	pop	{r4, r5, r6, pc}
    94de:	0000      	.short	0x0000
    94e0:	2000011c 	.word	0x2000011c
    94e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94e8:	4c1f      	ldr	r4, [pc, #124]	; (9568 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    94ea:	2501      	movs	r5, #1
    94ec:	6862      	ldr	r2, [r4, #4]
    94ee:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    94f2:	b908      	cbnz	r0, 94f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    94f4:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    94f8:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    94fc:	b909      	cbnz	r1, 9502 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    94fe:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    9502:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    9506:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    950a:	3262      	adds	r2, #98	; 0x62
    950c:	2001      	movs	r0, #1
    950e:	7290      	strb	r0, [r2, #10]
    9510:	2000      	movs	r0, #0
    9512:	f000 f82b 	bl	956c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9516:	6860      	ldr	r0, [r4, #4]
    9518:	302c      	adds	r0, #44	; 0x2c
    951a:	f003 fab9 	bl	ca90 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    951e:	4606      	mov	r6, r0
    9520:	6860      	ldr	r0, [r4, #4]
    9522:	f003 fa61 	bl	c9e8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9526:	b1c0      	cbz	r0, 955a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9528:	6860      	ldr	r0, [r4, #4]
    952a:	302c      	adds	r0, #44	; 0x2c
    952c:	f003 fab0 	bl	ca90 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9530:	6861      	ldr	r1, [r4, #4]
    9532:	4607      	mov	r7, r0
    9534:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9538:	8808      	ldrh	r0, [r1, #0]
    953a:	312c      	adds	r1, #44	; 0x2c
    953c:	f003 fa15 	bl	c96a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9540:	42be      	cmp	r6, r7
    9542:	d20a      	bcs.n	955a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9544:	f7f8 fbe8 	bl	1d18 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9548:	4601      	mov	r1, r0
    954a:	1bb8      	subs	r0, r7, r6
    954c:	2865      	cmp	r0, #101	; 0x65
    954e:	d200      	bcs.n	9552 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    9550:	2065      	movs	r0, #101	; 0x65
    9552:	f7f8 fad5 	bl	1b00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9556:	b100      	cbz	r0, 955a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9558:	2500      	movs	r5, #0
    955a:	2104      	movs	r1, #4
    955c:	6860      	ldr	r0, [r4, #4]
    955e:	f7fe faaf 	bl	7ac0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    9562:	4628      	mov	r0, r5
    9564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9568:	2000011c 	.word	0x2000011c
    956c:	b510      	push	{r4, lr}
    956e:	4c10      	ldr	r4, [pc, #64]	; (95b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    9570:	6861      	ldr	r1, [r4, #4]
    9572:	880a      	ldrh	r2, [r1, #0]
    9574:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    9578:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    957c:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    9580:	f003 fd7d 	bl	d07e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9584:	6861      	ldr	r1, [r4, #4]
    9586:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    958a:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    958e:	f003 fd76 	bl	d07e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9592:	6862      	ldr	r2, [r4, #4]
    9594:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    9598:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    959c:	2001      	movs	r0, #1
    959e:	7008      	strb	r0, [r1, #0]
    95a0:	2000      	movs	r0, #0
    95a2:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    95a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95aa:	f7fc bef1 	b.w	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    95ae:	0000      	.short	0x0000
    95b0:	2000011c 	.word	0x2000011c
    95b4:	490f      	ldr	r1, [pc, #60]	; (95f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    95b6:	280c      	cmp	r0, #12
    95b8:	6849      	ldr	r1, [r1, #4]
    95ba:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    95be:	d014      	beq.n	95ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    95c0:	2813      	cmp	r0, #19
    95c2:	d012      	beq.n	95ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    95c4:	2818      	cmp	r0, #24
    95c6:	d010      	beq.n	95ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    95c8:	2200      	movs	r2, #0
    95ca:	2811      	cmp	r0, #17
    95cc:	d00e      	beq.n	95ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    95ce:	2807      	cmp	r0, #7
    95d0:	d00b      	beq.n	95ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    95d2:	2815      	cmp	r0, #21
    95d4:	d00a      	beq.n	95ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    95d6:	2801      	cmp	r0, #1
    95d8:	d007      	beq.n	95ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    95da:	2800      	cmp	r0, #0
    95dc:	d005      	beq.n	95ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    95de:	2802      	cmp	r0, #2
    95e0:	d003      	beq.n	95ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    95e2:	f821 2fb4 	strh.w	r2, [r1, #180]!
    95e6:	2001      	movs	r0, #1
    95e8:	7108      	strb	r0, [r1, #4]
    95ea:	4770      	bx	lr
    95ec:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    95f0:	4770      	bx	lr
    95f2:	0000      	.short	0x0000
    95f4:	2000011c 	.word	0x2000011c
    95f8:	b538      	push	{r3, r4, r5, lr}
    95fa:	4c11      	ldr	r4, [pc, #68]	; (9640 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    95fc:	6862      	ldr	r2, [r4, #4]
    95fe:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    9602:	f8ad 2000 	strh.w	r2, [sp]
    9606:	f002 ffa4 	bl	c552 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    960a:	f89d 3000 	ldrb.w	r3, [sp]
    960e:	b2c2      	uxtb	r2, r0
    9610:	2100      	movs	r1, #0
    9612:	4293      	cmp	r3, r2
    9614:	d003      	beq.n	961e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    9616:	6863      	ldr	r3, [r4, #4]
    9618:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    961c:	e002      	b.n	9624 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    961e:	6862      	ldr	r2, [r4, #4]
    9620:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    9624:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9628:	f3c0 2007 	ubfx	r0, r0, #8, #8
    962c:	4282      	cmp	r2, r0
    962e:	d003      	beq.n	9638 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    9630:	6861      	ldr	r1, [r4, #4]
    9632:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    9636:	bd38      	pop	{r3, r4, r5, pc}
    9638:	6860      	ldr	r0, [r4, #4]
    963a:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    963e:	bd38      	pop	{r3, r4, r5, pc}
    9640:	2000011c 	.word	0x2000011c
    9644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9648:	4c19      	ldr	r4, [pc, #100]	; (96b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd04>)
    964a:	2600      	movs	r6, #0
    964c:	2703      	movs	r7, #3
    964e:	f8d4 c004 	ldr.w	ip, [r4, #4]
    9652:	2501      	movs	r5, #1
    9654:	b1a0      	cbz	r0, 9680 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcd4>
    9656:	68e0      	ldr	r0, [r4, #12]
    9658:	78c0      	ldrb	r0, [r0, #3]
    965a:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    965e:	fa05 f000 	lsl.w	r0, r5, r0
    9662:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    9666:	b130      	cbz	r0, 9676 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcca>
    9668:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    966c:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    9670:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    9674:	e017      	b.n	96a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcfa>
    9676:	f240 5143 	movw	r1, #1347	; 0x543
    967a:	2036      	movs	r0, #54	; 0x36
    967c:	f7fa ff64 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9680:	2300      	movs	r3, #0
    9682:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    9686:	4619      	mov	r1, r3
    9688:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    968c:	f002 fea5 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9690:	b160      	cbz	r0, 96ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd00>
    9692:	68e0      	ldr	r0, [r4, #12]
    9694:	78c1      	ldrb	r1, [r0, #3]
    9696:	6860      	ldr	r0, [r4, #4]
    9698:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    969c:	f800 7f86 	strb.w	r7, [r0, #134]!
    96a0:	8686      	strh	r6, [r0, #52]	; 0x34
    96a2:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    96a6:	2000      	movs	r0, #0
    96a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96ac:	2001      	movs	r0, #1
    96ae:	e7fb      	b.n	96a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcfc>
    96b0:	2000011c 	.word	0x2000011c
    96b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96b6:	4d4c      	ldr	r5, [pc, #304]	; (97e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe3c>)
    96b8:	4607      	mov	r7, r0
    96ba:	460e      	mov	r6, r1
    96bc:	6868      	ldr	r0, [r5, #4]
    96be:	f100 0478 	add.w	r4, r0, #120	; 0x78
    96c2:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    96c6:	f88d 0000 	strb.w	r0, [sp]
    96ca:	9800      	ldr	r0, [sp, #0]
    96cc:	9000      	str	r0, [sp, #0]
    96ce:	f89d 0000 	ldrb.w	r0, [sp]
    96d2:	b930      	cbnz	r0, 96e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd36>
    96d4:	7c22      	ldrb	r2, [r4, #16]
    96d6:	2300      	movs	r3, #0
    96d8:	2101      	movs	r1, #1
    96da:	4620      	mov	r0, r4
    96dc:	f002 fe7d 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96e0:	b110      	cbz	r0, 96e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd3c>
    96e2:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    96e4:	1c40      	adds	r0, r0, #1
    96e6:	8760      	strh	r0, [r4, #58]	; 0x3a
    96e8:	2001      	movs	r0, #1
    96ea:	213d      	movs	r1, #61	; 0x3d
    96ec:	bbf7      	cbnz	r7, 976c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc0>
    96ee:	782a      	ldrb	r2, [r5, #0]
    96f0:	2a02      	cmp	r2, #2
    96f2:	d006      	beq.n	9702 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd56>
    96f4:	2a01      	cmp	r2, #1
    96f6:	d006      	beq.n	9706 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd5a>
    96f8:	b1c6      	cbz	r6, 972c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd80>
    96fa:	06f2      	lsls	r2, r6, #27
    96fc:	d507      	bpl.n	970e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd62>
    96fe:	211e      	movs	r1, #30
    9700:	e043      	b.n	978a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    9702:	2116      	movs	r1, #22
    9704:	e041      	b.n	978a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    9706:	6869      	ldr	r1, [r5, #4]
    9708:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    970c:	e03d      	b.n	978a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    970e:	0732      	lsls	r2, r6, #28
    9710:	d43b      	bmi.n	978a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    9712:	07b1      	lsls	r1, r6, #30
    9714:	d001      	beq.n	971a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd6e>
    9716:	212a      	movs	r1, #42	; 0x2a
    9718:	e037      	b.n	978a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    971a:	06b1      	lsls	r1, r6, #26
    971c:	d404      	bmi.n	9728 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7c>
    971e:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    9722:	2036      	movs	r0, #54	; 0x36
    9724:	f7fa ff10 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9728:	2123      	movs	r1, #35	; 0x23
    972a:	e02e      	b.n	978a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    972c:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    9730:	b129      	cbz	r1, 973e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd92>
    9732:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    9734:	1c4a      	adds	r2, r1, #1
    9736:	87a2      	strh	r2, [r4, #60]	; 0x3c
    9738:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    973a:	4291      	cmp	r1, r2
    973c:	d21d      	bcs.n	977a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdce>
    973e:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    9742:	b139      	cbz	r1, 9754 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda8>
    9744:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    9748:	1c4a      	adds	r2, r1, #1
    974a:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    974e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    9750:	4291      	cmp	r1, r2
    9752:	d212      	bcs.n	977a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdce>
    9754:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    9756:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    9758:	428a      	cmp	r2, r1
    975a:	d30b      	bcc.n	9774 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc8>
    975c:	686b      	ldr	r3, [r5, #4]
    975e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    9762:	f88d 3000 	strb.w	r3, [sp]
    9766:	9b00      	ldr	r3, [sp, #0]
    9768:	9300      	str	r3, [sp, #0]
    976a:	e000      	b.n	976e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc2>
    976c:	e00d      	b.n	978a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    976e:	f89d 3000 	ldrb.w	r3, [sp]
    9772:	b913      	cbnz	r3, 977a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdce>
    9774:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    9776:	429a      	cmp	r2, r3
    9778:	d301      	bcc.n	977e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdd2>
    977a:	2122      	movs	r1, #34	; 0x22
    977c:	e005      	b.n	978a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    977e:	7c62      	ldrb	r2, [r4, #17]
    9780:	b1f2      	cbz	r2, 97c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe14>
    9782:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    9784:	428a      	cmp	r2, r1
    9786:	d304      	bcc.n	9792 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xde6>
    9788:	2108      	movs	r1, #8
    978a:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    978e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    9792:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    9796:	f88d 0000 	strb.w	r0, [sp]
    979a:	9800      	ldr	r0, [sp, #0]
    979c:	9000      	str	r0, [sp, #0]
    979e:	f89d 0000 	ldrb.w	r0, [sp]
    97a2:	b1d8      	cbz	r0, 97dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe30>
    97a4:	2000      	movs	r0, #0
    97a6:	7360      	strb	r0, [r4, #13]
    97a8:	73a0      	strb	r0, [r4, #14]
    97aa:	7460      	strb	r0, [r4, #17]
    97ac:	2102      	movs	r1, #2
    97ae:	6868      	ldr	r0, [r5, #4]
    97b0:	f7fe f986 	bl	7ac0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    97b4:	6868      	ldr	r0, [r5, #4]
    97b6:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    97ba:	2901      	cmp	r1, #1
    97bc:	d005      	beq.n	97ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    97be:	e009      	b.n	97d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    97c0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    97c2:	2906      	cmp	r1, #6
    97c4:	d3e5      	bcc.n	9792 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xde6>
    97c6:	213e      	movs	r1, #62	; 0x3e
    97c8:	e7df      	b.n	978a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    97ca:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    97ce:	7801      	ldrb	r1, [r0, #0]
    97d0:	1e49      	subs	r1, r1, #1
    97d2:	7001      	strb	r1, [r0, #0]
    97d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    97d8:	f7fc bdda 	b.w	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    97dc:	6868      	ldr	r0, [r5, #4]
    97de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    97e2:	2100      	movs	r1, #0
    97e4:	f7fe b96c 	b.w	7ac0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    97e8:	2000011c 	.word	0x2000011c
    97ec:	4a19      	ldr	r2, [pc, #100]	; (9854 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xea8>)
    97ee:	2901      	cmp	r1, #1
    97f0:	6852      	ldr	r2, [r2, #4]
    97f2:	d010      	beq.n	9816 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6a>
    97f4:	2100      	movs	r1, #0
    97f6:	b1c8      	cbz	r0, 982c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe80>
    97f8:	2801      	cmp	r0, #1
    97fa:	d022      	beq.n	9842 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe96>
    97fc:	2803      	cmp	r0, #3
    97fe:	d109      	bne.n	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe68>
    9800:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    9804:	2813      	cmp	r0, #19
    9806:	d005      	beq.n	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe68>
    9808:	2816      	cmp	r0, #22
    980a:	d003      	beq.n	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe68>
    980c:	2818      	cmp	r0, #24
    980e:	d001      	beq.n	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe68>
    9810:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    9814:	4770      	bx	lr
    9816:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    981a:	2801      	cmp	r0, #1
    981c:	d0fa      	beq.n	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe68>
    981e:	bf00      	nop
    9820:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    9824:	7801      	ldrb	r1, [r0, #0]
    9826:	1e49      	subs	r1, r1, #1
    9828:	7001      	strb	r1, [r0, #0]
    982a:	4770      	bx	lr
    982c:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    9830:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    9834:	1ac0      	subs	r0, r0, r3
    9836:	b200      	sxth	r0, r0
    9838:	2800      	cmp	r0, #0
    983a:	dbf6      	blt.n	982a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe7e>
    983c:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    9840:	4770      	bx	lr
    9842:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    9846:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    984a:	1a40      	subs	r0, r0, r1
    984c:	b200      	sxth	r0, r0
    984e:	2800      	cmp	r0, #0
    9850:	dae6      	bge.n	9820 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe74>
    9852:	4770      	bx	lr
    9854:	2000011c 	.word	0x2000011c

00009858 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    9858:	b510      	push	{r4, lr}
    985a:	6941      	ldr	r1, [r0, #20]
    985c:	b119      	cbz	r1, 9866 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    985e:	6842      	ldr	r2, [r0, #4]
    9860:	684b      	ldr	r3, [r1, #4]
    9862:	429a      	cmp	r2, r3
    9864:	d203      	bcs.n	986e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    9866:	21c1      	movs	r1, #193	; 0xc1
    9868:	2037      	movs	r0, #55	; 0x37
    986a:	f7fa fe6d 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    986e:	6902      	ldr	r2, [r0, #16]
    9870:	610a      	str	r2, [r1, #16]
    9872:	68c3      	ldr	r3, [r0, #12]
    9874:	60cb      	str	r3, [r1, #12]
    9876:	b10a      	cbz	r2, 987c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    9878:	60d1      	str	r1, [r2, #12]
    987a:	e001      	b.n	9880 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    987c:	4a06      	ldr	r2, [pc, #24]	; (9898 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    987e:	6011      	str	r1, [r2, #0]
    9880:	68ca      	ldr	r2, [r1, #12]
    9882:	b132      	cbz	r2, 9892 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    9884:	6111      	str	r1, [r2, #16]
    9886:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    988a:	4410      	add	r0, r2
    988c:	684a      	ldr	r2, [r1, #4]
    988e:	1a80      	subs	r0, r0, r2
    9890:	e000      	b.n	9894 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    9892:	2000      	movs	r0, #0
    9894:	6088      	str	r0, [r1, #8]
    9896:	bd10      	pop	{r4, pc}
    9898:	200001f4 	.word	0x200001f4

0000989c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    989c:	b510      	push	{r4, lr}
    989e:	2200      	movs	r2, #0
    98a0:	6101      	str	r1, [r0, #16]
    98a2:	b189      	cbz	r1, 98c8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    98a4:	68cb      	ldr	r3, [r1, #12]
    98a6:	60c8      	str	r0, [r1, #12]
    98a8:	60c3      	str	r3, [r0, #12]
    98aa:	b103      	cbz	r3, 98ae <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    98ac:	6118      	str	r0, [r3, #16]
    98ae:	6901      	ldr	r1, [r0, #16]
    98b0:	6082      	str	r2, [r0, #8]
    98b2:	2900      	cmp	r1, #0
    98b4:	d00f      	beq.n	98d6 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    98b6:	688b      	ldr	r3, [r1, #8]
    98b8:	b163      	cbz	r3, 98d4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    98ba:	6844      	ldr	r4, [r0, #4]
    98bc:	42a3      	cmp	r3, r4
    98be:	d207      	bcs.n	98d0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    98c0:	212a      	movs	r1, #42	; 0x2a
    98c2:	2037      	movs	r0, #55	; 0x37
    98c4:	f7fa fe40 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98c8:	4903      	ldr	r1, [pc, #12]	; (98d8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    98ca:	60c2      	str	r2, [r0, #12]
    98cc:	6008      	str	r0, [r1, #0]
    98ce:	e7ee      	b.n	98ae <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    98d0:	1b1b      	subs	r3, r3, r4
    98d2:	6083      	str	r3, [r0, #8]
    98d4:	608a      	str	r2, [r1, #8]
    98d6:	bd10      	pop	{r4, pc}
    98d8:	200001f4 	.word	0x200001f4

000098dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    98dc:	6901      	ldr	r1, [r0, #16]
    98de:	b149      	cbz	r1, 98f4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    98e0:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    98e4:	441a      	add	r2, r3
    98e6:	688b      	ldr	r3, [r1, #8]
    98e8:	441a      	add	r2, r3
    98ea:	608a      	str	r2, [r1, #8]
    98ec:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    98f0:	60d1      	str	r1, [r2, #12]
    98f2:	e002      	b.n	98fa <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    98f4:	4a06      	ldr	r2, [pc, #24]	; (9910 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    98f6:	68c1      	ldr	r1, [r0, #12]
    98f8:	6011      	str	r1, [r2, #0]
    98fa:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    98fe:	b109      	cbz	r1, 9904 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    9900:	6108      	str	r0, [r1, #16]
    9902:	4770      	bx	lr
    9904:	2800      	cmp	r0, #0
    9906:	d0fc      	beq.n	9902 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    9908:	2100      	movs	r1, #0
    990a:	6081      	str	r1, [r0, #8]
    990c:	4770      	bx	lr
    990e:	0000      	.short	0x0000
    9910:	200001f4 	.word	0x200001f4

00009914 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    9914:	b510      	push	{r4, lr}
    9916:	4604      	mov	r4, r0
    9918:	490a      	ldr	r1, [pc, #40]	; (9944 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    991a:	2000      	movs	r0, #0
    991c:	4602      	mov	r2, r0
    991e:	6809      	ldr	r1, [r1, #0]
    9920:	1e43      	subs	r3, r0, #1
    9922:	e008      	b.n	9936 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    9924:	688a      	ldr	r2, [r1, #8]
    9926:	42a2      	cmp	r2, r4
    9928:	d303      	bcc.n	9932 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    992a:	429a      	cmp	r2, r3
    992c:	d201      	bcs.n	9932 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    992e:	4613      	mov	r3, r2
    9930:	4608      	mov	r0, r1
    9932:	460a      	mov	r2, r1
    9934:	68c9      	ldr	r1, [r1, #12]
    9936:	2900      	cmp	r1, #0
    9938:	d1f4      	bne.n	9924 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    993a:	2800      	cmp	r0, #0
    993c:	d100      	bne.n	9940 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    993e:	4610      	mov	r0, r2
    9940:	bd10      	pop	{r4, pc}
    9942:	0000      	.short	0x0000
    9944:	200001f4 	.word	0x200001f4

00009948 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    9948:	4801      	ldr	r0, [pc, #4]	; (9950 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    994a:	6800      	ldr	r0, [r0, #0]
    994c:	4770      	bx	lr
    994e:	0000      	.short	0x0000
    9950:	200001f4 	.word	0x200001f4

00009954 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    9954:	4804      	ldr	r0, [pc, #16]	; (9968 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    9956:	6801      	ldr	r1, [r0, #0]
    9958:	2000      	movs	r0, #0
    995a:	e001      	b.n	9960 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    995c:	4608      	mov	r0, r1
    995e:	68c9      	ldr	r1, [r1, #12]
    9960:	2900      	cmp	r1, #0
    9962:	d1fb      	bne.n	995c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    9964:	4770      	bx	lr
    9966:	0000      	.short	0x0000
    9968:	200001f4 	.word	0x200001f4

0000996c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    996c:	4801      	ldr	r0, [pc, #4]	; (9974 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    996e:	2100      	movs	r1, #0
    9970:	6001      	str	r1, [r0, #0]
    9972:	4770      	bx	lr
    9974:	200001f4 	.word	0x200001f4

00009978 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    9978:	4903      	ldr	r1, [pc, #12]	; (9988 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    997a:	2000      	movs	r0, #0
    997c:	6809      	ldr	r1, [r1, #0]
    997e:	2900      	cmp	r1, #0
    9980:	d000      	beq.n	9984 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    9982:	200c      	movs	r0, #12
    9984:	4770      	bx	lr
    9986:	0000      	.short	0x0000
    9988:	200001f4 	.word	0x200001f4

0000998c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    998c:	4903      	ldr	r1, [pc, #12]	; (999c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    998e:	884a      	ldrh	r2, [r1, #2]
    9990:	8002      	strh	r2, [r0, #0]
    9992:	7809      	ldrb	r1, [r1, #0]
    9994:	7081      	strb	r1, [r0, #2]
    9996:	2000      	movs	r0, #0
    9998:	4770      	bx	lr
    999a:	0000      	.short	0x0000
    999c:	20000cbc 	.word	0x20000cbc

000099a0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    99a0:	7801      	ldrb	r1, [r0, #0]
    99a2:	b171      	cbz	r1, 99c2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    99a4:	7841      	ldrb	r1, [r0, #1]
    99a6:	b161      	cbz	r1, 99c2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    99a8:	8841      	ldrh	r1, [r0, #2]
    99aa:	291b      	cmp	r1, #27
    99ac:	d309      	bcc.n	99c2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    99ae:	8881      	ldrh	r1, [r0, #4]
    99b0:	291b      	cmp	r1, #27
    99b2:	d306      	bcc.n	99c2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    99b4:	4904      	ldr	r1, [pc, #16]	; (99c8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    99b6:	6802      	ldr	r2, [r0, #0]
    99b8:	600a      	str	r2, [r1, #0]
    99ba:	8880      	ldrh	r0, [r0, #4]
    99bc:	8088      	strh	r0, [r1, #4]
    99be:	2000      	movs	r0, #0
    99c0:	4770      	bx	lr
    99c2:	2012      	movs	r0, #18
    99c4:	4770      	bx	lr
    99c6:	0000      	.short	0x0000
    99c8:	20000cbc 	.word	0x20000cbc

000099cc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    99cc:	6800      	ldr	r0, [r0, #0]
    99ce:	f240 41e2 	movw	r1, #1250	; 0x4e2
    99d2:	4288      	cmp	r0, r1
    99d4:	d303      	bcc.n	99de <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    99d6:	4903      	ldr	r1, [pc, #12]	; (99e4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    99d8:	6088      	str	r0, [r1, #8]
    99da:	2000      	movs	r0, #0
    99dc:	4770      	bx	lr
    99de:	2012      	movs	r0, #18
    99e0:	4770      	bx	lr
    99e2:	0000      	.short	0x0000
    99e4:	20000cbc 	.word	0x20000cbc

000099e8 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    99e8:	b510      	push	{r4, lr}
    99ea:	b086      	sub	sp, #24
    99ec:	4604      	mov	r4, r0
    99ee:	f003 fe38 	bl	d662 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x12a>
    99f2:	2800      	cmp	r0, #0
    99f4:	d103      	bne.n	99fe <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    99f6:	f003 ff55 	bl	d8a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x36c>
    99fa:	b110      	cbz	r0, 9a02 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    99fc:	200c      	movs	r0, #12
    99fe:	b006      	add	sp, #24
    9a00:	bd10      	pop	{r4, pc}
    9a02:	2102      	movs	r1, #2
    9a04:	f104 0010 	add.w	r0, r4, #16
    9a08:	f000 f8ee 	bl	9be8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    9a0c:	78a0      	ldrb	r0, [r4, #2]
    9a0e:	f88d 0008 	strb.w	r0, [sp, #8]
    9a12:	78a0      	ldrb	r0, [r4, #2]
    9a14:	f88d 0000 	strb.w	r0, [sp]
    9a18:	7860      	ldrb	r0, [r4, #1]
    9a1a:	f88d 0003 	strb.w	r0, [sp, #3]
    9a1e:	7820      	ldrb	r0, [r4, #0]
    9a20:	f88d 0002 	strb.w	r0, [sp, #2]
    9a24:	7e20      	ldrb	r0, [r4, #24]
    9a26:	f88d 0004 	strb.w	r0, [sp, #4]
    9a2a:	78a0      	ldrb	r0, [r4, #2]
    9a2c:	07c0      	lsls	r0, r0, #31
    9a2e:	d00b      	beq.n	9a48 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    9a30:	78e0      	ldrb	r0, [r4, #3]
    9a32:	2801      	cmp	r0, #1
    9a34:	d011      	beq.n	9a5a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    9a36:	b190      	cbz	r0, 9a5e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    9a38:	f05f 0000 	movs.w	r0, #0
    9a3c:	f88d 0001 	strb.w	r0, [sp, #1]
    9a40:	68a0      	ldr	r0, [r4, #8]
    9a42:	9003      	str	r0, [sp, #12]
    9a44:	6920      	ldr	r0, [r4, #16]
    9a46:	9004      	str	r0, [sp, #16]
    9a48:	a802      	add	r0, sp, #8
    9a4a:	f7fe f9b1 	bl	7db0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    9a4e:	2800      	cmp	r0, #0
    9a50:	d1d5      	bne.n	99fe <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    9a52:	4668      	mov	r0, sp
    9a54:	f7fc ff98 	bl	6988 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    9a58:	e7d1      	b.n	99fe <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    9a5a:	2002      	movs	r0, #2
    9a5c:	e7ee      	b.n	9a3c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    9a5e:	2001      	movs	r0, #1
    9a60:	e7ec      	b.n	9a3c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

00009a64 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9a64:	4a03      	ldr	r2, [pc, #12]	; (9a74 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9a66:	e9d2 1200 	ldrd	r1, r2, [r2]
    9a6a:	6001      	str	r1, [r0, #0]
    9a6c:	6042      	str	r2, [r0, #4]
    9a6e:	2000      	movs	r0, #0
    9a70:	4770      	bx	lr
    9a72:	0000      	.short	0x0000
    9a74:	00009c3c 	.word	0x00009c3c

00009a78 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    9a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9a7c:	b086      	sub	sp, #24
    9a7e:	468a      	mov	sl, r1
    9a80:	4606      	mov	r6, r0
    9a82:	8800      	ldrh	r0, [r0, #0]
    9a84:	a901      	add	r1, sp, #4
    9a86:	f002 fc7f 	bl	c388 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9a8a:	2800      	cmp	r0, #0
    9a8c:	d139      	bne.n	9b02 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    9a8e:	9802      	ldr	r0, [sp, #8]
    9a90:	f04f 0801 	mov.w	r8, #1
    9a94:	4601      	mov	r1, r0
    9a96:	4689      	mov	r9, r1
    9a98:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    9a9c:	f88d 1000 	strb.w	r1, [sp]
    9aa0:	9900      	ldr	r1, [sp, #0]
    9aa2:	9100      	str	r1, [sp, #0]
    9aa4:	f89d 5000 	ldrb.w	r5, [sp]
    9aa8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9aac:	3078      	adds	r0, #120	; 0x78
    9aae:	2921      	cmp	r1, #33	; 0x21
    9ab0:	d100      	bne.n	9ab4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    9ab2:	b13d      	cbz	r5, 9ac4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    9ab4:	2400      	movs	r4, #0
    9ab6:	304e      	adds	r0, #78	; 0x4e
    9ab8:	2108      	movs	r1, #8
    9aba:	4607      	mov	r7, r0
    9abc:	f003 fb85 	bl	d1ca <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    9ac0:	b110      	cbz	r0, 9ac8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    9ac2:	e007      	b.n	9ad4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    9ac4:	2401      	movs	r4, #1
    9ac6:	e7f6      	b.n	9ab6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    9ac8:	210b      	movs	r1, #11
    9aca:	4638      	mov	r0, r7
    9acc:	f003 fb7d 	bl	d1ca <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    9ad0:	b900      	cbnz	r0, 9ad4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    9ad2:	b1ac      	cbz	r4, 9b00 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    9ad4:	a804      	add	r0, sp, #16
    9ad6:	9000      	str	r0, [sp, #0]
    9ad8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9adc:	ab03      	add	r3, sp, #12
    9ade:	4632      	mov	r2, r6
    9ae0:	4649      	mov	r1, r9
    9ae2:	f003 fe7f 	bl	d7e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
    9ae6:	0007      	movs	r7, r0
    9ae8:	d10b      	bne.n	9b02 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    9aea:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9aee:	9c02      	ldr	r4, [sp, #8]
    9af0:	b150      	cbz	r0, 9b08 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    9af2:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    9af6:	bf00      	nop
    9af8:	f884 8001 	strb.w	r8, [r4, #1]
    9afc:	b94d      	cbnz	r5, 9b12 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    9afe:	e006      	b.n	9b0e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    9b00:	201a      	movs	r0, #26
    9b02:	b006      	add	sp, #24
    9b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9b08:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    9b0c:	e7f4      	b.n	9af8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    9b0e:	7820      	ldrb	r0, [r4, #0]
    9b10:	b108      	cbz	r0, 9b16 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    9b12:	273a      	movs	r7, #58	; 0x3a
    9b14:	e012      	b.n	9b3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    9b16:	f884 a000 	strb.w	sl, [r4]
    9b1a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    9b1e:	70a0      	strb	r0, [r4, #2]
    9b20:	f89d 1010 	ldrb.w	r1, [sp, #16]
    9b24:	70e1      	strb	r1, [r4, #3]
    9b26:	f88d 0000 	strb.w	r0, [sp]
    9b2a:	f88d 1001 	strb.w	r1, [sp, #1]
    9b2e:	88b0      	ldrh	r0, [r6, #4]
    9b30:	f8ad 0002 	strh.w	r0, [sp, #2]
    9b34:	4669      	mov	r1, sp
    9b36:	4648      	mov	r0, r9
    9b38:	f002 fcef 	bl	c51a <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    9b3c:	2000      	movs	r0, #0
    9b3e:	7060      	strb	r0, [r4, #1]
    9b40:	4638      	mov	r0, r7
    9b42:	e7de      	b.n	9b02 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

00009b44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9b44:	b510      	push	{r4, lr}
    9b46:	f002 fb47 	bl	c1d8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9b4a:	f7fc f823 	bl	5b94 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9b4e:	f000 f8db 	bl	9d08 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    9b52:	f002 fedd 	bl	c910 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    9b56:	4810      	ldr	r0, [pc, #64]	; (9b98 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    9b58:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9b5c:	4b0f      	ldr	r3, [pc, #60]	; (9b9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    9b5e:	8281      	strh	r1, [r0, #20]
    9b60:	2100      	movs	r1, #0
    9b62:	7581      	strb	r1, [r0, #22]
    9b64:	8301      	strh	r1, [r0, #24]
    9b66:	221b      	movs	r2, #27
    9b68:	801a      	strh	r2, [r3, #0]
    9b6a:	f44f 74a4 	mov.w	r4, #328	; 0x148
    9b6e:	805c      	strh	r4, [r3, #2]
    9b70:	809a      	strh	r2, [r3, #4]
    9b72:	80dc      	strh	r4, [r3, #6]
    9b74:	7381      	strb	r1, [r0, #14]
    9b76:	73c1      	strb	r1, [r0, #15]
    9b78:	2303      	movs	r3, #3
    9b7a:	7003      	strb	r3, [r0, #0]
    9b7c:	2302      	movs	r3, #2
    9b7e:	7043      	strb	r3, [r0, #1]
    9b80:	8042      	strh	r2, [r0, #2]
    9b82:	8082      	strh	r2, [r0, #4]
    9b84:	f640 62a6 	movw	r2, #3750	; 0xea6
    9b88:	6082      	str	r2, [r0, #8]
    9b8a:	4a04      	ldr	r2, [pc, #16]	; (9b9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    9b8c:	1f92      	subs	r2, r2, #6
    9b8e:	7011      	strb	r1, [r2, #0]
    9b90:	7481      	strb	r1, [r0, #18]
    9b92:	7301      	strb	r1, [r0, #12]
    9b94:	bd10      	pop	{r4, pc}
    9b96:	0000      	.short	0x0000
    9b98:	20000cbc 	.word	0x20000cbc
    9b9c:	20000206 	.word	0x20000206
    9ba0:	4904      	ldr	r1, [pc, #16]	; (9bb4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x70>)
    9ba2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    9ba6:	4288      	cmp	r0, r1
    9ba8:	d301      	bcc.n	9bae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6a>
    9baa:	2000      	movs	r0, #0
    9bac:	4770      	bx	lr
    9bae:	2001      	movs	r0, #1
    9bb0:	4770      	bx	lr
    9bb2:	0000      	.short	0x0000
    9bb4:	0270f3cc 	.word	0x0270f3cc
    9bb8:	4904      	ldr	r1, [pc, #16]	; (9bcc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>)
    9bba:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    9bbe:	4288      	cmp	r0, r1
    9bc0:	d301      	bcc.n	9bc6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    9bc2:	2000      	movs	r0, #0
    9bc4:	4770      	bx	lr
    9bc6:	2001      	movs	r0, #1
    9bc8:	4770      	bx	lr
    9bca:	0000      	.short	0x0000
    9bcc:	009c363d 	.word	0x009c363d
    9bd0:	4904      	ldr	r1, [pc, #16]	; (9be4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa0>)
    9bd2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    9bd6:	4288      	cmp	r0, r1
    9bd8:	d301      	bcc.n	9bde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    9bda:	2000      	movs	r0, #0
    9bdc:	4770      	bx	lr
    9bde:	2001      	movs	r0, #1
    9be0:	4770      	bx	lr
    9be2:	0000      	.short	0x0000
    9be4:	009c363d 	.word	0x009c363d
    9be8:	b530      	push	{r4, r5, lr}
    9bea:	2200      	movs	r2, #0
    9bec:	4d07      	ldr	r5, [pc, #28]	; (9c0c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>)
    9bee:	e009      	b.n	9c04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc0>
    9bf0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    9bf4:	462b      	mov	r3, r5
    9bf6:	429c      	cmp	r4, r3
    9bf8:	d800      	bhi.n	9bfc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9bfa:	4623      	mov	r3, r4
    9bfc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    9c00:	1c52      	adds	r2, r2, #1
    9c02:	b2d2      	uxtb	r2, r2
    9c04:	428a      	cmp	r2, r1
    9c06:	d3f3      	bcc.n	9bf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xac>
    9c08:	bd30      	pop	{r4, r5, pc}
    9c0a:	0000      	.short	0x0000
    9c0c:	00f42400 	.word	0x00f42400
    9c10:	4a09      	ldr	r2, [pc, #36]	; (9c38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>)
    9c12:	4290      	cmp	r0, r2
    9c14:	d80b      	bhi.n	9c2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    9c16:	2901      	cmp	r1, #1
    9c18:	d002      	beq.n	9c20 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
    9c1a:	2904      	cmp	r1, #4
    9c1c:	d003      	beq.n	9c26 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    9c1e:	e008      	b.n	9c32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xee>
    9c20:	f240 7153 	movw	r1, #1875	; 0x753
    9c24:	e001      	b.n	9c2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    9c26:	f640 11c4 	movw	r1, #2500	; 0x9c4
    9c2a:	4288      	cmp	r0, r1
    9c2c:	d201      	bcs.n	9c32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xee>
    9c2e:	2000      	movs	r0, #0
    9c30:	4770      	bx	lr
    9c32:	2001      	movs	r0, #1
    9c34:	4770      	bx	lr
    9c36:	0000      	.short	0x0000
    9c38:	0270fd8f 	.word	0x0270fd8f
    9c3c:	0b12fe0b 	.word	0x0b12fe0b
    9c40:	12fe0059 	.word	0x12fe0059
    9c44:	05060708 	.word	0x05060708
    9c48:	00020304 	.word	0x00020304
    9c4c:	f0f4f8fc 	.word	0xf0f4f8fc
    9c50:	0304d8ec 	.word	0x0304d8ec
    9c54:	f4f8fc00 	.word	0xf4f8fc00
    9c58:	00d8ecf0 	.word	0x00d8ecf0

00009c5c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    9c5c:	b510      	push	{r4, lr}
    9c5e:	460c      	mov	r4, r1
    9c60:	f7fc fb90 	bl	6384 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    9c64:	4805      	ldr	r0, [pc, #20]	; (9c7c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    9c66:	6004      	str	r4, [r0, #0]
    9c68:	6840      	ldr	r0, [r0, #4]
    9c6a:	f003 febc 	bl	d9e6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    9c6e:	f003 fc61 	bl	d534 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    9c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c76:	f7fc bd4b 	b.w	6710 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>
    9c7a:	0000      	.short	0x0000
    9c7c:	20000210 	.word	0x20000210

00009c80 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    9c80:	b510      	push	{r4, lr}
    9c82:	4c07      	ldr	r4, [pc, #28]	; (9ca0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    9c84:	68a0      	ldr	r0, [r4, #8]
    9c86:	f003 feae 	bl	d9e6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    9c8a:	68e0      	ldr	r0, [r4, #12]
    9c8c:	f003 feab 	bl	d9e6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    9c90:	f002 faa2 	bl	c1d8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9c94:	f7fb ff7e 	bl	5b94 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c9c:	f7ff bf52 	b.w	9b44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    9ca0:	20000210 	.word	0x20000210

00009ca4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    9ca4:	b500      	push	{lr}
    9ca6:	4905      	ldr	r1, [pc, #20]	; (9cbc <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    9ca8:	4805      	ldr	r0, [pc, #20]	; (9cc0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    9caa:	f003 fe8f 	bl	d9cc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    9cae:	4804      	ldr	r0, [pc, #16]	; (9cc0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    9cb0:	4904      	ldr	r1, [pc, #16]	; (9cc4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    9cb2:	1d00      	adds	r0, r0, #4
    9cb4:	f85d eb04 	ldr.w	lr, [sp], #4
    9cb8:	f003 be88 	b.w	d9cc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    9cbc:	20000220 	.word	0x20000220
    9cc0:	20000214 	.word	0x20000214
    9cc4:	20000228 	.word	0x20000228
    9cc8:	b510      	push	{r4, lr}
    9cca:	f7fc fde9 	bl	68a0 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    9cce:	f7ff fe4d 	bl	996c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    9cd2:	f7fd ffb1 	bl	7c38 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    9cd6:	4803      	ldr	r0, [pc, #12]	; (9ce4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x40>)
    9cd8:	f7fc fdcc 	bl	6874 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    9cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9ce0:	f7fc bb5c 	b.w	639c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
    9ce4:	2000103d 	.word	0x2000103d

00009ce8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    9ce8:	4801      	ldr	r0, [pc, #4]	; (9cf0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    9cea:	6800      	ldr	r0, [r0, #0]
    9cec:	4770      	bx	lr
    9cee:	0000      	.short	0x0000
    9cf0:	20000230 	.word	0x20000230

00009cf4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    9cf4:	4803      	ldr	r0, [pc, #12]	; (9d04 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    9cf6:	8800      	ldrh	r0, [r0, #0]
    9cf8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9cfc:	0040      	lsls	r0, r0, #1
    9cfe:	1c40      	adds	r0, r0, #1
    9d00:	4770      	bx	lr
    9d02:	0000      	.short	0x0000
    9d04:	20000230 	.word	0x20000230

00009d08 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    9d08:	b510      	push	{r4, lr}
    9d0a:	f7fa f863 	bl	3dd4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    9d0e:	2200      	movs	r2, #0
    9d10:	4b08      	ldr	r3, [pc, #32]	; (9d34 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    9d12:	4611      	mov	r1, r2
    9d14:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    9d18:	4284      	cmp	r4, r0
    9d1a:	d303      	bcc.n	9d24 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    9d1c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    9d20:	7882      	ldrb	r2, [r0, #2]
    9d22:	e003      	b.n	9d2c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    9d24:	1c49      	adds	r1, r1, #1
    9d26:	b2c9      	uxtb	r1, r1
    9d28:	290c      	cmp	r1, #12
    9d2a:	d3f3      	bcc.n	9d14 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    9d2c:	4802      	ldr	r0, [pc, #8]	; (9d38 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    9d2e:	7002      	strb	r2, [r0, #0]
    9d30:	bd10      	pop	{r4, pc}
    9d32:	0000      	.short	0x0000
    9d34:	0000da16 	.word	0x0000da16
    9d38:	20000285 	.word	0x20000285

00009d3c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    9d3c:	4801      	ldr	r0, [pc, #4]	; (9d44 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    9d3e:	7800      	ldrb	r0, [r0, #0]
    9d40:	4770      	bx	lr
    9d42:	0000      	.short	0x0000
    9d44:	20000285 	.word	0x20000285

00009d48 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    9d48:	b570      	push	{r4, r5, r6, lr}
    9d4a:	4605      	mov	r5, r0
    9d4c:	4616      	mov	r6, r2
    9d4e:	460c      	mov	r4, r1
    9d50:	2002      	movs	r0, #2
    9d52:	f000 f9f9 	bl	a148 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    9d56:	4906      	ldr	r1, [pc, #24]	; (9d70 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    9d58:	2001      	movs	r0, #1
    9d5a:	1ef6      	subs	r6, r6, #3
    9d5c:	7008      	strb	r0, [r1, #0]
    9d5e:	4805      	ldr	r0, [pc, #20]	; (9d74 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    9d60:	6006      	str	r6, [r0, #0]
    9d62:	4804      	ldr	r0, [pc, #16]	; (9d74 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    9d64:	3808      	subs	r0, #8
    9d66:	6005      	str	r5, [r0, #0]
    9d68:	1f00      	subs	r0, r0, #4
    9d6a:	6004      	str	r4, [r0, #0]
    9d6c:	bd70      	pop	{r4, r5, r6, pc}
    9d6e:	0000      	.short	0x0000
    9d70:	20000286 	.word	0x20000286
    9d74:	4000f510 	.word	0x4000f510

00009d78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    9d78:	b510      	push	{r4, lr}
    9d7a:	4c0c      	ldr	r4, [pc, #48]	; (9dac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    9d7c:	7820      	ldrb	r0, [r4, #0]
    9d7e:	b180      	cbz	r0, 9da2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    9d80:	490b      	ldr	r1, [pc, #44]	; (9db0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    9d82:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    9d86:	6008      	str	r0, [r1, #0]
    9d88:	f000 f86a 	bl	9e60 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    9d8c:	2100      	movs	r1, #0
    9d8e:	b120      	cbz	r0, 9d9a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    9d90:	2001      	movs	r0, #1
    9d92:	7060      	strb	r0, [r4, #1]
    9d94:	4807      	ldr	r0, [pc, #28]	; (9db4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    9d96:	6800      	ldr	r0, [r0, #0]
    9d98:	e001      	b.n	9d9e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    9d9a:	7061      	strb	r1, [r4, #1]
    9d9c:	2010      	movs	r0, #16
    9d9e:	70a0      	strb	r0, [r4, #2]
    9da0:	7021      	strb	r1, [r4, #0]
    9da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9da6:	2000      	movs	r0, #0
    9da8:	f000 b9ce 	b.w	a148 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    9dac:	20000286 	.word	0x20000286
    9db0:	4001f508 	.word	0x4001f508
    9db4:	4000f400 	.word	0x4000f400

00009db8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    9db8:	b510      	push	{r4, lr}
    9dba:	2002      	movs	r0, #2
    9dbc:	f000 f9c4 	bl	a148 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    9dc0:	4904      	ldr	r1, [pc, #16]	; (9dd4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    9dc2:	2001      	movs	r0, #1
    9dc4:	7008      	strb	r0, [r1, #0]
    9dc6:	f000 f859 	bl	9e7c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    9dca:	4903      	ldr	r1, [pc, #12]	; (9dd8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    9dcc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    9dd0:	6008      	str	r0, [r1, #0]
    9dd2:	bd10      	pop	{r4, pc}
    9dd4:	20000286 	.word	0x20000286
    9dd8:	4001f504 	.word	0x4001f504

00009ddc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    9ddc:	4803      	ldr	r0, [pc, #12]	; (9dec <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    9dde:	2100      	movs	r1, #0
    9de0:	7001      	strb	r1, [r0, #0]
    9de2:	7041      	strb	r1, [r0, #1]
    9de4:	2110      	movs	r1, #16
    9de6:	7081      	strb	r1, [r0, #2]
    9de8:	4770      	bx	lr
    9dea:	0000      	.short	0x0000
    9dec:	20000286 	.word	0x20000286

00009df0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    9df0:	4807      	ldr	r0, [pc, #28]	; (9e10 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    9df2:	b510      	push	{r4, lr}
    9df4:	7801      	ldrb	r1, [r0, #0]
    9df6:	b141      	cbz	r1, 9e0a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    9df8:	f000 f832 	bl	9e60 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    9dfc:	b118      	cbz	r0, 9e06 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    9dfe:	4805      	ldr	r0, [pc, #20]	; (9e14 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    9e00:	6800      	ldr	r0, [r0, #0]
    9e02:	b2c0      	uxtb	r0, r0
    9e04:	bd10      	pop	{r4, pc}
    9e06:	2010      	movs	r0, #16
    9e08:	bd10      	pop	{r4, pc}
    9e0a:	7880      	ldrb	r0, [r0, #2]
    9e0c:	bd10      	pop	{r4, pc}
    9e0e:	0000      	.short	0x0000
    9e10:	20000286 	.word	0x20000286
    9e14:	4000f400 	.word	0x4000f400

00009e18 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    9e18:	4808      	ldr	r0, [pc, #32]	; (9e3c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    9e1a:	b510      	push	{r4, lr}
    9e1c:	7801      	ldrb	r1, [r0, #0]
    9e1e:	b159      	cbz	r1, 9e38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    9e20:	4807      	ldr	r0, [pc, #28]	; (9e40 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    9e22:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    9e26:	b128      	cbz	r0, 9e34 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    9e28:	f000 f80c 	bl	9e44 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    9e2c:	2800      	cmp	r0, #0
    9e2e:	d000      	beq.n	9e32 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    9e30:	2001      	movs	r0, #1
    9e32:	bd10      	pop	{r4, pc}
    9e34:	2002      	movs	r0, #2
    9e36:	bd10      	pop	{r4, pc}
    9e38:	7840      	ldrb	r0, [r0, #1]
    9e3a:	bd10      	pop	{r4, pc}
    9e3c:	20000286 	.word	0x20000286
    9e40:	4000f000 	.word	0x4000f000
    9e44:	4805      	ldr	r0, [pc, #20]	; (9e5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    9e46:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    9e4a:	b111      	cbz	r1, 9e52 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    9e4c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    9e50:	b108      	cbz	r0, 9e56 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    9e52:	2000      	movs	r0, #0
    9e54:	4770      	bx	lr
    9e56:	2001      	movs	r0, #1
    9e58:	4770      	bx	lr
    9e5a:	0000      	.short	0x0000
    9e5c:	4000f000 	.word	0x4000f000
    9e60:	4805      	ldr	r0, [pc, #20]	; (9e78 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    9e62:	b510      	push	{r4, lr}
    9e64:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    9e68:	b120      	cbz	r0, 9e74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    9e6a:	f7ff ffeb 	bl	9e44 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    9e6e:	b108      	cbz	r0, 9e74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    9e70:	2001      	movs	r0, #1
    9e72:	bd10      	pop	{r4, pc}
    9e74:	2000      	movs	r0, #0
    9e76:	bd10      	pop	{r4, pc}
    9e78:	4000f000 	.word	0x4000f000
    9e7c:	4804      	ldr	r0, [pc, #16]	; (9e90 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    9e7e:	2100      	movs	r1, #0
    9e80:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    9e84:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    9e88:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    9e8c:	4770      	bx	lr
    9e8e:	0000      	.short	0x0000
    9e90:	4000f000 	.word	0x4000f000

00009e94 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    9e94:	4a08      	ldr	r2, [pc, #32]	; (9eb8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    9e96:	b510      	push	{r4, lr}
    9e98:	e9c2 0102 	strd	r0, r1, [r2, #8]
    9e9c:	4907      	ldr	r1, [pc, #28]	; (9ebc <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    9e9e:	4610      	mov	r0, r2
    9ea0:	f7fa f9ee 	bl	4280 <mpsl_fem_lna_configuration_set>
    9ea4:	2800      	cmp	r0, #0
    9ea6:	d005      	beq.n	9eb4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    9ea8:	1c40      	adds	r0, r0, #1
    9eaa:	d003      	beq.n	9eb4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    9eac:	217d      	movs	r1, #125	; 0x7d
    9eae:	2040      	movs	r0, #64	; 0x40
    9eb0:	f7fa fb4a 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9eb4:	bd10      	pop	{r4, pc}
    9eb6:	0000      	.short	0x0000
    9eb8:	20000234 	.word	0x20000234
    9ebc:	00009eec 	.word	0x00009eec

00009ec0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    9ec0:	4a08      	ldr	r2, [pc, #32]	; (9ee4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    9ec2:	b510      	push	{r4, lr}
    9ec4:	e9c2 0102 	strd	r0, r1, [r2, #8]
    9ec8:	4907      	ldr	r1, [pc, #28]	; (9ee8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    9eca:	4610      	mov	r0, r2
    9ecc:	f7fa f9e4 	bl	4298 <mpsl_fem_pa_configuration_set>
    9ed0:	2800      	cmp	r0, #0
    9ed2:	d005      	beq.n	9ee0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    9ed4:	1c40      	adds	r0, r0, #1
    9ed6:	d003      	beq.n	9ee0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    9ed8:	2172      	movs	r1, #114	; 0x72
    9eda:	2040      	movs	r0, #64	; 0x40
    9edc:	f7fa fb34 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ee0:	bd10      	pop	{r4, pc}
    9ee2:	0000      	.short	0x0000
    9ee4:	20000234 	.word	0x20000234
    9ee8:	00009eec 	.word	0x00009eec
    9eec:	00000001 	.word	0x00000001
    9ef0:	40001110 	.word	0x40001110
	...

00009f04 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    9f04:	4a07      	ldr	r2, [pc, #28]	; (9f24 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    9f06:	b510      	push	{r4, lr}
    9f08:	7853      	ldrb	r3, [r2, #1]
    9f0a:	b133      	cbz	r3, 9f1a <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    9f0c:	4b06      	ldr	r3, [pc, #24]	; (9f28 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    9f0e:	6019      	str	r1, [r3, #0]
    9f10:	1d19      	adds	r1, r3, #4
    9f12:	6008      	str	r0, [r1, #0]
    9f14:	2001      	movs	r0, #1
    9f16:	7090      	strb	r0, [r2, #2]
    9f18:	bd10      	pop	{r4, pc}
    9f1a:	21ba      	movs	r1, #186	; 0xba
    9f1c:	203c      	movs	r0, #60	; 0x3c
    9f1e:	f7fa fb13 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f22:	0000      	.short	0x0000
    9f24:	20000289 	.word	0x20000289
    9f28:	4000f50c 	.word	0x4000f50c

00009f2c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    9f2c:	4809      	ldr	r0, [pc, #36]	; (9f54 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    9f2e:	b510      	push	{r4, lr}
    9f30:	7801      	ldrb	r1, [r0, #0]
    9f32:	b151      	cbz	r1, 9f4a <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    9f34:	7880      	ldrb	r0, [r0, #2]
    9f36:	b140      	cbz	r0, 9f4a <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    9f38:	4907      	ldr	r1, [pc, #28]	; (9f58 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    9f3a:	2000      	movs	r0, #0
    9f3c:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    9f40:	4906      	ldr	r1, [pc, #24]	; (9f5c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    9f42:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    9f46:	6008      	str	r0, [r1, #0]
    9f48:	bd10      	pop	{r4, pc}
    9f4a:	21e1      	movs	r1, #225	; 0xe1
    9f4c:	203c      	movs	r0, #60	; 0x3c
    9f4e:	f7fa fafb 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f52:	0000      	.short	0x0000
    9f54:	20000289 	.word	0x20000289
    9f58:	4000f000 	.word	0x4000f000
    9f5c:	4001f504 	.word	0x4001f504

00009f60 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    9f60:	b570      	push	{r4, r5, r6, lr}
    9f62:	4c0b      	ldr	r4, [pc, #44]	; (9f90 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    9f64:	2500      	movs	r5, #0
    9f66:	7820      	ldrb	r0, [r4, #0]
    9f68:	b158      	cbz	r0, 9f82 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    9f6a:	f000 f8e5 	bl	a138 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    9f6e:	4809      	ldr	r0, [pc, #36]	; (9f94 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    9f70:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    9f74:	b118      	cbz	r0, 9f7e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    9f76:	4808      	ldr	r0, [pc, #32]	; (9f98 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    9f78:	6800      	ldr	r0, [r0, #0]
    9f7a:	70e0      	strb	r0, [r4, #3]
    9f7c:	e000      	b.n	9f80 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    9f7e:	70e5      	strb	r5, [r4, #3]
    9f80:	7025      	strb	r5, [r4, #0]
    9f82:	2000      	movs	r0, #0
    9f84:	f000 f8e0 	bl	a148 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    9f88:	7065      	strb	r5, [r4, #1]
    9f8a:	70a5      	strb	r5, [r4, #2]
    9f8c:	bd70      	pop	{r4, r5, r6, pc}
    9f8e:	0000      	.short	0x0000
    9f90:	20000289 	.word	0x20000289
    9f94:	4000f000 	.word	0x4000f000
    9f98:	4000f400 	.word	0x4000f400

00009f9c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    9f9c:	480d      	ldr	r0, [pc, #52]	; (9fd4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    9f9e:	b510      	push	{r4, lr}
    9fa0:	7801      	ldrb	r1, [r0, #0]
    9fa2:	b191      	cbz	r1, 9fca <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    9fa4:	7880      	ldrb	r0, [r0, #2]
    9fa6:	b180      	cbz	r0, 9fca <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    9fa8:	490b      	ldr	r1, [pc, #44]	; (9fd8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    9faa:	2000      	movs	r0, #0
    9fac:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    9fb0:	4a0a      	ldr	r2, [pc, #40]	; (9fdc <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    9fb2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    9fb6:	6010      	str	r0, [r2, #0]
    9fb8:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    9fbc:	2a01      	cmp	r2, #1
    9fbe:	d103      	bne.n	9fc8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    9fc0:	604a      	str	r2, [r1, #4]
    9fc2:	4906      	ldr	r1, [pc, #24]	; (9fdc <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    9fc4:	1d09      	adds	r1, r1, #4
    9fc6:	6008      	str	r0, [r1, #0]
    9fc8:	bd10      	pop	{r4, pc}
    9fca:	21d1      	movs	r1, #209	; 0xd1
    9fcc:	203c      	movs	r0, #60	; 0x3c
    9fce:	f7fa fabb 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fd2:	0000      	.short	0x0000
    9fd4:	20000289 	.word	0x20000289
    9fd8:	4000f000 	.word	0x4000f000
    9fdc:	4001f504 	.word	0x4001f504

00009fe0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    9fe0:	4803      	ldr	r0, [pc, #12]	; (9ff0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    9fe2:	2100      	movs	r1, #0
    9fe4:	7001      	strb	r1, [r0, #0]
    9fe6:	7041      	strb	r1, [r0, #1]
    9fe8:	7081      	strb	r1, [r0, #2]
    9fea:	70c1      	strb	r1, [r0, #3]
    9fec:	4770      	bx	lr
    9fee:	0000      	.short	0x0000
    9ff0:	20000289 	.word	0x20000289

00009ff4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    9ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ff8:	4605      	mov	r5, r0
    9ffa:	461c      	mov	r4, r3
    9ffc:	4690      	mov	r8, r2
    9ffe:	460f      	mov	r7, r1
    a000:	2001      	movs	r0, #1
    a002:	f000 f8a1 	bl	a148 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a006:	4e12      	ldr	r6, [pc, #72]	; (a050 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    a008:	4812      	ldr	r0, [pc, #72]	; (a054 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a00a:	7134      	strb	r4, [r6, #4]
    a00c:	6007      	str	r7, [r0, #0]
    a00e:	4911      	ldr	r1, [pc, #68]	; (a054 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a010:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    a014:	1f09      	subs	r1, r1, #4
    a016:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a01a:	6008      	str	r0, [r1, #0]
    a01c:	f001 f8de 	bl	b1dc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a020:	b938      	cbnz	r0, a032 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    a022:	480c      	ldr	r0, [pc, #48]	; (a054 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a024:	3010      	adds	r0, #16
    a026:	6801      	ldr	r1, [r0, #0]
    a028:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a02c:	ea41 0108 	orr.w	r1, r1, r8
    a030:	6001      	str	r1, [r0, #0]
    a032:	f000 f881 	bl	a138 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a036:	b93d      	cbnz	r5, a048 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    a038:	4808      	ldr	r0, [pc, #32]	; (a05c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    a03a:	4a07      	ldr	r2, [pc, #28]	; (a058 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a03c:	4906      	ldr	r1, [pc, #24]	; (a058 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a03e:	3afc      	subs	r2, #252	; 0xfc
    a040:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    a044:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    a048:	2001      	movs	r0, #1
    a04a:	7070      	strb	r0, [r6, #1]
    a04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a050:	20000289 	.word	0x20000289
    a054:	4000f508 	.word	0x4000f508
    a058:	4000f100 	.word	0x4000f100
    a05c:	4001f088 	.word	0x4001f088

0000a060 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    a060:	4808      	ldr	r0, [pc, #32]	; (a084 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    a062:	b510      	push	{r4, lr}
    a064:	7841      	ldrb	r1, [r0, #1]
    a066:	b149      	cbz	r1, a07c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    a068:	2101      	movs	r1, #1
    a06a:	7001      	strb	r1, [r0, #0]
    a06c:	4806      	ldr	r0, [pc, #24]	; (a088 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    a06e:	2200      	movs	r2, #0
    a070:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    a074:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    a078:	6001      	str	r1, [r0, #0]
    a07a:	bd10      	pop	{r4, pc}
    a07c:	21c5      	movs	r1, #197	; 0xc5
    a07e:	203c      	movs	r0, #60	; 0x3c
    a080:	f7fa fa62 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a084:	20000289 	.word	0x20000289
    a088:	4000f000 	.word	0x4000f000

0000a08c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a08c:	4806      	ldr	r0, [pc, #24]	; (a0a8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    a08e:	7801      	ldrb	r1, [r0, #0]
    a090:	b141      	cbz	r1, a0a4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    a092:	4806      	ldr	r0, [pc, #24]	; (a0ac <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    a094:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a098:	2800      	cmp	r0, #0
    a09a:	d002      	beq.n	a0a2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    a09c:	4804      	ldr	r0, [pc, #16]	; (a0b0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    a09e:	6800      	ldr	r0, [r0, #0]
    a0a0:	b2c0      	uxtb	r0, r0
    a0a2:	4770      	bx	lr
    a0a4:	78c0      	ldrb	r0, [r0, #3]
    a0a6:	4770      	bx	lr
    a0a8:	20000289 	.word	0x20000289
    a0ac:	4000f000 	.word	0x4000f000
    a0b0:	4000f400 	.word	0x4000f400

0000a0b4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a0b4:	4901      	ldr	r1, [pc, #4]	; (a0bc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a0b6:	2001      	movs	r0, #1
    a0b8:	6088      	str	r0, [r1, #8]
    a0ba:	4770      	bx	lr
    a0bc:	4000f000 	.word	0x4000f000

0000a0c0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a0c4:	2800      	cmp	r0, #0
    a0c6:	d02e      	beq.n	a126 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a0c8:	4818      	ldr	r0, [pc, #96]	; (a12c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    a0ca:	7800      	ldrb	r0, [r0, #0]
    a0cc:	b1b0      	cbz	r0, a0fc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    a0ce:	4d18      	ldr	r5, [pc, #96]	; (a130 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    a0d0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a0d4:	2800      	cmp	r0, #0
    a0d6:	d126      	bne.n	a126 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a0d8:	2702      	movs	r7, #2
    a0da:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    a0de:	4c15      	ldr	r4, [pc, #84]	; (a134 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    a0e0:	6820      	ldr	r0, [r4, #0]
    a0e2:	43c0      	mvns	r0, r0
    a0e4:	f340 1600 	sbfx	r6, r0, #4, #1
    a0e8:	6820      	ldr	r0, [r4, #0]
    a0ea:	f040 0010 	orr.w	r0, r0, #16
    a0ee:	6020      	str	r0, [r4, #0]
    a0f0:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    a0f4:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a0f8:	1c76      	adds	r6, r6, #1
    a0fa:	e009      	b.n	a110 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    a0fc:	f240 1153 	movw	r1, #339	; 0x153
    a100:	203c      	movs	r0, #60	; 0x3c
    a102:	f7fa fa21 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a106:	bf00      	nop
    a108:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    a10c:	f7fa f862 	bl	41d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a110:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a114:	2800      	cmp	r0, #0
    a116:	d0f7      	beq.n	a108 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    a118:	b91e      	cbnz	r6, a122 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a11a:	6820      	ldr	r0, [r4, #0]
    a11c:	f020 0010 	bic.w	r0, r0, #16
    a120:	6020      	str	r0, [r4, #0]
    a122:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    a126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a12a:	0000      	.short	0x0000
    a12c:	20000289 	.word	0x20000289
    a130:	4000f000 	.word	0x4000f000
    a134:	e000ed10 	.word	0xe000ed10
    a138:	4902      	ldr	r1, [pc, #8]	; (a144 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    a13a:	4801      	ldr	r0, [pc, #4]	; (a140 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    a13c:	6008      	str	r0, [r1, #0]
    a13e:	4770      	bx	lr
    a140:	02020000 	.word	0x02020000
    a144:	4001f508 	.word	0x4001f508

0000a148 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a148:	b510      	push	{r4, lr}
    a14a:	4604      	mov	r4, r0
    a14c:	f000 f822 	bl	a194 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    a150:	2c00      	cmp	r4, #0
    a152:	d017      	beq.n	a184 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    a154:	4a0c      	ldr	r2, [pc, #48]	; (a188 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a156:	480c      	ldr	r0, [pc, #48]	; (a188 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a158:	490c      	ldr	r1, [pc, #48]	; (a18c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a15a:	3214      	adds	r2, #20
    a15c:	4b0c      	ldr	r3, [pc, #48]	; (a190 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    a15e:	2c01      	cmp	r4, #1
    a160:	d005      	beq.n	a16e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    a162:	2c02      	cmp	r4, #2
    a164:	d008      	beq.n	a178 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    a166:	2183      	movs	r1, #131	; 0x83
    a168:	203d      	movs	r0, #61	; 0x3d
    a16a:	f7fa f9ed 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a16e:	2402      	movs	r4, #2
    a170:	6004      	str	r4, [r0, #0]
    a172:	6011      	str	r1, [r2, #0]
    a174:	0620      	lsls	r0, r4, #24
    a176:	e004      	b.n	a182 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    a178:	2403      	movs	r4, #3
    a17a:	6004      	str	r4, [r0, #0]
    a17c:	6011      	str	r1, [r2, #0]
    a17e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a182:	6018      	str	r0, [r3, #0]
    a184:	bd10      	pop	{r4, pc}
    a186:	0000      	.short	0x0000
    a188:	4000f500 	.word	0x4000f500
    a18c:	2000113f 	.word	0x2000113f
    a190:	4001f504 	.word	0x4001f504
    a194:	4804      	ldr	r0, [pc, #16]	; (a1a8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a196:	2100      	movs	r1, #0
    a198:	6001      	str	r1, [r0, #0]
    a19a:	6001      	str	r1, [r0, #0]
    a19c:	4903      	ldr	r1, [pc, #12]	; (a1ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a19e:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    a1a2:	6008      	str	r0, [r1, #0]
    a1a4:	4770      	bx	lr
    a1a6:	0000      	.short	0x0000
    a1a8:	4000f500 	.word	0x4000f500
    a1ac:	4001f508 	.word	0x4001f508

0000a1b0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a1b0:	4805      	ldr	r0, [pc, #20]	; (a1c8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a1b2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a1b6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a1ba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a1be:	2100      	movs	r1, #0
    a1c0:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    a1c4:	4770      	bx	lr
    a1c6:	0000      	.short	0x0000
    a1c8:	40001000 	.word	0x40001000

0000a1cc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a1cc:	4904      	ldr	r1, [pc, #16]	; (a1e0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a1ce:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    a1d2:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    a1d6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    a1da:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    a1de:	4770      	bx	lr
    a1e0:	40001000 	.word	0x40001000

0000a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1e6:	4c23      	ldr	r4, [pc, #140]	; (a274 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    a1e8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    a1ec:	f010 0f10 	tst.w	r0, #16
    a1f0:	d001      	beq.n	a1f6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    a1f2:	2701      	movs	r7, #1
    a1f4:	e000      	b.n	a1f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    a1f6:	2700      	movs	r7, #0
    a1f8:	2010      	movs	r0, #16
    a1fa:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    a1fe:	2002      	movs	r0, #2
    a200:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a204:	481c      	ldr	r0, [pc, #112]	; (a278 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    a206:	2500      	movs	r5, #0
    a208:	491d      	ldr	r1, [pc, #116]	; (a280 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    a20a:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    a20e:	481b      	ldr	r0, [pc, #108]	; (a27c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    a210:	6008      	str	r0, [r1, #0]
    a212:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    a216:	f44f 7688 	mov.w	r6, #272	; 0x110
    a21a:	f010 0fff 	tst.w	r0, #255	; 0xff
    a21e:	d018      	beq.n	a252 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    a220:	20ff      	movs	r0, #255	; 0xff
    a222:	f88d 0000 	strb.w	r0, [sp]
    a226:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a22a:	2001      	movs	r0, #1
    a22c:	6120      	str	r0, [r4, #16]
    a22e:	e004      	b.n	a23a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    a230:	f89d 0000 	ldrb.w	r0, [sp]
    a234:	1e40      	subs	r0, r0, #1
    a236:	f88d 0000 	strb.w	r0, [sp]
    a23a:	f89d 0000 	ldrb.w	r0, [sp]
    a23e:	b128      	cbz	r0, a24c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    a240:	4631      	mov	r1, r6
    a242:	4620      	mov	r0, r4
    a244:	f003 fcb6 	bl	dbb4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    a248:	2800      	cmp	r0, #0
    a24a:	d0f1      	beq.n	a230 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    a24c:	f89d 0000 	ldrb.w	r0, [sp]
    a250:	b158      	cbz	r0, a26a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    a252:	f000 fc91 	bl	ab78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    a256:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a25a:	f000 fe0d 	bl	ae78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    a25e:	2f00      	cmp	r7, #0
    a260:	d002      	beq.n	a268 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    a262:	2010      	movs	r0, #16
    a264:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    a268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a26a:	f240 718f 	movw	r1, #1935	; 0x78f
    a26e:	203e      	movs	r0, #62	; 0x3e
    a270:	f7fa f96a 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a274:	40001000 	.word	0x40001000
    a278:	20000dfc 	.word	0x20000dfc
    a27c:	0c0e0000 	.word	0x0c0e0000
    a280:	4001f508 	.word	0x4001f508

0000a284 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    a284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a288:	4d20      	ldr	r5, [pc, #128]	; (a30c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    a28a:	4607      	mov	r7, r0
    a28c:	4688      	mov	r8, r1
    a28e:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    a292:	07c1      	lsls	r1, r0, #31
    a294:	d018      	beq.n	a2c8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    a296:	4a1e      	ldr	r2, [pc, #120]	; (a310 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    a298:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    a29c:	6011      	str	r1, [r2, #0]
    a29e:	4c1d      	ldr	r4, [pc, #116]	; (a314 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    a2a0:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    a2a4:	f041 0101 	orr.w	r1, r1, #1
    a2a8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    a2ac:	f040 0002 	orr.w	r0, r0, #2
    a2b0:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    a2b4:	4640      	mov	r0, r8
    a2b6:	f000 fe43 	bl	af40 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a2ba:	f000 fbfb 	bl	aab4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    a2be:	2601      	movs	r6, #1
    a2c0:	b13f      	cbz	r7, a2d2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    a2c2:	2f01      	cmp	r7, #1
    a2c4:	d00e      	beq.n	a2e4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    a2c6:	e016      	b.n	a2f6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a2c8:	f240 611a 	movw	r1, #1562	; 0x61a
    a2cc:	203e      	movs	r0, #62	; 0x3e
    a2ce:	f7fa f93b 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2d2:	4640      	mov	r0, r8
    a2d4:	f000 fc1e 	bl	ab14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    a2d8:	4640      	mov	r0, r8
    a2da:	f000 fbcf 	bl	aa7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    a2de:	726e      	strb	r6, [r5, #9]
    a2e0:	6026      	str	r6, [r4, #0]
    a2e2:	e008      	b.n	a2f6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a2e4:	f000 fc3e 	bl	ab64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    a2e8:	f000 fd8c 	bl	ae04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    a2ec:	2002      	movs	r0, #2
    a2ee:	7268      	strb	r0, [r5, #9]
    a2f0:	f000 fcb0 	bl	ac54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    a2f4:	6066      	str	r6, [r4, #4]
    a2f6:	4808      	ldr	r0, [pc, #32]	; (a318 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    a2f8:	64c6      	str	r6, [r0, #76]	; 0x4c
    a2fa:	4807      	ldr	r0, [pc, #28]	; (a318 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    a2fc:	300c      	adds	r0, #12
    a2fe:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    a302:	4638      	mov	r0, r7
    a304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a308:	f003 bc3c 	b.w	db84 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a30c:	20000dfc 	.word	0x20000dfc
    a310:	4001f504 	.word	0x4001f504
    a314:	40001000 	.word	0x40001000
    a318:	40008000 	.word	0x40008000

0000a31c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    a31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a320:	4d35      	ldr	r5, [pc, #212]	; (a3f8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    a322:	4606      	mov	r6, r0
    a324:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    a328:	4689      	mov	r9, r1
    a32a:	6028      	str	r0, [r5, #0]
    a32c:	4c33      	ldr	r4, [pc, #204]	; (a3fc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    a32e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    a332:	f040 0002 	orr.w	r0, r0, #2
    a336:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    a33a:	4608      	mov	r0, r1
    a33c:	f000 fe00 	bl	af40 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a340:	f000 fbb8 	bl	aab4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    a344:	f8df 80b8 	ldr.w	r8, [pc, #184]	; a400 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    a348:	2700      	movs	r7, #0
    a34a:	b116      	cbz	r6, a352 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    a34c:	2e01      	cmp	r6, #1
    a34e:	d027      	beq.n	a3a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    a350:	e03f      	b.n	a3d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a352:	4648      	mov	r0, r9
    a354:	f000 fbde 	bl	ab14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    a358:	79e0      	ldrb	r0, [r4, #7]
    a35a:	2801      	cmp	r0, #1
    a35c:	d105      	bne.n	a36a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    a35e:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a362:	f041 0108 	orr.w	r1, r1, #8
    a366:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a36a:	4648      	mov	r0, r9
    a36c:	f000 fb86 	bl	aa7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    a370:	2001      	movs	r0, #1
    a372:	7260      	strb	r0, [r4, #9]
    a374:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a376:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    a37a:	62a0      	str	r0, [r4, #40]	; 0x28
    a37c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    a380:	6028      	str	r0, [r5, #0]
    a382:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a386:	f1b9 0f02 	cmp.w	r9, #2
    a38a:	d007      	beq.n	a39c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    a38c:	f640 0034 	movw	r0, #2100	; 0x834
    a390:	f649 72ec 	movw	r2, #40940	; 0x9fec
    a394:	4410      	add	r0, r2
    a396:	fbb0 f7f1 	udiv	r7, r0, r1
    a39a:	e01a      	b.n	a3d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a39c:	4608      	mov	r0, r1
    a39e:	e7f7      	b.n	a390 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    a3a0:	f000 fbe0 	bl	ab64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    a3a4:	f000 fd2e 	bl	ae04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    a3a8:	79e0      	ldrb	r0, [r4, #7]
    a3aa:	2801      	cmp	r0, #1
    a3ac:	d105      	bne.n	a3ba <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    a3ae:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a3b2:	f041 0104 	orr.w	r1, r1, #4
    a3b6:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a3ba:	2002      	movs	r0, #2
    a3bc:	7260      	strb	r0, [r4, #9]
    a3be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a3c0:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    a3c4:	62a0      	str	r0, [r4, #40]	; 0x28
    a3c6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    a3ca:	6028      	str	r0, [r5, #0]
    a3cc:	2729      	movs	r7, #41	; 0x29
    a3ce:	f000 fc41 	bl	ac54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    a3d2:	f000 fc2b 	bl	ac2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    a3d6:	f000 fddb 	bl	af90 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    a3da:	6800      	ldr	r0, [r0, #0]
    a3dc:	2801      	cmp	r0, #1
    a3de:	d006      	beq.n	a3ee <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    a3e0:	2100      	movs	r1, #0
    a3e2:	4630      	mov	r0, r6
    a3e4:	f003 fbce 	bl	db84 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a3e8:	4638      	mov	r0, r7
    a3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a3ee:	f7ff fef9 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    a3f2:	2000      	movs	r0, #0
    a3f4:	e7f9      	b.n	a3ea <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    a3f6:	0000      	.short	0x0000
    a3f8:	4001f504 	.word	0x4001f504
    a3fc:	20000dfc 	.word	0x20000dfc
    a400:	40001000 	.word	0x40001000

0000a404 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    a404:	b510      	push	{r4, lr}
    a406:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    a408:	4901      	ldr	r1, [pc, #4]	; (a410 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    a40a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    a40e:	bd10      	pop	{r4, pc}
    a410:	20000dec 	.word	0x20000dec

0000a414 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    a414:	b570      	push	{r4, r5, r6, lr}
    a416:	4c11      	ldr	r4, [pc, #68]	; (a45c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    a418:	4606      	mov	r6, r0
    a41a:	2002      	movs	r0, #2
    a41c:	7320      	strb	r0, [r4, #12]
    a41e:	2596      	movs	r5, #150	; 0x96
    a420:	f000 f85e 	bl	a4e0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    a424:	4602      	mov	r2, r0
    a426:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    a42a:	f894 1020 	ldrb.w	r1, [r4, #32]
    a42e:	2801      	cmp	r0, #1
    a430:	d00f      	beq.n	a452 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    a432:	4628      	mov	r0, r5
    a434:	f003 fbc8 	bl	dbc8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    a438:	6120      	str	r0, [r4, #16]
    a43a:	4809      	ldr	r0, [pc, #36]	; (a460 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    a43c:	2100      	movs	r1, #0
    a43e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    a442:	6921      	ldr	r1, [r4, #16]
    a444:	69e0      	ldr	r0, [r4, #28]
    a446:	4408      	add	r0, r1
    a448:	4905      	ldr	r1, [pc, #20]	; (a460 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    a44a:	1d09      	adds	r1, r1, #4
    a44c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    a450:	bd70      	pop	{r4, r5, r6, pc}
    a452:	4633      	mov	r3, r6
    a454:	4628      	mov	r0, r5
    a456:	f003 fbd3 	bl	dc00 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    a45a:	e7ed      	b.n	a438 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    a45c:	20000dfc 	.word	0x20000dfc
    a460:	40008000 	.word	0x40008000

0000a464 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    a464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a468:	2238      	movs	r2, #56	; 0x38
    a46a:	2100      	movs	r1, #0
    a46c:	4813      	ldr	r0, [pc, #76]	; (a4bc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    a46e:	f000 ff81 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a472:	f000 fd01 	bl	ae78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    a476:	f000 fe86 	bl	b186 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    a47a:	4d11      	ldr	r5, [pc, #68]	; (a4c0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    a47c:	4e10      	ldr	r6, [pc, #64]	; (a4c0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    a47e:	2400      	movs	r4, #0
    a480:	4f0f      	ldr	r7, [pc, #60]	; (a4c0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    a482:	3508      	adds	r5, #8
    a484:	3610      	adds	r6, #16
    a486:	b928      	cbnz	r0, a494 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    a488:	f000 fe94 	bl	b1b4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    a48c:	b910      	cbnz	r0, a494 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    a48e:	f000 fe9b 	bl	b1c8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    a492:	b108      	cbz	r0, a498 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    a494:	2224      	movs	r2, #36	; 0x24
    a496:	e006      	b.n	a4a6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    a498:	f000 fed6 	bl	b248 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    a49c:	b910      	cbnz	r0, a4a4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    a49e:	f000 fec9 	bl	b234 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    a4a2:	b140      	cbz	r0, a4b6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    a4a4:	2240      	movs	r2, #64	; 0x40
    a4a6:	21ff      	movs	r1, #255	; 0xff
    a4a8:	4638      	mov	r0, r7
    a4aa:	f000 ff63 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a4ae:	602c      	str	r4, [r5, #0]
    a4b0:	6034      	str	r4, [r6, #0]
    a4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4b6:	2238      	movs	r2, #56	; 0x38
    a4b8:	e7f5      	b.n	a4a6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    a4ba:	0000      	.short	0x0000
    a4bc:	20000dfc 	.word	0x20000dfc
    a4c0:	40000e00 	.word	0x40000e00

0000a4c4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    a4c4:	4805      	ldr	r0, [pc, #20]	; (a4dc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    a4c6:	b510      	push	{r4, lr}
    a4c8:	69c0      	ldr	r0, [r0, #28]
    a4ca:	2800      	cmp	r0, #0
    a4cc:	d104      	bne.n	a4d8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    a4ce:	f240 11fb 	movw	r1, #507	; 0x1fb
    a4d2:	203e      	movs	r0, #62	; 0x3e
    a4d4:	f7fa f838 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4d8:	bd10      	pop	{r4, pc}
    a4da:	0000      	.short	0x0000
    a4dc:	20000dfc 	.word	0x20000dfc

0000a4e0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    a4e0:	4814      	ldr	r0, [pc, #80]	; (a534 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    a4e2:	b510      	push	{r4, lr}
    a4e4:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    a4e8:	7a40      	ldrb	r0, [r0, #9]
    a4ea:	b141      	cbz	r1, a4fe <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    a4ec:	2902      	cmp	r1, #2
    a4ee:	d00b      	beq.n	a508 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    a4f0:	2802      	cmp	r0, #2
    a4f2:	d009      	beq.n	a508 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    a4f4:	2901      	cmp	r1, #1
    a4f6:	d00b      	beq.n	a510 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    a4f8:	2801      	cmp	r0, #1
    a4fa:	d009      	beq.n	a510 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    a4fc:	e016      	b.n	a52c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    a4fe:	2800      	cmp	r0, #0
    a500:	d1f6      	bne.n	a4f0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    a502:	f240 117d 	movw	r1, #381	; 0x17d
    a506:	e00e      	b.n	a526 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    a508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a50c:	f000 bc2a 	b.w	ad64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    a510:	4809      	ldr	r0, [pc, #36]	; (a538 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    a512:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    a516:	f000 000f 	and.w	r0, r0, #15
    a51a:	2803      	cmp	r0, #3
    a51c:	d006      	beq.n	a52c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    a51e:	2804      	cmp	r0, #4
    a520:	d006      	beq.n	a530 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    a522:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    a526:	203e      	movs	r0, #62	; 0x3e
    a528:	f7fa f80e 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a52c:	2001      	movs	r0, #1
    a52e:	bd10      	pop	{r4, pc}
    a530:	2002      	movs	r0, #2
    a532:	bd10      	pop	{r4, pc}
    a534:	20000dfc 	.word	0x20000dfc
    a538:	40001000 	.word	0x40001000

0000a53c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    a53c:	b510      	push	{r4, lr}
    a53e:	f000 fc7d 	bl	ae3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    a542:	f7ff fe4f 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    a546:	f003 fab3 	bl	dab0 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    a54a:	480f      	ldr	r0, [pc, #60]	; (a588 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    a54c:	4a0f      	ldr	r2, [pc, #60]	; (a58c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    a54e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    a550:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    a554:	6011      	str	r1, [r2, #0]
    a556:	2400      	movs	r4, #0
    a558:	6284      	str	r4, [r0, #40]	; 0x28
    a55a:	7304      	strb	r4, [r0, #12]
    a55c:	61c4      	str	r4, [r0, #28]
    a55e:	6184      	str	r4, [r0, #24]
    a560:	f000 fc6c 	bl	ae3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    a564:	480a      	ldr	r0, [pc, #40]	; (a590 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    a566:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    a56a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    a56e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    a572:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    a576:	2001      	movs	r0, #1
    a578:	f003 fad3 	bl	db22 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    a57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a580:	2001      	movs	r0, #1
    a582:	f003 bac1 	b.w	db08 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    a586:	0000      	.short	0x0000
    a588:	20000dfc 	.word	0x20000dfc
    a58c:	4001f508 	.word	0x4001f508
    a590:	40008000 	.word	0x40008000

0000a594 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    a594:	b570      	push	{r4, r5, r6, lr}
    a596:	2001      	movs	r0, #1
    a598:	f003 fac3 	bl	db22 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    a59c:	4c37      	ldr	r4, [pc, #220]	; (a67c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    a59e:	2000      	movs	r0, #0
    a5a0:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    a5a4:	2001      	movs	r0, #1
    a5a6:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    a5aa:	f000 fe23 	bl	b1f4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    a5ae:	4d34      	ldr	r5, [pc, #208]	; (a680 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    a5b0:	b118      	cbz	r0, a5ba <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    a5b2:	6828      	ldr	r0, [r5, #0]
    a5b4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    a5b8:	6028      	str	r0, [r5, #0]
    a5ba:	f000 fe0f 	bl	b1dc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a5be:	b128      	cbz	r0, a5cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    a5c0:	6828      	ldr	r0, [r5, #0]
    a5c2:	4930      	ldr	r1, [pc, #192]	; (a684 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    a5c4:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    a5c8:	4308      	orrs	r0, r1
    a5ca:	6028      	str	r0, [r5, #0]
    a5cc:	f000 fe22 	bl	b214 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    a5d0:	b138      	cbz	r0, a5e2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    a5d2:	482b      	ldr	r0, [pc, #172]	; (a680 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    a5d4:	1d00      	adds	r0, r0, #4
    a5d6:	6801      	ldr	r1, [r0, #0]
    a5d8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    a5dc:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    a5e0:	6001      	str	r1, [r0, #0]
    a5e2:	4927      	ldr	r1, [pc, #156]	; (a680 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    a5e4:	4828      	ldr	r0, [pc, #160]	; (a688 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    a5e6:	313c      	adds	r1, #60	; 0x3c
    a5e8:	6008      	str	r0, [r1, #0]
    a5ea:	f7f9 fe61 	bl	42b0 <mpsl_fem_device_config_254_apply_get>
    a5ee:	b140      	cbz	r0, a602 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    a5f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a5f4:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    a5f8:	1c41      	adds	r1, r0, #1
    a5fa:	d002      	beq.n	a602 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    a5fc:	4920      	ldr	r1, [pc, #128]	; (a680 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    a5fe:	3110      	adds	r1, #16
    a600:	6008      	str	r0, [r1, #0]
    a602:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    a606:	6e00      	ldr	r0, [r0, #96]	; 0x60
    a608:	1c41      	adds	r1, r0, #1
    a60a:	d004      	beq.n	a616 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    a60c:	491f      	ldr	r1, [pc, #124]	; (a68c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    a60e:	680a      	ldr	r2, [r1, #0]
    a610:	f360 4217 	bfi	r2, r0, #16, #8
    a614:	600a      	str	r2, [r1, #0]
    a616:	f240 1103 	movw	r1, #259	; 0x103
    a61a:	f240 605b 	movw	r0, #1627	; 0x65b
    a61e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    a622:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    a626:	2001      	movs	r0, #1
    a628:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    a62c:	f000 fc88 	bl	af40 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a630:	f240 1001 	movw	r0, #257	; 0x101
    a634:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    a638:	2002      	movs	r0, #2
    a63a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a63e:	4915      	ldr	r1, [pc, #84]	; (a694 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    a640:	4813      	ldr	r0, [pc, #76]	; (a690 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    a642:	6008      	str	r0, [r1, #0]
    a644:	4914      	ldr	r1, [pc, #80]	; (a698 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    a646:	2000      	movs	r0, #0
    a648:	4d14      	ldr	r5, [pc, #80]	; (a69c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    a64a:	8608      	strh	r0, [r1, #48]	; 0x30
    a64c:	3110      	adds	r1, #16
    a64e:	61c8      	str	r0, [r1, #28]
    a650:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    a654:	7028      	strb	r0, [r5, #0]
    a656:	2001      	movs	r0, #1
    a658:	f003 fa56 	bl	db08 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    a65c:	2010      	movs	r0, #16
    a65e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    a662:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a666:	2002      	movs	r0, #2
    a668:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    a66c:	6868      	ldr	r0, [r5, #4]
    a66e:	2800      	cmp	r0, #0
    a670:	d002      	beq.n	a678 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    a672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a676:	4700      	bx	r0
    a678:	bd70      	pop	{r4, r5, r6, pc}
    a67a:	0000      	.short	0x0000
    a67c:	40001000 	.word	0x40001000
    a680:	4000173c 	.word	0x4000173c
    a684:	80000096 	.word	0x80000096
    a688:	8900002c 	.word	0x8900002c
    a68c:	4000158c 	.word	0x4000158c
    a690:	0c0e0000 	.word	0x0c0e0000
    a694:	4001f508 	.word	0x4001f508
    a698:	20000dec 	.word	0x20000dec
    a69c:	2000024c 	.word	0x2000024c

0000a6a0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    a6a0:	4901      	ldr	r1, [pc, #4]	; (a6a8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    a6a2:	7508      	strb	r0, [r1, #20]
    a6a4:	4770      	bx	lr
    a6a6:	0000      	.short	0x0000
    a6a8:	20000dfc 	.word	0x20000dfc

0000a6ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    a6ac:	4905      	ldr	r1, [pc, #20]	; (a6c4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    a6ae:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    a6b2:	4805      	ldr	r0, [pc, #20]	; (a6c8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    a6b4:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    a6b8:	f041 0101 	orr.w	r1, r1, #1
    a6bc:	7001      	strb	r1, [r0, #0]
    a6be:	f000 ba7b 	b.w	abb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    a6c2:	0000      	.short	0x0000
    a6c4:	40001000 	.word	0x40001000
    a6c8:	20000dfc 	.word	0x20000dfc

0000a6cc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    a6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6d0:	4e36      	ldr	r6, [pc, #216]	; (a7ac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    a6d2:	4607      	mov	r7, r0
    a6d4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    a6d8:	4689      	mov	r9, r1
    a6da:	4614      	mov	r4, r2
    a6dc:	6030      	str	r0, [r6, #0]
    a6de:	4610      	mov	r0, r2
    a6e0:	f000 fc2e 	bl	af40 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a6e4:	f000 f9e6 	bl	aab4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    a6e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; a7b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    a6ec:	4d31      	ldr	r5, [pc, #196]	; (a7b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    a6ee:	f04f 0801 	mov.w	r8, #1
    a6f2:	b127      	cbz	r7, a6fe <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    a6f4:	2f01      	cmp	r7, #1
    a6f6:	d01d      	beq.n	a734 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    a6f8:	f240 710f 	movw	r1, #1807	; 0x70f
    a6fc:	e04c      	b.n	a798 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    a6fe:	4620      	mov	r0, r4
    a700:	f000 fa08 	bl	ab14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    a704:	4620      	mov	r0, r4
    a706:	f000 f9b9 	bl	aa7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    a70a:	2c02      	cmp	r4, #2
    a70c:	d00f      	beq.n	a72e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    a70e:	f640 0034 	movw	r0, #2100	; 0x834
    a712:	bf00      	nop
    a714:	f649 51f8 	movw	r1, #40440	; 0x9df8
    a718:	4401      	add	r1, r0
    a71a:	4648      	mov	r0, r9
    a71c:	f000 fbb4 	bl	ae88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    a720:	4604      	mov	r4, r0
    a722:	4650      	mov	r0, sl
    a724:	f000 fb9c 	bl	ae60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    a728:	f885 8009 	strb.w	r8, [r5, #9]
    a72c:	e014      	b.n	a758 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    a72e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a732:	e7ef      	b.n	a714 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    a734:	f000 fa16 	bl	ab64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    a738:	f000 fb64 	bl	ae04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    a73c:	f000 fa8a 	bl	ac54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    a740:	f649 71ba 	movw	r1, #40890	; 0x9fba
    a744:	4648      	mov	r0, r9
    a746:	f000 fb9f 	bl	ae88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    a74a:	4604      	mov	r4, r0
    a74c:	4818      	ldr	r0, [pc, #96]	; (a7b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    a74e:	1d00      	adds	r0, r0, #4
    a750:	f000 fb86 	bl	ae60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    a754:	2002      	movs	r0, #2
    a756:	7268      	strb	r0, [r5, #9]
    a758:	f8df 905c 	ldr.w	r9, [pc, #92]	; a7b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    a75c:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    a760:	4917      	ldr	r1, [pc, #92]	; (a7c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    a762:	4816      	ldr	r0, [pc, #88]	; (a7bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    a764:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    a768:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    a76a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    a76e:	62a8      	str	r0, [r5, #40]	; 0x28
    a770:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    a774:	6030      	str	r0, [r6, #0]
    a776:	2010      	movs	r0, #16
    a778:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    a77c:	03c0      	lsls	r0, r0, #15
    a77e:	6030      	str	r0, [r6, #0]
    a780:	f000 fa54 	bl	ac2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    a784:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    a788:	480b      	ldr	r0, [pc, #44]	; (a7b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    a78a:	300c      	adds	r0, #12
    a78c:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    a790:	42a0      	cmp	r0, r4
    a792:	d304      	bcc.n	a79e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    a794:	f240 7136 	movw	r1, #1846	; 0x736
    a798:	203e      	movs	r0, #62	; 0x3e
    a79a:	f7f9 fed5 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a79e:	4621      	mov	r1, r4
    a7a0:	4638      	mov	r0, r7
    a7a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a7a6:	f003 b9ed 	b.w	db84 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a7aa:	0000      	.short	0x0000
    a7ac:	4001f504 	.word	0x4001f504
    a7b0:	40001000 	.word	0x40001000
    a7b4:	20000dfc 	.word	0x20000dfc
    a7b8:	40008000 	.word	0x40008000
    a7bc:	40008140 	.word	0x40008140
    a7c0:	4001f098 	.word	0x4001f098

0000a7c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    a7c4:	4b0d      	ldr	r3, [pc, #52]	; (a7fc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    a7c6:	b510      	push	{r4, lr}
    a7c8:	71d8      	strb	r0, [r3, #7]
    a7ca:	729a      	strb	r2, [r3, #10]
    a7cc:	b151      	cbz	r1, a7e4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    a7ce:	2002      	movs	r0, #2
    a7d0:	7218      	strb	r0, [r3, #8]
    a7d2:	2801      	cmp	r0, #1
    a7d4:	d008      	beq.n	a7e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    a7d6:	2802      	cmp	r0, #2
    a7d8:	d00f      	beq.n	a7fa <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    a7da:	f640 1112 	movw	r1, #2322	; 0x912
    a7de:	203e      	movs	r0, #62	; 0x3e
    a7e0:	f7f9 feb2 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7e4:	2001      	movs	r0, #1
    a7e6:	e7f3      	b.n	a7d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    a7e8:	7a58      	ldrb	r0, [r3, #9]
    a7ea:	2802      	cmp	r0, #2
    a7ec:	d105      	bne.n	a7fa <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    a7ee:	f000 f9b9 	bl	ab64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    a7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a7f6:	f000 bb05 	b.w	ae04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    a7fa:	bd10      	pop	{r4, pc}
    a7fc:	20000dfc 	.word	0x20000dfc

0000a800 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    a800:	4902      	ldr	r1, [pc, #8]	; (a80c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    a802:	2000      	movs	r0, #0
    a804:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    a808:	4770      	bx	lr
    a80a:	0000      	.short	0x0000
    a80c:	40008000 	.word	0x40008000

0000a810 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    a810:	b538      	push	{r3, r4, r5, lr}
    a812:	4c0b      	ldr	r4, [pc, #44]	; (a840 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    a814:	4605      	mov	r5, r0
    a816:	f44f 718e 	mov.w	r1, #284	; 0x11c
    a81a:	4620      	mov	r0, r4
    a81c:	f003 f9ca 	bl	dbb4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    a820:	2800      	cmp	r0, #0
    a822:	d00c      	beq.n	a83e <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    a824:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    a828:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    a82c:	4240      	negs	r0, r0
    a82e:	7028      	strb	r0, [r5, #0]
    a830:	2000      	movs	r0, #0
    a832:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    a836:	4803      	ldr	r0, [pc, #12]	; (a844 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    a838:	6800      	ldr	r0, [r0, #0]
    a83a:	9000      	str	r0, [sp, #0]
    a83c:	2001      	movs	r0, #1
    a83e:	bd38      	pop	{r3, r4, r5, pc}
    a840:	40001000 	.word	0x40001000
    a844:	4000111c 	.word	0x4000111c

0000a848 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    a848:	4903      	ldr	r1, [pc, #12]	; (a858 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    a84a:	0e02      	lsrs	r2, r0, #24
    a84c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    a850:	0200      	lsls	r0, r0, #8
    a852:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    a856:	4770      	bx	lr
    a858:	40001000 	.word	0x40001000

0000a85c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    a85c:	6800      	ldr	r0, [r0, #0]
    a85e:	4903      	ldr	r1, [pc, #12]	; (a86c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    a860:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a864:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    a868:	4770      	bx	lr
    a86a:	0000      	.short	0x0000
    a86c:	40001000 	.word	0x40001000

0000a870 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    a870:	b510      	push	{r4, lr}
    a872:	f000 fb41 	bl	aef8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    a876:	4807      	ldr	r0, [pc, #28]	; (a894 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    a878:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    a87c:	b2c0      	uxtb	r0, r0
    a87e:	2803      	cmp	r0, #3
    a880:	d001      	beq.n	a886 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    a882:	280b      	cmp	r0, #11
    a884:	d104      	bne.n	a890 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    a886:	f44f 7121 	mov.w	r1, #644	; 0x284
    a88a:	203e      	movs	r0, #62	; 0x3e
    a88c:	f7f9 fe5c 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a890:	bd10      	pop	{r4, pc}
    a892:	0000      	.short	0x0000
    a894:	40001000 	.word	0x40001000

0000a898 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    a898:	4901      	ldr	r1, [pc, #4]	; (a8a0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    a89a:	7548      	strb	r0, [r1, #21]
    a89c:	4770      	bx	lr
    a89e:	0000      	.short	0x0000
    a8a0:	20000dfc 	.word	0x20000dfc

0000a8a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a8a8:	4853      	ldr	r0, [pc, #332]	; (a9f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    a8aa:	f04f 0a01 	mov.w	sl, #1
    a8ae:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    a8b2:	4851      	ldr	r0, [pc, #324]	; (a9f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    a8b4:	300c      	adds	r0, #12
    a8b6:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    a8ba:	4850      	ldr	r0, [pc, #320]	; (a9fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    a8bc:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    a8c0:	4c4f      	ldr	r4, [pc, #316]	; (aa00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    a8c2:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    a8c6:	f000 f957 	bl	ab78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    a8ca:	494e      	ldr	r1, [pc, #312]	; (aa04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    a8cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a8ce:	6008      	str	r0, [r1, #0]
    a8d0:	f8df 9134 	ldr.w	r9, [pc, #308]	; aa08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    a8d4:	2600      	movs	r6, #0
    a8d6:	62a6      	str	r6, [r4, #40]	; 0x28
    a8d8:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    a8dc:	f240 121d 	movw	r2, #285	; 0x11d
    a8e0:	4391      	bics	r1, r2
    a8e2:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    a8e6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    a8ea:	f000 f9c5 	bl	ac78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    a8ee:	4605      	mov	r5, r0
    a8f0:	4841      	ldr	r0, [pc, #260]	; (a9f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    a8f2:	3008      	adds	r0, #8
    a8f4:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    a8f8:	61e0      	str	r0, [r4, #28]
    a8fa:	f7ff fdf1 	bl	a4e0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    a8fe:	f884 0020 	strb.w	r0, [r4, #32]
    a902:	7a60      	ldrb	r0, [r4, #9]
    a904:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    a908:	61a6      	str	r6, [r4, #24]
    a90a:	4e40      	ldr	r6, [pc, #256]	; (aa0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    a90c:	07a8      	lsls	r0, r5, #30
    a90e:	d502      	bpl.n	a916 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    a910:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    a914:	61a0      	str	r0, [r4, #24]
    a916:	0728      	lsls	r0, r5, #28
    a918:	d502      	bpl.n	a920 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    a91a:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    a91e:	61a0      	str	r0, [r4, #24]
    a920:	f04f 0800 	mov.w	r8, #0
    a924:	4639      	mov	r1, r7
    a926:	4628      	mov	r0, r5
    a928:	f000 fa32 	bl	ad90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    a92c:	b918      	cbnz	r0, a936 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    a92e:	f8c9 a010 	str.w	sl, [r9, #16]
    a932:	f04f 0801 	mov.w	r8, #1
    a936:	4f32      	ldr	r7, [pc, #200]	; (aa00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    a938:	07e8      	lsls	r0, r5, #31
    a93a:	f1a7 0710 	sub.w	r7, r7, #16
    a93e:	d002      	beq.n	a946 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    a940:	6838      	ldr	r0, [r7, #0]
    a942:	4780      	blx	r0
    a944:	e031      	b.n	a9aa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    a946:	07a8      	lsls	r0, r5, #30
    a948:	d526      	bpl.n	a998 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    a94a:	0768      	lsls	r0, r5, #29
    a94c:	d41e      	bmi.n	a98c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a94e:	f000 fc61 	bl	b214 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    a952:	b9d8      	cbnz	r0, a98c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a954:	f000 fc4e 	bl	b1f4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    a958:	b9c0      	cbnz	r0, a98c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a95a:	482d      	ldr	r0, [pc, #180]	; (aa10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    a95c:	6800      	ldr	r0, [r0, #0]
    a95e:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    a962:	f3c0 6100 	ubfx	r1, r0, #24, #1
    a966:	f000 030f 	and.w	r3, r0, #15
    a96a:	f3c0 1203 	ubfx	r2, r0, #4, #4
    a96e:	f3c0 2003 	ubfx	r0, r0, #8, #4
    a972:	b159      	cbz	r1, a98c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a974:	b10b      	cbz	r3, a97a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    a976:	b102      	cbz	r2, a97a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    a978:	b940      	cbnz	r0, a98c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a97a:	4825      	ldr	r0, [pc, #148]	; (aa10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    a97c:	1d00      	adds	r0, r0, #4
    a97e:	6800      	ldr	r0, [r0, #0]
    a980:	b120      	cbz	r0, a98c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a982:	f1bc 0f03 	cmp.w	ip, #3
    a986:	d201      	bcs.n	a98c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a988:	f045 0504 	orr.w	r5, r5, #4
    a98c:	f345 0080 	sbfx	r0, r5, #2, #1
    a990:	4641      	mov	r1, r8
    a992:	1c40      	adds	r0, r0, #1
    a994:	687a      	ldr	r2, [r7, #4]
    a996:	e007      	b.n	a9a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    a998:	f015 0f28 	tst.w	r5, #40	; 0x28
    a99c:	d005      	beq.n	a9aa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    a99e:	f345 1140 	sbfx	r1, r5, #5, #1
    a9a2:	68ba      	ldr	r2, [r7, #8]
    a9a4:	4640      	mov	r0, r8
    a9a6:	1c49      	adds	r1, r1, #1
    a9a8:	4790      	blx	r2
    a9aa:	06e8      	lsls	r0, r5, #27
    a9ac:	d501      	bpl.n	a9b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    a9ae:	68f8      	ldr	r0, [r7, #12]
    a9b0:	4780      	blx	r0
    a9b2:	7a60      	ldrb	r0, [r4, #9]
    a9b4:	2802      	cmp	r0, #2
    a9b6:	d11c      	bne.n	a9f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    a9b8:	7b20      	ldrb	r0, [r4, #12]
    a9ba:	2800      	cmp	r0, #0
    a9bc:	d019      	beq.n	a9f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    a9be:	2802      	cmp	r0, #2
    a9c0:	d004      	beq.n	a9cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    a9c2:	2801      	cmp	r0, #1
    a9c4:	d006      	beq.n	a9d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    a9c6:	f640 21e1 	movw	r1, #2785	; 0xae1
    a9ca:	e009      	b.n	a9e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    a9cc:	6921      	ldr	r1, [r4, #16]
    a9ce:	69e0      	ldr	r0, [r4, #28]
    a9d0:	4408      	add	r0, r1
    a9d2:	e008      	b.n	a9e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    a9d4:	69e1      	ldr	r1, [r4, #28]
    a9d6:	6920      	ldr	r0, [r4, #16]
    a9d8:	4288      	cmp	r0, r1
    a9da:	d804      	bhi.n	a9e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    a9dc:	f640 21e2 	movw	r1, #2786	; 0xae2
    a9e0:	203e      	movs	r0, #62	; 0x3e
    a9e2:	f7f9 fdb1 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9e6:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    a9ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a9ee:	f000 ba17 	b.w	ae20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    a9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a9f6:	0000      	.short	0x0000
    a9f8:	40008000 	.word	0x40008000
    a9fc:	4000b000 	.word	0x4000b000
    aa00:	20000dfc 	.word	0x20000dfc
    aa04:	4001f508 	.word	0x4001f508
    aa08:	40001000 	.word	0x40001000
    aa0c:	40008004 	.word	0x40008004
    aa10:	40001450 	.word	0x40001450

0000aa14 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    aa14:	b570      	push	{r4, r5, r6, lr}
    aa16:	4b15      	ldr	r3, [pc, #84]	; (aa6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    aa18:	888c      	ldrh	r4, [r1, #4]
    aa1a:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    aa1e:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    aa22:	780c      	ldrb	r4, [r1, #0]
    aa24:	f8d1 1001 	ldr.w	r1, [r1, #1]
    aa28:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    aa2c:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    aa30:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    aa34:	2101      	movs	r1, #1
    aa36:	4081      	lsls	r1, r0
    aa38:	430c      	orrs	r4, r1
    aa3a:	b2e4      	uxtb	r4, r4
    aa3c:	b132      	cbz	r2, aa4c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    aa3e:	2a01      	cmp	r2, #1
    aa40:	d00a      	beq.n	aa58 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    aa42:	f240 41ac 	movw	r1, #1196	; 0x4ac
    aa46:	203e      	movs	r0, #62	; 0x3e
    aa48:	f7f9 fd7e 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa4c:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    aa50:	f3c0 2007 	ubfx	r0, r0, #8, #8
    aa54:	4388      	bics	r0, r1
    aa56:	e004      	b.n	aa62 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    aa58:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    aa5c:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    aa60:	b2c0      	uxtb	r0, r0
    aa62:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    aa66:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    aa6a:	bd70      	pop	{r4, r5, r6, pc}
    aa6c:	40001000 	.word	0x40001000

0000aa70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    aa70:	4901      	ldr	r1, [pc, #4]	; (aa78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    aa72:	2001      	movs	r0, #1
    aa74:	7008      	strb	r0, [r1, #0]
    aa76:	4770      	bx	lr
    aa78:	2000024c 	.word	0x2000024c
    aa7c:	b510      	push	{r4, lr}
    aa7e:	4604      	mov	r4, r0
    aa80:	f000 fbc8 	bl	b214 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    aa84:	2800      	cmp	r0, #0
    aa86:	d00e      	beq.n	aaa6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    aa88:	4a09      	ldr	r2, [pc, #36]	; (aab0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    aa8a:	6811      	ldr	r1, [r2, #0]
    aa8c:	0650      	lsls	r0, r2, #25
    aa8e:	2c02      	cmp	r4, #2
    aa90:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    aa94:	d008      	beq.n	aaa8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    aa96:	f3c0 2006 	ubfx	r0, r0, #8, #7
    aa9a:	bf00      	nop
    aa9c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    aaa0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    aaa4:	6010      	str	r0, [r2, #0]
    aaa6:	bd10      	pop	{r4, pc}
    aaa8:	f3c0 6006 	ubfx	r0, r0, #24, #7
    aaac:	e7f6      	b.n	aa9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    aaae:	0000      	.short	0x0000
    aab0:	40001588 	.word	0x40001588
    aab4:	4815      	ldr	r0, [pc, #84]	; (ab0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    aab6:	7d41      	ldrb	r1, [r0, #21]
    aab8:	2925      	cmp	r1, #37	; 0x25
    aaba:	d00a      	beq.n	aad2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    aabc:	2926      	cmp	r1, #38	; 0x26
    aabe:	d00b      	beq.n	aad8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    aac0:	2927      	cmp	r1, #39	; 0x27
    aac2:	d00c      	beq.n	aade <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    aac4:	7d40      	ldrb	r0, [r0, #21]
    aac6:	0040      	lsls	r0, r0, #1
    aac8:	290a      	cmp	r1, #10
    aaca:	d80b      	bhi.n	aae4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    aacc:	f600 1064 	addw	r0, r0, #2404	; 0x964
    aad0:	e00a      	b.n	aae8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    aad2:	f640 1062 	movw	r0, #2402	; 0x962
    aad6:	e00f      	b.n	aaf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    aad8:	f640 107a 	movw	r0, #2426	; 0x97a
    aadc:	e00c      	b.n	aaf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    aade:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    aae2:	e009      	b.n	aaf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    aae4:	f600 1066 	addw	r0, r0, #2406	; 0x966
    aae8:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    aaec:	d204      	bcs.n	aaf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    aaee:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    aaf2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    aaf6:	e001      	b.n	aafc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    aaf8:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    aafc:	4a04      	ldr	r2, [pc, #16]	; (ab10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    aafe:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    ab02:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ab06:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    ab0a:	4770      	bx	lr
    ab0c:	20000dfc 	.word	0x20000dfc
    ab10:	40001000 	.word	0x40001000
    ab14:	4912      	ldr	r1, [pc, #72]	; (ab60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    ab16:	b508      	push	{r3, lr}
    ab18:	f991 2014 	ldrsb.w	r2, [r1, #20]
    ab1c:	7d49      	ldrb	r1, [r1, #21]
    ab1e:	2801      	cmp	r0, #1
    ab20:	d00a      	beq.n	ab38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    ab22:	2802      	cmp	r0, #2
    ab24:	d00a      	beq.n	ab3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    ab26:	2804      	cmp	r0, #4
    ab28:	d00a      	beq.n	ab40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    ab2a:	2808      	cmp	r0, #8
    ab2c:	d00a      	beq.n	ab44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    ab2e:	f240 31ed 	movw	r1, #1005	; 0x3ed
    ab32:	2006      	movs	r0, #6
    ab34:	f7f9 fd08 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab38:	2000      	movs	r0, #0
    ab3a:	e004      	b.n	ab46 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    ab3c:	2001      	movs	r0, #1
    ab3e:	e002      	b.n	ab46 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    ab40:	2003      	movs	r0, #3
    ab42:	e000      	b.n	ab46 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    ab44:	2002      	movs	r0, #2
    ab46:	466b      	mov	r3, sp
    ab48:	f7f6 f838 	bl	bbc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    ab4c:	b118      	cbz	r0, ab56 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    ab4e:	f240 41de 	movw	r1, #1246	; 0x4de
    ab52:	203e      	movs	r0, #62	; 0x3e
    ab54:	e7ee      	b.n	ab34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    ab56:	f99d 0000 	ldrsb.w	r0, [sp]
    ab5a:	f000 f9eb 	bl	af34 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    ab5e:	bd08      	pop	{r3, pc}
    ab60:	20000dfc 	.word	0x20000dfc
    ab64:	4803      	ldr	r0, [pc, #12]	; (ab74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    ab66:	7a01      	ldrb	r1, [r0, #8]
    ab68:	2901      	cmp	r1, #1
    ab6a:	d102      	bne.n	ab72 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    ab6c:	7a80      	ldrb	r0, [r0, #10]
    ab6e:	f7ff bfd1 	b.w	ab14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    ab72:	4770      	bx	lr
    ab74:	20000dfc 	.word	0x20000dfc
    ab78:	4805      	ldr	r0, [pc, #20]	; (ab90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    ab7a:	7a40      	ldrb	r0, [r0, #9]
    ab7c:	2801      	cmp	r0, #1
    ab7e:	d003      	beq.n	ab88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    ab80:	2802      	cmp	r0, #2
    ab82:	d103      	bne.n	ab8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    ab84:	f002 bf7c 	b.w	da80 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    ab88:	f002 bf86 	b.w	da98 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    ab8c:	4770      	bx	lr
    ab8e:	0000      	.short	0x0000
    ab90:	20000dfc 	.word	0x20000dfc
    ab94:	4807      	ldr	r0, [pc, #28]	; (abb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    ab96:	2100      	movs	r1, #0
    ab98:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    ab9c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    aba0:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    aba4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    aba8:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    abac:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    abb0:	4770      	bx	lr
    abb2:	0000      	.short	0x0000
    abb4:	40001000 	.word	0x40001000
    abb8:	4818      	ldr	r0, [pc, #96]	; (ac1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    abba:	b510      	push	{r4, lr}
    abbc:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    abc0:	07c1      	lsls	r1, r0, #31
    abc2:	d029      	beq.n	ac18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    abc4:	0781      	lsls	r1, r0, #30
    abc6:	d514      	bpl.n	abf2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    abc8:	4815      	ldr	r0, [pc, #84]	; (ac20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    abca:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    abce:	f041 0101 	orr.w	r1, r1, #1
    abd2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    abd6:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    abda:	b2c0      	uxtb	r0, r0
    abdc:	280b      	cmp	r0, #11
    abde:	d005      	beq.n	abec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    abe0:	280a      	cmp	r0, #10
    abe2:	d003      	beq.n	abec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    abe4:	2803      	cmp	r0, #3
    abe6:	d001      	beq.n	abec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    abe8:	2802      	cmp	r0, #2
    abea:	d115      	bne.n	ac18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    abec:	f240 510f 	movw	r1, #1295	; 0x50f
    abf0:	e00f      	b.n	ac12 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    abf2:	0740      	lsls	r0, r0, #29
    abf4:	d510      	bpl.n	ac18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    abf6:	480a      	ldr	r0, [pc, #40]	; (ac20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    abf8:	490a      	ldr	r1, [pc, #40]	; (ac24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    abfa:	3008      	adds	r0, #8
    abfc:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ac00:	f44f 71a0 	mov.w	r1, #320	; 0x140
    ac04:	4808      	ldr	r0, [pc, #32]	; (ac28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    ac06:	f002 ffda 	bl	dbbe <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    ac0a:	2800      	cmp	r0, #0
    ac0c:	d004      	beq.n	ac18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    ac0e:	f240 5117 	movw	r1, #1303	; 0x517
    ac12:	203e      	movs	r0, #62	; 0x3e
    ac14:	f7f9 fc98 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac18:	bd10      	pop	{r4, pc}
    ac1a:	0000      	.short	0x0000
    ac1c:	20000dfc 	.word	0x20000dfc
    ac20:	40001000 	.word	0x40001000
    ac24:	4001f098 	.word	0x4001f098
    ac28:	40008000 	.word	0x40008000
    ac2c:	4808      	ldr	r0, [pc, #32]	; (ac50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    ac2e:	4601      	mov	r1, r0
    ac30:	79c2      	ldrb	r2, [r0, #7]
    ac32:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    ac36:	b112      	cbz	r2, ac3e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    ac38:	2a01      	cmp	r2, #1
    ac3a:	d003      	beq.n	ac44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    ac3c:	e006      	b.n	ac4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    ac3e:	f041 0102 	orr.w	r1, r1, #2
    ac42:	e001      	b.n	ac48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    ac44:	f041 0104 	orr.w	r1, r1, #4
    ac48:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    ac4c:	f7ff bfb4 	b.w	abb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    ac50:	20000dfc 	.word	0x20000dfc
    ac54:	b510      	push	{r4, lr}
    ac56:	f000 fadd 	bl	b214 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ac5a:	2800      	cmp	r0, #0
    ac5c:	d108      	bne.n	ac70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    ac5e:	f000 fac9 	bl	b1f4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ac62:	2800      	cmp	r0, #0
    ac64:	d104      	bne.n	ac70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    ac66:	4803      	ldr	r0, [pc, #12]	; (ac74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    ac68:	6801      	ldr	r1, [r0, #0]
    ac6a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    ac6e:	6001      	str	r1, [r0, #0]
    ac70:	bd10      	pop	{r4, pc}
    ac72:	0000      	.short	0x0000
    ac74:	40001568 	.word	0x40001568
    ac78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac7c:	4d35      	ldr	r5, [pc, #212]	; (ad54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    ac7e:	2400      	movs	r4, #0
    ac80:	7b28      	ldrb	r0, [r5, #12]
    ac82:	b138      	cbz	r0, ac94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    ac84:	f44f 71a2 	mov.w	r1, #324	; 0x144
    ac88:	4833      	ldr	r0, [pc, #204]	; (ad58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    ac8a:	f002 ff98 	bl	dbbe <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    ac8e:	b108      	cbz	r0, ac94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    ac90:	2601      	movs	r6, #1
    ac92:	e000      	b.n	ac96 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    ac94:	2600      	movs	r6, #0
    ac96:	7a68      	ldrb	r0, [r5, #9]
    ac98:	4f30      	ldr	r7, [pc, #192]	; (ad5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    ac9a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    ac9e:	2801      	cmp	r0, #1
    aca0:	d002      	beq.n	aca8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    aca2:	2802      	cmp	r0, #2
    aca4:	d008      	beq.n	acb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    aca6:	e018      	b.n	acda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    aca8:	4638      	mov	r0, r7
    acaa:	f002 ff83 	bl	dbb4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    acae:	b108      	cbz	r0, acb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    acb0:	2408      	movs	r4, #8
    acb2:	e012      	b.n	acda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    acb4:	2400      	movs	r4, #0
    acb6:	e010      	b.n	acda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    acb8:	4638      	mov	r0, r7
    acba:	f002 ff7b 	bl	dbb4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    acbe:	b100      	cbz	r0, acc2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    acc0:	2002      	movs	r0, #2
    acc2:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    acc6:	43c9      	mvns	r1, r1
    acc8:	f341 0100 	sbfx	r1, r1, #0, #1
    accc:	1c49      	adds	r1, r1, #1
    acce:	d001      	beq.n	acd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    acd0:	2400      	movs	r4, #0
    acd2:	e000      	b.n	acd6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    acd4:	2404      	movs	r4, #4
    acd6:	4304      	orrs	r4, r0
    acd8:	4334      	orrs	r4, r6
    acda:	f014 0f0b 	tst.w	r4, #11
    acde:	d107      	bne.n	acf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    ace0:	f44f 7188 	mov.w	r1, #272	; 0x110
    ace4:	4638      	mov	r0, r7
    ace6:	f002 ff65 	bl	dbb4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    acea:	b100      	cbz	r0, acee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    acec:	2010      	movs	r0, #16
    acee:	4304      	orrs	r4, r0
    acf0:	481b      	ldr	r0, [pc, #108]	; (ad60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    acf2:	7800      	ldrb	r0, [r0, #0]
    acf4:	b1f8      	cbz	r0, ad36 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    acf6:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    acfa:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    acfe:	d007      	beq.n	ad10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    ad00:	f44f 718a 	mov.w	r1, #276	; 0x114
    ad04:	4638      	mov	r0, r7
    ad06:	f002 ff55 	bl	dbb4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    ad0a:	b108      	cbz	r0, ad10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    ad0c:	2001      	movs	r0, #1
    ad0e:	e000      	b.n	ad12 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    ad10:	2000      	movs	r0, #0
    ad12:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    ad16:	b13e      	cbz	r6, ad28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    ad18:	f44f 718c 	mov.w	r1, #280	; 0x118
    ad1c:	4638      	mov	r0, r7
    ad1e:	f002 ff49 	bl	dbb4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    ad22:	b108      	cbz	r0, ad28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    ad24:	2001      	movs	r0, #1
    ad26:	e000      	b.n	ad2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    ad28:	2000      	movs	r0, #0
    ad2a:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    ad2e:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    ad32:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    ad36:	f7ff ff2d 	bl	ab94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    ad3a:	06e0      	lsls	r0, r4, #27
    ad3c:	d506      	bpl.n	ad4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    ad3e:	0720      	lsls	r0, r4, #28
    ad40:	d404      	bmi.n	ad4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    ad42:	7a68      	ldrb	r0, [r5, #9]
    ad44:	2801      	cmp	r0, #1
    ad46:	d101      	bne.n	ad4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    ad48:	f044 0420 	orr.w	r4, r4, #32
    ad4c:	4620      	mov	r0, r4
    ad4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad52:	0000      	.short	0x0000
    ad54:	20000dfc 	.word	0x20000dfc
    ad58:	40008000 	.word	0x40008000
    ad5c:	40001000 	.word	0x40001000
    ad60:	2000024c 	.word	0x2000024c
    ad64:	4809      	ldr	r0, [pc, #36]	; (ad8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    ad66:	b510      	push	{r4, lr}
    ad68:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    ad6c:	f000 000f 	and.w	r0, r0, #15
    ad70:	2803      	cmp	r0, #3
    ad72:	d006      	beq.n	ad82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    ad74:	2804      	cmp	r0, #4
    ad76:	d006      	beq.n	ad86 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    ad78:	f240 11dd 	movw	r1, #477	; 0x1dd
    ad7c:	203e      	movs	r0, #62	; 0x3e
    ad7e:	f7f9 fbe3 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad82:	2001      	movs	r0, #1
    ad84:	bd10      	pop	{r4, pc}
    ad86:	2002      	movs	r0, #2
    ad88:	bd10      	pop	{r4, pc}
    ad8a:	0000      	.short	0x0000
    ad8c:	40001000 	.word	0x40001000
    ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad94:	4c19      	ldr	r4, [pc, #100]	; (adfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    ad96:	460d      	mov	r5, r1
    ad98:	7a21      	ldrb	r1, [r4, #8]
    ad9a:	b129      	cbz	r1, ada8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    ad9c:	f010 0f11 	tst.w	r0, #17
    ada0:	d00b      	beq.n	adba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    ada2:	f7ff fa1f 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ada6:	e027      	b.n	adf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    ada8:	4915      	ldr	r1, [pc, #84]	; (ae00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    adaa:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    adae:	6008      	str	r0, [r1, #0]
    adb0:	f000 f862 	bl	ae78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    adb4:	2000      	movs	r0, #0
    adb6:	7320      	strb	r0, [r4, #12]
    adb8:	e01e      	b.n	adf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    adba:	2901      	cmp	r1, #1
    adbc:	d001      	beq.n	adc2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    adbe:	2601      	movs	r6, #1
    adc0:	e000      	b.n	adc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    adc2:	2600      	movs	r6, #0
    adc4:	79e0      	ldrb	r0, [r4, #7]
    adc6:	2801      	cmp	r0, #1
    adc8:	d00e      	beq.n	ade8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    adca:	2700      	movs	r7, #0
    adcc:	f000 f854 	bl	ae78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    add0:	2196      	movs	r1, #150	; 0x96
    add2:	4630      	mov	r0, r6
    add4:	f000 f866 	bl	aea4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    add8:	4601      	mov	r1, r0
    adda:	b14f      	cbz	r7, adf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    addc:	353b      	adds	r5, #59	; 0x3b
    adde:	428d      	cmp	r5, r1
    ade0:	d904      	bls.n	adec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    ade2:	2000      	movs	r0, #0
    ade4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ade8:	2701      	movs	r7, #1
    adea:	e7ef      	b.n	adcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    adec:	2001      	movs	r0, #1
    adee:	71e0      	strb	r0, [r4, #7]
    adf0:	7aa2      	ldrb	r2, [r4, #10]
    adf2:	4630      	mov	r0, r6
    adf4:	f7ff fc6a 	bl	a6cc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    adf8:	2001      	movs	r0, #1
    adfa:	e7f3      	b.n	ade4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    adfc:	20000dfc 	.word	0x20000dfc
    ae00:	4001f508 	.word	0x4001f508
    ae04:	4805      	ldr	r0, [pc, #20]	; (ae1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    ae06:	2100      	movs	r1, #0
    ae08:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    ae0c:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ae10:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    ae14:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ae18:	4770      	bx	lr
    ae1a:	0000      	.short	0x0000
    ae1c:	40001000 	.word	0x40001000
    ae20:	4804      	ldr	r0, [pc, #16]	; (ae34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    ae22:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ae24:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    ae28:	6281      	str	r1, [r0, #40]	; 0x28
    ae2a:	4903      	ldr	r1, [pc, #12]	; (ae38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    ae2c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    ae30:	6008      	str	r0, [r1, #0]
    ae32:	4770      	bx	lr
    ae34:	20000dfc 	.word	0x20000dfc
    ae38:	4001f504 	.word	0x4001f504
    ae3c:	4a07      	ldr	r2, [pc, #28]	; (ae5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    ae3e:	2000      	movs	r0, #0
    ae40:	3208      	adds	r2, #8
    ae42:	4906      	ldr	r1, [pc, #24]	; (ae5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    ae44:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ae48:	1d0a      	adds	r2, r1, #4
    ae4a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ae4e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ae52:	4902      	ldr	r1, [pc, #8]	; (ae5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    ae54:	310c      	adds	r1, #12
    ae56:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ae5a:	4770      	bx	lr
    ae5c:	40008000 	.word	0x40008000
    ae60:	4903      	ldr	r1, [pc, #12]	; (ae70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    ae62:	79c9      	ldrb	r1, [r1, #7]
    ae64:	2900      	cmp	r1, #0
    ae66:	d102      	bne.n	ae6e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    ae68:	4902      	ldr	r1, [pc, #8]	; (ae74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    ae6a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ae6e:	4770      	bx	lr
    ae70:	20000dfc 	.word	0x20000dfc
    ae74:	4001f098 	.word	0x4001f098
    ae78:	4802      	ldr	r0, [pc, #8]	; (ae84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    ae7a:	2100      	movs	r1, #0
    ae7c:	71c1      	strb	r1, [r0, #7]
    ae7e:	7201      	strb	r1, [r0, #8]
    ae80:	7241      	strb	r1, [r0, #9]
    ae82:	4770      	bx	lr
    ae84:	20000dfc 	.word	0x20000dfc
    ae88:	4a05      	ldr	r2, [pc, #20]	; (aea0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    ae8a:	79d2      	ldrb	r2, [r2, #7]
    ae8c:	2a01      	cmp	r2, #1
    ae8e:	d006      	beq.n	ae9e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    ae90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ae94:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    ae98:	fbb1 f1f2 	udiv	r1, r1, r2
    ae9c:	1a40      	subs	r0, r0, r1
    ae9e:	4770      	bx	lr
    aea0:	20000dfc 	.word	0x20000dfc
    aea4:	b570      	push	{r4, r5, r6, lr}
    aea6:	4c13      	ldr	r4, [pc, #76]	; (aef4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    aea8:	4603      	mov	r3, r0
    aeaa:	460d      	mov	r5, r1
    aeac:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    aeb0:	2000      	movs	r0, #0
    aeb2:	b15a      	cbz	r2, aecc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    aeb4:	4621      	mov	r1, r4
    aeb6:	f891 1020 	ldrb.w	r1, [r1, #32]
    aeba:	b163      	cbz	r3, aed6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    aebc:	2b01      	cmp	r3, #1
    aebe:	d111      	bne.n	aee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    aec0:	2a01      	cmp	r2, #1
    aec2:	4628      	mov	r0, r5
    aec4:	d012      	beq.n	aeec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    aec6:	f002 febf 	bl	dc48 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    aeca:	e009      	b.n	aee0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    aecc:	f240 7152 	movw	r1, #1874	; 0x752
    aed0:	203e      	movs	r0, #62	; 0x3e
    aed2:	f7f9 fb39 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aed6:	2a01      	cmp	r2, #1
    aed8:	4628      	mov	r0, r5
    aeda:	d004      	beq.n	aee6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    aedc:	f002 fec2 	bl	dc64 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    aee0:	69e1      	ldr	r1, [r4, #28]
    aee2:	4408      	add	r0, r1
    aee4:	bd70      	pop	{r4, r5, r6, pc}
    aee6:	f002 fed7 	bl	dc98 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    aeea:	e7f9      	b.n	aee0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    aeec:	f002 fec5 	bl	dc7a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    aef0:	e7f6      	b.n	aee0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    aef2:	0000      	.short	0x0000
    aef4:	20000dfc 	.word	0x20000dfc
    aef8:	b510      	push	{r4, lr}
    aefa:	2200      	movs	r2, #0
    aefc:	2901      	cmp	r1, #1
    aefe:	d008      	beq.n	af12 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    af00:	2902      	cmp	r1, #2
    af02:	d004      	beq.n	af0e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    af04:	f240 2163 	movw	r1, #611	; 0x263
    af08:	203e      	movs	r0, #62	; 0x3e
    af0a:	f7f9 fb1d 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    af12:	4905      	ldr	r1, [pc, #20]	; (af28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    af14:	430a      	orrs	r2, r1
    af16:	4905      	ldr	r1, [pc, #20]	; (af2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    af18:	600a      	str	r2, [r1, #0]
    af1a:	4905      	ldr	r1, [pc, #20]	; (af30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    af1c:	4308      	orrs	r0, r1
    af1e:	4903      	ldr	r1, [pc, #12]	; (af2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    af20:	1d09      	adds	r1, r1, #4
    af22:	6008      	str	r0, [r1, #0]
    af24:	bd10      	pop	{r4, pc}
    af26:	0000      	.short	0x0000
    af28:	00100108 	.word	0x00100108
    af2c:	40001514 	.word	0x40001514
    af30:	02030000 	.word	0x02030000

0000af34 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    af34:	4901      	ldr	r1, [pc, #4]	; (af3c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    af36:	b2c0      	uxtb	r0, r0
    af38:	6008      	str	r0, [r1, #0]
    af3a:	4770      	bx	lr
    af3c:	4000150c 	.word	0x4000150c

0000af40 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    af40:	b510      	push	{r4, lr}
    af42:	4907      	ldr	r1, [pc, #28]	; (af60 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    af44:	2801      	cmp	r0, #1
    af46:	d005      	beq.n	af54 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    af48:	2802      	cmp	r0, #2
    af4a:	d005      	beq.n	af58 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    af4c:	218b      	movs	r1, #139	; 0x8b
    af4e:	203f      	movs	r0, #63	; 0x3f
    af50:	f7f9 fafa 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af54:	2003      	movs	r0, #3
    af56:	e000      	b.n	af5a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    af58:	2004      	movs	r0, #4
    af5a:	6008      	str	r0, [r1, #0]
    af5c:	bd10      	pop	{r4, pc}
    af5e:	0000      	.short	0x0000
    af60:	40001510 	.word	0x40001510

0000af64 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    af64:	4770      	bx	lr
    af66:	2100      	movs	r1, #0
    af68:	7081      	strb	r1, [r0, #2]
    af6a:	7001      	strb	r1, [r0, #0]
    af6c:	7041      	strb	r1, [r0, #1]
    af6e:	4770      	bx	lr

0000af70 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    af70:	b570      	push	{r4, r5, r6, lr}
    af72:	f7f5 fe3d 	bl	bf0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    af76:	4605      	mov	r5, r0
    af78:	2400      	movs	r4, #0
    af7a:	e006      	b.n	af8a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    af7c:	4620      	mov	r0, r4
    af7e:	f7f5 fe3d 	bl	bfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    af82:	f7ff fff0 	bl	af66 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    af86:	1c64      	adds	r4, r4, #1
    af88:	b2e4      	uxtb	r4, r4
    af8a:	42ac      	cmp	r4, r5
    af8c:	d3f6      	bcc.n	af7c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    af8e:	bd70      	pop	{r4, r5, r6, pc}

0000af90 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    af90:	2000      	movs	r0, #0
    af92:	f7f8 bc3d 	b.w	3810 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000af96 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    af96:	b510      	push	{r4, lr}
    af98:	f7f8 f910 	bl	31bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    af9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afa0:	f000 b800 	b.w	afa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000afa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    afa4:	0a41      	lsrs	r1, r0, #9
    afa6:	f643 5209 	movw	r2, #15625	; 0x3d09
    afaa:	4351      	muls	r1, r2
    afac:	f3c0 0008 	ubfx	r0, r0, #0, #9
    afb0:	fb10 f002 	smulbb	r0, r0, r2
    afb4:	f500 7080 	add.w	r0, r0, #256	; 0x100
    afb8:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    afbc:	4770      	bx	lr

0000afbe <MPSL_IRQ_RADIO_Handler>:
    afbe:	f7f6 bf25 	b.w	1e0c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    afc2:	2800      	cmp	r0, #0
    afc4:	db09      	blt.n	afda <MPSL_IRQ_RADIO_Handler+0x1c>
    afc6:	f000 021f 	and.w	r2, r0, #31
    afca:	2101      	movs	r1, #1
    afcc:	4091      	lsls	r1, r2
    afce:	0940      	lsrs	r0, r0, #5
    afd0:	0080      	lsls	r0, r0, #2
    afd2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    afd6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    afda:	4770      	bx	lr
    afdc:	2800      	cmp	r0, #0
    afde:	db0d      	blt.n	affc <MPSL_IRQ_RADIO_Handler+0x3e>
    afe0:	f000 021f 	and.w	r2, r0, #31
    afe4:	2101      	movs	r1, #1
    afe6:	4091      	lsls	r1, r2
    afe8:	0940      	lsrs	r0, r0, #5
    afea:	0080      	lsls	r0, r0, #2
    afec:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    aff0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    aff4:	f3bf 8f4f 	dsb	sy
    aff8:	f3bf 8f6f 	isb	sy
    affc:	4770      	bx	lr

0000affe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    affe:	b570      	push	{r4, r5, r6, lr}
    b000:	4602      	mov	r2, r0
    b002:	2000      	movs	r0, #0
    b004:	2900      	cmp	r1, #0
    b006:	d01d      	beq.n	b044 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    b008:	fba2 0101 	umull	r0, r1, r2, r1
    b00c:	0a40      	lsrs	r0, r0, #9
    b00e:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    b012:	0a49      	lsrs	r1, r1, #9
    b014:	1c40      	adds	r0, r0, #1
    b016:	f141 0100 	adc.w	r1, r1, #0
    b01a:	f240 72a1 	movw	r2, #1953	; 0x7a1
    b01e:	1883      	adds	r3, r0, r2
    b020:	f141 0100 	adc.w	r1, r1, #0
    b024:	1c5b      	adds	r3, r3, #1
    b026:	f141 0400 	adc.w	r4, r1, #0
    b02a:	2100      	movs	r1, #0
    b02c:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    b030:	41a1      	sbcs	r1, r4
    b032:	d203      	bcs.n	b03c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    b034:	2171      	movs	r1, #113	; 0x71
    b036:	206d      	movs	r0, #109	; 0x6d
    b038:	f7f8 ffa6 	bl	3f88 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b03c:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    b040:	fbb0 f0f2 	udiv	r0, r0, r2
    b044:	bd70      	pop	{r4, r5, r6, pc}
    b046:	5840      	ldr	r0, [r0, r1]
    b048:	2800      	cmp	r0, #0
    b04a:	d000      	beq.n	b04e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    b04c:	2001      	movs	r0, #1
    b04e:	4770      	bx	lr
    b050:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    b054:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    b058:	f002 0201 	and.w	r2, r2, #1
    b05c:	03c0      	lsls	r0, r0, #15
    b05e:	d503      	bpl.n	b068 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b060:	428a      	cmp	r2, r1
    b062:	d101      	bne.n	b068 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b064:	2001      	movs	r0, #1
    b066:	4770      	bx	lr
    b068:	2000      	movs	r0, #0
    b06a:	4770      	bx	lr

0000b06c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    b06c:	b510      	push	{r4, lr}
    b06e:	2101      	movs	r1, #1
    b070:	0788      	lsls	r0, r1, #30
    b072:	f7f8 ff33 	bl	3edc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b076:	2800      	cmp	r0, #0
    b078:	d000      	beq.n	b07c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    b07a:	2001      	movs	r0, #1
    b07c:	bd10      	pop	{r4, pc}

0000b07e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    b07e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b082:	2101      	movs	r1, #1
    b084:	6001      	str	r1, [r0, #0]
    b086:	4770      	bx	lr

0000b088 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    b088:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    b08c:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    b090:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    b094:	f002 0203 	and.w	r2, r2, #3
    b098:	03c9      	lsls	r1, r1, #15
    b09a:	d503      	bpl.n	b0a4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b09c:	4282      	cmp	r2, r0
    b09e:	d101      	bne.n	b0a4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b0a0:	2001      	movs	r0, #1
    b0a2:	4770      	bx	lr
    b0a4:	2000      	movs	r0, #0
    b0a6:	4770      	bx	lr

0000b0a8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    b0a8:	b510      	push	{r4, lr}
    b0aa:	2100      	movs	r1, #0
    b0ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b0b0:	f7f8 ff14 	bl	3edc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b0b4:	2800      	cmp	r0, #0
    b0b6:	d000      	beq.n	b0ba <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    b0b8:	2001      	movs	r0, #1
    b0ba:	bd10      	pop	{r4, pc}
    b0bc:	2800      	cmp	r0, #0
    b0be:	db09      	blt.n	b0d4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    b0c0:	f000 021f 	and.w	r2, r0, #31
    b0c4:	2101      	movs	r1, #1
    b0c6:	4091      	lsls	r1, r2
    b0c8:	0940      	lsrs	r0, r0, #5
    b0ca:	0080      	lsls	r0, r0, #2
    b0cc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b0d0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b0d4:	4770      	bx	lr
    b0d6:	2800      	cmp	r0, #0
    b0d8:	db0d      	blt.n	b0f6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    b0da:	f000 021f 	and.w	r2, r0, #31
    b0de:	2101      	movs	r1, #1
    b0e0:	4091      	lsls	r1, r2
    b0e2:	0940      	lsrs	r0, r0, #5
    b0e4:	0080      	lsls	r0, r0, #2
    b0e6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b0ea:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b0ee:	f3bf 8f4f 	dsb	sy
    b0f2:	f3bf 8f6f 	isb	sy
    b0f6:	4770      	bx	lr
    b0f8:	00021000 	.word	0x00021000
    b0fc:	000000fa 	.word	0x000000fa
    b100:	24625723 	.word	0x24625723
    b104:	578f3123 	.word	0x578f3123
    b108:	2fd1ee74 	.word	0x2fd1ee74
    b10c:	4594c088 	.word	0x4594c088
    b110:	36f9a2f7 	.word	0x36f9a2f7
    b114:	2800      	cmp	r0, #0
    b116:	db09      	blt.n	b12c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    b118:	f000 021f 	and.w	r2, r0, #31
    b11c:	2101      	movs	r1, #1
    b11e:	4091      	lsls	r1, r2
    b120:	0940      	lsrs	r0, r0, #5
    b122:	0080      	lsls	r0, r0, #2
    b124:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b128:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b12c:	4770      	bx	lr

0000b12e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    b12e:	f3ef 8110 	mrs	r1, PRIMASK
    b132:	b672      	cpsid	i
    b134:	7802      	ldrb	r2, [r0, #0]
    b136:	2a01      	cmp	r2, #1
    b138:	d001      	beq.n	b13e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    b13a:	2201      	movs	r2, #1
    b13c:	e000      	b.n	b140 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    b13e:	2200      	movs	r2, #0
    b140:	2301      	movs	r3, #1
    b142:	7003      	strb	r3, [r0, #0]
    b144:	b901      	cbnz	r1, b148 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    b146:	b662      	cpsie	i
    b148:	b10a      	cbz	r2, b14e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    b14a:	2000      	movs	r0, #0
    b14c:	4770      	bx	lr
    b14e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    b152:	4770      	bx	lr

0000b154 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    b154:	2100      	movs	r1, #0
    b156:	7001      	strb	r1, [r0, #0]
    b158:	4608      	mov	r0, r1
    b15a:	4770      	bx	lr

0000b15c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    b15c:	f3ef 8110 	mrs	r1, PRIMASK
    b160:	b672      	cpsid	i
    b162:	2200      	movs	r2, #0
    b164:	7002      	strb	r2, [r0, #0]
    b166:	b901      	cbnz	r1, b16a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    b168:	b662      	cpsie	i
    b16a:	2000      	movs	r0, #0
    b16c:	4770      	bx	lr

0000b16e <mpsl_low_priority_process>:
    b16e:	f7f8 bff7 	b.w	4160 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000b172 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    b172:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b176:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b17a:	280f      	cmp	r0, #15
    b17c:	d001      	beq.n	b182 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    b17e:	2000      	movs	r0, #0
    b180:	4770      	bx	lr
    b182:	2001      	movs	r0, #1
    b184:	4770      	bx	lr

0000b186 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    b186:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b18a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b18e:	280a      	cmp	r0, #10
    b190:	d001      	beq.n	b196 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    b192:	2000      	movs	r0, #0
    b194:	4770      	bx	lr
    b196:	2001      	movs	r0, #1
    b198:	4770      	bx	lr

0000b19a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    b19a:	b500      	push	{lr}
    b19c:	f7ff fff3 	bl	b186 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b1a0:	b120      	cbz	r0, b1ac <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    b1a2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b1a6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b1aa:	b108      	cbz	r0, b1b0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    b1ac:	2000      	movs	r0, #0
    b1ae:	bd00      	pop	{pc}
    b1b0:	2001      	movs	r0, #1
    b1b2:	bd00      	pop	{pc}

0000b1b4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    b1b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b1b8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b1bc:	280e      	cmp	r0, #14
    b1be:	d001      	beq.n	b1c4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    b1c0:	2000      	movs	r0, #0
    b1c2:	4770      	bx	lr
    b1c4:	2001      	movs	r0, #1
    b1c6:	4770      	bx	lr

0000b1c8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    b1c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b1cc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b1d0:	2810      	cmp	r0, #16
    b1d2:	d001      	beq.n	b1d8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    b1d4:	2000      	movs	r0, #0
    b1d6:	4770      	bx	lr
    b1d8:	2001      	movs	r0, #1
    b1da:	4770      	bx	lr

0000b1dc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    b1dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b1e0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b1e4:	2806      	cmp	r0, #6
    b1e6:	d003      	beq.n	b1f0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    b1e8:	1c40      	adds	r0, r0, #1
    b1ea:	d001      	beq.n	b1f0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    b1ec:	2000      	movs	r0, #0
    b1ee:	4770      	bx	lr
    b1f0:	2001      	movs	r0, #1
    b1f2:	4770      	bx	lr

0000b1f4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    b1f4:	b500      	push	{lr}
    b1f6:	f7ff fff1 	bl	b1dc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b1fa:	b148      	cbz	r0, b210 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b1fc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b200:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b204:	2806      	cmp	r0, #6
    b206:	d303      	bcc.n	b210 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b208:	1c40      	adds	r0, r0, #1
    b20a:	d001      	beq.n	b210 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b20c:	2001      	movs	r0, #1
    b20e:	bd00      	pop	{pc}
    b210:	2000      	movs	r0, #0
    b212:	bd00      	pop	{pc}

0000b214 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    b214:	b500      	push	{lr}
    b216:	f7ff ffe1 	bl	b1dc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b21a:	b138      	cbz	r0, b22c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    b21c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b220:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b224:	2806      	cmp	r0, #6
    b226:	d303      	bcc.n	b230 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    b228:	1c40      	adds	r0, r0, #1
    b22a:	d001      	beq.n	b230 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    b22c:	2000      	movs	r0, #0
    b22e:	bd00      	pop	{pc}
    b230:	2001      	movs	r0, #1
    b232:	bd00      	pop	{pc}

0000b234 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    b234:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b238:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b23c:	280d      	cmp	r0, #13
    b23e:	d001      	beq.n	b244 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    b240:	2000      	movs	r0, #0
    b242:	4770      	bx	lr
    b244:	2001      	movs	r0, #1
    b246:	4770      	bx	lr

0000b248 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    b248:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b24c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b250:	2808      	cmp	r0, #8
    b252:	d001      	beq.n	b258 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    b254:	2000      	movs	r0, #0
    b256:	4770      	bx	lr
    b258:	2001      	movs	r0, #1
    b25a:	4770      	bx	lr

0000b25c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    b25c:	2a00      	cmp	r2, #0
    b25e:	bf04      	itt	eq
    b260:	2000      	moveq	r0, #0
    b262:	4770      	bxeq	lr
    b264:	1e52      	subs	r2, r2, #1
    b266:	d007      	beq.n	b278 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    b268:	7803      	ldrb	r3, [r0, #0]
    b26a:	f891 c000 	ldrb.w	ip, [r1]
    b26e:	4563      	cmp	r3, ip
    b270:	bf04      	itt	eq
    b272:	1c40      	addeq	r0, r0, #1
    b274:	1c49      	addeq	r1, r1, #1
    b276:	d0f5      	beq.n	b264 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    b278:	7800      	ldrb	r0, [r0, #0]
    b27a:	7809      	ldrb	r1, [r1, #0]
    b27c:	1a40      	subs	r0, r0, r1
    b27e:	4770      	bx	lr

0000b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    b280:	b4f0      	push	{r4, r5, r6, r7}
    b282:	ea80 0c01 	eor.w	ip, r0, r1
    b286:	4603      	mov	r3, r0
    b288:	f01c 0f03 	tst.w	ip, #3
    b28c:	d13c      	bne.n	b308 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b28e:	f013 0f03 	tst.w	r3, #3
    b292:	d00b      	beq.n	b2ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    b294:	2a00      	cmp	r2, #0
    b296:	bf04      	itt	eq
    b298:	bcf0      	popeq	{r4, r5, r6, r7}
    b29a:	4770      	bxeq	lr
    b29c:	f811 cb01 	ldrb.w	ip, [r1], #1
    b2a0:	f803 cb01 	strb.w	ip, [r3], #1
    b2a4:	1e52      	subs	r2, r2, #1
    b2a6:	f013 0f03 	tst.w	r3, #3
    b2aa:	d1f3      	bne.n	b294 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    b2ac:	2a03      	cmp	r2, #3
    b2ae:	d94f      	bls.n	b350 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    b2b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b2b4:	d24c      	bcs.n	b350 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    b2b6:	f1c2 0c00 	rsb	ip, r2, #0
    b2ba:	ea4f 74ec 	mov.w	r4, ip, asr #31
    b2be:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    b2c2:	ea4f 0cac 	mov.w	ip, ip, asr #2
    b2c6:	f1cc 0c00 	rsb	ip, ip, #0
    b2ca:	f1bc 0f00 	cmp.w	ip, #0
    b2ce:	dd1b      	ble.n	b308 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b2d0:	1f0d      	subs	r5, r1, #4
    b2d2:	1f1c      	subs	r4, r3, #4
    b2d4:	f01c 0f01 	tst.w	ip, #1
    b2d8:	d003      	beq.n	b2e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    b2da:	f855 6f04 	ldr.w	r6, [r5, #4]!
    b2de:	f844 6f04 	str.w	r6, [r4, #4]!
    b2e2:	ea5f 066c 	movs.w	r6, ip, asr #1
    b2e6:	d007      	beq.n	b2f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    b2e8:	686f      	ldr	r7, [r5, #4]
    b2ea:	6067      	str	r7, [r4, #4]
    b2ec:	f855 7f08 	ldr.w	r7, [r5, #8]!
    b2f0:	f844 7f08 	str.w	r7, [r4, #8]!
    b2f4:	1e76      	subs	r6, r6, #1
    b2f6:	d1f7      	bne.n	b2e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    b2f8:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    b2fc:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    b300:	f1cc 0c00 	rsb	ip, ip, #0
    b304:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    b308:	2a00      	cmp	r2, #0
    b30a:	bf04      	itt	eq
    b30c:	bcf0      	popeq	{r4, r5, r6, r7}
    b30e:	4770      	bxeq	lr
    b310:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b314:	d226      	bcs.n	b364 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    b316:	2a00      	cmp	r2, #0
    b318:	bfdc      	itt	le
    b31a:	bcf0      	pople	{r4, r5, r6, r7}
    b31c:	4770      	bxle	lr
    b31e:	1e49      	subs	r1, r1, #1
    b320:	1e5b      	subs	r3, r3, #1
    b322:	f012 0f01 	tst.w	r2, #1
    b326:	d003      	beq.n	b330 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    b328:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    b32c:	f803 cf01 	strb.w	ip, [r3, #1]!
    b330:	1052      	asrs	r2, r2, #1
    b332:	bf04      	itt	eq
    b334:	bcf0      	popeq	{r4, r5, r6, r7}
    b336:	4770      	bxeq	lr
    b338:	f891 c001 	ldrb.w	ip, [r1, #1]
    b33c:	f883 c001 	strb.w	ip, [r3, #1]
    b340:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    b344:	f803 cf02 	strb.w	ip, [r3, #2]!
    b348:	1e52      	subs	r2, r2, #1
    b34a:	d1f5      	bne.n	b338 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    b34c:	bcf0      	pop	{r4, r5, r6, r7}
    b34e:	4770      	bx	lr
    b350:	2a04      	cmp	r2, #4
    b352:	d3d9      	bcc.n	b308 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b354:	f851 cb04 	ldr.w	ip, [r1], #4
    b358:	1f12      	subs	r2, r2, #4
    b35a:	f843 cb04 	str.w	ip, [r3], #4
    b35e:	2a04      	cmp	r2, #4
    b360:	d2f8      	bcs.n	b354 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    b362:	e7d1      	b.n	b308 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b364:	f811 cb01 	ldrb.w	ip, [r1], #1
    b368:	f803 cb01 	strb.w	ip, [r3], #1
    b36c:	1e52      	subs	r2, r2, #1
    b36e:	d1f9      	bne.n	b364 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    b370:	bcf0      	pop	{r4, r5, r6, r7}
    b372:	4770      	bx	lr

0000b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    b374:	b470      	push	{r4, r5, r6}
    b376:	4603      	mov	r3, r0
    b378:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    b37c:	f010 0f03 	tst.w	r0, #3
    b380:	d009      	beq.n	b396 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    b382:	2a00      	cmp	r2, #0
    b384:	bf04      	itt	eq
    b386:	bc70      	popeq	{r4, r5, r6}
    b388:	4770      	bxeq	lr
    b38a:	f803 cb01 	strb.w	ip, [r3], #1
    b38e:	1e52      	subs	r2, r2, #1
    b390:	f013 0f03 	tst.w	r3, #3
    b394:	d1f5      	bne.n	b382 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    b396:	b2c9      	uxtb	r1, r1
    b398:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b39c:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    b3a0:	2a03      	cmp	r2, #3
    b3a2:	d939      	bls.n	b418 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    b3a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b3a8:	d236      	bcs.n	b418 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    b3aa:	4251      	negs	r1, r2
    b3ac:	17cc      	asrs	r4, r1, #31
    b3ae:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    b3b2:	1089      	asrs	r1, r1, #2
    b3b4:	424e      	negs	r6, r1
    b3b6:	2e00      	cmp	r6, #0
    b3b8:	dd11      	ble.n	b3de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    b3ba:	1f19      	subs	r1, r3, #4
    b3bc:	f016 0f01 	tst.w	r6, #1
    b3c0:	bf18      	it	ne
    b3c2:	f841 5f04 	strne.w	r5, [r1, #4]!
    b3c6:	1074      	asrs	r4, r6, #1
    b3c8:	d004      	beq.n	b3d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    b3ca:	604d      	str	r5, [r1, #4]
    b3cc:	f841 5f08 	str.w	r5, [r1, #8]!
    b3d0:	1e64      	subs	r4, r4, #1
    b3d2:	d1fa      	bne.n	b3ca <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    b3d4:	4271      	negs	r1, r6
    b3d6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    b3da:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    b3de:	2a00      	cmp	r2, #0
    b3e0:	bf04      	itt	eq
    b3e2:	bc70      	popeq	{r4, r5, r6}
    b3e4:	4770      	bxeq	lr
    b3e6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b3ea:	d21d      	bcs.n	b428 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    b3ec:	2a00      	cmp	r2, #0
    b3ee:	bfdc      	itt	le
    b3f0:	bc70      	pople	{r4, r5, r6}
    b3f2:	4770      	bxle	lr
    b3f4:	1e59      	subs	r1, r3, #1
    b3f6:	f012 0f01 	tst.w	r2, #1
    b3fa:	bf18      	it	ne
    b3fc:	f801 cf01 	strbne.w	ip, [r1, #1]!
    b400:	1052      	asrs	r2, r2, #1
    b402:	bf04      	itt	eq
    b404:	bc70      	popeq	{r4, r5, r6}
    b406:	4770      	bxeq	lr
    b408:	f881 c001 	strb.w	ip, [r1, #1]
    b40c:	f801 cf02 	strb.w	ip, [r1, #2]!
    b410:	1e52      	subs	r2, r2, #1
    b412:	d1f9      	bne.n	b408 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    b414:	bc70      	pop	{r4, r5, r6}
    b416:	4770      	bx	lr
    b418:	2a04      	cmp	r2, #4
    b41a:	d3e0      	bcc.n	b3de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    b41c:	1f12      	subs	r2, r2, #4
    b41e:	f843 5b04 	str.w	r5, [r3], #4
    b422:	2a04      	cmp	r2, #4
    b424:	d2fa      	bcs.n	b41c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    b426:	e7da      	b.n	b3de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    b428:	f803 cb01 	strb.w	ip, [r3], #1
    b42c:	1e52      	subs	r2, r2, #1
    b42e:	d1fb      	bne.n	b428 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    b430:	bc70      	pop	{r4, r5, r6}
    b432:	4770      	bx	lr
    b434:	f04f 30ff 	mov.w	r0, #4294967295
    b438:	4770      	bx	lr
    b43a:	2000      	movs	r0, #0
    b43c:	4770      	bx	lr
    b43e:	2000      	movs	r0, #0
    b440:	4770      	bx	lr
    b442:	f04f 30ff 	mov.w	r0, #4294967295
    b446:	4770      	bx	lr
    b448:	4770      	bx	lr
    b44a:	4770      	bx	lr
    b44c:	2000      	movs	r0, #0
    b44e:	4770      	bx	lr
    b450:	f04f 30ff 	mov.w	r0, #4294967295
    b454:	4770      	bx	lr
    b456:	f04f 30ff 	mov.w	r0, #4294967295
    b45a:	4770      	bx	lr
    b45c:	2100      	movs	r1, #0
    b45e:	7001      	strb	r1, [r0, #0]
    b460:	4770      	bx	lr
    b462:	f04f 30ff 	mov.w	r0, #4294967295
    b466:	4770      	bx	lr
    b468:	f04f 30ff 	mov.w	r0, #4294967295
    b46c:	4770      	bx	lr
    b46e:	2000      	movs	r0, #0
    b470:	4770      	bx	lr
    b472:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b476:	4606      	mov	r6, r0
    b478:	460c      	mov	r4, r1
    b47a:	7808      	ldrb	r0, [r1, #0]
    b47c:	7849      	ldrb	r1, [r1, #1]
    b47e:	2700      	movs	r7, #0
    b480:	4408      	add	r0, r1
    b482:	4691      	mov	r9, r2
    b484:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    b488:	463d      	mov	r5, r7
    b48a:	e00e      	b.n	b4aa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    b48c:	7a23      	ldrb	r3, [r4, #8]
    b48e:	2b02      	cmp	r3, #2
    b490:	d200      	bcs.n	b494 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    b492:	2302      	movs	r3, #2
    b494:	79e2      	ldrb	r2, [r4, #7]
    b496:	2a03      	cmp	r2, #3
    b498:	d200      	bcs.n	b49c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    b49a:	2203      	movs	r2, #3
    b49c:	79a1      	ldrb	r1, [r4, #6]
    b49e:	7960      	ldrb	r0, [r4, #5]
    b4a0:	f000 fe44 	bl	c12c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    b4a4:	1c6d      	adds	r5, r5, #1
    b4a6:	4407      	add	r7, r0
    b4a8:	b2ed      	uxtb	r5, r5
    b4aa:	4545      	cmp	r5, r8
    b4ac:	d3ee      	bcc.n	b48c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    b4ae:	6830      	ldr	r0, [r6, #0]
    b4b0:	1cc0      	adds	r0, r0, #3
    b4b2:	f020 0003 	bic.w	r0, r0, #3
    b4b6:	6030      	str	r0, [r6, #0]
    b4b8:	f1b9 0f00 	cmp.w	r9, #0
    b4bc:	d000      	beq.n	b4c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    b4be:	2000      	movs	r0, #0
    b4c0:	463a      	mov	r2, r7
    b4c2:	4641      	mov	r1, r8
    b4c4:	f7f9 fae4 	bl	4a90 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    b4c8:	6831      	ldr	r1, [r6, #0]
    b4ca:	4408      	add	r0, r1
    b4cc:	6030      	str	r0, [r6, #0]
    b4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000b4d2 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    b4d2:	2000      	movs	r0, #0
    b4d4:	4770      	bx	lr

0000b4d6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    b4d6:	b510      	push	{r4, lr}
    b4d8:	4604      	mov	r4, r0
    b4da:	4620      	mov	r0, r4
    b4dc:	f7f9 f8ec 	bl	46b8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    b4e0:	2800      	cmp	r0, #0
    b4e2:	d006      	beq.n	b4f2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    b4e4:	78a1      	ldrb	r1, [r4, #2]
    b4e6:	7820      	ldrb	r0, [r4, #0]
    b4e8:	f000 f804 	bl	b4f4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    b4ec:	2800      	cmp	r0, #0
    b4ee:	d0f4      	beq.n	b4da <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    b4f0:	2001      	movs	r0, #1
    b4f2:	bd10      	pop	{r4, pc}
    b4f4:	b570      	push	{r4, r5, r6, lr}
    b4f6:	460c      	mov	r4, r1
    b4f8:	4605      	mov	r5, r0
    b4fa:	f7f9 f939 	bl	4770 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    b4fe:	2800      	cmp	r0, #0
    b500:	d002      	beq.n	b508 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    b502:	2d3e      	cmp	r5, #62	; 0x3e
    b504:	d001      	beq.n	b50a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    b506:	2001      	movs	r0, #1
    b508:	bd70      	pop	{r4, r5, r6, pc}
    b50a:	2c12      	cmp	r4, #18
    b50c:	d004      	beq.n	b518 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    b50e:	4620      	mov	r0, r4
    b510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b514:	f7f9 b948 	b.w	47a8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    b518:	2000      	movs	r0, #0
    b51a:	bd70      	pop	{r4, r5, r6, pc}

0000b51c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    b51c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b520:	4604      	mov	r4, r0
    b522:	f891 c000 	ldrb.w	ip, [r1]
    b526:	2000      	movs	r0, #0
    b528:	270c      	movs	r7, #12
    b52a:	223e      	movs	r2, #62	; 0x3e
    b52c:	2612      	movs	r6, #18
    b52e:	25ff      	movs	r5, #255	; 0xff
    b530:	f04f 0b14 	mov.w	fp, #20
    b534:	f04f 0e13 	mov.w	lr, #19
    b538:	f04f 0a05 	mov.w	sl, #5
    b53c:	f104 030d 	add.w	r3, r4, #13
    b540:	f04f 0911 	mov.w	r9, #17
    b544:	f1bc 0f20 	cmp.w	ip, #32
    b548:	d272      	bcs.n	b630 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    b54a:	e8df f00c 	tbb	[pc, ip]
    b54e:	1071      	.short	0x1071
    b550:	fc2e2927 	.word	0xfc2e2927
    b554:	c0aea46d 	.word	0xc0aea46d
    b558:	f9fafbda 	.word	0xf9fafbda
    b55c:	71f6f7f8 	.word	0x71f6f7f8
    b560:	f5725071 	.word	0xf5725071
    b564:	f1f2f3f4 	.word	0xf1f2f3f4
    b568:	edeeeff0 	.word	0xedeeeff0
    b56c:	ec71      	.short	0xec71
    b56e:	7027      	strb	r7, [r4, #0]
    b570:	7908      	ldrb	r0, [r1, #4]
    b572:	70a0      	strb	r0, [r4, #2]
    b574:	7948      	ldrb	r0, [r1, #5]
    b576:	70e0      	strb	r0, [r4, #3]
    b578:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    b57c:	0a00      	lsrs	r0, r0, #8
    b57e:	7120      	strb	r0, [r4, #4]
    b580:	79c8      	ldrb	r0, [r1, #7]
    b582:	7160      	strb	r0, [r4, #5]
    b584:	7a08      	ldrb	r0, [r1, #8]
    b586:	71a0      	strb	r0, [r4, #6]
    b588:	8908      	ldrh	r0, [r1, #8]
    b58a:	0a00      	lsrs	r0, r0, #8
    b58c:	71e0      	strb	r0, [r4, #7]
    b58e:	7a88      	ldrb	r0, [r1, #10]
    b590:	7220      	strb	r0, [r4, #8]
    b592:	8948      	ldrh	r0, [r1, #10]
    b594:	0a00      	lsrs	r0, r0, #8
    b596:	7260      	strb	r0, [r4, #9]
    b598:	2008      	movs	r0, #8
    b59a:	e154      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b59c:	2010      	movs	r0, #16
    b59e:	e000      	b.n	b5a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    b5a0:	201a      	movs	r0, #26
    b5a2:	7020      	strb	r0, [r4, #0]
    b5a4:	7908      	ldrb	r0, [r1, #4]
    b5a6:	70a0      	strb	r0, [r4, #2]
    b5a8:	e154      	b.n	b854 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    b5aa:	7022      	strb	r2, [r4, #0]
    b5ac:	2002      	movs	r0, #2
    b5ae:	70a0      	strb	r0, [r4, #2]
    b5b0:	7908      	ldrb	r0, [r1, #4]
    b5b2:	70e0      	strb	r0, [r4, #3]
    b5b4:	7b88      	ldrb	r0, [r1, #14]
    b5b6:	7120      	strb	r0, [r4, #4]
    b5b8:	7948      	ldrb	r0, [r1, #5]
    b5ba:	7160      	strb	r0, [r4, #5]
    b5bc:	f8d1 0006 	ldr.w	r0, [r1, #6]
    b5c0:	f8c4 0006 	str.w	r0, [r4, #6]
    b5c4:	8948      	ldrh	r0, [r1, #10]
    b5c6:	8160      	strh	r0, [r4, #10]
    b5c8:	7b08      	ldrb	r0, [r1, #12]
    b5ca:	7320      	strb	r0, [r4, #12]
    b5cc:	7b0e      	ldrb	r6, [r1, #12]
    b5ce:	1d0d      	adds	r5, r1, #4
    b5d0:	2e1f      	cmp	r6, #31
    b5d2:	d300      	bcc.n	b5d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    b5d4:	261f      	movs	r6, #31
    b5d6:	4618      	mov	r0, r3
    b5d8:	4632      	mov	r2, r6
    b5da:	f105 010b 	add.w	r1, r5, #11
    b5de:	f7ff fe4f 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    b5e2:	360d      	adds	r6, #13
    b5e4:	7a69      	ldrb	r1, [r5, #9]
    b5e6:	55a1      	strb	r1, [r4, r6]
    b5e8:	1e76      	subs	r6, r6, #1
    b5ea:	b2f0      	uxtb	r0, r6
    b5ec:	e129      	b.n	b842 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    b5ee:	7022      	strb	r2, [r4, #0]
    b5f0:	200b      	movs	r0, #11
    b5f2:	70a0      	strb	r0, [r4, #2]
    b5f4:	7908      	ldrb	r0, [r1, #4]
    b5f6:	70e0      	strb	r0, [r4, #3]
    b5f8:	7948      	ldrb	r0, [r1, #5]
    b5fa:	7120      	strb	r0, [r4, #4]
    b5fc:	7988      	ldrb	r0, [r1, #6]
    b5fe:	7160      	strb	r0, [r4, #5]
    b600:	f8d1 0007 	ldr.w	r0, [r1, #7]
    b604:	f8c4 0006 	str.w	r0, [r4, #6]
    b608:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    b60c:	8160      	strh	r0, [r4, #10]
    b60e:	7b48      	ldrb	r0, [r1, #13]
    b610:	7320      	strb	r0, [r4, #12]
    b612:	f8d1 000e 	ldr.w	r0, [r1, #14]
    b616:	f8c4 000d 	str.w	r0, [r4, #13]
    b61a:	8a48      	ldrh	r0, [r1, #18]
    b61c:	f8a4 0011 	strh.w	r0, [r4, #17]
    b620:	7d08      	ldrb	r0, [r1, #20]
    b622:	74e0      	strb	r0, [r4, #19]
    b624:	4630      	mov	r0, r6
    b626:	e10e      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b628:	4620      	mov	r0, r4
    b62a:	f000 f98d 	bl	b948 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    b62e:	e108      	b.n	b842 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    b630:	e10b      	b.n	b84a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    b632:	7022      	strb	r2, [r4, #0]
    b634:	200a      	movs	r0, #10
    b636:	70a0      	strb	r0, [r4, #2]
    b638:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    b63c:	70e0      	strb	r0, [r4, #3]
    b63e:	7888      	ldrb	r0, [r1, #2]
    b640:	7120      	strb	r0, [r4, #4]
    b642:	8848      	ldrh	r0, [r1, #2]
    b644:	0a00      	lsrs	r0, r0, #8
    b646:	7160      	strb	r0, [r4, #5]
    b648:	7908      	ldrb	r0, [r1, #4]
    b64a:	71a0      	strb	r0, [r4, #6]
    b64c:	7948      	ldrb	r0, [r1, #5]
    b64e:	71e0      	strb	r0, [r4, #7]
    b650:	f8d1 0006 	ldr.w	r0, [r1, #6]
    b654:	60a0      	str	r0, [r4, #8]
    b656:	8948      	ldrh	r0, [r1, #10]
    b658:	81a0      	strh	r0, [r4, #12]
    b65a:	68c8      	ldr	r0, [r1, #12]
    b65c:	f8c4 000e 	str.w	r0, [r4, #14]
    b660:	8a08      	ldrh	r0, [r1, #16]
    b662:	8260      	strh	r0, [r4, #18]
    b664:	f8d1 0012 	ldr.w	r0, [r1, #18]
    b668:	6160      	str	r0, [r4, #20]
    b66a:	8ac8      	ldrh	r0, [r1, #22]
    b66c:	8320      	strh	r0, [r4, #24]
    b66e:	7e08      	ldrb	r0, [r1, #24]
    b670:	76a0      	strb	r0, [r4, #26]
    b672:	8b08      	ldrh	r0, [r1, #24]
    b674:	0a00      	lsrs	r0, r0, #8
    b676:	76e0      	strb	r0, [r4, #27]
    b678:	7e88      	ldrb	r0, [r1, #26]
    b67a:	7720      	strb	r0, [r4, #28]
    b67c:	8b48      	ldrh	r0, [r1, #26]
    b67e:	0a00      	lsrs	r0, r0, #8
    b680:	7760      	strb	r0, [r4, #29]
    b682:	7f08      	ldrb	r0, [r1, #28]
    b684:	77a0      	strb	r0, [r4, #30]
    b686:	8b88      	ldrh	r0, [r1, #28]
    b688:	0a00      	lsrs	r0, r0, #8
    b68a:	77e0      	strb	r0, [r4, #31]
    b68c:	7f88      	ldrb	r0, [r1, #30]
    b68e:	f884 0020 	strb.w	r0, [r4, #32]
    b692:	201f      	movs	r0, #31
    b694:	e0d7      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b696:	7022      	strb	r2, [r4, #0]
    b698:	f884 b002 	strb.w	fp, [r4, #2]
    b69c:	7908      	ldrb	r0, [r1, #4]
    b69e:	70e0      	strb	r0, [r4, #3]
    b6a0:	8888      	ldrh	r0, [r1, #4]
    b6a2:	0a00      	lsrs	r0, r0, #8
    b6a4:	7120      	strb	r0, [r4, #4]
    b6a6:	7988      	ldrb	r0, [r1, #6]
    b6a8:	e0ed      	b.n	b886 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    b6aa:	7022      	strb	r2, [r4, #0]
    b6ac:	2004      	movs	r0, #4
    b6ae:	70a0      	strb	r0, [r4, #2]
    b6b0:	7908      	ldrb	r0, [r1, #4]
    b6b2:	70e0      	strb	r0, [r4, #3]
    b6b4:	7988      	ldrb	r0, [r1, #6]
    b6b6:	7120      	strb	r0, [r4, #4]
    b6b8:	88c8      	ldrh	r0, [r1, #6]
    b6ba:	0a00      	lsrs	r0, r0, #8
    b6bc:	7160      	strb	r0, [r4, #5]
    b6be:	6888      	ldr	r0, [r1, #8]
    b6c0:	f8c4 0006 	str.w	r0, [r4, #6]
    b6c4:	68c8      	ldr	r0, [r1, #12]
    b6c6:	f8c4 000a 	str.w	r0, [r4, #10]
    b6ca:	200c      	movs	r0, #12
    b6cc:	e0bb      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b6ce:	7022      	strb	r2, [r4, #0]
    b6d0:	2003      	movs	r0, #3
    b6d2:	70a0      	strb	r0, [r4, #2]
    b6d4:	7908      	ldrb	r0, [r1, #4]
    b6d6:	70e0      	strb	r0, [r4, #3]
    b6d8:	7988      	ldrb	r0, [r1, #6]
    b6da:	7120      	strb	r0, [r4, #4]
    b6dc:	88c8      	ldrh	r0, [r1, #6]
    b6de:	0a00      	lsrs	r0, r0, #8
    b6e0:	7160      	strb	r0, [r4, #5]
    b6e2:	7a08      	ldrb	r0, [r1, #8]
    b6e4:	71a0      	strb	r0, [r4, #6]
    b6e6:	8908      	ldrh	r0, [r1, #8]
    b6e8:	0a00      	lsrs	r0, r0, #8
    b6ea:	71e0      	strb	r0, [r4, #7]
    b6ec:	7a88      	ldrb	r0, [r1, #10]
    b6ee:	7220      	strb	r0, [r4, #8]
    b6f0:	8948      	ldrh	r0, [r1, #10]
    b6f2:	0a00      	lsrs	r0, r0, #8
    b6f4:	7260      	strb	r0, [r4, #9]
    b6f6:	7b08      	ldrb	r0, [r1, #12]
    b6f8:	72a0      	strb	r0, [r4, #10]
    b6fa:	8988      	ldrh	r0, [r1, #12]
    b6fc:	0a00      	lsrs	r0, r0, #8
    b6fe:	72e0      	strb	r0, [r4, #11]
    b700:	e120      	b.n	b944 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    b702:	7022      	strb	r2, [r4, #0]
    b704:	f884 a002 	strb.w	sl, [r4, #2]
    b708:	7908      	ldrb	r0, [r1, #4]
    b70a:	70e0      	strb	r0, [r4, #3]
    b70c:	8888      	ldrh	r0, [r1, #4]
    b70e:	0a00      	lsrs	r0, r0, #8
    b710:	7120      	strb	r0, [r4, #4]
    b712:	f8d1 0006 	ldr.w	r0, [r1, #6]
    b716:	f8c4 0005 	str.w	r0, [r4, #5]
    b71a:	f8d1 000a 	ldr.w	r0, [r1, #10]
    b71e:	f8c4 0009 	str.w	r0, [r4, #9]
    b722:	89c8      	ldrh	r0, [r1, #14]
    b724:	e010      	b.n	b748 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    b726:	e0fa      	b.n	b91e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    b728:	e0ce      	b.n	b8c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    b72a:	e0af      	b.n	b88c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    b72c:	e0da      	b.n	b8e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    b72e:	e0e8      	b.n	b902 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    b730:	e0a1      	b.n	b876 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    b732:	e08c      	b.n	b84e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    b734:	e090      	b.n	b858 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    b736:	e033      	b.n	b7a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    b738:	e02f      	b.n	b79a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    b73a:	e043      	b.n	b7c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    b73c:	e03d      	b.n	b7ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    b73e:	e021      	b.n	b784 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    b740:	e015      	b.n	b76e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    b742:	e008      	b.n	b756 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    b744:	e004      	b.n	b750 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    b746:	e046      	b.n	b7d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    b748:	f8a4 000d 	strh.w	r0, [r4, #13]
    b74c:	200d      	movs	r0, #13
    b74e:	e07a      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b750:	f884 9000 	strb.w	r9, [r4]
    b754:	e038      	b.n	b7c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    b756:	f884 a000 	strb.w	sl, [r4]
    b75a:	7908      	ldrb	r0, [r1, #4]
    b75c:	70a0      	strb	r0, [r4, #2]
    b75e:	7948      	ldrb	r0, [r1, #5]
    b760:	70e0      	strb	r0, [r4, #3]
    b762:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    b766:	0a00      	lsrs	r0, r0, #8
    b768:	7120      	strb	r0, [r4, #4]
    b76a:	79c8      	ldrb	r0, [r1, #7]
    b76c:	e08b      	b.n	b886 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    b76e:	2008      	movs	r0, #8
    b770:	7020      	strb	r0, [r4, #0]
    b772:	7908      	ldrb	r0, [r1, #4]
    b774:	70a0      	strb	r0, [r4, #2]
    b776:	7988      	ldrb	r0, [r1, #6]
    b778:	70e0      	strb	r0, [r4, #3]
    b77a:	88c8      	ldrh	r0, [r1, #6]
    b77c:	0a00      	lsrs	r0, r0, #8
    b77e:	7120      	strb	r0, [r4, #4]
    b780:	7a08      	ldrb	r0, [r1, #8]
    b782:	e080      	b.n	b886 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    b784:	2030      	movs	r0, #48	; 0x30
    b786:	7020      	strb	r0, [r4, #0]
    b788:	7908      	ldrb	r0, [r1, #4]
    b78a:	70a0      	strb	r0, [r4, #2]
    b78c:	7988      	ldrb	r0, [r1, #6]
    b78e:	70e0      	strb	r0, [r4, #3]
    b790:	88c8      	ldrh	r0, [r1, #6]
    b792:	0a00      	lsrs	r0, r0, #8
    b794:	7120      	strb	r0, [r4, #4]
    b796:	2003      	movs	r0, #3
    b798:	e055      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b79a:	7022      	strb	r2, [r4, #0]
    b79c:	2007      	movs	r0, #7
    b79e:	e077      	b.n	b890 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    b7a0:	7022      	strb	r2, [r4, #0]
    b7a2:	70a7      	strb	r7, [r4, #2]
    b7a4:	7908      	ldrb	r0, [r1, #4]
    b7a6:	70e0      	strb	r0, [r4, #3]
    b7a8:	7988      	ldrb	r0, [r1, #6]
    b7aa:	7120      	strb	r0, [r4, #4]
    b7ac:	88c8      	ldrh	r0, [r1, #6]
    b7ae:	0a00      	lsrs	r0, r0, #8
    b7b0:	7160      	strb	r0, [r4, #5]
    b7b2:	7a08      	ldrb	r0, [r1, #8]
    b7b4:	71a0      	strb	r0, [r4, #6]
    b7b6:	7a48      	ldrb	r0, [r1, #9]
    b7b8:	e05a      	b.n	b870 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    b7ba:	4620      	mov	r0, r4
    b7bc:	1d09      	adds	r1, r1, #4
    b7be:	f7f8 ffa9 	bl	4714 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    b7c2:	e03e      	b.n	b842 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    b7c4:	2057      	movs	r0, #87	; 0x57
    b7c6:	7020      	strb	r0, [r4, #0]
    b7c8:	7908      	ldrb	r0, [r1, #4]
    b7ca:	70a0      	strb	r0, [r4, #2]
    b7cc:	8888      	ldrh	r0, [r1, #4]
    b7ce:	0a00      	lsrs	r0, r0, #8
    b7d0:	70e0      	strb	r0, [r4, #3]
    b7d2:	2002      	movs	r0, #2
    b7d4:	e037      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b7d6:	7022      	strb	r2, [r4, #0]
    b7d8:	220d      	movs	r2, #13
    b7da:	70a2      	strb	r2, [r4, #2]
    b7dc:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    b7e0:	70e2      	strb	r2, [r4, #3]
    b7e2:	894a      	ldrh	r2, [r1, #10]
    b7e4:	80a2      	strh	r2, [r4, #4]
    b7e6:	784a      	ldrb	r2, [r1, #1]
    b7e8:	71a2      	strb	r2, [r4, #6]
    b7ea:	f8d1 2002 	ldr.w	r2, [r1, #2]
    b7ee:	f8c4 2007 	str.w	r2, [r4, #7]
    b7f2:	88ca      	ldrh	r2, [r1, #6]
    b7f4:	f8a4 200b 	strh.w	r2, [r4, #11]
    b7f8:	7b0a      	ldrb	r2, [r1, #12]
    b7fa:	4620      	mov	r0, r4
    b7fc:	7362      	strb	r2, [r4, #13]
    b7fe:	7b4a      	ldrb	r2, [r1, #13]
    b800:	7382      	strb	r2, [r0, #14]
    b802:	7b8a      	ldrb	r2, [r1, #14]
    b804:	73c2      	strb	r2, [r0, #15]
    b806:	7e8a      	ldrb	r2, [r1, #26]
    b808:	7402      	strb	r2, [r0, #16]
    b80a:	7a4a      	ldrb	r2, [r1, #9]
    b80c:	7442      	strb	r2, [r0, #17]
    b80e:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    b812:	f8ad 2000 	strh.w	r2, [sp]
    b816:	8242      	strh	r2, [r0, #18]
    b818:	7cca      	ldrb	r2, [r1, #19]
    b81a:	7502      	strb	r2, [r0, #20]
    b81c:	694a      	ldr	r2, [r1, #20]
    b81e:	f8c0 2015 	str.w	r2, [r0, #21]
    b822:	8b0a      	ldrh	r2, [r1, #24]
    b824:	f8a0 2019 	strh.w	r2, [r0, #25]
    b828:	7a0a      	ldrb	r2, [r1, #8]
    b82a:	76c2      	strb	r2, [r0, #27]
    b82c:	7a0d      	ldrb	r5, [r1, #8]
    b82e:	2de5      	cmp	r5, #229	; 0xe5
    b830:	d300      	bcc.n	b834 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    b832:	25e5      	movs	r5, #229	; 0xe5
    b834:	462a      	mov	r2, r5
    b836:	301c      	adds	r0, #28
    b838:	311c      	adds	r1, #28
    b83a:	f7ff fd21 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    b83e:	351a      	adds	r5, #26
    b840:	b2e8      	uxtb	r0, r5
    b842:	2800      	cmp	r0, #0
    b844:	d001      	beq.n	b84a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    b846:	7060      	strb	r0, [r4, #1]
    b848:	1c80      	adds	r0, r0, #2
    b84a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b84e:	7022      	strb	r2, [r4, #0]
    b850:	f884 9002 	strb.w	r9, [r4, #2]
    b854:	2001      	movs	r0, #1
    b856:	e7f6      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b858:	7022      	strb	r2, [r4, #0]
    b85a:	70a6      	strb	r6, [r4, #2]
    b85c:	7908      	ldrb	r0, [r1, #4]
    b85e:	70e0      	strb	r0, [r4, #3]
    b860:	7948      	ldrb	r0, [r1, #5]
    b862:	7120      	strb	r0, [r4, #4]
    b864:	7988      	ldrb	r0, [r1, #6]
    b866:	7160      	strb	r0, [r4, #5]
    b868:	88c8      	ldrh	r0, [r1, #6]
    b86a:	0a00      	lsrs	r0, r0, #8
    b86c:	71a0      	strb	r0, [r4, #6]
    b86e:	7a08      	ldrb	r0, [r1, #8]
    b870:	71e0      	strb	r0, [r4, #7]
    b872:	2006      	movs	r0, #6
    b874:	e7e7      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b876:	7025      	strb	r5, [r4, #0]
    b878:	20a1      	movs	r0, #161	; 0xa1
    b87a:	70a0      	strb	r0, [r4, #2]
    b87c:	7908      	ldrb	r0, [r1, #4]
    b87e:	70e0      	strb	r0, [r4, #3]
    b880:	7948      	ldrb	r0, [r1, #5]
    b882:	7120      	strb	r0, [r4, #4]
    b884:	2000      	movs	r0, #0
    b886:	7160      	strb	r0, [r4, #5]
    b888:	2004      	movs	r0, #4
    b88a:	e7dc      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b88c:	7025      	strb	r5, [r4, #0]
    b88e:	20a2      	movs	r0, #162	; 0xa2
    b890:	70a0      	strb	r0, [r4, #2]
    b892:	7908      	ldrb	r0, [r1, #4]
    b894:	70e0      	strb	r0, [r4, #3]
    b896:	8888      	ldrh	r0, [r1, #4]
    b898:	0a00      	lsrs	r0, r0, #8
    b89a:	7120      	strb	r0, [r4, #4]
    b89c:	7988      	ldrb	r0, [r1, #6]
    b89e:	7160      	strb	r0, [r4, #5]
    b8a0:	88c8      	ldrh	r0, [r1, #6]
    b8a2:	0a00      	lsrs	r0, r0, #8
    b8a4:	71a0      	strb	r0, [r4, #6]
    b8a6:	7a08      	ldrb	r0, [r1, #8]
    b8a8:	71e0      	strb	r0, [r4, #7]
    b8aa:	8908      	ldrh	r0, [r1, #8]
    b8ac:	0a00      	lsrs	r0, r0, #8
    b8ae:	7220      	strb	r0, [r4, #8]
    b8b0:	7a88      	ldrb	r0, [r1, #10]
    b8b2:	7260      	strb	r0, [r4, #9]
    b8b4:	8948      	ldrh	r0, [r1, #10]
    b8b6:	0a00      	lsrs	r0, r0, #8
    b8b8:	72a0      	strb	r0, [r4, #10]
    b8ba:	7b08      	ldrb	r0, [r1, #12]
    b8bc:	72e0      	strb	r0, [r4, #11]
    b8be:	8988      	ldrh	r0, [r1, #12]
    b8c0:	0a00      	lsrs	r0, r0, #8
    b8c2:	7320      	strb	r0, [r4, #12]
    b8c4:	200b      	movs	r0, #11
    b8c6:	e7be      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b8c8:	7025      	strb	r5, [r4, #0]
    b8ca:	20a3      	movs	r0, #163	; 0xa3
    b8cc:	70a0      	strb	r0, [r4, #2]
    b8ce:	7908      	ldrb	r0, [r1, #4]
    b8d0:	70e0      	strb	r0, [r4, #3]
    b8d2:	8888      	ldrh	r0, [r1, #4]
    b8d4:	0a00      	lsrs	r0, r0, #8
    b8d6:	7120      	strb	r0, [r4, #4]
    b8d8:	7988      	ldrb	r0, [r1, #6]
    b8da:	7160      	strb	r0, [r4, #5]
    b8dc:	79c8      	ldrb	r0, [r1, #7]
    b8de:	71a0      	strb	r0, [r4, #6]
    b8e0:	2005      	movs	r0, #5
    b8e2:	e7b0      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b8e4:	7022      	strb	r2, [r4, #0]
    b8e6:	f884 e002 	strb.w	lr, [r4, #2]
    b8ea:	7908      	ldrb	r0, [r1, #4]
    b8ec:	70e0      	strb	r0, [r4, #3]
    b8ee:	7948      	ldrb	r0, [r1, #5]
    b8f0:	7120      	strb	r0, [r4, #4]
    b8f2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    b8f6:	f8c4 0005 	str.w	r0, [r4, #5]
    b8fa:	8948      	ldrh	r0, [r1, #10]
    b8fc:	f8a4 0009 	strh.w	r0, [r4, #9]
    b900:	e020      	b.n	b944 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    b902:	7025      	strb	r5, [r4, #0]
    b904:	20a4      	movs	r0, #164	; 0xa4
    b906:	70a0      	strb	r0, [r4, #2]
    b908:	7908      	ldrb	r0, [r1, #4]
    b90a:	70e0      	strb	r0, [r4, #3]
    b90c:	8888      	ldrh	r0, [r1, #4]
    b90e:	0a00      	lsrs	r0, r0, #8
    b910:	7120      	strb	r0, [r4, #4]
    b912:	7988      	ldrb	r0, [r1, #6]
    b914:	7160      	strb	r0, [r4, #5]
    b916:	79c8      	ldrb	r0, [r1, #7]
    b918:	71a0      	strb	r0, [r4, #6]
    b91a:	2007      	movs	r0, #7
    b91c:	e793      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b91e:	7025      	strb	r5, [r4, #0]
    b920:	2080      	movs	r0, #128	; 0x80
    b922:	70a0      	strb	r0, [r4, #2]
    b924:	888a      	ldrh	r2, [r1, #4]
    b926:	f8a4 2003 	strh.w	r2, [r4, #3]
    b92a:	88ca      	ldrh	r2, [r1, #6]
    b92c:	f8a4 2005 	strh.w	r2, [r4, #5]
    b930:	7a0a      	ldrb	r2, [r1, #8]
    b932:	71e2      	strb	r2, [r4, #7]
    b934:	7a4a      	ldrb	r2, [r1, #9]
    b936:	8122      	strh	r2, [r4, #8]
    b938:	7a8a      	ldrb	r2, [r1, #10]
    b93a:	72a2      	strb	r2, [r4, #10]
    b93c:	7ac9      	ldrb	r1, [r1, #11]
    b93e:	f001 0101 	and.w	r1, r1, #1
    b942:	72e1      	strb	r1, [r4, #11]
    b944:	200a      	movs	r0, #10
    b946:	e77e      	b.n	b846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000b948 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    b948:	223e      	movs	r2, #62	; 0x3e
    b94a:	7002      	strb	r2, [r0, #0]
    b94c:	2201      	movs	r2, #1
    b94e:	7082      	strb	r2, [r0, #2]
    b950:	790a      	ldrb	r2, [r1, #4]
    b952:	70c2      	strb	r2, [r0, #3]
    b954:	798a      	ldrb	r2, [r1, #6]
    b956:	7102      	strb	r2, [r0, #4]
    b958:	88ca      	ldrh	r2, [r1, #6]
    b95a:	0a12      	lsrs	r2, r2, #8
    b95c:	7142      	strb	r2, [r0, #5]
    b95e:	7a0a      	ldrb	r2, [r1, #8]
    b960:	7182      	strb	r2, [r0, #6]
    b962:	7a4a      	ldrb	r2, [r1, #9]
    b964:	71c2      	strb	r2, [r0, #7]
    b966:	f8d1 200a 	ldr.w	r2, [r1, #10]
    b96a:	6082      	str	r2, [r0, #8]
    b96c:	89ca      	ldrh	r2, [r1, #14]
    b96e:	8182      	strh	r2, [r0, #12]
    b970:	7c0a      	ldrb	r2, [r1, #16]
    b972:	7382      	strb	r2, [r0, #14]
    b974:	8a0a      	ldrh	r2, [r1, #16]
    b976:	0a12      	lsrs	r2, r2, #8
    b978:	73c2      	strb	r2, [r0, #15]
    b97a:	7c8a      	ldrb	r2, [r1, #18]
    b97c:	7402      	strb	r2, [r0, #16]
    b97e:	8a4a      	ldrh	r2, [r1, #18]
    b980:	0a12      	lsrs	r2, r2, #8
    b982:	7442      	strb	r2, [r0, #17]
    b984:	7d0a      	ldrb	r2, [r1, #20]
    b986:	7482      	strb	r2, [r0, #18]
    b988:	8a8a      	ldrh	r2, [r1, #20]
    b98a:	0a12      	lsrs	r2, r2, #8
    b98c:	74c2      	strb	r2, [r0, #19]
    b98e:	7d89      	ldrb	r1, [r1, #22]
    b990:	7501      	strb	r1, [r0, #20]
    b992:	2013      	movs	r0, #19
    b994:	4770      	bx	lr

0000b996 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    b996:	223e      	movs	r2, #62	; 0x3e
    b998:	7002      	strb	r2, [r0, #0]
    b99a:	2201      	movs	r2, #1
    b99c:	7082      	strb	r2, [r0, #2]
    b99e:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    b9a2:	70c2      	strb	r2, [r0, #3]
    b9a4:	788a      	ldrb	r2, [r1, #2]
    b9a6:	7102      	strb	r2, [r0, #4]
    b9a8:	884a      	ldrh	r2, [r1, #2]
    b9aa:	0a12      	lsrs	r2, r2, #8
    b9ac:	7142      	strb	r2, [r0, #5]
    b9ae:	790a      	ldrb	r2, [r1, #4]
    b9b0:	7182      	strb	r2, [r0, #6]
    b9b2:	794a      	ldrb	r2, [r1, #5]
    b9b4:	71c2      	strb	r2, [r0, #7]
    b9b6:	f8d1 2006 	ldr.w	r2, [r1, #6]
    b9ba:	6082      	str	r2, [r0, #8]
    b9bc:	894a      	ldrh	r2, [r1, #10]
    b9be:	8182      	strh	r2, [r0, #12]
    b9c0:	7e0a      	ldrb	r2, [r1, #24]
    b9c2:	7382      	strb	r2, [r0, #14]
    b9c4:	8b0a      	ldrh	r2, [r1, #24]
    b9c6:	0a12      	lsrs	r2, r2, #8
    b9c8:	73c2      	strb	r2, [r0, #15]
    b9ca:	7e8a      	ldrb	r2, [r1, #26]
    b9cc:	7402      	strb	r2, [r0, #16]
    b9ce:	8b4a      	ldrh	r2, [r1, #26]
    b9d0:	0a12      	lsrs	r2, r2, #8
    b9d2:	7442      	strb	r2, [r0, #17]
    b9d4:	7f0a      	ldrb	r2, [r1, #28]
    b9d6:	7482      	strb	r2, [r0, #18]
    b9d8:	8b8a      	ldrh	r2, [r1, #28]
    b9da:	0a12      	lsrs	r2, r2, #8
    b9dc:	74c2      	strb	r2, [r0, #19]
    b9de:	7f89      	ldrb	r1, [r1, #30]
    b9e0:	7501      	strb	r1, [r0, #20]
    b9e2:	2113      	movs	r1, #19
    b9e4:	7041      	strb	r1, [r0, #1]
    b9e6:	4608      	mov	r0, r1
    b9e8:	4770      	bx	lr

0000b9ea <sdc_hci_evt_get>:
    b9ea:	b510      	push	{r4, lr}
    b9ec:	b120      	cbz	r0, b9f8 <sdc_hci_evt_get+0xe>
    b9ee:	f7ff fd72 	bl	b4d6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    b9f2:	b120      	cbz	r0, b9fe <sdc_hci_evt_get+0x14>
    b9f4:	2000      	movs	r0, #0
    b9f6:	bd10      	pop	{r4, pc}
    b9f8:	f06f 0015 	mvn.w	r0, #21
    b9fc:	bd10      	pop	{r4, pc}
    b9fe:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ba02:	bd10      	pop	{r4, pc}

0000ba04 <sdc_hci_cmd_cb_set_event_mask>:
    ba04:	b510      	push	{r4, lr}
    ba06:	f7f8 fee3 	bl	47d0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    ba0a:	2000      	movs	r0, #0
    ba0c:	bd10      	pop	{r4, pc}

0000ba0e <sdc_hci_cmd_vs_conn_event_extend>:
    ba0e:	b508      	push	{r3, lr}
    ba10:	7800      	ldrb	r0, [r0, #0]
    ba12:	f88d 0000 	strb.w	r0, [sp]
    ba16:	4668      	mov	r0, sp
    ba18:	f001 fd67 	bl	d4ea <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    ba1c:	bd08      	pop	{r3, pc}

0000ba1e <sdc_hci_cmd_vs_conn_update>:
    ba1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ba20:	2100      	movs	r1, #0
    ba22:	9100      	str	r1, [sp, #0]
    ba24:	9101      	str	r1, [sp, #4]
    ba26:	9102      	str	r1, [sp, #8]
    ba28:	9103      	str	r1, [sp, #12]
    ba2a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    ba2e:	f641 524c 	movw	r2, #7500	; 0x1d4c
    ba32:	4291      	cmp	r1, r2
    ba34:	d304      	bcc.n	ba40 <sdc_hci_cmd_vs_conn_update+0x22>
    ba36:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ba3a:	fbb1 f1f2 	udiv	r1, r1, r2
    ba3e:	e005      	b.n	ba4c <sdc_hci_cmd_vs_conn_update+0x2e>
    ba40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ba44:	fbb1 f1f2 	udiv	r1, r1, r2
    ba48:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    ba4c:	8802      	ldrh	r2, [r0, #0]
    ba4e:	b289      	uxth	r1, r1
    ba50:	f8ad 2000 	strh.w	r2, [sp]
    ba54:	f8ad 1002 	strh.w	r1, [sp, #2]
    ba58:	f8ad 1004 	strh.w	r1, [sp, #4]
    ba5c:	88c1      	ldrh	r1, [r0, #6]
    ba5e:	f8ad 1006 	strh.w	r1, [sp, #6]
    ba62:	8900      	ldrh	r0, [r0, #8]
    ba64:	f8ad 0008 	strh.w	r0, [sp, #8]
    ba68:	4668      	mov	r0, sp
    ba6a:	f001 fc08 	bl	d27e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    ba6e:	b004      	add	sp, #16
    ba70:	bd10      	pop	{r4, pc}

0000ba72 <sdc_hci_cmd_vs_event_length_set>:
    ba72:	f7fd bfab 	b.w	99cc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000ba76 <sdc_hci_cmd_vs_llpm_mode_set>:
    ba76:	2001      	movs	r0, #1
    ba78:	4770      	bx	lr

0000ba7a <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    ba7a:	7800      	ldrb	r0, [r0, #0]
    ba7c:	b100      	cbz	r0, ba80 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    ba7e:	2001      	movs	r0, #1
    ba80:	f001 bd0b 	b.w	d49a <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000ba84 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    ba84:	b570      	push	{r4, r5, r6, lr}
    ba86:	4605      	mov	r5, r0
    ba88:	2210      	movs	r2, #16
    ba8a:	2100      	movs	r1, #0
    ba8c:	f7ff fc72 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ba90:	2210      	movs	r2, #16
    ba92:	2100      	movs	r1, #0
    ba94:	f105 0010 	add.w	r0, r5, #16
    ba98:	f7ff fc6c 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ba9c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    baa0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    baa4:	1c40      	adds	r0, r0, #1
    baa6:	d10b      	bne.n	bac0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    baa8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    baac:	1c40      	adds	r0, r0, #1
    baae:	d107      	bne.n	bac0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    bab0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    bab4:	1c40      	adds	r0, r0, #1
    bab6:	d103      	bne.n	bac0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    bab8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    babc:	1c40      	adds	r0, r0, #1
    babe:	d00b      	beq.n	bad8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    bac0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    bac4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    bac8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    bacc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    bad0:	612a      	str	r2, [r5, #16]
    bad2:	6168      	str	r0, [r5, #20]
    bad4:	61a9      	str	r1, [r5, #24]
    bad6:	61eb      	str	r3, [r5, #28]
    bad8:	2000      	movs	r0, #0
    bada:	f7f9 fa7d 	bl	4fd8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    bade:	b918      	cbnz	r0, bae8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    bae0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    bae4:	07c0      	lsls	r0, r0, #31
    bae6:	d118      	bne.n	bb1a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    bae8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    baec:	1c40      	adds	r0, r0, #1
    baee:	d10b      	bne.n	bb08 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    baf0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    baf4:	1c40      	adds	r0, r0, #1
    baf6:	d107      	bne.n	bb08 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    baf8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    bafc:	1c40      	adds	r0, r0, #1
    bafe:	d103      	bne.n	bb08 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    bb00:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    bb04:	1c40      	adds	r0, r0, #1
    bb06:	d008      	beq.n	bb1a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    bb08:	f854 0f90 	ldr.w	r0, [r4, #144]!
    bb0c:	6861      	ldr	r1, [r4, #4]
    bb0e:	68a2      	ldr	r2, [r4, #8]
    bb10:	68e3      	ldr	r3, [r4, #12]
    bb12:	6028      	str	r0, [r5, #0]
    bb14:	6069      	str	r1, [r5, #4]
    bb16:	60aa      	str	r2, [r5, #8]
    bb18:	60eb      	str	r3, [r5, #12]
    bb1a:	2000      	movs	r0, #0
    bb1c:	bd70      	pop	{r4, r5, r6, pc}

0000bb1e <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    bb1e:	b538      	push	{r3, r4, r5, lr}
    bb20:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    bb24:	4604      	mov	r4, r0
    bb26:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    bb2a:	1c40      	adds	r0, r0, #1
    bb2c:	d105      	bne.n	bb3a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    bb2e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    bb32:	43c0      	mvns	r0, r0
    bb34:	0400      	lsls	r0, r0, #16
    bb36:	0c00      	lsrs	r0, r0, #16
    bb38:	d03e      	beq.n	bbb8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    bb3a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    bb3e:	07c0      	lsls	r0, r0, #31
    bb40:	d03a      	beq.n	bbb8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    bb42:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    bb46:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    bb4a:	f8ad 1000 	strh.w	r1, [sp]
    bb4e:	f8c4 0001 	str.w	r0, [r4, #1]
    bb52:	f8bd 0000 	ldrh.w	r0, [sp]
    bb56:	f8a4 0005 	strh.w	r0, [r4, #5]
    bb5a:	79a0      	ldrb	r0, [r4, #6]
    bb5c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    bb60:	71a0      	strb	r0, [r4, #6]
    bb62:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    bb66:	1c40      	adds	r0, r0, #1
    bb68:	d00f      	beq.n	bb8a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    bb6a:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    bb6e:	1c40      	adds	r0, r0, #1
    bb70:	d00b      	beq.n	bb8a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    bb72:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    bb76:	1c40      	adds	r0, r0, #1
    bb78:	d007      	beq.n	bb8a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    bb7a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    bb7e:	1c40      	adds	r0, r0, #1
    bb80:	d003      	beq.n	bb8a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    bb82:	2000      	movs	r0, #0
    bb84:	f7f9 fa28 	bl	4fd8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    bb88:	b140      	cbz	r0, bb9c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    bb8a:	2210      	movs	r2, #16
    bb8c:	2100      	movs	r1, #0
    bb8e:	1de0      	adds	r0, r4, #7
    bb90:	f7ff fbf0 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bb94:	2001      	movs	r0, #1
    bb96:	7020      	strb	r0, [r4, #0]
    bb98:	2000      	movs	r0, #0
    bb9a:	bd38      	pop	{r3, r4, r5, pc}
    bb9c:	f855 2f90 	ldr.w	r2, [r5, #144]!
    bba0:	6869      	ldr	r1, [r5, #4]
    bba2:	68a8      	ldr	r0, [r5, #8]
    bba4:	68eb      	ldr	r3, [r5, #12]
    bba6:	f8c4 2007 	str.w	r2, [r4, #7]
    bbaa:	f8c4 100b 	str.w	r1, [r4, #11]
    bbae:	f8c4 000f 	str.w	r0, [r4, #15]
    bbb2:	f8c4 3013 	str.w	r3, [r4, #19]
    bbb6:	e7ed      	b.n	bb94 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    bbb8:	2000      	movs	r0, #0
    bbba:	e7ec      	b.n	bb96 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000bbbc <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    bbbc:	f001 bc87 	b.w	d4ce <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000bbc0 <sdc_hci_cmd_ip_read_bd_addr>:
    bbc0:	f001 bca7 	b.w	d512 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000bbc4 <sdc_hci_cmd_ip_read_local_version_information>:
    bbc4:	f7fd bf4e 	b.w	9a64 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000bbc8 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    bbc8:	f001 bb10 	b.w	d1ec <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000bbcc <sdc_hci_cmd_le_add_device_to_white_list>:
    bbcc:	f001 bb29 	b.w	d222 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000bbd0 <sdc_hci_cmd_le_clear_resolving_list>:
    bbd0:	f001 bb3e 	b.w	d250 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000bbd4 <sdc_hci_cmd_le_clear_white_list>:
    bbd4:	f001 bb49 	b.w	d26a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000bbd8 <sdc_hci_cmd_le_encrypt>:
    bbd8:	f001 bb93 	b.w	d302 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000bbdc <sdc_hci_cmd_le_rand>:
    bbdc:	f001 bb9a 	b.w	d314 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000bbe0 <sdc_hci_cmd_le_read_buffer_size>:
    bbe0:	f7fd bed4 	b.w	998c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000bbe4 <sdc_hci_cmd_le_read_resolving_list_size>:
    bbe4:	f001 bb9c 	b.w	d320 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000bbe8 <sdc_hci_cmd_le_read_transmit_power>:
    bbe8:	f001 bb9e 	b.w	d328 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000bbec <sdc_hci_cmd_le_read_white_list_size>:
    bbec:	f001 bba5 	b.w	d33a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000bbf0 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    bbf0:	f001 bba7 	b.w	d342 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000bbf4 <sdc_hci_cmd_le_remove_device_from_white_list>:
    bbf4:	f001 bbbe 	b.w	d374 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000bbf8 <sdc_hci_cmd_le_set_address_resolution_enable>:
    bbf8:	f001 bbd1 	b.w	d39e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000bbfc <sdc_hci_cmd_le_set_event_mask>:
    bbfc:	b510      	push	{r4, lr}
    bbfe:	f7f8 fde1 	bl	47c4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    bc02:	2000      	movs	r0, #0
    bc04:	bd10      	pop	{r4, pc}

0000bc06 <sdc_hci_cmd_le_set_privacy_mode>:
    bc06:	f001 bbd8 	b.w	d3ba <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000bc0a <sdc_hci_cmd_le_set_random_address>:
    bc0a:	f001 bbec 	b.w	d3e6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000bc0e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    bc0e:	f001 bbf8 	b.w	d402 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000bc12 <sdc_hci_cmd_le_set_scan_enable>:
    bc12:	f001 bbff 	b.w	d414 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000bc16 <sdc_hci_cmd_le_set_scan_params>:
    bc16:	f001 bc13 	b.w	d440 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>
    bc1a:	b570      	push	{r4, r5, r6, lr}
    bc1c:	880b      	ldrh	r3, [r1, #0]
    bc1e:	7f04      	ldrb	r4, [r0, #28]
    bc20:	f100 0524 	add.w	r5, r0, #36	; 0x24
    bc24:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    bc28:	8802      	ldrh	r2, [r0, #0]
    bc2a:	4435      	add	r5, r6
    bc2c:	1da4      	adds	r4, r4, #6
    bc2e:	882d      	ldrh	r5, [r5, #0]
    bc30:	4422      	add	r2, r4
    bc32:	b292      	uxth	r2, r2
    bc34:	4425      	add	r5, r4
    bc36:	1e54      	subs	r4, r2, #1
    bc38:	442c      	add	r4, r5
    bc3a:	fb94 f4f2 	sdiv	r4, r4, r2
    bc3e:	fb02 6204 	mla	r2, r2, r4, r6
    bc42:	8840      	ldrh	r0, [r0, #2]
    bc44:	b292      	uxth	r2, r2
    bc46:	4290      	cmp	r0, r2
    bc48:	d903      	bls.n	bc52 <sdc_hci_cmd_le_set_scan_params+0x3c>
    bc4a:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    bc4e:	4310      	orrs	r0, r2
    bc50:	e002      	b.n	bc58 <sdc_hci_cmd_le_set_scan_params+0x42>
    bc52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    bc56:	4398      	bics	r0, r3
    bc58:	8008      	strh	r0, [r1, #0]
    bc5a:	bd70      	pop	{r4, r5, r6, pc}
    bc5c:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    bc60:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    bc64:	429a      	cmp	r2, r3
    bc66:	d107      	bne.n	bc78 <sdc_hci_cmd_le_set_scan_params+0x62>
    bc68:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    bc6c:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    bc70:	4288      	cmp	r0, r1
    bc72:	d001      	beq.n	bc78 <sdc_hci_cmd_le_set_scan_params+0x62>
    bc74:	2001      	movs	r0, #1
    bc76:	4770      	bx	lr
    bc78:	2000      	movs	r0, #0
    bc7a:	4770      	bx	lr

0000bc7c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    bc7c:	8881      	ldrh	r1, [r0, #4]
    bc7e:	88c0      	ldrh	r0, [r0, #6]
    bc80:	4288      	cmp	r0, r1
    bc82:	d101      	bne.n	bc88 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    bc84:	2001      	movs	r0, #1
    bc86:	4770      	bx	lr
    bc88:	2000      	movs	r0, #0
    bc8a:	4770      	bx	lr

0000bc8c <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    bc8c:	8881      	ldrh	r1, [r0, #4]
    bc8e:	8900      	ldrh	r0, [r0, #8]
    bc90:	4288      	cmp	r0, r1
    bc92:	d101      	bne.n	bc98 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    bc94:	2001      	movs	r0, #1
    bc96:	4770      	bx	lr
    bc98:	2000      	movs	r0, #0
    bc9a:	4770      	bx	lr

0000bc9c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    bc9c:	b570      	push	{r4, r5, r6, lr}
    bc9e:	4604      	mov	r4, r0
    bca0:	f100 0124 	add.w	r1, r0, #36	; 0x24
    bca4:	8880      	ldrh	r0, [r0, #4]
    bca6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    bcaa:	4401      	add	r1, r0
    bcac:	8a20      	ldrh	r0, [r4, #16]
    bcae:	2800      	cmp	r0, #0
    bcb0:	d01a      	beq.n	bce8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    bcb2:	89a2      	ldrh	r2, [r4, #12]
    bcb4:	2500      	movs	r5, #0
    bcb6:	4410      	add	r0, r2
    bcb8:	b280      	uxth	r0, r0
    bcba:	81a0      	strh	r0, [r4, #12]
    bcbc:	880a      	ldrh	r2, [r1, #0]
    bcbe:	4290      	cmp	r0, r2
    bcc0:	d905      	bls.n	bcce <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    bcc2:	f240 1163 	movw	r1, #355	; 0x163
    bcc6:	f04f 0014 	mov.w	r0, #20
    bcca:	f7f8 fc3d 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcce:	d109      	bne.n	bce4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    bcd0:	69a0      	ldr	r0, [r4, #24]
    bcd2:	b108      	cbz	r0, bcd8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    bcd4:	7f40      	ldrb	r0, [r0, #29]
    bcd6:	7088      	strb	r0, [r1, #2]
    bcd8:	f104 0104 	add.w	r1, r4, #4
    bcdc:	4620      	mov	r0, r4
    bcde:	f7ff ff9c 	bl	bc1a <sdc_hci_cmd_le_set_scan_params+0x4>
    bce2:	81a5      	strh	r5, [r4, #12]
    bce4:	8225      	strh	r5, [r4, #16]
    bce6:	2001      	movs	r0, #1
    bce8:	bd70      	pop	{r4, r5, r6, pc}

0000bcea <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    bcea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcec:	4604      	mov	r4, r0
    bcee:	f100 0324 	add.w	r3, r0, #36	; 0x24
    bcf2:	88c0      	ldrh	r0, [r0, #6]
    bcf4:	460e      	mov	r6, r1
    bcf6:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    bcfa:	8a60      	ldrh	r0, [r4, #18]
    bcfc:	19d9      	adds	r1, r3, r7
    bcfe:	b108      	cbz	r0, bd04 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    bd00:	42b0      	cmp	r0, r6
    bd02:	d201      	bcs.n	bd08 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    bd04:	2000      	movs	r0, #0
    bd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd08:	89e0      	ldrh	r0, [r4, #14]
    bd0a:	2500      	movs	r5, #0
    bd0c:	b140      	cbz	r0, bd20 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    bd0e:	f8b1 c000 	ldrh.w	ip, [r1]
    bd12:	4560      	cmp	r0, ip
    bd14:	d008      	beq.n	bd28 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    bd16:	f240 214b 	movw	r1, #587	; 0x24b
    bd1a:	2014      	movs	r0, #20
    bd1c:	f7f8 fc14 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd20:	7f60      	ldrb	r0, [r4, #29]
    bd22:	7088      	strb	r0, [r1, #2]
    bd24:	800d      	strh	r5, [r1, #0]
    bd26:	e00e      	b.n	bd46 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    bd28:	f894 c01c 	ldrb.w	ip, [r4, #28]
    bd2c:	4418      	add	r0, r3
    bd2e:	f10c 0c06 	add.w	ip, ip, #6
    bd32:	44bc      	add	ip, r7
    bd34:	4460      	add	r0, ip
    bd36:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    bd3a:	f820 cc03 	strh.w	ip, [r0, #-3]
    bd3e:	f894 c020 	ldrb.w	ip, [r4, #32]
    bd42:	f800 cc01 	strb.w	ip, [r0, #-1]
    bd46:	89e0      	ldrh	r0, [r4, #14]
    bd48:	4430      	add	r0, r6
    bd4a:	81e0      	strh	r0, [r4, #14]
    bd4c:	8808      	ldrh	r0, [r1, #0]
    bd4e:	4430      	add	r0, r6
    bd50:	8008      	strh	r0, [r1, #0]
    bd52:	b19a      	cbz	r2, bd7c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    bd54:	1da1      	adds	r1, r4, #6
    bd56:	4620      	mov	r0, r4
    bd58:	f7ff ff5f 	bl	bc1a <sdc_hci_cmd_le_set_scan_params+0x4>
    bd5c:	81e5      	strh	r5, [r4, #14]
    bd5e:	7f60      	ldrb	r0, [r4, #29]
    bd60:	1c40      	adds	r0, r0, #1
    bd62:	7760      	strb	r0, [r4, #29]
    bd64:	7da0      	ldrb	r0, [r4, #22]
    bd66:	f88d 0000 	strb.w	r0, [sp]
    bd6a:	9800      	ldr	r0, [sp, #0]
    bd6c:	9000      	str	r0, [sp, #0]
    bd6e:	f89d 0000 	ldrb.w	r0, [sp]
    bd72:	b178      	cbz	r0, bd94 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    bd74:	88e0      	ldrh	r0, [r4, #6]
    bd76:	82a0      	strh	r0, [r4, #20]
    bd78:	75a5      	strb	r5, [r4, #22]
    bd7a:	e00b      	b.n	bd94 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    bd7c:	7f20      	ldrb	r0, [r4, #28]
    bd7e:	89e1      	ldrh	r1, [r4, #14]
    bd80:	1d80      	adds	r0, r0, #6
    bd82:	4438      	add	r0, r7
    bd84:	4419      	add	r1, r3
    bd86:	4408      	add	r0, r1
    bd88:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    bd8c:	83e1      	strh	r1, [r4, #30]
    bd8e:	7880      	ldrb	r0, [r0, #2]
    bd90:	f884 0020 	strb.w	r0, [r4, #32]
    bd94:	8265      	strh	r5, [r4, #18]
    bd96:	2001      	movs	r0, #1
    bd98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bd9a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    bd9a:	1cc0      	adds	r0, r0, #3
    bd9c:	4770      	bx	lr

0000bd9e <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    bd9e:	b510      	push	{r4, lr}
    bda0:	88c2      	ldrh	r2, [r0, #6]
    bda2:	8943      	ldrh	r3, [r0, #10]
    bda4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    bda8:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    bdac:	1a61      	subs	r1, r4, r1
    bdae:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    bdb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    bdb6:	429a      	cmp	r2, r3
    bdb8:	d101      	bne.n	bdbe <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    bdba:	8842      	ldrh	r2, [r0, #2]
    bdbc:	4411      	add	r1, r2
    bdbe:	7f02      	ldrb	r2, [r0, #28]
    bdc0:	8800      	ldrh	r0, [r0, #0]
    bdc2:	4410      	add	r0, r2
    bdc4:	1d80      	adds	r0, r0, #6
    bdc6:	b280      	uxth	r0, r0
    bdc8:	fb91 f0f0 	sdiv	r0, r1, r0
    bdcc:	b280      	uxth	r0, r0
    bdce:	bd10      	pop	{r4, pc}

0000bdd0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    bdd0:	b510      	push	{r4, lr}
    bdd2:	4604      	mov	r4, r0
    bdd4:	88c0      	ldrh	r0, [r0, #6]
    bdd6:	88a1      	ldrh	r1, [r4, #4]
    bdd8:	4281      	cmp	r1, r0
    bdda:	d007      	beq.n	bdec <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    bddc:	89a0      	ldrh	r0, [r4, #12]
    bdde:	b928      	cbnz	r0, bdec <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    bde0:	8a20      	ldrh	r0, [r4, #16]
    bde2:	b918      	cbnz	r0, bdec <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    bde4:	88a0      	ldrh	r0, [r4, #4]
    bde6:	8aa1      	ldrh	r1, [r4, #20]
    bde8:	4288      	cmp	r0, r1
    bdea:	d101      	bne.n	bdf0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    bdec:	2000      	movs	r0, #0
    bdee:	bd10      	pop	{r4, pc}
    bdf0:	1d21      	adds	r1, r4, #4
    bdf2:	4620      	mov	r0, r4
    bdf4:	f7ff ff11 	bl	bc1a <sdc_hci_cmd_le_set_scan_params+0x4>
    bdf8:	2000      	movs	r0, #0
    bdfa:	8220      	strh	r0, [r4, #16]
    bdfc:	2001      	movs	r0, #1
    bdfe:	bd10      	pop	{r4, pc}

0000be00 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    be00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be04:	8941      	ldrh	r1, [r0, #10]
    be06:	8886      	ldrh	r6, [r0, #4]
    be08:	4604      	mov	r4, r0
    be0a:	2500      	movs	r5, #0
    be0c:	f100 070a 	add.w	r7, r0, #10
    be10:	e006      	b.n	be20 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    be12:	4639      	mov	r1, r7
    be14:	4620      	mov	r0, r4
    be16:	f7ff ff00 	bl	bc1a <sdc_hci_cmd_le_set_scan_params+0x4>
    be1a:	1c6d      	adds	r5, r5, #1
    be1c:	8961      	ldrh	r1, [r4, #10]
    be1e:	b2ad      	uxth	r5, r5
    be20:	42b1      	cmp	r1, r6
    be22:	d1f6      	bne.n	be12 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    be24:	4628      	mov	r0, r5
    be26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000be2a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    be2a:	b530      	push	{r4, r5, lr}
    be2c:	88c4      	ldrh	r4, [r0, #6]
    be2e:	8881      	ldrh	r1, [r0, #4]
    be30:	f100 0224 	add.w	r2, r0, #36	; 0x24
    be34:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    be38:	4413      	add	r3, r2
    be3a:	8882      	ldrh	r2, [r0, #4]
    be3c:	8a85      	ldrh	r5, [r0, #20]
    be3e:	42aa      	cmp	r2, r5
    be40:	d012      	beq.n	be68 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    be42:	42a1      	cmp	r1, r4
    be44:	d010      	beq.n	be68 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    be46:	8981      	ldrh	r1, [r0, #12]
    be48:	b971      	cbnz	r1, be68 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    be4a:	6982      	ldr	r2, [r0, #24]
    be4c:	b172      	cbz	r2, be6c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    be4e:	4610      	mov	r0, r2
    be50:	f7ff ff1c 	bl	bc8c <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    be54:	b950      	cbnz	r0, be6c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    be56:	8910      	ldrh	r0, [r2, #8]
    be58:	3224      	adds	r2, #36	; 0x24
    be5a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    be5e:	4410      	add	r0, r2
    be60:	7899      	ldrb	r1, [r3, #2]
    be62:	7880      	ldrb	r0, [r0, #2]
    be64:	4288      	cmp	r0, r1
    be66:	d101      	bne.n	be6c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    be68:	2000      	movs	r0, #0
    be6a:	bd30      	pop	{r4, r5, pc}
    be6c:	4618      	mov	r0, r3
    be6e:	bd30      	pop	{r4, r5, pc}

0000be70 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    be70:	8803      	ldrh	r3, [r0, #0]
    be72:	2b45      	cmp	r3, #69	; 0x45
    be74:	d200      	bcs.n	be78 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    be76:	2345      	movs	r3, #69	; 0x45
    be78:	8013      	strh	r3, [r2, #0]
    be7a:	88c2      	ldrh	r2, [r0, #6]
    be7c:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    be80:	f100 0224 	add.w	r2, r0, #36	; 0x24
    be84:	441a      	add	r2, r3
    be86:	600a      	str	r2, [r1, #0]
    be88:	89c0      	ldrh	r0, [r0, #14]
    be8a:	4770      	bx	lr

0000be8c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    be8c:	7f00      	ldrb	r0, [r0, #28]
    be8e:	1d80      	adds	r0, r0, #6
    be90:	4408      	add	r0, r1
    be92:	1ec0      	subs	r0, r0, #3
    be94:	6010      	str	r0, [r2, #0]
    be96:	8808      	ldrh	r0, [r1, #0]
    be98:	4770      	bx	lr

0000be9a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    be9a:	b538      	push	{r3, r4, r5, lr}
    be9c:	88c4      	ldrh	r4, [r0, #6]
    be9e:	8881      	ldrh	r1, [r0, #4]
    bea0:	f100 0224 	add.w	r2, r0, #36	; 0x24
    bea4:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    bea8:	441a      	add	r2, r3
    beaa:	42a1      	cmp	r1, r4
    beac:	d010      	beq.n	bed0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    beae:	8983      	ldrh	r3, [r0, #12]
    beb0:	8a05      	ldrh	r5, [r0, #16]
    beb2:	8812      	ldrh	r2, [r2, #0]
    beb4:	442b      	add	r3, r5
    beb6:	4293      	cmp	r3, r2
    beb8:	d308      	bcc.n	becc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    beba:	f8ad 1000 	strh.w	r1, [sp]
    bebe:	4669      	mov	r1, sp
    bec0:	f7ff feab 	bl	bc1a <sdc_hci_cmd_le_set_scan_params+0x4>
    bec4:	f8bd 0000 	ldrh.w	r0, [sp]
    bec8:	42a0      	cmp	r0, r4
    beca:	d001      	beq.n	bed0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    becc:	2001      	movs	r0, #1
    bece:	bd38      	pop	{r3, r4, r5, pc}
    bed0:	2000      	movs	r0, #0
    bed2:	bd38      	pop	{r3, r4, r5, pc}

0000bed4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    bed4:	b570      	push	{r4, r5, r6, lr}
    bed6:	88c6      	ldrh	r6, [r0, #6]
    bed8:	8885      	ldrh	r5, [r0, #4]
    beda:	4603      	mov	r3, r0
    bedc:	f100 0424 	add.w	r4, r0, #36	; 0x24
    bee0:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    bee4:	4420      	add	r0, r4
    bee6:	42b5      	cmp	r5, r6
    bee8:	d102      	bne.n	bef0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    beea:	2000      	movs	r0, #0
    beec:	8218      	strh	r0, [r3, #16]
    beee:	bd70      	pop	{r4, r5, r6, pc}
    bef0:	8804      	ldrh	r4, [r0, #0]
    bef2:	899d      	ldrh	r5, [r3, #12]
    bef4:	7f1e      	ldrb	r6, [r3, #28]
    bef6:	1b64      	subs	r4, r4, r5
    bef8:	4435      	add	r5, r6
    befa:	4428      	add	r0, r5
    befc:	880d      	ldrh	r5, [r1, #0]
    befe:	b2a4      	uxth	r4, r4
    bf00:	1cc0      	adds	r0, r0, #3
    bf02:	42a5      	cmp	r5, r4
    bf04:	d900      	bls.n	bf08 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    bf06:	800c      	strh	r4, [r1, #0]
    bf08:	899c      	ldrh	r4, [r3, #12]
    bf0a:	b124      	cbz	r4, bf16 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    bf0c:	2400      	movs	r4, #0
    bf0e:	7014      	strb	r4, [r2, #0]
    bf10:	8809      	ldrh	r1, [r1, #0]
    bf12:	8219      	strh	r1, [r3, #16]
    bf14:	bd70      	pop	{r4, r5, r6, pc}
    bf16:	2401      	movs	r4, #1
    bf18:	e7f9      	b.n	bf0e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000bf1a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    bf1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bf1e:	8281      	strh	r1, [r0, #20]
    bf20:	2100      	movs	r1, #0
    bf22:	7581      	strb	r1, [r0, #22]
    bf24:	4770      	bx	lr

0000bf26 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    bf26:	b510      	push	{r4, lr}
    bf28:	8a81      	ldrh	r1, [r0, #20]
    bf2a:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    bf2e:	3aff      	subs	r2, #255	; 0xff
    bf30:	d004      	beq.n	bf3c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    bf32:	f44f 7159 	mov.w	r1, #868	; 0x364
    bf36:	2014      	movs	r0, #20
    bf38:	f7f8 fb06 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf3c:	88c1      	ldrh	r1, [r0, #6]
    bf3e:	8281      	strh	r1, [r0, #20]
    bf40:	89c1      	ldrh	r1, [r0, #14]
    bf42:	b109      	cbz	r1, bf48 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    bf44:	2101      	movs	r1, #1
    bf46:	e000      	b.n	bf4a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    bf48:	2100      	movs	r1, #0
    bf4a:	7581      	strb	r1, [r0, #22]
    bf4c:	bd10      	pop	{r4, pc}

0000bf4e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    bf4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf52:	461d      	mov	r5, r3
    bf54:	4616      	mov	r6, r2
    bf56:	9f06      	ldr	r7, [sp, #24]
    bf58:	460b      	mov	r3, r1
    bf5a:	4604      	mov	r4, r0
    bf5c:	463a      	mov	r2, r7
    bf5e:	4629      	mov	r1, r5
    bf60:	4630      	mov	r0, r6
    bf62:	f000 f84c 	bl	bffe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    bf66:	4283      	cmp	r3, r0
    bf68:	d201      	bcs.n	bf6e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    bf6a:	21a8      	movs	r1, #168	; 0xa8
    bf6c:	e018      	b.n	bfa0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    bf6e:	1ce0      	adds	r0, r4, #3
    bf70:	f020 0103 	bic.w	r1, r0, #3
    bf74:	4620      	mov	r0, r4
    bf76:	42a1      	cmp	r1, r4
    bf78:	d001      	beq.n	bf7e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    bf7a:	21a9      	movs	r1, #169	; 0xa9
    bf7c:	e010      	b.n	bfa0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    bf7e:	2224      	movs	r2, #36	; 0x24
    bf80:	2100      	movs	r1, #0
    bf82:	f7ff f9f7 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bf86:	f64f 70ff 	movw	r0, #65535	; 0xffff
    bf8a:	82a0      	strh	r0, [r4, #20]
    bf8c:	19a8      	adds	r0, r5, r6
    bf8e:	1d80      	adds	r0, r0, #6
    bf90:	4378      	muls	r0, r7
    bf92:	b280      	uxth	r0, r0
    bf94:	7725      	strb	r5, [r4, #28]
    bf96:	8060      	strh	r0, [r4, #2]
    bf98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    bf9c:	d903      	bls.n	bfa6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    bf9e:	21af      	movs	r1, #175	; 0xaf
    bfa0:	2014      	movs	r0, #20
    bfa2:	f7f8 fad1 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfa6:	8026      	strh	r6, [r4, #0]
    bfa8:	2000      	movs	r0, #0
    bfaa:	7760      	strb	r0, [r4, #29]
    bfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bfb0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    bfb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfb4:	460b      	mov	r3, r1
    bfb6:	4604      	mov	r4, r0
    bfb8:	f100 0124 	add.w	r1, r0, #36	; 0x24
    bfbc:	8905      	ldrh	r5, [r0, #8]
    bfbe:	8946      	ldrh	r6, [r0, #10]
    bfc0:	8880      	ldrh	r0, [r0, #4]
    bfc2:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    bfc6:	4439      	add	r1, r7
    bfc8:	460f      	mov	r7, r1
    bfca:	4285      	cmp	r5, r0
    bfcc:	d102      	bne.n	bfd4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    bfce:	2000      	movs	r0, #0
    bfd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bfd4:	b10a      	cbz	r2, bfda <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    bfd6:	1cc8      	adds	r0, r1, #3
    bfd8:	6010      	str	r0, [r2, #0]
    bfda:	b123      	cbz	r3, bfe6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    bfdc:	7f22      	ldrb	r2, [r4, #28]
    bfde:	1cf9      	adds	r1, r7, #3
    bfe0:	4618      	mov	r0, r3
    bfe2:	f7ff f94d 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    bfe6:	883f      	ldrh	r7, [r7, #0]
    bfe8:	f104 0108 	add.w	r1, r4, #8
    bfec:	4620      	mov	r0, r4
    bfee:	f7ff fe14 	bl	bc1a <sdc_hci_cmd_le_set_scan_params+0x4>
    bff2:	42b5      	cmp	r5, r6
    bff4:	d101      	bne.n	bffa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    bff6:	8920      	ldrh	r0, [r4, #8]
    bff8:	8160      	strh	r0, [r4, #10]
    bffa:	4638      	mov	r0, r7
    bffc:	e7e8      	b.n	bfd0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000bffe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    bffe:	4401      	add	r1, r0
    c000:	1d89      	adds	r1, r1, #6
    c002:	4351      	muls	r1, r2
    c004:	b28a      	uxth	r2, r1
    c006:	2100      	movs	r1, #0
    c008:	2845      	cmp	r0, #69	; 0x45
    c00a:	d201      	bcs.n	c010 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    c00c:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    c010:	3224      	adds	r2, #36	; 0x24
    c012:	1850      	adds	r0, r2, r1
    c014:	b280      	uxth	r0, r0
    c016:	4770      	bx	lr

0000c018 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    c018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c01c:	4688      	mov	r8, r1
    c01e:	88c1      	ldrh	r1, [r0, #6]
    c020:	4604      	mov	r4, r0
    c022:	8900      	ldrh	r0, [r0, #8]
    c024:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    c028:	f104 0524 	add.w	r5, r4, #36	; 0x24
    c02c:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c030:	eb05 0906 	add.w	r9, r5, r6
    c034:	f7ff fe12 	bl	bc5c <sdc_hci_cmd_le_set_scan_params+0x46>
    c038:	2200      	movs	r2, #0
    c03a:	b998      	cbnz	r0, c064 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    c03c:	8820      	ldrh	r0, [r4, #0]
    c03e:	2845      	cmp	r0, #69	; 0x45
    c040:	d200      	bcs.n	c044 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    c042:	2045      	movs	r0, #69	; 0x45
    c044:	42b7      	cmp	r7, r6
    c046:	d906      	bls.n	c056 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    c048:	7f23      	ldrb	r3, [r4, #28]
    c04a:	1bb9      	subs	r1, r7, r6
    c04c:	1ac9      	subs	r1, r1, r3
    c04e:	1f89      	subs	r1, r1, #6
    c050:	4281      	cmp	r1, r0
    c052:	da00      	bge.n	c056 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    c054:	4608      	mov	r0, r1
    c056:	89e1      	ldrh	r1, [r4, #14]
    c058:	b111      	cbz	r1, c060 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    c05a:	f8b9 3000 	ldrh.w	r3, [r9]
    c05e:	1ac0      	subs	r0, r0, r3
    c060:	4540      	cmp	r0, r8
    c062:	da03      	bge.n	c06c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    c064:	8262      	strh	r2, [r4, #18]
    c066:	2000      	movs	r0, #0
    c068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c06c:	7f20      	ldrb	r0, [r4, #28]
    c06e:	4429      	add	r1, r5
    c070:	1d80      	adds	r0, r0, #6
    c072:	4430      	add	r0, r6
    c074:	4408      	add	r0, r1
    c076:	f8a4 8012 	strh.w	r8, [r4, #18]
    c07a:	1ec0      	subs	r0, r0, #3
    c07c:	e7f4      	b.n	c068 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000c07e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    c07e:	2100      	movs	r1, #0
    c080:	81c1      	strh	r1, [r0, #14]
    c082:	8241      	strh	r1, [r0, #18]
    c084:	7581      	strb	r1, [r0, #22]
    c086:	4770      	bx	lr

0000c088 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    c088:	b510      	push	{r4, lr}
    c08a:	000c      	movs	r4, r1
    c08c:	d006      	beq.n	c09c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    c08e:	2c08      	cmp	r4, #8
    c090:	d209      	bcs.n	c0a6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    c092:	f240 1195 	movw	r1, #405	; 0x195
    c096:	2015      	movs	r0, #21
    c098:	f7f8 fa56 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c09c:	b108      	cbz	r0, c0a2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    c09e:	2100      	movs	r1, #0
    c0a0:	6001      	str	r1, [r0, #0]
    c0a2:	2000      	movs	r0, #0
    c0a4:	bd10      	pop	{r4, pc}
    c0a6:	b118      	cbz	r0, c0b0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    c0a8:	b2a1      	uxth	r1, r4
    c0aa:	6800      	ldr	r0, [r0, #0]
    c0ac:	f000 f814 	bl	c0d8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    c0b0:	1d20      	adds	r0, r4, #4
    c0b2:	bd10      	pop	{r4, pc}

0000c0b4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    c0b4:	2100      	movs	r1, #0
    c0b6:	6802      	ldr	r2, [r0, #0]
    c0b8:	e003      	b.n	c0c2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    c0ba:	8893      	ldrh	r3, [r2, #4]
    c0bc:	6812      	ldr	r2, [r2, #0]
    c0be:	4419      	add	r1, r3
    c0c0:	b289      	uxth	r1, r1
    c0c2:	2a00      	cmp	r2, #0
    c0c4:	d1f9      	bne.n	c0ba <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    c0c6:	f000 b807 	b.w	c0d8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000c0ca <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    c0ca:	2300      	movs	r3, #0
    c0cc:	600b      	str	r3, [r1, #0]
    c0ce:	808a      	strh	r2, [r1, #4]
    c0d0:	6802      	ldr	r2, [r0, #0]
    c0d2:	600a      	str	r2, [r1, #0]
    c0d4:	6001      	str	r1, [r0, #0]
    c0d6:	4770      	bx	lr
    c0d8:	2300      	movs	r3, #0
    c0da:	6043      	str	r3, [r0, #4]
    c0dc:	1d02      	adds	r2, r0, #4
    c0de:	8101      	strh	r1, [r0, #8]
    c0e0:	6002      	str	r2, [r0, #0]
    c0e2:	4770      	bx	lr

0000c0e4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    c0e4:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    c0e8:	3aff      	subs	r2, #255	; 0xff
    c0ea:	d000      	beq.n	c0ee <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    c0ec:	b109      	cbz	r1, c0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    c0ee:	2000      	movs	r0, #0
    c0f0:	4770      	bx	lr
    c0f2:	f7f8 bc49 	b.w	4988 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>

0000c0f6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    c0f6:	b570      	push	{r4, r5, r6, lr}
    c0f8:	4605      	mov	r5, r0
    c0fa:	460c      	mov	r4, r1
    c0fc:	4608      	mov	r0, r1
    c0fe:	f000 f854 	bl	c1aa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    c102:	b108      	cbz	r0, c108 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    c104:	2010      	movs	r0, #16
    c106:	bd70      	pop	{r4, r5, r6, pc}
    c108:	b10d      	cbz	r5, c10e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    c10a:	2007      	movs	r0, #7
    c10c:	bd70      	pop	{r4, r5, r6, pc}
    c10e:	7025      	strb	r5, [r4, #0]
    c110:	2000      	movs	r0, #0
    c112:	8060      	strh	r0, [r4, #2]
    c114:	bd70      	pop	{r4, r5, r6, pc}
    c116:	b510      	push	{r4, lr}
    c118:	4604      	mov	r4, r0
    c11a:	f7f8 fc81 	bl	4a20 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xec>
    c11e:	42a0      	cmp	r0, r4
    c120:	d901      	bls.n	c126 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    c122:	2001      	movs	r0, #1
    c124:	bd10      	pop	{r4, pc}
    c126:	2000      	movs	r0, #0
    c128:	bd10      	pop	{r4, pc}
    c12a:	4770      	bx	lr

0000c12c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    c12c:	b570      	push	{r4, r5, r6, lr}
    c12e:	460e      	mov	r6, r1
    c130:	461d      	mov	r5, r3
    c132:	4611      	mov	r1, r2
    c134:	f000 f811 	bl	c15a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    c138:	4604      	mov	r4, r0
    c13a:	4629      	mov	r1, r5
    c13c:	4630      	mov	r0, r6
    c13e:	f000 f803 	bl	c148 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    c142:	4420      	add	r0, r4
    c144:	1d00      	adds	r0, r0, #4
    c146:	bd70      	pop	{r4, r5, r6, pc}
    c148:	b510      	push	{r4, lr}
    c14a:	460a      	mov	r2, r1
    c14c:	2101      	movs	r1, #1
    c14e:	f7ff ff56 	bl	bffe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c152:	1cc0      	adds	r0, r0, #3
    c154:	f020 0003 	bic.w	r0, r0, #3
    c158:	bd10      	pop	{r4, pc}
    c15a:	b510      	push	{r4, lr}
    c15c:	460a      	mov	r2, r1
    c15e:	2101      	movs	r1, #1
    c160:	f7ff ff4d 	bl	bffe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c164:	1cc0      	adds	r0, r0, #3
    c166:	f020 0003 	bic.w	r0, r0, #3
    c16a:	bd10      	pop	{r4, pc}
    c16c:	2800      	cmp	r0, #0
    c16e:	db09      	blt.n	c184 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    c170:	f000 021f 	and.w	r2, r0, #31
    c174:	2101      	movs	r1, #1
    c176:	4091      	lsls	r1, r2
    c178:	0940      	lsrs	r0, r0, #5
    c17a:	0080      	lsls	r0, r0, #2
    c17c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c180:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c184:	4770      	bx	lr
    c186:	5840      	ldr	r0, [r0, r1]
    c188:	2800      	cmp	r0, #0
    c18a:	d000      	beq.n	c18e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    c18c:	2001      	movs	r0, #1
    c18e:	4770      	bx	lr

0000c190 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    c190:	f7f8 bda6 	b.w	4ce0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000c194 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    c194:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c198:	2000      	movs	r0, #0
    c19a:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    c19e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c1a2:	2001      	movs	r0, #1
    c1a4:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c1a8:	4770      	bx	lr

0000c1aa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    c1aa:	b108      	cbz	r0, c1b0 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    c1ac:	2000      	movs	r0, #0
    c1ae:	4770      	bx	lr
    c1b0:	2001      	movs	r0, #1
    c1b2:	4770      	bx	lr

0000c1b4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    c1b4:	f7f8 bed6 	b.w	4f64 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0xc>

0000c1b8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    c1b8:	b510      	push	{r4, lr}
    c1ba:	2900      	cmp	r1, #0
    c1bc:	4604      	mov	r4, r0
    c1be:	f04f 0106 	mov.w	r1, #6
    c1c2:	d002      	beq.n	c1ca <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    c1c4:	f7f8 fa1e 	bl	4604 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    c1c8:	e001      	b.n	c1ce <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    c1ca:	f7f8 fa29 	bl	4620 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    c1ce:	7960      	ldrb	r0, [r4, #5]
    c1d0:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    c1d4:	7160      	strb	r0, [r4, #5]
    c1d6:	bd10      	pop	{r4, pc}

0000c1d8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    c1d8:	4770      	bx	lr

0000c1da <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    c1da:	b530      	push	{r4, r5, lr}
    c1dc:	460c      	mov	r4, r1
    c1de:	4605      	mov	r5, r0
    c1e0:	b08d      	sub	sp, #52	; 0x34
    c1e2:	f04f 0103 	mov.w	r1, #3
    c1e6:	f104 0003 	add.w	r0, r4, #3
    c1ea:	b112      	cbz	r2, c1f2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    c1ec:	f7f8 fa0a 	bl	4604 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    c1f0:	e001      	b.n	c1f6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    c1f2:	f7f8 fa15 	bl	4620 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    c1f6:	7960      	ldrb	r0, [r4, #5]
    c1f8:	220d      	movs	r2, #13
    c1fa:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    c1fe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    c202:	7160      	strb	r0, [r4, #5]
    c204:	2100      	movs	r1, #0
    c206:	a804      	add	r0, sp, #16
    c208:	f7ff f8b4 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c20c:	78e0      	ldrb	r0, [r4, #3]
    c20e:	f88d 001f 	strb.w	r0, [sp, #31]
    c212:	7920      	ldrb	r0, [r4, #4]
    c214:	f88d 001e 	strb.w	r0, [sp, #30]
    c218:	7960      	ldrb	r0, [r4, #5]
    c21a:	f88d 001d 	strb.w	r0, [sp, #29]
    c21e:	2210      	movs	r2, #16
    c220:	4629      	mov	r1, r5
    c222:	4668      	mov	r0, sp
    c224:	f7ff f82c 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c228:	4668      	mov	r0, sp
    c22a:	f7ff ffb1 	bl	c190 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    c22e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    c232:	7020      	strb	r0, [r4, #0]
    c234:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    c238:	7060      	strb	r0, [r4, #1]
    c23a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    c23e:	70a0      	strb	r0, [r4, #2]
    c240:	b00d      	add	sp, #52	; 0x34
    c242:	bd30      	pop	{r4, r5, pc}

0000c244 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    c244:	b530      	push	{r4, r5, lr}
    c246:	b08d      	sub	sp, #52	; 0x34
    c248:	460c      	mov	r4, r1
    c24a:	4605      	mov	r5, r0
    c24c:	220d      	movs	r2, #13
    c24e:	2100      	movs	r1, #0
    c250:	a804      	add	r0, sp, #16
    c252:	f7ff f88f 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c256:	78e0      	ldrb	r0, [r4, #3]
    c258:	f88d 001f 	strb.w	r0, [sp, #31]
    c25c:	7920      	ldrb	r0, [r4, #4]
    c25e:	f88d 001e 	strb.w	r0, [sp, #30]
    c262:	7960      	ldrb	r0, [r4, #5]
    c264:	f88d 001d 	strb.w	r0, [sp, #29]
    c268:	2210      	movs	r2, #16
    c26a:	4629      	mov	r1, r5
    c26c:	4668      	mov	r0, sp
    c26e:	f7ff f807 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c272:	4668      	mov	r0, sp
    c274:	f7ff ff8c 	bl	c190 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    c278:	7820      	ldrb	r0, [r4, #0]
    c27a:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    c27e:	4288      	cmp	r0, r1
    c280:	d10c      	bne.n	c29c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    c282:	7860      	ldrb	r0, [r4, #1]
    c284:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    c288:	4288      	cmp	r0, r1
    c28a:	d107      	bne.n	c29c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    c28c:	78a0      	ldrb	r0, [r4, #2]
    c28e:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    c292:	4288      	cmp	r0, r1
    c294:	d102      	bne.n	c29c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    c296:	2001      	movs	r0, #1
    c298:	b00d      	add	sp, #52	; 0x34
    c29a:	bd30      	pop	{r4, r5, pc}
    c29c:	2000      	movs	r0, #0
    c29e:	e7fb      	b.n	c298 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000c2a0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    c2a0:	f7f9 b9d8 	b.w	5654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    c2a4:	b510      	push	{r4, lr}
    c2a6:	2801      	cmp	r0, #1
    c2a8:	d008      	beq.n	c2bc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    c2aa:	2802      	cmp	r0, #2
    c2ac:	d004      	beq.n	c2b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    c2ae:	f240 31ad 	movw	r1, #941	; 0x3ad
    c2b2:	2006      	movs	r0, #6
    c2b4:	f7f8 f948 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2b8:	2001      	movs	r0, #1
    c2ba:	bd10      	pop	{r4, pc}
    c2bc:	2000      	movs	r0, #0
    c2be:	bd10      	pop	{r4, pc}
    c2c0:	2900      	cmp	r1, #0
    c2c2:	d004      	beq.n	c2ce <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    c2c4:	2801      	cmp	r0, #1
    c2c6:	d003      	beq.n	c2d0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    c2c8:	2901      	cmp	r1, #1
    c2ca:	d001      	beq.n	c2d0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    c2cc:	2002      	movs	r0, #2
    c2ce:	4770      	bx	lr
    c2d0:	2001      	movs	r0, #1
    c2d2:	4770      	bx	lr
    c2d4:	f7ff bdfe 	b.w	bed4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000c2d8 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    c2d8:	2101      	movs	r1, #1
    c2da:	f7f9 bdcf 	b.w	5e7c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000c2de <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    c2de:	b510      	push	{r4, lr}
    c2e0:	f001 fbbc 	bl	da5c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    c2e4:	b118      	cbz	r0, c2ee <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    c2e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2ea:	f7fd bd81 	b.w	9df0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    c2ee:	20ff      	movs	r0, #255	; 0xff
    c2f0:	bd10      	pop	{r4, pc}

0000c2f2 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    c2f2:	b510      	push	{r4, lr}
    c2f4:	f7f9 fe0a 	bl	5f0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    c2f8:	2810      	cmp	r0, #16
    c2fa:	d003      	beq.n	c304 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    c2fc:	f7f9 fdd6 	bl	5eac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    c300:	2810      	cmp	r0, #16
    c302:	d100      	bne.n	c306 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    c304:	2008      	movs	r0, #8
    c306:	bd10      	pop	{r4, pc}

0000c308 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    c308:	b510      	push	{r4, lr}
    c30a:	f7f9 fdff 	bl	5f0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    c30e:	2810      	cmp	r0, #16
    c310:	d007      	beq.n	c322 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    c312:	f7f9 fdcb 	bl	5eac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    c316:	2810      	cmp	r0, #16
    c318:	d003      	beq.n	c322 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    c31a:	f7f9 fe3f 	bl	5f9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    c31e:	2001      	movs	r0, #1
    c320:	bd10      	pop	{r4, pc}
    c322:	2000      	movs	r0, #0
    c324:	bd10      	pop	{r4, pc}

0000c326 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    c326:	b510      	push	{r4, lr}
    c328:	f7f9 fdf0 	bl	5f0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    c32c:	2810      	cmp	r0, #16
    c32e:	d003      	beq.n	c338 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    c330:	f7f9 fe7c 	bl	602c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    c334:	2001      	movs	r0, #1
    c336:	bd10      	pop	{r4, pc}
    c338:	2000      	movs	r0, #0
    c33a:	bd10      	pop	{r4, pc}

0000c33c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    c33c:	b570      	push	{r4, r5, r6, lr}
    c33e:	460e      	mov	r6, r1
    c340:	b08c      	sub	sp, #48	; 0x30
    c342:	4614      	mov	r4, r2
    c344:	4601      	mov	r1, r0
    c346:	461d      	mov	r5, r3
    c348:	2210      	movs	r2, #16
    c34a:	4668      	mov	r0, sp
    c34c:	f000 f954 	bl	c5f8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    c350:	2210      	movs	r2, #16
    c352:	4631      	mov	r1, r6
    c354:	a804      	add	r0, sp, #16
    c356:	f000 f94f 	bl	c5f8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    c35a:	4668      	mov	r0, sp
    c35c:	f7ff ff18 	bl	c190 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    c360:	a908      	add	r1, sp, #32
    c362:	f04f 0210 	mov.w	r2, #16
    c366:	4628      	mov	r0, r5
    c368:	b11c      	cbz	r4, c372 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    c36a:	f000 f945 	bl	c5f8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    c36e:	b00c      	add	sp, #48	; 0x30
    c370:	bd70      	pop	{r4, r5, r6, pc}
    c372:	f7fe ff85 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c376:	e7fa      	b.n	c36e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    c378:	0781      	lsls	r1, r0, #30
    c37a:	d501      	bpl.n	c380 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    c37c:	2002      	movs	r0, #2
    c37e:	4770      	bx	lr
    c380:	07c0      	lsls	r0, r0, #31
    c382:	d0fc      	beq.n	c37e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    c384:	2001      	movs	r0, #1
    c386:	4770      	bx	lr

0000c388 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    c388:	b510      	push	{r4, lr}
    c38a:	460c      	mov	r4, r1
    c38c:	2100      	movs	r1, #0
    c38e:	f7ff fea9 	bl	c0e4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    c392:	6060      	str	r0, [r4, #4]
    c394:	b110      	cbz	r0, c39c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    c396:	2000      	movs	r0, #0
    c398:	7020      	strb	r0, [r4, #0]
    c39a:	bd10      	pop	{r4, pc}
    c39c:	2002      	movs	r0, #2
    c39e:	bd10      	pop	{r4, pc}

0000c3a0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    c3a0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c3a4:	4348      	muls	r0, r1
    c3a6:	4770      	bx	lr

0000c3a8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    c3a8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c3ac:	fbb0 f0f1 	udiv	r0, r0, r1
    c3b0:	b280      	uxth	r0, r0
    c3b2:	4770      	bx	lr

0000c3b4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    c3b4:	b570      	push	{r4, r5, r6, lr}
    c3b6:	4604      	mov	r4, r0
    c3b8:	4290      	cmp	r0, r2
    c3ba:	d20b      	bcs.n	c3d4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    c3bc:	1b10      	subs	r0, r2, r4
    c3be:	2865      	cmp	r0, #101	; 0x65
    c3c0:	d200      	bcs.n	c3c4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    c3c2:	2065      	movs	r0, #101	; 0x65
    c3c4:	1825      	adds	r5, r4, r0
    c3c6:	428d      	cmp	r5, r1
    c3c8:	d803      	bhi.n	c3d2 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    c3ca:	2104      	movs	r1, #4
    c3cc:	f7f5 fb98 	bl	1b00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    c3d0:	b108      	cbz	r0, c3d6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    c3d2:	4620      	mov	r0, r4
    c3d4:	bd70      	pop	{r4, r5, r6, pc}
    c3d6:	4628      	mov	r0, r5
    c3d8:	bd70      	pop	{r4, r5, r6, pc}

0000c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    c3da:	b510      	push	{r4, lr}
    c3dc:	f1a2 030f 	sub.w	r3, r2, #15
    c3e0:	290c      	cmp	r1, #12
    c3e2:	d24f      	bcs.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c3e4:	e8df f001 	tbb	[pc, r1]
    c3e8:	120d0806 	.word	0x120d0806
    c3ec:	2f271815 	.word	0x2f271815
    c3f0:	3d354c32 	.word	0x3d354c32
    c3f4:	b3a2      	cbz	r2, c460 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    c3f6:	e045      	b.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c3f8:	2a07      	cmp	r2, #7
    c3fa:	d045      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c3fc:	2a08      	cmp	r2, #8
    c3fe:	d043      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c400:	e040      	b.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c402:	2a0c      	cmp	r2, #12
    c404:	d040      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c406:	2a0b      	cmp	r2, #11
    c408:	d03e      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c40a:	e03b      	b.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c40c:	2a0d      	cmp	r2, #13
    c40e:	d03b      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c410:	e038      	b.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c412:	2b0c      	cmp	r3, #12
    c414:	d938      	bls.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c416:	e035      	b.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c418:	2a12      	cmp	r2, #18
    c41a:	d035      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c41c:	2a11      	cmp	r2, #17
    c41e:	d033      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c420:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    c424:	b120      	cbz	r0, c430 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    c426:	2a12      	cmp	r2, #18
    c428:	d32c      	bcc.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c42a:	2a1a      	cmp	r2, #26
    c42c:	d92c      	bls.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c42e:	e029      	b.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c430:	2a16      	cmp	r2, #22
    c432:	d2fa      	bcs.n	c42a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    c434:	e026      	b.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c436:	2b03      	cmp	r3, #3
    c438:	d926      	bls.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c43a:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    c43e:	b308      	cbz	r0, c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c440:	2a1b      	cmp	r2, #27
    c442:	d921      	bls.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c444:	e01e      	b.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c446:	2a04      	cmp	r2, #4
    c448:	d01e      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c44a:	e01b      	b.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c44c:	2a01      	cmp	r2, #1
    c44e:	d01b      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c450:	e018      	b.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c452:	2a1c      	cmp	r2, #28
    c454:	d018      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c456:	2a1d      	cmp	r2, #29
    c458:	d016      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c45a:	2a1e      	cmp	r2, #30
    c45c:	d014      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c45e:	e011      	b.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c460:	e012      	b.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c462:	2a1f      	cmp	r2, #31
    c464:	d010      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c466:	2a20      	cmp	r2, #32
    c468:	d00e      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c46a:	2a21      	cmp	r2, #33	; 0x21
    c46c:	d00c      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c46e:	2a22      	cmp	r2, #34	; 0x22
    c470:	d00a      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c472:	2a23      	cmp	r2, #35	; 0x23
    c474:	d008      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c476:	2a24      	cmp	r2, #36	; 0x24
    c478:	d006      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c47a:	2a26      	cmp	r2, #38	; 0x26
    c47c:	d004      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c47e:	e001      	b.n	c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c480:	2a05      	cmp	r2, #5
    c482:	d001      	beq.n	c488 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c484:	2000      	movs	r0, #0
    c486:	bd10      	pop	{r4, pc}
    c488:	2001      	movs	r0, #1
    c48a:	bd10      	pop	{r4, pc}

0000c48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    c48c:	280c      	cmp	r0, #12
    c48e:	d013      	beq.n	c4b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c490:	280b      	cmp	r0, #11
    c492:	d011      	beq.n	c4b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c494:	280d      	cmp	r0, #13
    c496:	d00f      	beq.n	c4b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c498:	281f      	cmp	r0, #31
    c49a:	d00d      	beq.n	c4b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c49c:	2820      	cmp	r0, #32
    c49e:	d00b      	beq.n	c4b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4a0:	2821      	cmp	r0, #33	; 0x21
    c4a2:	d009      	beq.n	c4b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4a4:	2822      	cmp	r0, #34	; 0x22
    c4a6:	d007      	beq.n	c4b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4a8:	2823      	cmp	r0, #35	; 0x23
    c4aa:	d005      	beq.n	c4b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4ac:	2824      	cmp	r0, #36	; 0x24
    c4ae:	d003      	beq.n	c4b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4b0:	2826      	cmp	r0, #38	; 0x26
    c4b2:	d001      	beq.n	c4b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4b4:	2000      	movs	r0, #0
    c4b6:	4770      	bx	lr
    c4b8:	2001      	movs	r0, #1
    c4ba:	4770      	bx	lr

0000c4bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    c4bc:	f011 0f0c 	tst.w	r1, #12
    c4c0:	d016      	beq.n	c4f0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    c4c2:	074a      	lsls	r2, r1, #29
    c4c4:	f44f 7116 	mov.w	r1, #600	; 0x258
    c4c8:	2a00      	cmp	r2, #0
    c4ca:	da02      	bge.n	c4d2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    c4cc:	f04f 0210 	mov.w	r2, #16
    c4d0:	e001      	b.n	c4d6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    c4d2:	f04f 0240 	mov.w	r2, #64	; 0x40
    c4d6:	da01      	bge.n	c4dc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    c4d8:	f04f 0196 	mov.w	r1, #150	; 0x96
    c4dc:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    c4e0:	eba0 0301 	sub.w	r3, r0, r1
    c4e4:	4288      	cmp	r0, r1
    c4e6:	d910      	bls.n	c50a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    c4e8:	fb93 f0f2 	sdiv	r0, r3, r2
    c4ec:	b280      	uxth	r0, r0
    c4ee:	4770      	bx	lr
    c4f0:	2902      	cmp	r1, #2
    c4f2:	d002      	beq.n	c4fa <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    c4f4:	2870      	cmp	r0, #112	; 0x70
    c4f6:	d80a      	bhi.n	c50e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    c4f8:	e007      	b.n	c50a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    c4fa:	283c      	cmp	r0, #60	; 0x3c
    c4fc:	d905      	bls.n	c50a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    c4fe:	383c      	subs	r0, #60	; 0x3c
    c500:	17c1      	asrs	r1, r0, #31
    c502:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    c506:	1080      	asrs	r0, r0, #2
    c508:	e7f0      	b.n	c4ec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    c50a:	2000      	movs	r0, #0
    c50c:	e7ee      	b.n	c4ec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    c50e:	3870      	subs	r0, #112	; 0x70
    c510:	17c1      	asrs	r1, r0, #31
    c512:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    c516:	10c0      	asrs	r0, r0, #3
    c518:	e7e8      	b.n	c4ec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000c51a <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    c51a:	6809      	ldr	r1, [r1, #0]
    c51c:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    c520:	4770      	bx	lr

0000c522 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    c522:	2801      	cmp	r0, #1
    c524:	d002      	beq.n	c52c <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    c526:	2802      	cmp	r0, #2
    c528:	d000      	beq.n	c52c <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    c52a:	2000      	movs	r0, #0
    c52c:	4770      	bx	lr

0000c52e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    c52e:	b510      	push	{r4, lr}
    c530:	f640 12c4 	movw	r2, #2500	; 0x9c4
    c534:	2901      	cmp	r1, #1
    c536:	d006      	beq.n	c546 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    c538:	2902      	cmp	r1, #2
    c53a:	d005      	beq.n	c548 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    c53c:	f240 31b1 	movw	r1, #945	; 0x3b1
    c540:	2029      	movs	r0, #41	; 0x29
    c542:	f7f8 f801 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c546:	b108      	cbz	r0, c54c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    c548:	4610      	mov	r0, r2
    c54a:	bd10      	pop	{r4, pc}
    c54c:	f240 40e2 	movw	r0, #1250	; 0x4e2
    c550:	bd10      	pop	{r4, pc}

0000c552 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    c552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c554:	b2cf      	uxtb	r7, r1
    c556:	4606      	mov	r6, r0
    c558:	f3c1 2407 	ubfx	r4, r1, #8, #8
    c55c:	4621      	mov	r1, r4
    c55e:	4638      	mov	r0, r7
    c560:	f000 f8bd 	bl	c6de <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    c564:	b2f5      	uxtb	r5, r6
    c566:	f3c6 2607 	ubfx	r6, r6, #8, #8
    c56a:	b920      	cbnz	r0, c576 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    c56c:	4631      	mov	r1, r6
    c56e:	4628      	mov	r0, r5
    c570:	f000 f8b5 	bl	c6de <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    c574:	b140      	cbz	r0, c588 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    c576:	4027      	ands	r7, r4
    c578:	4035      	ands	r5, r6
    c57a:	403d      	ands	r5, r7
    c57c:	4644      	mov	r4, r8
    c57e:	f365 0407 	bfi	r4, r5, #0, #8
    c582:	f365 240f 	bfi	r4, r5, #8, #8
    c586:	e006      	b.n	c596 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    c588:	4025      	ands	r5, r4
    c58a:	4644      	mov	r4, r8
    c58c:	f365 0407 	bfi	r4, r5, #0, #8
    c590:	403e      	ands	r6, r7
    c592:	f366 240f 	bfi	r4, r6, #8, #8
    c596:	b2e0      	uxtb	r0, r4
    c598:	f7ff feee 	bl	c378 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    c59c:	f88d 0000 	strb.w	r0, [sp]
    c5a0:	f3c4 2007 	ubfx	r0, r4, #8, #8
    c5a4:	f7ff fee8 	bl	c378 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    c5a8:	f88d 0001 	strb.w	r0, [sp, #1]
    c5ac:	f8bd 0000 	ldrh.w	r0, [sp]
    c5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c5b2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    c5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5b6:	460c      	mov	r4, r1
    c5b8:	4605      	mov	r5, r0
    c5ba:	68c6      	ldr	r6, [r0, #12]
    c5bc:	f7f5 fefa 	bl	23b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    c5c0:	b198      	cbz	r0, c5ea <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    c5c2:	b1bc      	cbz	r4, c5f4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    c5c4:	4630      	mov	r0, r6
    c5c6:	68e9      	ldr	r1, [r5, #12]
    c5c8:	f7f5 fbe8 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    c5cc:	2800      	cmp	r0, #0
    c5ce:	dd11      	ble.n	c5f4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    c5d0:	4420      	add	r0, r4
    c5d2:	1e40      	subs	r0, r0, #1
    c5d4:	fbb0 f7f4 	udiv	r7, r0, r4
    c5d8:	fb07 f104 	mul.w	r1, r7, r4
    c5dc:	4630      	mov	r0, r6
    c5de:	f7f5 fbab 	bl	1d38 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    c5e2:	60e8      	str	r0, [r5, #12]
    c5e4:	4638      	mov	r0, r7
    c5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5ea:	f240 2136 	movw	r1, #566	; 0x236
    c5ee:	2029      	movs	r0, #41	; 0x29
    c5f0:	f7f7 ffaa 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5f4:	2000      	movs	r0, #0
    c5f6:	e7f6      	b.n	c5e6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000c5f8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    c5f8:	b530      	push	{r4, r5, lr}
    c5fa:	4613      	mov	r3, r2
    c5fc:	e006      	b.n	c60c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    c5fe:	18cc      	adds	r4, r1, r3
    c600:	1ad5      	subs	r5, r2, r3
    c602:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    c606:	1e5b      	subs	r3, r3, #1
    c608:	5544      	strb	r4, [r0, r5]
    c60a:	b2db      	uxtb	r3, r3
    c60c:	2b00      	cmp	r3, #0
    c60e:	d1f6      	bne.n	c5fe <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    c610:	bd30      	pop	{r4, r5, pc}

0000c612 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    c612:	b538      	push	{r3, r4, r5, lr}
    c614:	4605      	mov	r5, r0
    c616:	460c      	mov	r4, r1
    c618:	4668      	mov	r0, sp
    c61a:	f7fe f8f9 	bl	a810 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    c61e:	b310      	cbz	r0, c666 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    c620:	f99d 0000 	ldrsb.w	r0, [sp]
    c624:	7260      	strb	r0, [r4, #9]
    c626:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    c62a:	72a1      	strb	r1, [r4, #10]
    c62c:	f994 100b 	ldrsb.w	r1, [r4, #11]
    c630:	2200      	movs	r2, #0
    c632:	1a41      	subs	r1, r0, r1
    c634:	d500      	bpl.n	c638 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    c636:	4249      	negs	r1, r1
    c638:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    c63c:	428b      	cmp	r3, r1
    c63e:	dc10      	bgt.n	c662 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    c640:	2bff      	cmp	r3, #255	; 0xff
    c642:	d00e      	beq.n	c662 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    c644:	7b21      	ldrb	r1, [r4, #12]
    c646:	1c49      	adds	r1, r1, #1
    c648:	b2c9      	uxtb	r1, r1
    c64a:	7321      	strb	r1, [r4, #12]
    c64c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    c650:	4299      	cmp	r1, r3
    c652:	d802      	bhi.n	c65a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    c654:	7ae1      	ldrb	r1, [r4, #11]
    c656:	297f      	cmp	r1, #127	; 0x7f
    c658:	d103      	bne.n	c662 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    c65a:	72e0      	strb	r0, [r4, #11]
    c65c:	2000      	movs	r0, #0
    c65e:	7320      	strb	r0, [r4, #12]
    c660:	2201      	movs	r2, #1
    c662:	4610      	mov	r0, r2
    c664:	bd38      	pop	{r3, r4, r5, pc}
    c666:	207f      	movs	r0, #127	; 0x7f
    c668:	7260      	strb	r0, [r4, #9]
    c66a:	2000      	movs	r0, #0
    c66c:	bd38      	pop	{r3, r4, r5, pc}

0000c66e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    c66e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c672:	4348      	muls	r0, r1
    c674:	4770      	bx	lr

0000c676 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    c676:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c67a:	fbb0 f0f1 	udiv	r0, r0, r1
    c67e:	b280      	uxth	r0, r0
    c680:	4770      	bx	lr

0000c682 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    c682:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c686:	fb10 f001 	smulbb	r0, r0, r1
    c68a:	4770      	bx	lr

0000c68c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    c68c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c690:	fbb0 f0f1 	udiv	r0, r0, r1
    c694:	b2c0      	uxtb	r0, r0
    c696:	4770      	bx	lr

0000c698 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    c698:	b510      	push	{r4, lr}
    c69a:	2300      	movs	r3, #0
    c69c:	461a      	mov	r2, r3
    c69e:	e003      	b.n	c6a8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    c6a0:	5c84      	ldrb	r4, [r0, r2]
    c6a2:	4323      	orrs	r3, r4
    c6a4:	1c52      	adds	r2, r2, #1
    c6a6:	b2d2      	uxtb	r2, r2
    c6a8:	428a      	cmp	r2, r1
    c6aa:	d3f9      	bcc.n	c6a0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    c6ac:	b10b      	cbz	r3, c6b2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    c6ae:	2000      	movs	r0, #0
    c6b0:	bd10      	pop	{r4, pc}
    c6b2:	2001      	movs	r0, #1
    c6b4:	bd10      	pop	{r4, pc}
    c6b6:	b510      	push	{r4, lr}
    c6b8:	4604      	mov	r4, r0
    c6ba:	f7fd fb15 	bl	9ce8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c6be:	f644 112b 	movw	r1, #18731	; 0x492b
    c6c2:	4008      	ands	r0, r1
    c6c4:	2101      	movs	r1, #1
    c6c6:	7561      	strb	r1, [r4, #21]
    c6c8:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    c6cc:	0a00      	lsrs	r0, r0, #8
    c6ce:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    c6d2:	20fe      	movs	r0, #254	; 0xfe
    c6d4:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    c6d8:	207f      	movs	r0, #127	; 0x7f
    c6da:	7260      	strb	r0, [r4, #9]
    c6dc:	bd10      	pop	{r4, pc}
    c6de:	2801      	cmp	r0, #1
    c6e0:	d002      	beq.n	c6e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    c6e2:	2802      	cmp	r0, #2
    c6e4:	d003      	beq.n	c6ee <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    c6e6:	e004      	b.n	c6f2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    c6e8:	2901      	cmp	r1, #1
    c6ea:	d004      	beq.n	c6f6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    c6ec:	e001      	b.n	c6f2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    c6ee:	2902      	cmp	r1, #2
    c6f0:	d001      	beq.n	c6f6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    c6f2:	2000      	movs	r0, #0
    c6f4:	4770      	bx	lr
    c6f6:	2001      	movs	r0, #1
    c6f8:	4770      	bx	lr

0000c6fa <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    c6fa:	b510      	push	{r4, lr}
    c6fc:	4604      	mov	r4, r0
    c6fe:	f890 0020 	ldrb.w	r0, [r0, #32]
    c702:	b108      	cbz	r0, c708 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    c704:	2825      	cmp	r0, #37	; 0x25
    c706:	d901      	bls.n	c70c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    c708:	2012      	movs	r0, #18
    c70a:	bd10      	pop	{r4, pc}
    c70c:	b12a      	cbz	r2, c71a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    c70e:	7d60      	ldrb	r0, [r4, #21]
    c710:	b128      	cbz	r0, c71e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    c712:	2801      	cmp	r0, #1
    c714:	d009      	beq.n	c72a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    c716:	201f      	movs	r0, #31
    c718:	bd10      	pop	{r4, pc}
    c71a:	2000      	movs	r0, #0
    c71c:	bd10      	pop	{r4, pc}
    c71e:	4620      	mov	r0, r4
    c720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c724:	4611      	mov	r1, r2
    c726:	f7f9 bd69 	b.w	61fc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    c72a:	88a2      	ldrh	r2, [r4, #4]
    c72c:	6909      	ldr	r1, [r1, #16]
    c72e:	f104 0015 	add.w	r0, r4, #21
    c732:	f7f9 fd0f 	bl	6154 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    c736:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    c73a:	e7ee      	b.n	c71a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000c73c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    c73c:	b530      	push	{r4, r5, lr}
    c73e:	1c42      	adds	r2, r0, #1
    c740:	428a      	cmp	r2, r1
    c742:	d004      	beq.n	c74e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    c744:	680a      	ldr	r2, [r1, #0]
    c746:	f8c0 2001 	str.w	r2, [r0, #1]
    c74a:	7909      	ldrb	r1, [r1, #4]
    c74c:	7141      	strb	r1, [r0, #5]
    c74e:	7941      	ldrb	r1, [r0, #5]
    c750:	f001 011f 	and.w	r1, r1, #31
    c754:	7141      	strb	r1, [r0, #5]
    c756:	2100      	movs	r1, #0
    c758:	72c1      	strb	r1, [r0, #11]
    c75a:	1843      	adds	r3, r0, r1
    c75c:	1c49      	adds	r1, r1, #1
    c75e:	785c      	ldrb	r4, [r3, #1]
    c760:	b2c9      	uxtb	r1, r1
    c762:	f004 0201 	and.w	r2, r4, #1
    c766:	0864      	lsrs	r4, r4, #1
    c768:	f004 0501 	and.w	r5, r4, #1
    c76c:	4415      	add	r5, r2
    c76e:	0862      	lsrs	r2, r4, #1
    c770:	f002 0401 	and.w	r4, r2, #1
    c774:	442c      	add	r4, r5
    c776:	0852      	lsrs	r2, r2, #1
    c778:	f002 0501 	and.w	r5, r2, #1
    c77c:	442c      	add	r4, r5
    c77e:	0852      	lsrs	r2, r2, #1
    c780:	f002 0501 	and.w	r5, r2, #1
    c784:	442c      	add	r4, r5
    c786:	0852      	lsrs	r2, r2, #1
    c788:	f002 0501 	and.w	r5, r2, #1
    c78c:	442c      	add	r4, r5
    c78e:	0852      	lsrs	r2, r2, #1
    c790:	f002 0501 	and.w	r5, r2, #1
    c794:	442c      	add	r4, r5
    c796:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    c79a:	719a      	strb	r2, [r3, #6]
    c79c:	7ac3      	ldrb	r3, [r0, #11]
    c79e:	2905      	cmp	r1, #5
    c7a0:	441a      	add	r2, r3
    c7a2:	72c2      	strb	r2, [r0, #11]
    c7a4:	d3d9      	bcc.n	c75a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    c7a6:	bd30      	pop	{r4, r5, pc}

0000c7a8 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    c7a8:	b510      	push	{r4, lr}
    c7aa:	29fb      	cmp	r1, #251	; 0xfb
    c7ac:	d904      	bls.n	c7b8 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    c7ae:	f44f 61af 	mov.w	r1, #1400	; 0x578
    c7b2:	202a      	movs	r0, #42	; 0x2a
    c7b4:	f7f7 fec8 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c7b8:	7041      	strb	r1, [r0, #1]
    c7ba:	bd10      	pop	{r4, pc}

0000c7bc <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    c7bc:	7101      	strb	r1, [r0, #4]
    c7be:	4770      	bx	lr

0000c7c0 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    c7c0:	7141      	strb	r1, [r0, #5]
    c7c2:	4770      	bx	lr

0000c7c4 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    c7c4:	680a      	ldr	r2, [r1, #0]
    c7c6:	6042      	str	r2, [r0, #4]
    c7c8:	7909      	ldrb	r1, [r1, #4]
    c7ca:	7201      	strb	r1, [r0, #8]
    c7cc:	4770      	bx	lr

0000c7ce <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    c7ce:	72c1      	strb	r1, [r0, #11]
    c7d0:	0a09      	lsrs	r1, r1, #8
    c7d2:	7301      	strb	r1, [r0, #12]
    c7d4:	4770      	bx	lr

0000c7d6 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    c7d6:	8809      	ldrh	r1, [r1, #0]
    c7d8:	8181      	strh	r1, [r0, #12]
    c7da:	4770      	bx	lr

0000c7dc <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    c7dc:	6809      	ldr	r1, [r1, #0]
    c7de:	f8c0 1016 	str.w	r1, [r0, #22]
    c7e2:	4770      	bx	lr

0000c7e4 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    c7e4:	680a      	ldr	r2, [r1, #0]
    c7e6:	6042      	str	r2, [r0, #4]
    c7e8:	6849      	ldr	r1, [r1, #4]
    c7ea:	6081      	str	r1, [r0, #8]
    c7ec:	4770      	bx	lr

0000c7ee <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    c7ee:	680a      	ldr	r2, [r1, #0]
    c7f0:	f840 2f0e 	str.w	r2, [r0, #14]!
    c7f4:	6849      	ldr	r1, [r1, #4]
    c7f6:	6041      	str	r1, [r0, #4]
    c7f8:	4770      	bx	lr

0000c7fa <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    c7fa:	680a      	ldr	r2, [r1, #0]
    c7fc:	6042      	str	r2, [r0, #4]
    c7fe:	6849      	ldr	r1, [r1, #4]
    c800:	6081      	str	r1, [r0, #8]
    c802:	4770      	bx	lr

0000c804 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    c804:	7802      	ldrb	r2, [r0, #0]
    c806:	f001 0103 	and.w	r1, r1, #3
    c80a:	f022 0203 	bic.w	r2, r2, #3
    c80e:	430a      	orrs	r2, r1
    c810:	7002      	strb	r2, [r0, #0]
    c812:	4770      	bx	lr

0000c814 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    c814:	7101      	strb	r1, [r0, #4]
    c816:	4770      	bx	lr

0000c818 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    c818:	7101      	strb	r1, [r0, #4]
    c81a:	0a09      	lsrs	r1, r1, #8
    c81c:	7141      	strb	r1, [r0, #5]
    c81e:	4770      	bx	lr

0000c820 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    c820:	7181      	strb	r1, [r0, #6]
    c822:	0a09      	lsrs	r1, r1, #8
    c824:	71c1      	strb	r1, [r0, #7]
    c826:	4770      	bx	lr

0000c828 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    c828:	7201      	strb	r1, [r0, #8]
    c82a:	0a09      	lsrs	r1, r1, #8
    c82c:	7241      	strb	r1, [r0, #9]
    c82e:	4770      	bx	lr

0000c830 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    c830:	7281      	strb	r1, [r0, #10]
    c832:	0a09      	lsrs	r1, r1, #8
    c834:	72c1      	strb	r1, [r0, #11]
    c836:	4770      	bx	lr

0000c838 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    c838:	7181      	strb	r1, [r0, #6]
    c83a:	0a09      	lsrs	r1, r1, #8
    c83c:	71c1      	strb	r1, [r0, #7]
    c83e:	4770      	bx	lr

0000c840 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    c840:	7141      	strb	r1, [r0, #5]
    c842:	4770      	bx	lr

0000c844 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    c844:	7841      	ldrb	r1, [r0, #1]
    c846:	7800      	ldrb	r0, [r0, #0]
    c848:	f010 000f 	ands.w	r0, r0, #15
    c84c:	d005      	beq.n	c85a <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    c84e:	2801      	cmp	r0, #1
    c850:	d007      	beq.n	c862 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    c852:	2802      	cmp	r0, #2
    c854:	d001      	beq.n	c85a <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    c856:	2806      	cmp	r0, #6
    c858:	d105      	bne.n	c866 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    c85a:	1f89      	subs	r1, r1, #6
    c85c:	291f      	cmp	r1, #31
    c85e:	d904      	bls.n	c86a <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    c860:	e001      	b.n	c866 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    c862:	290c      	cmp	r1, #12
    c864:	d001      	beq.n	c86a <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    c866:	2000      	movs	r0, #0
    c868:	4770      	bx	lr
    c86a:	2001      	movs	r0, #1
    c86c:	4770      	bx	lr

0000c86e <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    c86e:	7800      	ldrb	r0, [r0, #0]
    c870:	09c0      	lsrs	r0, r0, #7
    c872:	4770      	bx	lr

0000c874 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    c874:	f850 2f03 	ldr.w	r2, [r0, #3]!
    c878:	600a      	str	r2, [r1, #0]
    c87a:	8880      	ldrh	r0, [r0, #4]
    c87c:	8088      	strh	r0, [r1, #4]
    c87e:	4770      	bx	lr

0000c880 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    c880:	7800      	ldrb	r0, [r0, #0]
    c882:	f3c0 1080 	ubfx	r0, r0, #6, #1
    c886:	4770      	bx	lr

0000c888 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    c888:	7801      	ldrb	r1, [r0, #0]
    c88a:	f001 010f 	and.w	r1, r1, #15
    c88e:	2904      	cmp	r1, #4
    c890:	d105      	bne.n	c89e <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    c892:	7840      	ldrb	r0, [r0, #1]
    c894:	1f80      	subs	r0, r0, #6
    c896:	281f      	cmp	r0, #31
    c898:	d801      	bhi.n	c89e <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    c89a:	2001      	movs	r0, #1
    c89c:	4770      	bx	lr
    c89e:	2000      	movs	r0, #0
    c8a0:	4770      	bx	lr

0000c8a2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    c8a2:	b510      	push	{r4, lr}
    c8a4:	7802      	ldrb	r2, [r0, #0]
    c8a6:	f001 030f 	and.w	r3, r1, #15
    c8aa:	f022 020f 	bic.w	r2, r2, #15
    c8ae:	431a      	orrs	r2, r3
    c8b0:	7002      	strb	r2, [r0, #0]
    c8b2:	2907      	cmp	r1, #7
    c8b4:	d20c      	bcs.n	c8d0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    c8b6:	e8df f001 	tbb	[pc, r1]
    c8ba:	0604      	.short	0x0604
    c8bc:	08040604 	.word	0x08040604
    c8c0:	0004      	.short	0x0004
    c8c2:	2106      	movs	r1, #6
    c8c4:	e002      	b.n	c8cc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    c8c6:	210c      	movs	r1, #12
    c8c8:	e000      	b.n	c8cc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    c8ca:	2122      	movs	r1, #34	; 0x22
    c8cc:	7041      	strb	r1, [r0, #1]
    c8ce:	bd10      	pop	{r4, pc}
    c8d0:	216e      	movs	r1, #110	; 0x6e
    c8d2:	202a      	movs	r0, #42	; 0x2a
    c8d4:	f7f7 fe38 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000c8d8 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    c8d8:	680a      	ldr	r2, [r1, #0]
    c8da:	f840 2f09 	str.w	r2, [r0, #9]!
    c8de:	8889      	ldrh	r1, [r1, #4]
    c8e0:	8081      	strh	r1, [r0, #4]
    c8e2:	4770      	bx	lr

0000c8e4 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    c8e4:	7802      	ldrb	r2, [r0, #0]
    c8e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    c8ea:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    c8ee:	7002      	strb	r2, [r0, #0]
    c8f0:	4770      	bx	lr

0000c8f2 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    c8f2:	680a      	ldr	r2, [r1, #0]
    c8f4:	f840 2f03 	str.w	r2, [r0, #3]!
    c8f8:	8889      	ldrh	r1, [r1, #4]
    c8fa:	8081      	strh	r1, [r0, #4]
    c8fc:	4770      	bx	lr

0000c8fe <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    c8fe:	7802      	ldrb	r2, [r0, #0]
    c900:	2340      	movs	r3, #64	; 0x40
    c902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    c906:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    c90a:	430a      	orrs	r2, r1
    c90c:	7002      	strb	r2, [r0, #0]
    c90e:	4770      	bx	lr

0000c910 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    c910:	f7f9 beb4 	b.w	667c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    c914:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    c918:	4604      	mov	r4, r0
    c91a:	2000      	movs	r0, #0
    c91c:	f7f7 ff98 	bl	4850 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    c920:	4605      	mov	r5, r0
    c922:	1c40      	adds	r0, r0, #1
    c924:	2600      	movs	r6, #0
    c926:	b2c7      	uxtb	r7, r0
    c928:	46b0      	mov	r8, r6
    c92a:	e017      	b.n	c95c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4c>
    c92c:	8820      	ldrh	r0, [r4, #0]
    c92e:	1c40      	adds	r0, r0, #1
    c930:	b280      	uxth	r0, r0
    c932:	8020      	strh	r0, [r4, #0]
    c934:	42b8      	cmp	r0, r7
    c936:	d302      	bcc.n	c93e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    c938:	4640      	mov	r0, r8
    c93a:	f8a4 8000 	strh.w	r8, [r4]
    c93e:	b280      	uxth	r0, r0
    c940:	42a8      	cmp	r0, r5
    c942:	d304      	bcc.n	c94e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    c944:	42b8      	cmp	r0, r7
    c946:	d202      	bcs.n	c94e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    c948:	2000      	movs	r0, #0
    c94a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    c94e:	4669      	mov	r1, sp
    c950:	f7ff fd1a 	bl	c388 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    c954:	2800      	cmp	r0, #0
    c956:	d0f8      	beq.n	c94a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>
    c958:	1c76      	adds	r6, r6, #1
    c95a:	b2f6      	uxtb	r6, r6
    c95c:	42be      	cmp	r6, r7
    c95e:	d3e5      	bcc.n	c92c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    c960:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c964:	8020      	strh	r0, [r4, #0]
    c966:	2012      	movs	r0, #18
    c968:	e7ef      	b.n	c94a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>

0000c96a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    c96a:	b570      	push	{r4, r5, r6, lr}
    c96c:	8050      	strh	r0, [r2, #2]
    c96e:	890c      	ldrh	r4, [r1, #8]
    c970:	8094      	strh	r4, [r2, #4]
    c972:	898b      	ldrh	r3, [r1, #12]
    c974:	80d3      	strh	r3, [r2, #6]
    c976:	8948      	ldrh	r0, [r1, #10]
    c978:	8110      	strh	r0, [r2, #8]
    c97a:	89cd      	ldrh	r5, [r1, #14]
    c97c:	8155      	strh	r5, [r2, #10]
    c97e:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    c980:	42ae      	cmp	r6, r5
    c982:	d108      	bne.n	c996 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    c984:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    c986:	4285      	cmp	r5, r0
    c988:	d105      	bne.n	c996 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    c98a:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    c98c:	429d      	cmp	r5, r3
    c98e:	d102      	bne.n	c996 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    c990:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    c992:	42a3      	cmp	r3, r4
    c994:	d001      	beq.n	c99a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    c996:	2301      	movs	r3, #1
    c998:	e000      	b.n	c99c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    c99a:	2300      	movs	r3, #0
    c99c:	7313      	strb	r3, [r2, #12]
    c99e:	8548      	strh	r0, [r1, #42]	; 0x2a
    c9a0:	8950      	ldrh	r0, [r2, #10]
    c9a2:	85c8      	strh	r0, [r1, #46]	; 0x2e
    c9a4:	8890      	ldrh	r0, [r2, #4]
    c9a6:	8588      	strh	r0, [r1, #44]	; 0x2c
    c9a8:	88d0      	ldrh	r0, [r2, #6]
    c9aa:	8608      	strh	r0, [r1, #48]	; 0x30
    c9ac:	2001      	movs	r0, #1
    c9ae:	7010      	strb	r0, [r2, #0]
    c9b0:	bd70      	pop	{r4, r5, r6, pc}

0000c9b2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    c9b2:	b510      	push	{r4, lr}
    c9b4:	888c      	ldrh	r4, [r1, #4]
    c9b6:	890a      	ldrh	r2, [r1, #8]
    c9b8:	884b      	ldrh	r3, [r1, #2]
    c9ba:	88c9      	ldrh	r1, [r1, #6]
    c9bc:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    c9c0:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    c9c4:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    c9c8:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    c9cc:	bd10      	pop	{r4, pc}

0000c9ce <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    c9ce:	b570      	push	{r4, r5, r6, lr}
    c9d0:	4615      	mov	r5, r2
    c9d2:	460c      	mov	r4, r1
    c9d4:	f000 f8b4 	bl	cb40 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x52>
    c9d8:	3096      	adds	r0, #150	; 0x96
    c9da:	4428      	add	r0, r5
    c9dc:	42a0      	cmp	r0, r4
    c9de:	d801      	bhi.n	c9e4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    c9e0:	1a20      	subs	r0, r4, r0
    c9e2:	bd70      	pop	{r4, r5, r6, pc}
    c9e4:	2000      	movs	r0, #0
    c9e6:	bd70      	pop	{r4, r5, r6, pc}

0000c9e8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    c9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c9ec:	4604      	mov	r4, r0
    c9ee:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    c9f0:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    c9f2:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    c9f6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    c9fa:	4285      	cmp	r5, r0
    c9fc:	d300      	bcc.n	ca00 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    c9fe:	4605      	mov	r5, r0
    ca00:	4620      	mov	r0, r4
    ca02:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    ca06:	f000 f88b 	bl	cb20 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x32>
    ca0a:	4601      	mov	r1, r0
    ca0c:	86e5      	strh	r5, [r4, #54]	; 0x36
    ca0e:	8761      	strh	r1, [r4, #58]	; 0x3a
    ca10:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    ca12:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ca16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    ca18:	4680      	mov	r8, r0
    ca1a:	42aa      	cmp	r2, r5
    ca1c:	d200      	bcs.n	ca20 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    ca1e:	462a      	mov	r2, r5
    ca20:	428b      	cmp	r3, r1
    ca22:	d200      	bcs.n	ca26 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    ca24:	460b      	mov	r3, r1
    ca26:	8202      	strh	r2, [r0, #16]
    ca28:	f8a8 3012 	strh.w	r3, [r8, #18]
    ca2c:	42bd      	cmp	r5, r7
    ca2e:	d101      	bne.n	ca34 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    ca30:	42b1      	cmp	r1, r6
    ca32:	d001      	beq.n	ca38 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    ca34:	2001      	movs	r0, #1
    ca36:	e000      	b.n	ca3a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    ca38:	2000      	movs	r0, #0
    ca3a:	4681      	mov	r9, r0
    ca3c:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    ca40:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    ca44:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    ca46:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    ca48:	4285      	cmp	r5, r0
    ca4a:	d300      	bcc.n	ca4e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    ca4c:	4605      	mov	r5, r0
    ca4e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    ca52:	4620      	mov	r0, r4
    ca54:	f000 f86c 	bl	cb30 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x42>
    ca58:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    ca5c:	2902      	cmp	r1, #2
    ca5e:	d108      	bne.n	ca72 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    ca60:	42af      	cmp	r7, r5
    ca62:	d200      	bcs.n	ca66 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    ca64:	463d      	mov	r5, r7
    ca66:	4286      	cmp	r6, r0
    ca68:	d200      	bcs.n	ca6c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    ca6a:	4630      	mov	r0, r6
    ca6c:	2100      	movs	r1, #0
    ca6e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    ca72:	f8a8 5008 	strh.w	r5, [r8, #8]
    ca76:	f8a8 000c 	strh.w	r0, [r8, #12]
    ca7a:	42bd      	cmp	r5, r7
    ca7c:	d101      	bne.n	ca82 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    ca7e:	42b0      	cmp	r0, r6
    ca80:	d001      	beq.n	ca86 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    ca82:	2001      	movs	r0, #1
    ca84:	e000      	b.n	ca88 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    ca86:	2000      	movs	r0, #0
    ca88:	ea40 0009 	orr.w	r0, r0, r9
    ca8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ca90 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    ca90:	6840      	ldr	r0, [r0, #4]
    ca92:	4770      	bx	lr

0000ca94 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    ca94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca98:	4616      	mov	r6, r2
    ca9a:	460f      	mov	r7, r1
    ca9c:	4604      	mov	r4, r0
    ca9e:	f000 f84f 	bl	cb40 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x52>
    caa2:	4605      	mov	r5, r0
    caa4:	463a      	mov	r2, r7
    caa6:	68e1      	ldr	r1, [r4, #12]
    caa8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    caaa:	f000 f834 	bl	cb16 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x28>
    caae:	19a9      	adds	r1, r5, r6
    cab0:	4281      	cmp	r1, r0
    cab2:	d300      	bcc.n	cab6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    cab4:	4608      	mov	r0, r1
    cab6:	6320      	str	r0, [r4, #48]	; 0x30
    cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cabc <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    cabc:	221b      	movs	r2, #27
    cabe:	8402      	strh	r2, [r0, #32]
    cac0:	8382      	strh	r2, [r0, #28]
    cac2:	82c2      	strh	r2, [r0, #22]
    cac4:	8282      	strh	r2, [r0, #20]
    cac6:	8142      	strh	r2, [r0, #10]
    cac8:	8202      	strh	r2, [r0, #16]
    caca:	8102      	strh	r2, [r0, #8]
    cacc:	8542      	strh	r2, [r0, #42]	; 0x2a
    cace:	8582      	strh	r2, [r0, #44]	; 0x2c
    cad0:	8482      	strh	r2, [r0, #36]	; 0x24
    cad2:	2900      	cmp	r1, #0
    cad4:	d10a      	bne.n	caec <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    cad6:	f44f 71a4 	mov.w	r1, #328	; 0x148
    cada:	8441      	strh	r1, [r0, #34]	; 0x22
    cadc:	83c1      	strh	r1, [r0, #30]
    cade:	8341      	strh	r1, [r0, #26]
    cae0:	8301      	strh	r1, [r0, #24]
    cae2:	81c1      	strh	r1, [r0, #14]
    cae4:	8241      	strh	r1, [r0, #18]
    cae6:	8181      	strh	r1, [r0, #12]
    cae8:	85c1      	strh	r1, [r0, #46]	; 0x2e
    caea:	8601      	strh	r1, [r0, #48]	; 0x30
    caec:	4770      	bx	lr

0000caee <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    caee:	6800      	ldr	r0, [r0, #0]
    caf0:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    caf4:	4290      	cmp	r0, r2
    caf6:	d903      	bls.n	cb00 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    caf8:	1a40      	subs	r0, r0, r1
    cafa:	389c      	subs	r0, #156	; 0x9c
    cafc:	0840      	lsrs	r0, r0, #1
    cafe:	4770      	bx	lr
    cb00:	2000      	movs	r0, #0
    cb02:	4770      	bx	lr
    cb04:	2902      	cmp	r1, #2
    cb06:	d003      	beq.n	cb10 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x22>
    cb08:	00c0      	lsls	r0, r0, #3
    cb0a:	3070      	adds	r0, #112	; 0x70
    cb0c:	b280      	uxth	r0, r0
    cb0e:	4770      	bx	lr
    cb10:	0080      	lsls	r0, r0, #2
    cb12:	303c      	adds	r0, #60	; 0x3c
    cb14:	e7fa      	b.n	cb0c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x1e>
    cb16:	4288      	cmp	r0, r1
    cb18:	d300      	bcc.n	cb1c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x2e>
    cb1a:	4608      	mov	r0, r1
    cb1c:	1a80      	subs	r0, r0, r2
    cb1e:	4770      	bx	lr
    cb20:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    cb24:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    cb28:	4281      	cmp	r1, r0
    cb2a:	d200      	bcs.n	cb2e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x40>
    cb2c:	4608      	mov	r0, r1
    cb2e:	4770      	bx	lr
    cb30:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    cb34:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    cb38:	4281      	cmp	r1, r0
    cb3a:	d200      	bcs.n	cb3e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x50>
    cb3c:	4608      	mov	r0, r1
    cb3e:	4770      	bx	lr
    cb40:	2196      	movs	r1, #150	; 0x96
    cb42:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    cb46:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    cb4a:	f000 b800 	b.w	cb4e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x60>
    cb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb52:	460d      	mov	r5, r1
    cb54:	4606      	mov	r6, r0
    cb56:	4698      	mov	r8, r3
    cb58:	4617      	mov	r7, r2
    cb5a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    cb5c:	4611      	mov	r1, r2
    cb5e:	f7ff ffd1 	bl	cb04 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x16>
    cb62:	4604      	mov	r4, r0
    cb64:	4639      	mov	r1, r7
    cb66:	4630      	mov	r0, r6
    cb68:	f7ff ffe2 	bl	cb30 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x42>
    cb6c:	42a0      	cmp	r0, r4
    cb6e:	d200      	bcs.n	cb72 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x84>
    cb70:	4604      	mov	r4, r0
    cb72:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    cb74:	4641      	mov	r1, r8
    cb76:	f7ff ffc5 	bl	cb04 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x16>
    cb7a:	4607      	mov	r7, r0
    cb7c:	4641      	mov	r1, r8
    cb7e:	4630      	mov	r0, r6
    cb80:	f7ff ffce 	bl	cb20 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x32>
    cb84:	42b8      	cmp	r0, r7
    cb86:	d300      	bcc.n	cb8a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x9c>
    cb88:	4638      	mov	r0, r7
    cb8a:	4420      	add	r0, r4
    cb8c:	4428      	add	r0, r5
    cb8e:	1d80      	adds	r0, r0, #6
    cb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cb94 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    cb94:	b510      	push	{r4, lr}
    cb96:	4604      	mov	r4, r0
    cb98:	2108      	movs	r1, #8
    cb9a:	4620      	mov	r0, r4
    cb9c:	f7f7 fd40 	bl	4620 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    cba0:	6820      	ldr	r0, [r4, #0]
    cba2:	2800      	cmp	r0, #0
    cba4:	d102      	bne.n	cbac <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    cba6:	6860      	ldr	r0, [r4, #4]
    cba8:	2800      	cmp	r0, #0
    cbaa:	d0f5      	beq.n	cb98 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    cbac:	bd10      	pop	{r4, pc}
    cbae:	2801      	cmp	r0, #1
    cbb0:	d102      	bne.n	cbb8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    cbb2:	7948      	ldrb	r0, [r1, #5]
    cbb4:	0980      	lsrs	r0, r0, #6
    cbb6:	d001      	beq.n	cbbc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    cbb8:	2000      	movs	r0, #0
    cbba:	4770      	bx	lr
    cbbc:	2001      	movs	r0, #1
    cbbe:	4770      	bx	lr
    cbc0:	2801      	cmp	r0, #1
    cbc2:	d106      	bne.n	cbd2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    cbc4:	7948      	ldrb	r0, [r1, #5]
    cbc6:	2101      	movs	r1, #1
    cbc8:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    cbcc:	d101      	bne.n	cbd2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    cbce:	2001      	movs	r0, #1
    cbd0:	4770      	bx	lr
    cbd2:	2000      	movs	r0, #0
    cbd4:	4770      	bx	lr
    cbd6:	b118      	cbz	r0, cbe0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    cbd8:	2802      	cmp	r0, #2
    cbda:	d001      	beq.n	cbe0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    cbdc:	2001      	movs	r0, #1
    cbde:	4770      	bx	lr
    cbe0:	2000      	movs	r0, #0
    cbe2:	4770      	bx	lr
    cbe4:	2802      	cmp	r0, #2
    cbe6:	d003      	beq.n	cbf0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    cbe8:	2803      	cmp	r0, #3
    cbea:	d001      	beq.n	cbf0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    cbec:	2000      	movs	r0, #0
    cbee:	4770      	bx	lr
    cbf0:	2001      	movs	r0, #1
    cbf2:	4770      	bx	lr

0000cbf4 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    cbf4:	f7fa bd4a 	b.w	768c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68c>
    cbf8:	b510      	push	{r4, lr}
    cbfa:	f7fa fb95 	bl	7328 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x328>
    cbfe:	f7f9 ff37 	bl	6a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    cc02:	f7fd faef 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    cc06:	2005      	movs	r0, #5
    cc08:	bd10      	pop	{r4, pc}
    cc0a:	b510      	push	{r4, lr}
    cc0c:	f7fa fb8c 	bl	7328 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x328>
    cc10:	f7fd fae8 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    cc14:	2005      	movs	r0, #5
    cc16:	bd10      	pop	{r4, pc}
    cc18:	b530      	push	{r4, r5, lr}
    cc1a:	b089      	sub	sp, #36	; 0x24
    cc1c:	4605      	mov	r5, r0
    cc1e:	f7fa fb83 	bl	7328 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x328>
    cc22:	7828      	ldrb	r0, [r5, #0]
    cc24:	4669      	mov	r1, sp
    cc26:	f000 040f 	and.w	r4, r0, #15
    cc2a:	4622      	mov	r2, r4
    cc2c:	4628      	mov	r0, r5
    cc2e:	f7fa feed 	bl	7a0c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    cc32:	2200      	movs	r2, #0
    cc34:	4621      	mov	r1, r4
    cc36:	4668      	mov	r0, sp
    cc38:	f7f9 ff9a 	bl	6b70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    cc3c:	4621      	mov	r1, r4
    cc3e:	4668      	mov	r0, sp
    cc40:	f7fa faf2 	bl	7228 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x228>
    cc44:	4604      	mov	r4, r0
    cc46:	f7f9 ff13 	bl	6a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    cc4a:	b009      	add	sp, #36	; 0x24
    cc4c:	4620      	mov	r0, r4
    cc4e:	bd30      	pop	{r4, r5, pc}
    cc50:	f240 21f2 	movw	r1, #754	; 0x2f2
    cc54:	2032      	movs	r0, #50	; 0x32
    cc56:	f7f7 fc77 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc5a:	b510      	push	{r4, lr}
    cc5c:	f7fa fb64 	bl	7328 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x328>
    cc60:	f7fd fac0 	bl	a1e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    cc64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cc68:	f7fa bd28 	b.w	76bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6bc>
    cc6c:	f7fa bd0e 	b.w	768c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68c>
    cc70:	f7ff b9d2 	b.w	c018 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000cc74 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    cc74:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc76:	b08b      	sub	sp, #44	; 0x2c
    cc78:	4607      	mov	r7, r0
    cc7a:	f7f7 ff71 	bl	4b60 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    cc7e:	4604      	mov	r4, r0
    cc80:	f7ff f8d3 	bl	be2a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    cc84:	0005      	movs	r5, r0
    cc86:	d00c      	beq.n	cca2 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    cc88:	4620      	mov	r0, r4
    cc8a:	4629      	mov	r1, r5
    cc8c:	466a      	mov	r2, sp
    cc8e:	f7ff f8fd 	bl	be8c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    cc92:	4606      	mov	r6, r0
    cc94:	f7f7 ff5e 	bl	4b54 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    cc98:	42b0      	cmp	r0, r6
    cc9a:	d005      	beq.n	cca8 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    cc9c:	f44f 7198 	mov.w	r1, #304	; 0x130
    cca0:	e033      	b.n	cd0a <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    cca2:	2000      	movs	r0, #0
    cca4:	b00b      	add	sp, #44	; 0x2c
    cca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cca8:	a901      	add	r1, sp, #4
    ccaa:	9800      	ldr	r0, [sp, #0]
    ccac:	f000 f8b4 	bl	ce18 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    ccb0:	1d3e      	adds	r6, r7, #4
    ccb2:	4628      	mov	r0, r5
    ccb4:	f7ff f871 	bl	bd9a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ccb8:	4605      	mov	r5, r0
    ccba:	4601      	mov	r1, r0
    ccbc:	221c      	movs	r2, #28
    ccbe:	4630      	mov	r0, r6
    ccc0:	f7fe fade 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ccc4:	7aa8      	ldrb	r0, [r5, #10]
    ccc6:	f04f 0500 	mov.w	r5, #0
    ccca:	06c1      	lsls	r1, r0, #27
    cccc:	d50d      	bpl.n	ccea <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    ccce:	0740      	lsls	r0, r0, #29
    ccd0:	d40a      	bmi.n	cce8 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    ccd2:	f89d 2014 	ldrb.w	r2, [sp, #20]
    ccd6:	f106 001c 	add.w	r0, r6, #28
    ccda:	9904      	ldr	r1, [sp, #16]
    ccdc:	f7fe fad0 	bl	b280 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cce0:	f89d 0014 	ldrb.w	r0, [sp, #20]
    cce4:	7230      	strb	r0, [r6, #8]
    cce6:	e000      	b.n	ccea <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    cce8:	7235      	strb	r5, [r6, #8]
    ccea:	707d      	strb	r5, [r7, #1]
    ccec:	2005      	movs	r0, #5
    ccee:	7038      	strb	r0, [r7, #0]
    ccf0:	4620      	mov	r0, r4
    ccf2:	f7ff f86d 	bl	bdd0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    ccf6:	b130      	cbz	r0, cd06 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    ccf8:	2100      	movs	r1, #0
    ccfa:	4620      	mov	r0, r4
    ccfc:	460a      	mov	r2, r1
    ccfe:	f7ff f957 	bl	bfb0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    cd02:	2001      	movs	r0, #1
    cd04:	e7ce      	b.n	cca4 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    cd06:	f240 1173 	movw	r1, #371	; 0x173
    cd0a:	2033      	movs	r0, #51	; 0x33
    cd0c:	f7f7 fc1c 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000cd10 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    cd10:	b510      	push	{r4, lr}
    cd12:	f7f7 ff25 	bl	4b60 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    cd16:	f000 f874 	bl	ce02 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    cd1a:	4604      	mov	r4, r0
    cd1c:	221c      	movs	r2, #28
    cd1e:	2100      	movs	r1, #0
    cd20:	f7fe fb28 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd24:	207f      	movs	r0, #127	; 0x7f
    cd26:	76a0      	strb	r0, [r4, #26]
    cd28:	21ff      	movs	r1, #255	; 0xff
    cd2a:	73a1      	strb	r1, [r4, #14]
    cd2c:	7061      	strb	r1, [r4, #1]
    cd2e:	74e1      	strb	r1, [r4, #19]
    cd30:	7aa0      	ldrb	r0, [r4, #10]
    cd32:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    cd36:	3020      	adds	r0, #32
    cd38:	72a0      	strb	r0, [r4, #10]
    cd3a:	bd10      	pop	{r4, pc}

0000cd3c <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    cd3c:	f7ff bfe8 	b.w	cd10 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000cd40 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    cd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cd44:	461e      	mov	r6, r3
    cd46:	4617      	mov	r7, r2
    cd48:	4689      	mov	r9, r1
    cd4a:	4682      	mov	sl, r0
    cd4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    cd50:	f7f7 ff06 	bl	4b60 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    cd54:	4604      	mov	r4, r0
    cd56:	f7ff f822 	bl	bd9e <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    cd5a:	2801      	cmp	r0, #1
    cd5c:	d034      	beq.n	cdc8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    cd5e:	4620      	mov	r0, r4
    cd60:	f000 f84f 	bl	ce02 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    cd64:	4604      	mov	r4, r0
    cd66:	221c      	movs	r2, #28
    cd68:	2100      	movs	r1, #0
    cd6a:	f7fe fb03 	bl	b374 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd6e:	2501      	movs	r5, #1
    cd70:	7025      	strb	r5, [r4, #0]
    cd72:	1c63      	adds	r3, r4, #1
    cd74:	1ca2      	adds	r2, r4, #2
    cd76:	4649      	mov	r1, r9
    cd78:	4650      	mov	r0, sl
    cd7a:	f000 f827 	bl	cdcc <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    cd7e:	f884 8009 	strb.w	r8, [r4, #9]
    cd82:	7aa0      	ldrb	r0, [r4, #10]
    cd84:	21ff      	movs	r1, #255	; 0xff
    cd86:	f367 0000 	bfi	r0, r7, #0, #1
    cd8a:	f040 001a 	orr.w	r0, r0, #26
    cd8e:	72a0      	strb	r0, [r4, #10]
    cd90:	7325      	strb	r5, [r4, #12]
    cd92:	2000      	movs	r0, #0
    cd94:	7360      	strb	r0, [r4, #13]
    cd96:	73a1      	strb	r1, [r4, #14]
    cd98:	74e1      	strb	r1, [r4, #19]
    cd9a:	207f      	movs	r0, #127	; 0x7f
    cd9c:	76a0      	strb	r0, [r4, #26]
    cd9e:	76e6      	strb	r6, [r4, #27]
    cda0:	f7f7 fed8 	bl	4b54 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    cda4:	4604      	mov	r4, r0
    cda6:	f7f7 fedb 	bl	4b60 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    cdaa:	2201      	movs	r2, #1
    cdac:	4621      	mov	r1, r4
    cdae:	f000 f831 	bl	ce14 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    cdb2:	b120      	cbz	r0, cdbe <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    cdb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cdb8:	2005      	movs	r0, #5
    cdba:	f7fa beef 	b.w	7b9c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    cdbe:	f240 21c9 	movw	r1, #713	; 0x2c9
    cdc2:	2033      	movs	r0, #51	; 0x33
    cdc4:	f7f7 fbc0 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cdc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cdcc:	b510      	push	{r4, lr}
    cdce:	461c      	mov	r4, r3
    cdd0:	460b      	mov	r3, r1
    cdd2:	29ff      	cmp	r1, #255	; 0xff
    cdd4:	d00d      	beq.n	cdf2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    cdd6:	4621      	mov	r1, r4
    cdd8:	4618      	mov	r0, r3
    cdda:	f7f8 ff01 	bl	5be0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    cdde:	b120      	cbz	r0, cdea <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    cde0:	7820      	ldrb	r0, [r4, #0]
    cde2:	f040 0002 	orr.w	r0, r0, #2
    cde6:	7020      	strb	r0, [r4, #0]
    cde8:	bd10      	pop	{r4, pc}
    cdea:	2150      	movs	r1, #80	; 0x50
    cdec:	2033      	movs	r0, #51	; 0x33
    cdee:	f7f7 fbab 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cdf2:	7c41      	ldrb	r1, [r0, #17]
    cdf4:	7021      	strb	r1, [r4, #0]
    cdf6:	6840      	ldr	r0, [r0, #4]
    cdf8:	6801      	ldr	r1, [r0, #0]
    cdfa:	6011      	str	r1, [r2, #0]
    cdfc:	8880      	ldrh	r0, [r0, #4]
    cdfe:	8090      	strh	r0, [r2, #4]
    ce00:	bd10      	pop	{r4, pc}
    ce02:	b51c      	push	{r2, r3, r4, lr}
    ce04:	4669      	mov	r1, sp
    ce06:	aa01      	add	r2, sp, #4
    ce08:	f7ff f832 	bl	be70 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    ce0c:	9800      	ldr	r0, [sp, #0]
    ce0e:	f7fe ffc4 	bl	bd9a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ce12:	bd1c      	pop	{r2, r3, r4, pc}
    ce14:	f7fe bf69 	b.w	bcea <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000ce18 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    ce18:	7802      	ldrb	r2, [r0, #0]
    ce1a:	f002 020f 	and.w	r2, r2, #15
    ce1e:	f7fa bdf5 	b.w	7a0c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    ce22:	2800      	cmp	r0, #0
    ce24:	db04      	blt.n	ce30 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    ce26:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce2a:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    ce2e:	e005      	b.n	ce3c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    ce30:	f000 000f 	and.w	r0, r0, #15
    ce34:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce38:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    ce3c:	0940      	lsrs	r0, r0, #5
    ce3e:	4770      	bx	lr
    ce40:	6940      	ldr	r0, [r0, #20]
    ce42:	2800      	cmp	r0, #0
    ce44:	d000      	beq.n	ce48 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x30>
    ce46:	2001      	movs	r0, #1
    ce48:	4770      	bx	lr
    ce4a:	b510      	push	{r4, lr}
    ce4c:	2808      	cmp	r0, #8
    ce4e:	d00a      	beq.n	ce66 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x4e>
    ce50:	2804      	cmp	r0, #4
    ce52:	d00a      	beq.n	ce6a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x52>
    ce54:	2802      	cmp	r0, #2
    ce56:	d00a      	beq.n	ce6e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x56>
    ce58:	2108      	movs	r1, #8
    ce5a:	2801      	cmp	r0, #1
    ce5c:	d009      	beq.n	ce72 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x5a>
    ce5e:	21d9      	movs	r1, #217	; 0xd9
    ce60:	2005      	movs	r0, #5
    ce62:	f7f7 fb71 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce66:	2140      	movs	r1, #64	; 0x40
    ce68:	e7f7      	b.n	ce5a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x42>
    ce6a:	2110      	movs	r1, #16
    ce6c:	e7f5      	b.n	ce5a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x42>
    ce6e:	2104      	movs	r1, #4
    ce70:	e7f3      	b.n	ce5a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x42>
    ce72:	222a      	movs	r2, #42	; 0x2a
    ce74:	2028      	movs	r0, #40	; 0x28
    ce76:	fb11 0002 	smlabb	r0, r1, r2, r0
    ce7a:	b280      	uxth	r0, r0
    ce7c:	bd10      	pop	{r4, pc}
    ce7e:	2000      	movs	r0, #0
    ce80:	4770      	bx	lr
    ce82:	b570      	push	{r4, r5, r6, lr}
    ce84:	4604      	mov	r4, r0
    ce86:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    ce8a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    ce8e:	f000 f80c 	bl	ceaa <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x92>
    ce92:	4605      	mov	r5, r0
    ce94:	f000 f857 	bl	cf46 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12e>
    ce98:	4601      	mov	r1, r0
    ce9a:	462a      	mov	r2, r5
    ce9c:	4620      	mov	r0, r4
    ce9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cea2:	f7ff bdf7 	b.w	ca94 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    cea6:	f7f5 b8b7 	b.w	2018 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ceaa:	b510      	push	{r4, lr}
    ceac:	4604      	mov	r4, r0
    ceae:	4608      	mov	r0, r1
    ceb0:	f000 fe56 	bl	db60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ceb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ceb8:	2c02      	cmp	r4, #2
    ceba:	d00a      	beq.n	ced2 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xba>
    cebc:	f640 0234 	movw	r2, #2100	; 0x834
    cec0:	4410      	add	r0, r2
    cec2:	f24a 5295 	movw	r2, #42389	; 0xa595
    cec6:	4410      	add	r0, r2
    cec8:	fbb0 f0f1 	udiv	r0, r0, r1
    cecc:	f200 1037 	addw	r0, r0, #311	; 0x137
    ced0:	bd10      	pop	{r4, pc}
    ced2:	460a      	mov	r2, r1
    ced4:	e7f4      	b.n	cec0 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa8>
    ced6:	b510      	push	{r4, lr}
    ced8:	4604      	mov	r4, r0
    ceda:	2000      	movs	r0, #0
    cedc:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    cee0:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    cee4:	f7f5 fce4 	bl	28b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    cee8:	b140      	cbz	r0, cefc <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xe4>
    ceea:	2020      	movs	r0, #32
    ceec:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    cef0:	f504 7084 	add.w	r0, r4, #264	; 0x108
    cef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cef8:	f7fc bcf0 	b.w	98dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    cefc:	f44f 61a6 	mov.w	r1, #1328	; 0x530
    cf00:	2035      	movs	r0, #53	; 0x35
    cf02:	f7f7 fb21 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cf08:	4613      	mov	r3, r2
    cf0a:	460a      	mov	r2, r1
    cf0c:	4604      	mov	r4, r0
    cf0e:	4601      	mov	r1, r0
    cf10:	4668      	mov	r0, sp
    cf12:	f7fb f9dd 	bl	82d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d0>
    cf16:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    cf1a:	4669      	mov	r1, sp
    cf1c:	f7ff ffc3 	bl	cea6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x8e>
    cf20:	2800      	cmp	r0, #0
    cf22:	d104      	bne.n	cf2e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x116>
    cf24:	f640 2139 	movw	r1, #2617	; 0xa39
    cf28:	2035      	movs	r0, #53	; 0x35
    cf2a:	f7f7 fb0d 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    cf30:	b510      	push	{r4, lr}
    cf32:	245b      	movs	r4, #91	; 0x5b
    cf34:	f000 fdd2 	bl	dadc <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    cf38:	b910      	cbnz	r0, cf40 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x128>
    cf3a:	f000 fdc5 	bl	dac8 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    cf3e:	b100      	cbz	r0, cf42 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12a>
    cf40:	2462      	movs	r4, #98	; 0x62
    cf42:	4620      	mov	r0, r4
    cf44:	bd10      	pop	{r4, pc}
    cf46:	b510      	push	{r4, lr}
    cf48:	f7ff fff2 	bl	cf30 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x118>
    cf4c:	3069      	adds	r0, #105	; 0x69
    cf4e:	b280      	uxth	r0, r0
    cf50:	bd10      	pop	{r4, pc}
    cf52:	b510      	push	{r4, lr}
    cf54:	f7ff ffec 	bl	cf30 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x118>
    cf58:	30ff      	adds	r0, #255	; 0xff
    cf5a:	b280      	uxth	r0, r0
    cf5c:	bd10      	pop	{r4, pc}
    cf5e:	b1d0      	cbz	r0, cf96 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x17e>
    cf60:	2908      	cmp	r1, #8
    cf62:	d011      	beq.n	cf88 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x170>
    cf64:	2904      	cmp	r1, #4
    cf66:	d00b      	beq.n	cf80 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x168>
    cf68:	2000      	movs	r0, #0
    cf6a:	2902      	cmp	r1, #2
    cf6c:	d010      	beq.n	cf90 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x178>
    cf6e:	2108      	movs	r1, #8
    cf70:	3028      	adds	r0, #40	; 0x28
    cf72:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    cf76:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    cf7a:	4408      	add	r0, r1
    cf7c:	3098      	adds	r0, #152	; 0x98
    cf7e:	4770      	bx	lr
    cf80:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    cf84:	2110      	movs	r1, #16
    cf86:	e7f4      	b.n	cf72 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x15a>
    cf88:	f44f 70c8 	mov.w	r0, #400	; 0x190
    cf8c:	2140      	movs	r1, #64	; 0x40
    cf8e:	e7f0      	b.n	cf72 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x15a>
    cf90:	2104      	movs	r1, #4
    cf92:	3018      	adds	r0, #24
    cf94:	e7ed      	b.n	cf72 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x15a>
    cf96:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    cf9a:	4770      	bx	lr

0000cf9c <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    cf9c:	f7f7 bd4c 	b.w	4a38 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000cfa0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    cfa0:	b538      	push	{r3, r4, r5, lr}
    cfa2:	460d      	mov	r5, r1
    cfa4:	4604      	mov	r4, r0
    cfa6:	e050      	b.n	d04a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    cfa8:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    cfac:	1c40      	adds	r0, r0, #1
    cfae:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    cfb2:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    cfb6:	1c40      	adds	r0, r0, #1
    cfb8:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    cfbc:	4620      	mov	r0, r4
    cfbe:	f000 f8e1 	bl	d184 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    cfc2:	b198      	cbz	r0, cfec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    cfc4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cfc8:	1c40      	adds	r0, r0, #1
    cfca:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    cfce:	4620      	mov	r0, r4
    cfd0:	f000 f86e 	bl	d0b0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    cfd4:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    cfd8:	4288      	cmp	r0, r1
    cfda:	d307      	bcc.n	cfec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    cfdc:	2000      	movs	r0, #0
    cfde:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    cfe2:	2001      	movs	r0, #1
    cfe4:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    cfe8:	f7f9 f9d2 	bl	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    cfec:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    cff0:	b120      	cbz	r0, cffc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    cff2:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    cff6:	1c40      	adds	r0, r0, #1
    cff8:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    cffc:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    d000:	b120      	cbz	r0, d00c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    d002:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    d006:	1c40      	adds	r0, r0, #1
    d008:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    d00c:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    d010:	f88d 0000 	strb.w	r0, [sp]
    d014:	9800      	ldr	r0, [sp, #0]
    d016:	9000      	str	r0, [sp, #0]
    d018:	f89d 0000 	ldrb.w	r0, [sp]
    d01c:	b940      	cbnz	r0, d030 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    d01e:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    d022:	2300      	movs	r3, #0
    d024:	2101      	movs	r1, #1
    d026:	f104 0078 	add.w	r0, r4, #120	; 0x78
    d02a:	f7ff f9d6 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d02e:	b120      	cbz	r0, d03a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    d030:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    d034:	1c40      	adds	r0, r0, #1
    d036:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    d03a:	4620      	mov	r0, r4
    d03c:	f000 f847 	bl	d0ce <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    d040:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    d044:	1c40      	adds	r0, r0, #1
    d046:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    d04a:	1e6d      	subs	r5, r5, #1
    d04c:	b2ad      	uxth	r5, r5
    d04e:	d2ab      	bcs.n	cfa8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    d050:	bd38      	pop	{r3, r4, r5, pc}

0000d052 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    d052:	b510      	push	{r4, lr}
    d054:	f7fc f8ec 	bl	9230 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    d058:	b128      	cbz	r0, d066 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    d05a:	2000      	movs	r0, #0
    d05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d060:	4601      	mov	r1, r0
    d062:	f7fc b891 	b.w	9188 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    d066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d06a:	f7f8 b917 	b.w	529c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    d06e:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    d072:	28fe      	cmp	r0, #254	; 0xfe
    d074:	d001      	beq.n	d07a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    d076:	2001      	movs	r0, #1
    d078:	4770      	bx	lr
    d07a:	2000      	movs	r0, #0
    d07c:	4770      	bx	lr
    d07e:	b510      	push	{r4, lr}
    d080:	2801      	cmp	r0, #1
    d082:	d006      	beq.n	d092 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    d084:	2802      	cmp	r0, #2
    d086:	d004      	beq.n	d092 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    d088:	f240 2163 	movw	r1, #611	; 0x263
    d08c:	2006      	movs	r0, #6
    d08e:	f7f7 fa5b 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d092:	bd10      	pop	{r4, pc}
    d094:	2801      	cmp	r0, #1
    d096:	d002      	beq.n	d09e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    d098:	2802      	cmp	r0, #2
    d09a:	d105      	bne.n	d0a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    d09c:	e002      	b.n	d0a4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    d09e:	2901      	cmp	r1, #1
    d0a0:	d004      	beq.n	d0ac <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    d0a2:	e001      	b.n	d0a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    d0a4:	2902      	cmp	r1, #2
    d0a6:	d001      	beq.n	d0ac <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    d0a8:	2000      	movs	r0, #0
    d0aa:	4770      	bx	lr
    d0ac:	2001      	movs	r0, #1
    d0ae:	4770      	bx	lr
    d0b0:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    d0b4:	428a      	cmp	r2, r1
    d0b6:	d301      	bcc.n	d0bc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    d0b8:	1a51      	subs	r1, r2, r1
    d0ba:	e000      	b.n	d0be <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    d0bc:	2100      	movs	r1, #0
    d0be:	8a82      	ldrh	r2, [r0, #20]
    d0c0:	1d52      	adds	r2, r2, #5
    d0c2:	428a      	cmp	r2, r1
    d0c4:	d302      	bcc.n	d0cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    d0c6:	2101      	movs	r1, #1
    d0c8:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    d0cc:	4770      	bx	lr
    d0ce:	b570      	push	{r4, r5, r6, lr}
    d0d0:	4604      	mov	r4, r0
    d0d2:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    d0d6:	2500      	movs	r5, #0
    d0d8:	2601      	movs	r6, #1
    d0da:	280c      	cmp	r0, #12
    d0dc:	d02c      	beq.n	d138 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    d0de:	280d      	cmp	r0, #13
    d0e0:	d129      	bne.n	d136 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    d0e2:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    d0e6:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    d0ea:	1c40      	adds	r0, r0, #1
    d0ec:	4288      	cmp	r0, r1
    d0ee:	d122      	bne.n	d136 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    d0f0:	8820      	ldrh	r0, [r4, #0]
    d0f2:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    d0f6:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    d0fa:	f7ff f955 	bl	c3a8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    d0fe:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    d102:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    d106:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    d10a:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    d10e:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    d112:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    d116:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    d11a:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    d11e:	2102      	movs	r1, #2
    d120:	4620      	mov	r0, r4
    d122:	f7f8 ff91 	bl	6048 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    d126:	f7f9 f933 	bl	6390 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    d12a:	2103      	movs	r1, #3
    d12c:	4620      	mov	r0, r4
    d12e:	f7fa fcc7 	bl	7ac0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    d132:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    d136:	bd70      	pop	{r4, r5, r6, pc}
    d138:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    d13c:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    d140:	1c40      	adds	r0, r0, #1
    d142:	4288      	cmp	r0, r1
    d144:	d1f7      	bne.n	d136 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    d146:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    d14a:	f8d0 1001 	ldr.w	r1, [r0, #1]
    d14e:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    d152:	7940      	ldrb	r0, [r0, #5]
    d154:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    d158:	2103      	movs	r1, #3
    d15a:	4620      	mov	r0, r4
    d15c:	f7f8 ff74 	bl	6048 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    d160:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    d164:	7800      	ldrb	r0, [r0, #0]
    d166:	b140      	cbz	r0, d17a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    d168:	2101      	movs	r1, #1
    d16a:	20fe      	movs	r0, #254	; 0xfe
    d16c:	f7fc fb3e 	bl	97ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe40>
    d170:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    d174:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    d178:	bd70      	pop	{r4, r5, r6, pc}
    d17a:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    d17e:	2036      	movs	r0, #54	; 0x36
    d180:	f7f7 f9e2 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d184:	b510      	push	{r4, lr}
    d186:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    d18a:	b941      	cbnz	r1, d19e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    d18c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    d190:	2300      	movs	r3, #0
    d192:	2106      	movs	r1, #6
    d194:	3078      	adds	r0, #120	; 0x78
    d196:	f7ff f920 	bl	c3da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d19a:	2800      	cmp	r0, #0
    d19c:	d000      	beq.n	d1a0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    d19e:	2001      	movs	r0, #1
    d1a0:	bd10      	pop	{r4, pc}

0000d1a2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    d1a2:	b510      	push	{r4, lr}
    d1a4:	460c      	mov	r4, r1
    d1a6:	4601      	mov	r1, r0
    d1a8:	4610      	mov	r0, r2
    d1aa:	f7f4 fdf7 	bl	1d9c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    d1ae:	2800      	cmp	r0, #0
    d1b0:	da06      	bge.n	d1c0 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    d1b2:	1a21      	subs	r1, r4, r0
    d1b4:	1e49      	subs	r1, r1, #1
    d1b6:	fbb1 f1f4 	udiv	r1, r1, r4
    d1ba:	fb01 0004 	mla	r0, r1, r4, r0
    d1be:	bd10      	pop	{r4, pc}
    d1c0:	fb90 f1f4 	sdiv	r1, r0, r4
    d1c4:	fb01 0014 	mls	r0, r1, r4, r0
    d1c8:	bd10      	pop	{r4, pc}
    d1ca:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    d1ce:	f001 0107 	and.w	r1, r1, #7
    d1d2:	7800      	ldrb	r0, [r0, #0]
    d1d4:	2201      	movs	r2, #1
    d1d6:	408a      	lsls	r2, r1
    d1d8:	4010      	ands	r0, r2
    d1da:	40c8      	lsrs	r0, r1
    d1dc:	4770      	bx	lr
    d1de:	b118      	cbz	r0, d1e8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    d1e0:	2802      	cmp	r0, #2
    d1e2:	d001      	beq.n	d1e8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    d1e4:	2001      	movs	r0, #1
    d1e6:	4770      	bx	lr
    d1e8:	2000      	movs	r0, #0
    d1ea:	4770      	bx	lr

0000d1ec <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    d1ec:	b510      	push	{r4, lr}
    d1ee:	4604      	mov	r4, r0
    d1f0:	7800      	ldrb	r0, [r0, #0]
    d1f2:	b118      	cbz	r0, d1fc <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    d1f4:	2801      	cmp	r0, #1
    d1f6:	d001      	beq.n	d1fc <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    d1f8:	2012      	movs	r0, #18
    d1fa:	bd10      	pop	{r4, pc}
    d1fc:	f000 fb4b 	bl	d896 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
    d200:	b120      	cbz	r0, d20c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    d202:	f7f8 fce7 	bl	5bd4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    d206:	b108      	cbz	r0, d20c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    d208:	200c      	movs	r0, #12
    d20a:	bd10      	pop	{r4, pc}
    d20c:	7820      	ldrb	r0, [r4, #0]
    d20e:	f7ff ffe6 	bl	d1de <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    d212:	1de2      	adds	r2, r4, #7
    d214:	f104 0317 	add.w	r3, r4, #23
    d218:	1c61      	adds	r1, r4, #1
    d21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d21e:	f7f8 bd0b 	b.w	5c38 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000d222 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    d222:	b510      	push	{r4, lr}
    d224:	4604      	mov	r4, r0
    d226:	f000 fbc6 	bl	d9b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    d22a:	b108      	cbz	r0, d230 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    d22c:	200c      	movs	r0, #12
    d22e:	bd10      	pop	{r4, pc}
    d230:	7820      	ldrb	r0, [r4, #0]
    d232:	b118      	cbz	r0, d23c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    d234:	2801      	cmp	r0, #1
    d236:	d001      	beq.n	d23c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    d238:	2012      	movs	r0, #18
    d23a:	bd10      	pop	{r4, pc}
    d23c:	f7ff ffcf 	bl	d1de <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    d240:	1c61      	adds	r1, r4, #1
    d242:	f7f8 fd9d 	bl	5d80 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    d246:	b108      	cbz	r0, d24c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    d248:	2000      	movs	r0, #0
    d24a:	bd10      	pop	{r4, pc}
    d24c:	2007      	movs	r0, #7
    d24e:	bd10      	pop	{r4, pc}

0000d250 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    d250:	b510      	push	{r4, lr}
    d252:	f000 fb20 	bl	d896 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
    d256:	b120      	cbz	r0, d262 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    d258:	f7f8 fcbc 	bl	5bd4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    d25c:	b108      	cbz	r0, d262 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    d25e:	200c      	movs	r0, #12
    d260:	bd10      	pop	{r4, pc}
    d262:	f7f8 fd2f 	bl	5cc4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    d266:	2000      	movs	r0, #0
    d268:	bd10      	pop	{r4, pc}

0000d26a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    d26a:	b510      	push	{r4, lr}
    d26c:	f000 fba3 	bl	d9b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    d270:	b108      	cbz	r0, d276 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    d272:	200c      	movs	r0, #12
    d274:	bd10      	pop	{r4, pc}
    d276:	f7f8 fdab 	bl	5dd0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    d27a:	2000      	movs	r0, #0
    d27c:	bd10      	pop	{r4, pc}

0000d27e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    d27e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d280:	4605      	mov	r5, r0
    d282:	f000 f959 	bl	d538 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    d286:	2800      	cmp	r0, #0
    d288:	d112      	bne.n	d2b0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    d28a:	8828      	ldrh	r0, [r5, #0]
    d28c:	2100      	movs	r1, #0
    d28e:	f7fe ff29 	bl	c0e4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d292:	0004      	movs	r4, r0
    d294:	d00d      	beq.n	d2b2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    d296:	f000 faea 	bl	d86e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x336>
    d29a:	b150      	cbz	r0, d2b2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    d29c:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    d2a0:	f88d 0000 	strb.w	r0, [sp]
    d2a4:	9800      	ldr	r0, [sp, #0]
    d2a6:	9000      	str	r0, [sp, #0]
    d2a8:	f89d 0000 	ldrb.w	r0, [sp]
    d2ac:	b118      	cbz	r0, d2b6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    d2ae:	203a      	movs	r0, #58	; 0x3a
    d2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2b2:	2002      	movs	r0, #2
    d2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2b6:	88a8      	ldrh	r0, [r5, #4]
    d2b8:	f7ff f872 	bl	c3a0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    d2bc:	4606      	mov	r6, r0
    d2be:	4601      	mov	r1, r0
    d2c0:	2008      	movs	r0, #8
    d2c2:	f7ff f9de 	bl	c682 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    d2c6:	4601      	mov	r1, r0
    d2c8:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    d2cc:	4281      	cmp	r1, r0
    d2ce:	d301      	bcc.n	d2d4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    d2d0:	42b0      	cmp	r0, r6
    d2d2:	d301      	bcc.n	d2d8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    d2d4:	2012      	movs	r0, #18
    d2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2d8:	4631      	mov	r1, r6
    d2da:	2005      	movs	r0, #5
    d2dc:	f7ff f9d1 	bl	c682 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    d2e0:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    d2e4:	2000      	movs	r0, #0
    d2e6:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    d2ea:	88e8      	ldrh	r0, [r5, #6]
    d2ec:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    d2f0:	8928      	ldrh	r0, [r5, #8]
    d2f2:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    d2f6:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    d2fa:	2001      	movs	r0, #1
    d2fc:	7020      	strb	r0, [r4, #0]
    d2fe:	2000      	movs	r0, #0
    d300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d302 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    d302:	b510      	push	{r4, lr}
    d304:	460b      	mov	r3, r1
    d306:	2201      	movs	r2, #1
    d308:	f100 0110 	add.w	r1, r0, #16
    d30c:	f7ff f816 	bl	c33c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    d310:	2000      	movs	r0, #0
    d312:	bd10      	pop	{r4, pc}

0000d314 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    d314:	b510      	push	{r4, lr}
    d316:	2108      	movs	r1, #8
    d318:	f7f7 f982 	bl	4620 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d31c:	2000      	movs	r0, #0
    d31e:	bd10      	pop	{r4, pc}

0000d320 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    d320:	2108      	movs	r1, #8
    d322:	7001      	strb	r1, [r0, #0]
    d324:	2000      	movs	r0, #0
    d326:	4770      	bx	lr

0000d328 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    d328:	b510      	push	{r4, lr}
    d32a:	4604      	mov	r4, r0
    d32c:	20d8      	movs	r0, #216	; 0xd8
    d32e:	7020      	strb	r0, [r4, #0]
    d330:	f000 fa78 	bl	d824 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ec>
    d334:	7060      	strb	r0, [r4, #1]
    d336:	2000      	movs	r0, #0
    d338:	bd10      	pop	{r4, pc}

0000d33a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    d33a:	2108      	movs	r1, #8
    d33c:	7001      	strb	r1, [r0, #0]
    d33e:	2000      	movs	r0, #0
    d340:	4770      	bx	lr

0000d342 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    d342:	b510      	push	{r4, lr}
    d344:	4604      	mov	r4, r0
    d346:	7800      	ldrb	r0, [r0, #0]
    d348:	b108      	cbz	r0, d34e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    d34a:	2801      	cmp	r0, #1
    d34c:	d110      	bne.n	d370 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    d34e:	f000 faa2 	bl	d896 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
    d352:	b120      	cbz	r0, d35e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    d354:	f7f8 fc3e 	bl	5bd4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    d358:	b108      	cbz	r0, d35e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    d35a:	200c      	movs	r0, #12
    d35c:	bd10      	pop	{r4, pc}
    d35e:	7820      	ldrb	r0, [r4, #0]
    d360:	f7ff ff3d 	bl	d1de <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    d364:	1c61      	adds	r1, r4, #1
    d366:	f7fe ffcf 	bl	c308 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    d36a:	b108      	cbz	r0, d370 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    d36c:	2000      	movs	r0, #0
    d36e:	bd10      	pop	{r4, pc}
    d370:	2012      	movs	r0, #18
    d372:	bd10      	pop	{r4, pc}

0000d374 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    d374:	b510      	push	{r4, lr}
    d376:	4604      	mov	r4, r0
    d378:	f000 fb1d 	bl	d9b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    d37c:	b108      	cbz	r0, d382 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    d37e:	200c      	movs	r0, #12
    d380:	bd10      	pop	{r4, pc}
    d382:	7820      	ldrb	r0, [r4, #0]
    d384:	b108      	cbz	r0, d38a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    d386:	2801      	cmp	r0, #1
    d388:	d107      	bne.n	d39a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    d38a:	f7ff ff28 	bl	d1de <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    d38e:	1c61      	adds	r1, r4, #1
    d390:	f7fe ffc9 	bl	c326 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    d394:	b108      	cbz	r0, d39a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    d396:	2000      	movs	r0, #0
    d398:	bd10      	pop	{r4, pc}
    d39a:	2012      	movs	r0, #18
    d39c:	bd10      	pop	{r4, pc}

0000d39e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    d39e:	b510      	push	{r4, lr}
    d3a0:	4604      	mov	r4, r0
    d3a2:	f000 fa78 	bl	d896 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
    d3a6:	b108      	cbz	r0, d3ac <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    d3a8:	200c      	movs	r0, #12
    d3aa:	bd10      	pop	{r4, pc}
    d3ac:	7820      	ldrb	r0, [r4, #0]
    d3ae:	f000 0001 	and.w	r0, r0, #1
    d3b2:	f7f8 fc09 	bl	5bc8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    d3b6:	2000      	movs	r0, #0
    d3b8:	bd10      	pop	{r4, pc}

0000d3ba <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    d3ba:	b510      	push	{r4, lr}
    d3bc:	4604      	mov	r4, r0
    d3be:	f000 fa6a 	bl	d896 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
    d3c2:	b120      	cbz	r0, d3ce <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    d3c4:	f7f8 fc06 	bl	5bd4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    d3c8:	b108      	cbz	r0, d3ce <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    d3ca:	200c      	movs	r0, #12
    d3cc:	bd10      	pop	{r4, pc}
    d3ce:	7820      	ldrb	r0, [r4, #0]
    d3d0:	f7ff ff05 	bl	d1de <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    d3d4:	79e2      	ldrb	r2, [r4, #7]
    d3d6:	1c61      	adds	r1, r4, #1
    d3d8:	f7f8 fb96 	bl	5b08 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    d3dc:	b108      	cbz	r0, d3e2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    d3de:	2000      	movs	r0, #0
    d3e0:	bd10      	pop	{r4, pc}
    d3e2:	2002      	movs	r0, #2
    d3e4:	bd10      	pop	{r4, pc}

0000d3e6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    d3e6:	b510      	push	{r4, lr}
    d3e8:	4604      	mov	r4, r0
    d3ea:	2001      	movs	r0, #1
    d3ec:	f000 f8d9 	bl	d5a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    d3f0:	b128      	cbz	r0, d3fe <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    d3f2:	4621      	mov	r1, r4
    d3f4:	2001      	movs	r0, #1
    d3f6:	f7f7 fddb 	bl	4fb0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    d3fa:	2000      	movs	r0, #0
    d3fc:	bd10      	pop	{r4, pc}
    d3fe:	200c      	movs	r0, #12
    d400:	bd10      	pop	{r4, pc}

0000d402 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    d402:	b510      	push	{r4, lr}
    d404:	8800      	ldrh	r0, [r0, #0]
    d406:	f7f8 fc73 	bl	5cf0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    d40a:	b108      	cbz	r0, d410 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    d40c:	2000      	movs	r0, #0
    d40e:	bd10      	pop	{r4, pc}
    d410:	2030      	movs	r0, #48	; 0x30
    d412:	bd10      	pop	{r4, pc}

0000d414 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    d414:	b51c      	push	{r2, r3, r4, lr}
    d416:	7801      	ldrb	r1, [r0, #0]
    d418:	f88d 1000 	strb.w	r1, [sp]
    d41c:	7840      	ldrb	r0, [r0, #1]
    d41e:	f88d 0001 	strb.w	r0, [sp, #1]
    d422:	2000      	movs	r0, #0
    d424:	f8ad 0002 	strh.w	r0, [sp, #2]
    d428:	f8ad 0004 	strh.w	r0, [sp, #4]
    d42c:	4601      	mov	r1, r0
    d42e:	4668      	mov	r0, sp
    d430:	f000 f8f7 	bl	d622 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xea>
    d434:	2800      	cmp	r0, #0
    d436:	d102      	bne.n	d43e <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    d438:	4668      	mov	r0, sp
    d43a:	f000 f8d6 	bl	d5ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xb2>
    d43e:	bd1c      	pop	{r2, r3, r4, pc}

0000d440 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    d440:	b500      	push	{lr}
    d442:	b087      	sub	sp, #28
    d444:	7941      	ldrb	r1, [r0, #5]
    d446:	f88d 1000 	strb.w	r1, [sp]
    d44a:	7981      	ldrb	r1, [r0, #6]
    d44c:	f88d 1001 	strb.w	r1, [sp, #1]
    d450:	2101      	movs	r1, #1
    d452:	f88d 1002 	strb.w	r1, [sp, #2]
    d456:	7801      	ldrb	r1, [r0, #0]
    d458:	f88d 1003 	strb.w	r1, [sp, #3]
    d45c:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    d460:	f240 2271 	movw	r2, #625	; 0x271
    d464:	4351      	muls	r1, r2
    d466:	9102      	str	r1, [sp, #8]
    d468:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    d46c:	4350      	muls	r0, r2
    d46e:	9004      	str	r0, [sp, #16]
    d470:	2007      	movs	r0, #7
    d472:	f88d 0018 	strb.w	r0, [sp, #24]
    d476:	2000      	movs	r0, #0
    d478:	f88d 0019 	strb.w	r0, [sp, #25]
    d47c:	9804      	ldr	r0, [sp, #16]
    d47e:	f7fc fba7 	bl	9bd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8c>
    d482:	b140      	cbz	r0, d496 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    d484:	9802      	ldr	r0, [sp, #8]
    d486:	f7fc fb97 	bl	9bb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x74>
    d48a:	b120      	cbz	r0, d496 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    d48c:	4668      	mov	r0, sp
    d48e:	f7fc faab 	bl	99e8 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    d492:	b007      	add	sp, #28
    d494:	bd00      	pop	{pc}
    d496:	2030      	movs	r0, #48	; 0x30
    d498:	e7fb      	b.n	d492 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000d49a <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    d49a:	b510      	push	{r4, lr}
    d49c:	f7f7 fdac 	bl	4ff8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    d4a0:	2000      	movs	r0, #0
    d4a2:	bd10      	pop	{r4, pc}

0000d4a4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    d4a4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    d4a6:	460c      	mov	r4, r1
    d4a8:	4605      	mov	r5, r0
    d4aa:	f000 f9da 	bl	d862 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x32a>
    d4ae:	b160      	cbz	r0, d4ca <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    d4b0:	4669      	mov	r1, sp
    d4b2:	4628      	mov	r0, r5
    d4b4:	f7fe ff68 	bl	c388 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d4b8:	2800      	cmp	r0, #0
    d4ba:	d105      	bne.n	d4c8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    d4bc:	2101      	movs	r1, #1
    d4be:	4622      	mov	r2, r4
    d4c0:	9801      	ldr	r0, [sp, #4]
    d4c2:	f000 f959 	bl	d778 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
    d4c6:	2000      	movs	r0, #0
    d4c8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    d4ca:	2001      	movs	r0, #1
    d4cc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000d4ce <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    d4ce:	b510      	push	{r4, lr}
    d4d0:	4604      	mov	r4, r0
    d4d2:	2000      	movs	r0, #0
    d4d4:	f000 f865 	bl	d5a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    d4d8:	b128      	cbz	r0, d4e6 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    d4da:	4621      	mov	r1, r4
    d4dc:	2000      	movs	r0, #0
    d4de:	f7f7 fd67 	bl	4fb0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    d4e2:	2000      	movs	r0, #0
    d4e4:	bd10      	pop	{r4, pc}
    d4e6:	200c      	movs	r0, #12
    d4e8:	bd10      	pop	{r4, pc}

0000d4ea <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    d4ea:	b510      	push	{r4, lr}
    d4ec:	7800      	ldrb	r0, [r0, #0]
    d4ee:	f000 0001 	and.w	r0, r0, #1
    d4f2:	f7fa fbcb 	bl	7c8c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    d4f6:	2000      	movs	r0, #0
    d4f8:	bd10      	pop	{r4, pc}

0000d4fa <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    d4fa:	b510      	push	{r4, lr}
    d4fc:	4604      	mov	r4, r0
    d4fe:	f000 f9b0 	bl	d862 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x32a>
    d502:	b120      	cbz	r0, d50e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    d504:	4620      	mov	r0, r4
    d506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d50a:	f000 b9d6 	b.w	d8ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x382>
    d50e:	2001      	movs	r0, #1
    d510:	bd10      	pop	{r4, pc}

0000d512 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    d512:	b510      	push	{r4, lr}
    d514:	4604      	mov	r4, r0
    d516:	4601      	mov	r1, r0
    d518:	2000      	movs	r0, #0
    d51a:	f7f7 fd31 	bl	4f80 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    d51e:	b910      	cbnz	r0, d526 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    d520:	2000      	movs	r0, #0
    d522:	6020      	str	r0, [r4, #0]
    d524:	80a0      	strh	r0, [r4, #4]
    d526:	2000      	movs	r0, #0
    d528:	bd10      	pop	{r4, pc}

0000d52a <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    d52a:	b510      	push	{r4, lr}
    d52c:	f7fc fba8 	bl	9c80 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    d530:	2000      	movs	r0, #0
    d532:	bd10      	pop	{r4, pc}

0000d534 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    d534:	f7fc bb06 	b.w	9b44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000d538 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    d538:	b510      	push	{r4, lr}
    d53a:	4604      	mov	r4, r0
    d53c:	2000      	movs	r0, #0
    d53e:	8822      	ldrh	r2, [r4, #0]
    d540:	b086      	sub	sp, #24
    d542:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    d546:	39ff      	subs	r1, #255	; 0xff
    d548:	d008      	beq.n	d55c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    d54a:	a903      	add	r1, sp, #12
    d54c:	4610      	mov	r0, r2
    d54e:	f7fe ff1b 	bl	c388 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d552:	b110      	cbz	r0, d55a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    d554:	2002      	movs	r0, #2
    d556:	b006      	add	sp, #24
    d558:	bd10      	pop	{r4, pc}
    d55a:	9804      	ldr	r0, [sp, #16]
    d55c:	8921      	ldrh	r1, [r4, #8]
    d55e:	89a3      	ldrh	r3, [r4, #12]
    d560:	8962      	ldrh	r2, [r4, #10]
    d562:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    d566:	88e3      	ldrh	r3, [r4, #6]
    d568:	88a2      	ldrh	r2, [r4, #4]
    d56a:	8861      	ldrh	r1, [r4, #2]
    d56c:	f000 f8d9 	bl	d722 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1ea>
    d570:	b108      	cbz	r0, d576 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    d572:	2000      	movs	r0, #0
    d574:	e7ef      	b.n	d556 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    d576:	2030      	movs	r0, #48	; 0x30
    d578:	e7ed      	b.n	d556 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    d57a:	f44f 71a4 	mov.w	r1, #328	; 0x148
    d57e:	4288      	cmp	r0, r1
    d580:	d303      	bcc.n	d58a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
    d582:	f640 0148 	movw	r1, #2120	; 0x848
    d586:	4288      	cmp	r0, r1
    d588:	d300      	bcc.n	d58c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
    d58a:	4608      	mov	r0, r1
    d58c:	4770      	bx	lr
    d58e:	07c1      	lsls	r1, r0, #31
    d590:	d001      	beq.n	d596 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
    d592:	2001      	movs	r0, #1
    d594:	4770      	bx	lr
    d596:	0780      	lsls	r0, r0, #30
    d598:	d501      	bpl.n	d59e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
    d59a:	2002      	movs	r0, #2
    d59c:	4770      	bx	lr
    d59e:	2000      	movs	r0, #0
    d5a0:	4770      	bx	lr
    d5a2:	b510      	push	{r4, lr}
    d5a4:	f000 f97e 	bl	d8a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x36c>
    d5a8:	b128      	cbz	r0, d5b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    d5aa:	f7f9 fa3b 	bl	6a24 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    d5ae:	2801      	cmp	r0, #1
    d5b0:	d001      	beq.n	d5b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    d5b2:	2000      	movs	r0, #0
    d5b4:	bd10      	pop	{r4, pc}
    d5b6:	2001      	movs	r0, #1
    d5b8:	bd10      	pop	{r4, pc}
    d5ba:	28fb      	cmp	r0, #251	; 0xfb
    d5bc:	d803      	bhi.n	d5c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8e>
    d5be:	f640 0048 	movw	r0, #2120	; 0x848
    d5c2:	4281      	cmp	r1, r0
    d5c4:	d901      	bls.n	d5ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x92>
    d5c6:	2011      	movs	r0, #17
    d5c8:	4770      	bx	lr
    d5ca:	2000      	movs	r0, #0
    d5cc:	4770      	bx	lr
    d5ce:	381b      	subs	r0, #27
    d5d0:	28e1      	cmp	r0, #225	; 0xe1
    d5d2:	d206      	bcs.n	d5e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    d5d4:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    d5d8:	d303      	bcc.n	d5e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    d5da:	f244 2090 	movw	r0, #17040	; 0x4290
    d5de:	4281      	cmp	r1, r0
    d5e0:	d901      	bls.n	d5e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    d5e2:	2012      	movs	r0, #18
    d5e4:	4770      	bx	lr
    d5e6:	2000      	movs	r0, #0
    d5e8:	4770      	bx	lr
    d5ea:	b510      	push	{r4, lr}
    d5ec:	4604      	mov	r4, r0
    d5ee:	7800      	ldrb	r0, [r0, #0]
    d5f0:	2801      	cmp	r0, #1
    d5f2:	d009      	beq.n	d608 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd0>
    d5f4:	f7fa fbd6 	bl	7da4 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    d5f8:	2805      	cmp	r0, #5
    d5fa:	d003      	beq.n	d604 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xcc>
    d5fc:	f7fa fb9c 	bl	7d38 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    d600:	2800      	cmp	r0, #0
    d602:	d000      	beq.n	d606 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xce>
    d604:	200c      	movs	r0, #12
    d606:	bd10      	pop	{r4, pc}
    d608:	f7f9 f9a2 	bl	6950 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    d60c:	b138      	cbz	r0, d61e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe6>
    d60e:	f7f9 f88b 	bl	6728 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    d612:	88a1      	ldrh	r1, [r4, #4]
    d614:	8860      	ldrh	r0, [r4, #2]
    d616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d61a:	f7fa bb51 	b.w	7cc0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    d61e:	2012      	movs	r0, #18
    d620:	bd10      	pop	{r4, pc}
    d622:	7802      	ldrb	r2, [r0, #0]
    d624:	2a01      	cmp	r2, #1
    d626:	d001      	beq.n	d62c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf4>
    d628:	b1ba      	cbz	r2, d65a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
    d62a:	e018      	b.n	d65e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x126>
    d62c:	7842      	ldrb	r2, [r0, #1]
    d62e:	b13a      	cbz	r2, d640 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x108>
    d630:	2a01      	cmp	r2, #1
    d632:	d005      	beq.n	d640 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x108>
    d634:	2a02      	cmp	r2, #2
    d636:	d112      	bne.n	d65e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x126>
    d638:	b189      	cbz	r1, d65e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x126>
    d63a:	8881      	ldrh	r1, [r0, #4]
    d63c:	b179      	cbz	r1, d65e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x126>
    d63e:	e000      	b.n	d642 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x10a>
    d640:	b159      	cbz	r1, d65a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
    d642:	8841      	ldrh	r1, [r0, #2]
    d644:	b149      	cbz	r1, d65a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
    d646:	8880      	ldrh	r0, [r0, #4]
    d648:	b138      	cbz	r0, d65a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
    d64a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d64e:	0049      	lsls	r1, r1, #1
    d650:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    d654:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    d658:	d201      	bcs.n	d65e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x126>
    d65a:	2000      	movs	r0, #0
    d65c:	4770      	bx	lr
    d65e:	2012      	movs	r0, #18
    d660:	4770      	bx	lr
    d662:	b570      	push	{r4, r5, r6, lr}
    d664:	4604      	mov	r4, r0
    d666:	7800      	ldrb	r0, [r0, #0]
    d668:	2500      	movs	r5, #0
    d66a:	2801      	cmp	r0, #1
    d66c:	d004      	beq.n	d678 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
    d66e:	b118      	cbz	r0, d678 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
    d670:	2802      	cmp	r0, #2
    d672:	d001      	beq.n	d678 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
    d674:	2803      	cmp	r0, #3
    d676:	d139      	bne.n	d6ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b4>
    d678:	7860      	ldrb	r0, [r4, #1]
    d67a:	b128      	cbz	r0, d688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x150>
    d67c:	2801      	cmp	r0, #1
    d67e:	d003      	beq.n	d688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x150>
    d680:	2802      	cmp	r0, #2
    d682:	d001      	beq.n	d688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x150>
    d684:	2803      	cmp	r0, #3
    d686:	d131      	bne.n	d6ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b4>
    d688:	7e60      	ldrb	r0, [r4, #25]
    d68a:	b948      	cbnz	r0, d6a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x168>
    d68c:	78a0      	ldrb	r0, [r4, #2]
    d68e:	2801      	cmp	r0, #1
    d690:	d12c      	bne.n	d6ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b4>
    d692:	f7fc fb2f 	bl	9cf4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d696:	4601      	mov	r1, r0
    d698:	78a0      	ldrb	r0, [r4, #2]
    d69a:	ea30 0101 	bics.w	r1, r0, r1
    d69e:	d001      	beq.n	d6a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x16c>
    d6a0:	2011      	movs	r0, #17
    d6a2:	bd70      	pop	{r4, r5, r6, pc}
    d6a4:	07c0      	lsls	r0, r0, #31
    d6a6:	d006      	beq.n	d6b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    d6a8:	78e0      	ldrb	r0, [r4, #3]
    d6aa:	2301      	movs	r3, #1
    d6ac:	6922      	ldr	r2, [r4, #16]
    d6ae:	68a1      	ldr	r1, [r4, #8]
    d6b0:	f000 f820 	bl	d6f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1bc>
    d6b4:	4605      	mov	r5, r0
    d6b6:	78a0      	ldrb	r0, [r4, #2]
    d6b8:	0780      	lsls	r0, r0, #30
    d6ba:	d506      	bpl.n	d6ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x192>
    d6bc:	78e0      	ldrb	r0, [r4, #3]
    d6be:	2302      	movs	r3, #2
    d6c0:	6922      	ldr	r2, [r4, #16]
    d6c2:	68a1      	ldr	r1, [r4, #8]
    d6c4:	f000 f816 	bl	d6f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1bc>
    d6c8:	4305      	orrs	r5, r0
    d6ca:	78a0      	ldrb	r0, [r4, #2]
    d6cc:	0740      	lsls	r0, r0, #29
    d6ce:	d506      	bpl.n	d6de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1a6>
    d6d0:	78e0      	ldrb	r0, [r4, #3]
    d6d2:	2304      	movs	r3, #4
    d6d4:	6922      	ldr	r2, [r4, #16]
    d6d6:	68a1      	ldr	r1, [r4, #8]
    d6d8:	f000 f80c 	bl	d6f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1bc>
    d6dc:	4305      	orrs	r5, r0
    d6de:	b10d      	cbz	r5, d6e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1ac>
    d6e0:	4628      	mov	r0, r5
    d6e2:	bd70      	pop	{r4, r5, r6, pc}
    d6e4:	7e20      	ldrb	r0, [r4, #24]
    d6e6:	b108      	cbz	r0, d6ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b4>
    d6e8:	2807      	cmp	r0, #7
    d6ea:	d901      	bls.n	d6f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b8>
    d6ec:	2012      	movs	r0, #18
    d6ee:	bd70      	pop	{r4, r5, r6, pc}
    d6f0:	2000      	movs	r0, #0
    d6f2:	bd70      	pop	{r4, r5, r6, pc}
    d6f4:	b570      	push	{r4, r5, r6, lr}
    d6f6:	4614      	mov	r4, r2
    d6f8:	460d      	mov	r5, r1
    d6fa:	b108      	cbz	r0, d700 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c8>
    d6fc:	2801      	cmp	r0, #1
    d6fe:	d10a      	bne.n	d716 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1de>
    d700:	4619      	mov	r1, r3
    d702:	4610      	mov	r0, r2
    d704:	f7fc fa84 	bl	9c10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xcc>
    d708:	b138      	cbz	r0, d71a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e2>
    d70a:	4628      	mov	r0, r5
    d70c:	f7fc fa48 	bl	9ba0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5c>
    d710:	b118      	cbz	r0, d71a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e2>
    d712:	42ac      	cmp	r4, r5
    d714:	d903      	bls.n	d71e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e6>
    d716:	2012      	movs	r0, #18
    d718:	bd70      	pop	{r4, r5, r6, pc}
    d71a:	2030      	movs	r0, #48	; 0x30
    d71c:	bd70      	pop	{r4, r5, r6, pc}
    d71e:	2000      	movs	r0, #0
    d720:	bd70      	pop	{r4, r5, r6, pc}
    d722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d726:	461d      	mov	r5, r3
    d728:	4610      	mov	r0, r2
    d72a:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    d72e:	1f8b      	subs	r3, r1, #6
    d730:	f640 427a 	movw	r2, #3194	; 0xc7a
    d734:	9e08      	ldr	r6, [sp, #32]
    d736:	4293      	cmp	r3, r2
    d738:	d81c      	bhi.n	d774 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d73a:	1f83      	subs	r3, r0, #6
    d73c:	4293      	cmp	r3, r2
    d73e:	d819      	bhi.n	d774 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d740:	4281      	cmp	r1, r0
    d742:	d817      	bhi.n	d774 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d744:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d748:	d214      	bcs.n	d774 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d74a:	f1a4 010a 	sub.w	r1, r4, #10
    d74e:	1f12      	subs	r2, r2, #4
    d750:	4291      	cmp	r1, r2
    d752:	d80f      	bhi.n	d774 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d754:	f7fe fe24 	bl	c3a0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    d758:	1c6d      	adds	r5, r5, #1
    d75a:	4368      	muls	r0, r5
    d75c:	f240 2171 	movw	r1, #625	; 0x271
    d760:	0040      	lsls	r0, r0, #1
    d762:	434c      	muls	r4, r1
    d764:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    d768:	d204      	bcs.n	d774 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d76a:	42b7      	cmp	r7, r6
    d76c:	d802      	bhi.n	d774 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d76e:	2001      	movs	r0, #1
    d770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d774:	2000      	movs	r0, #0
    d776:	e7fb      	b.n	d770 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
    d778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d77c:	4606      	mov	r6, r0
    d77e:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    d782:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    d786:	4615      	mov	r5, r2
    d788:	302c      	adds	r0, #44	; 0x2c
    d78a:	f7fa fa85 	bl	7c98 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    d78e:	4680      	mov	r8, r0
    d790:	2102      	movs	r1, #2
    d792:	f7fe fe93 	bl	c4bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    d796:	4287      	cmp	r7, r0
    d798:	d200      	bcs.n	d79c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x264>
    d79a:	4638      	mov	r0, r7
    d79c:	4607      	mov	r7, r0
    d79e:	2102      	movs	r1, #2
    d7a0:	4640      	mov	r0, r8
    d7a2:	f7fe fe8b 	bl	c4bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    d7a6:	4284      	cmp	r4, r0
    d7a8:	d200      	bcs.n	d7ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x274>
    d7aa:	4620      	mov	r0, r4
    d7ac:	8831      	ldrh	r1, [r6, #0]
    d7ae:	8029      	strh	r1, [r5, #0]
    d7b0:	2f1b      	cmp	r7, #27
    d7b2:	d913      	bls.n	d7dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a4>
    d7b4:	2ffb      	cmp	r7, #251	; 0xfb
    d7b6:	d300      	bcc.n	d7ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
    d7b8:	27fb      	movs	r7, #251	; 0xfb
    d7ba:	806f      	strh	r7, [r5, #2]
    d7bc:	281b      	cmp	r0, #27
    d7be:	d90f      	bls.n	d7e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a8>
    d7c0:	28fb      	cmp	r0, #251	; 0xfb
    d7c2:	d300      	bcc.n	d7c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28e>
    d7c4:	20fb      	movs	r0, #251	; 0xfb
    d7c6:	80e8      	strh	r0, [r5, #6]
    d7c8:	4640      	mov	r0, r8
    d7ca:	f7ff fed6 	bl	d57a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    d7ce:	80a8      	strh	r0, [r5, #4]
    d7d0:	4640      	mov	r0, r8
    d7d2:	f7ff fed2 	bl	d57a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    d7d6:	8128      	strh	r0, [r5, #8]
    d7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7dc:	271b      	movs	r7, #27
    d7de:	e7ec      	b.n	d7ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
    d7e0:	201b      	movs	r0, #27
    d7e2:	e7f0      	b.n	d7c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28e>
    d7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7e8:	7890      	ldrb	r0, [r2, #2]
    d7ea:	9e06      	ldr	r6, [sp, #24]
    d7ec:	461d      	mov	r5, r3
    d7ee:	4614      	mov	r4, r2
    d7f0:	b908      	cbnz	r0, d7f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2be>
    d7f2:	f7fc fa7f 	bl	9cf4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d7f6:	78e4      	ldrb	r4, [r4, #3]
    d7f8:	4607      	mov	r7, r0
    d7fa:	b914      	cbnz	r4, d802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ca>
    d7fc:	f7fc fa7a 	bl	9cf4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d800:	4604      	mov	r4, r0
    d802:	b16f      	cbz	r7, d820 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e8>
    d804:	b164      	cbz	r4, d820 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e8>
    d806:	4638      	mov	r0, r7
    d808:	f7ff fec1 	bl	d58e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    d80c:	4620      	mov	r0, r4
    d80e:	f7ff febe 	bl	d58e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    d812:	b12f      	cbz	r7, d820 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e8>
    d814:	b124      	cbz	r4, d820 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e8>
    d816:	702f      	strb	r7, [r5, #0]
    d818:	7034      	strb	r4, [r6, #0]
    d81a:	2000      	movs	r0, #0
    d81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d820:	2009      	movs	r0, #9
    d822:	e7fb      	b.n	d81c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e4>
    d824:	b510      	push	{r4, lr}
    d826:	f7fd fccf 	bl	b1c8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    d82a:	b928      	cbnz	r0, d838 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
    d82c:	f7fd fd02 	bl	b234 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    d830:	b910      	cbnz	r0, d838 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
    d832:	f7fd fd09 	bl	b248 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    d836:	b108      	cbz	r0, d83c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    d838:	2008      	movs	r0, #8
    d83a:	bd10      	pop	{r4, pc}
    d83c:	f7fd fc99 	bl	b172 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    d840:	b940      	cbnz	r0, d854 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x31c>
    d842:	f7fd fca0 	bl	b186 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d846:	b928      	cbnz	r0, d854 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x31c>
    d848:	f7fd fcb4 	bl	b1b4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    d84c:	b910      	cbnz	r0, d854 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x31c>
    d84e:	f7fd fcc5 	bl	b1dc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d852:	b108      	cbz	r0, d858 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x320>
    d854:	2004      	movs	r0, #4
    d856:	bd10      	pop	{r4, pc}
    d858:	f240 519c 	movw	r1, #1436	; 0x59c
    d85c:	2039      	movs	r0, #57	; 0x39
    d85e:	f7f6 fe73 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d862:	b510      	push	{r4, lr}
    d864:	f7fc fa40 	bl	9ce8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    d868:	f3c0 1040 	ubfx	r0, r0, #5, #1
    d86c:	bd10      	pop	{r4, pc}
    d86e:	b508      	push	{r3, lr}
    d870:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    d874:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    d878:	f88d 0000 	strb.w	r0, [sp]
    d87c:	9800      	ldr	r0, [sp, #0]
    d87e:	9000      	str	r0, [sp, #0]
    d880:	f89d 0000 	ldrb.w	r0, [sp]
    d884:	1e40      	subs	r0, r0, #1
    d886:	4208      	tst	r0, r1
    d888:	d003      	beq.n	d892 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    d88a:	2904      	cmp	r1, #4
    d88c:	d001      	beq.n	d892 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    d88e:	2001      	movs	r0, #1
    d890:	bd08      	pop	{r3, pc}
    d892:	2000      	movs	r0, #0
    d894:	bd08      	pop	{r3, pc}
    d896:	b510      	push	{r4, lr}
    d898:	f000 f804 	bl	d8a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x36c>
    d89c:	2800      	cmp	r0, #0
    d89e:	d000      	beq.n	d8a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x36a>
    d8a0:	2001      	movs	r0, #1
    d8a2:	bd10      	pop	{r4, pc}
    d8a4:	b510      	push	{r4, lr}
    d8a6:	f7fa fa7d 	bl	7da4 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    d8aa:	2804      	cmp	r0, #4
    d8ac:	d003      	beq.n	d8b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    d8ae:	2805      	cmp	r0, #5
    d8b0:	d001      	beq.n	d8b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    d8b2:	2000      	movs	r0, #0
    d8b4:	bd10      	pop	{r4, pc}
    d8b6:	2001      	movs	r0, #1
    d8b8:	bd10      	pop	{r4, pc}
    d8ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8bc:	b089      	sub	sp, #36	; 0x24
    d8be:	4604      	mov	r4, r0
    d8c0:	8800      	ldrh	r0, [r0, #0]
    d8c2:	a906      	add	r1, sp, #24
    d8c4:	f7fe fd60 	bl	c388 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d8c8:	2800      	cmp	r0, #0
    d8ca:	d143      	bne.n	d954 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
    d8cc:	9807      	ldr	r0, [sp, #28]
    d8ce:	2601      	movs	r6, #1
    d8d0:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
    d8d4:	f88d 1008 	strb.w	r1, [sp, #8]
    d8d8:	9902      	ldr	r1, [sp, #8]
    d8da:	9102      	str	r1, [sp, #8]
    d8dc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    d8e0:	f88d 100c 	strb.w	r1, [sp, #12]
    d8e4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    d8e8:	3078      	adds	r0, #120	; 0x78
    d8ea:	291d      	cmp	r1, #29
    d8ec:	d102      	bne.n	d8f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3bc>
    d8ee:	f89d 100c 	ldrb.w	r1, [sp, #12]
    d8f2:	b141      	cbz	r1, d906 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ce>
    d8f4:	2100      	movs	r1, #0
    d8f6:	f88d 1004 	strb.w	r1, [sp, #4]
    d8fa:	2105      	movs	r1, #5
    d8fc:	304e      	adds	r0, #78	; 0x4e
    d8fe:	f7ff fc64 	bl	d1ca <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    d902:	b110      	cbz	r0, d90a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d2>
    d904:	e004      	b.n	d910 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d8>
    d906:	2101      	movs	r1, #1
    d908:	e7f5      	b.n	d8f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
    d90a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    d90e:	b300      	cbz	r0, d952 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
    d910:	8921      	ldrh	r1, [r4, #8]
    d912:	88e0      	ldrh	r0, [r4, #6]
    d914:	f7ff fe5b 	bl	d5ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x96>
    d918:	2800      	cmp	r0, #0
    d91a:	d11b      	bne.n	d954 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
    d91c:	88a1      	ldrh	r1, [r4, #4]
    d91e:	8860      	ldrh	r0, [r4, #2]
    d920:	f7ff fe55 	bl	d5ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x96>
    d924:	2800      	cmp	r0, #0
    d926:	d115      	bne.n	d954 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
    d928:	8921      	ldrh	r1, [r4, #8]
    d92a:	88e0      	ldrh	r0, [r4, #6]
    d92c:	f7ff fe45 	bl	d5ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x82>
    d930:	2800      	cmp	r0, #0
    d932:	d10f      	bne.n	d954 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
    d934:	88a1      	ldrh	r1, [r4, #4]
    d936:	8860      	ldrh	r0, [r4, #2]
    d938:	f7ff fe3f 	bl	d5ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x82>
    d93c:	0007      	movs	r7, r0
    d93e:	d109      	bne.n	d954 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
    d940:	9807      	ldr	r0, [sp, #28]
    d942:	f500 7599 	add.w	r5, r0, #306	; 0x132
    d946:	706e      	strb	r6, [r5, #1]
    d948:	f89d 100c 	ldrb.w	r1, [sp, #12]
    d94c:	b121      	cbz	r1, d958 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x420>
    d94e:	273a      	movs	r7, #58	; 0x3a
    d950:	e02d      	b.n	d9ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
    d952:	201a      	movs	r0, #26
    d954:	b009      	add	sp, #36	; 0x24
    d956:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d958:	4631      	mov	r1, r6
    d95a:	aa03      	add	r2, sp, #12
    d95c:	f7ff ff0c 	bl	d778 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
    d960:	8861      	ldrh	r1, [r4, #2]
    d962:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    d966:	4281      	cmp	r1, r0
    d968:	d200      	bcs.n	d96c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x434>
    d96a:	4608      	mov	r0, r1
    d96c:	80e8      	strh	r0, [r5, #6]
    d96e:	88a1      	ldrh	r1, [r4, #4]
    d970:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    d974:	4281      	cmp	r1, r0
    d976:	d200      	bcs.n	d97a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x442>
    d978:	4608      	mov	r0, r1
    d97a:	8128      	strh	r0, [r5, #8]
    d97c:	88e2      	ldrh	r2, [r4, #6]
    d97e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    d982:	428a      	cmp	r2, r1
    d984:	d200      	bcs.n	d988 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    d986:	4611      	mov	r1, r2
    d988:	8069      	strh	r1, [r5, #2]
    d98a:	8922      	ldrh	r2, [r4, #8]
    d98c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    d990:	428a      	cmp	r2, r1
    d992:	d200      	bcs.n	d996 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    d994:	4611      	mov	r1, r2
    d996:	f640 0248 	movw	r2, #2120	; 0x848
    d99a:	80a9      	strh	r1, [r5, #4]
    d99c:	4291      	cmp	r1, r2
    d99e:	d300      	bcc.n	d9a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x46a>
    d9a0:	4611      	mov	r1, r2
    d9a2:	80a9      	strh	r1, [r5, #4]
    d9a4:	4290      	cmp	r0, r2
    d9a6:	d200      	bcs.n	d9aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x472>
    d9a8:	4602      	mov	r2, r0
    d9aa:	812a      	strh	r2, [r5, #8]
    d9ac:	702e      	strb	r6, [r5, #0]
    d9ae:	2000      	movs	r0, #0
    d9b0:	7068      	strb	r0, [r5, #1]
    d9b2:	4638      	mov	r0, r7
    d9b4:	e7ce      	b.n	d954 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
    d9b6:	b510      	push	{r4, lr}
    d9b8:	f7ff ff74 	bl	d8a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x36c>
    d9bc:	b120      	cbz	r0, d9c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x490>
    d9be:	f7f9 f839 	bl	6a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    d9c2:	b108      	cbz	r0, d9c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x490>
    d9c4:	2001      	movs	r0, #1
    d9c6:	bd10      	pop	{r4, pc}
    d9c8:	2000      	movs	r0, #0
    d9ca:	bd10      	pop	{r4, pc}

0000d9cc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    d9cc:	6802      	ldr	r2, [r0, #0]
    d9ce:	b912      	cbnz	r2, d9d6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    d9d0:	6001      	str	r1, [r0, #0]
    d9d2:	4770      	bx	lr
    d9d4:	4602      	mov	r2, r0
    d9d6:	6850      	ldr	r0, [r2, #4]
    d9d8:	b108      	cbz	r0, d9de <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    d9da:	428a      	cmp	r2, r1
    d9dc:	d1fa      	bne.n	d9d4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    d9de:	428a      	cmp	r2, r1
    d9e0:	d0f7      	beq.n	d9d2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    d9e2:	6051      	str	r1, [r2, #4]
    d9e4:	4770      	bx	lr
    d9e6:	b510      	push	{r4, lr}
    d9e8:	4604      	mov	r4, r0
    d9ea:	e002      	b.n	d9f2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    d9ec:	6820      	ldr	r0, [r4, #0]
    d9ee:	4780      	blx	r0
    d9f0:	6864      	ldr	r4, [r4, #4]
    d9f2:	2c00      	cmp	r4, #0
    d9f4:	d1fa      	bne.n	d9ec <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
    d9f6:	bd10      	pop	{r4, pc}
    d9f8:	b510      	push	{r4, lr}
    d9fa:	f7fa f93b 	bl	7c74 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    d9fe:	b120      	cbz	r0, da0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    da00:	f240 111d 	movw	r1, #285	; 0x11d
    da04:	2001      	movs	r0, #1
    da06:	f7f6 fd9f 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da0a:	f7f8 ff6b 	bl	68e4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    da0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da12:	f7fb bfb1 	b.w	9978 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    da16:	0001      	.short	0x0001
    da18:	0002000b 	.word	0x0002000b
    da1c:	0005000a 	.word	0x0005000a
    da20:	000a0009 	.word	0x000a0009
    da24:	00140008 	.word	0x00140008
    da28:	001e0007 	.word	0x001e0007
    da2c:	00320006 	.word	0x00320006
    da30:	004b0005 	.word	0x004b0005
    da34:	00640004 	.word	0x00640004
    da38:	00960003 	.word	0x00960003
    da3c:	00fa0002 	.word	0x00fa0002
    da40:	01f40001 	.word	0x01f40001
	...

0000da46 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    da46:	b510      	push	{r4, lr}
    da48:	f7fc fd0c 	bl	a464 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    da4c:	f000 f850 	bl	daf0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    da50:	f7fc f9c4 	bl	9ddc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    da54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da58:	f7fc bac2 	b.w	9fe0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000da5c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    da5c:	b510      	push	{r4, lr}
    da5e:	24c8      	movs	r4, #200	; 0xc8
    da60:	1e64      	subs	r4, r4, #1
    da62:	b2e4      	uxtb	r4, r4
    da64:	f7fc f9d8 	bl	9e18 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    da68:	2802      	cmp	r0, #2
    da6a:	d003      	beq.n	da74 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    da6c:	2801      	cmp	r0, #1
    da6e:	d000      	beq.n	da72 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    da70:	2000      	movs	r0, #0
    da72:	bd10      	pop	{r4, pc}
    da74:	2c00      	cmp	r4, #0
    da76:	d1f3      	bne.n	da60 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    da78:	2193      	movs	r1, #147	; 0x93
    da7a:	203b      	movs	r0, #59	; 0x3b
    da7c:	f7f6 fd64 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000da80 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    da80:	b510      	push	{r4, lr}
    da82:	f7f6 fbf7 	bl	4274 <mpsl_fem_lna_configuration_clear>
    da86:	2800      	cmp	r0, #0
    da88:	d005      	beq.n	da96 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    da8a:	1c40      	adds	r0, r0, #1
    da8c:	d003      	beq.n	da96 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    da8e:	2150      	movs	r1, #80	; 0x50
    da90:	2040      	movs	r0, #64	; 0x40
    da92:	f7f6 fd59 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da96:	bd10      	pop	{r4, pc}

0000da98 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    da98:	b510      	push	{r4, lr}
    da9a:	f7f6 fbf7 	bl	428c <mpsl_fem_pa_configuration_clear>
    da9e:	2800      	cmp	r0, #0
    daa0:	d005      	beq.n	daae <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    daa2:	1c40      	adds	r0, r0, #1
    daa4:	d003      	beq.n	daae <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    daa6:	2149      	movs	r1, #73	; 0x49
    daa8:	2040      	movs	r0, #64	; 0x40
    daaa:	f7f6 fd4d 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daae:	bd10      	pop	{r4, pc}

0000dab0 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    dab0:	b510      	push	{r4, lr}
    dab2:	f7f6 fbd9 	bl	4268 <mpsl_fem_disable>
    dab6:	2800      	cmp	r0, #0
    dab8:	d005      	beq.n	dac6 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    daba:	1c40      	adds	r0, r0, #1
    dabc:	d003      	beq.n	dac6 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    dabe:	2157      	movs	r1, #87	; 0x57
    dac0:	2040      	movs	r0, #64	; 0x40
    dac2:	f7f6 fd41 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dac6:	bd10      	pop	{r4, pc}

0000dac8 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    dac8:	b510      	push	{r4, lr}
    daca:	2100      	movs	r1, #0
    dacc:	4608      	mov	r0, r1
    dace:	f7f6 fbd7 	bl	4280 <mpsl_fem_lna_configuration_set>
    dad2:	b108      	cbz	r0, dad8 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    dad4:	2000      	movs	r0, #0
    dad6:	bd10      	pop	{r4, pc}
    dad8:	2001      	movs	r0, #1
    dada:	bd10      	pop	{r4, pc}

0000dadc <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    dadc:	b508      	push	{r3, lr}
    dade:	4668      	mov	r0, sp
    dae0:	f7f6 fbe0 	bl	42a4 <mpsl_fem_pa_is_configured>
    dae4:	f89d 0000 	ldrb.w	r0, [sp]
    dae8:	2800      	cmp	r0, #0
    daea:	d000      	beq.n	daee <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    daec:	2001      	movs	r0, #1
    daee:	bd08      	pop	{r3, pc}

0000daf0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    daf0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    daf4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    daf8:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    dafc:	f3bf 8f4f 	dsb	sy
    db00:	f3bf 8f6f 	isb	sy
    db04:	f7fc bb46 	b.w	a194 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    db08:	2800      	cmp	r0, #0
    db0a:	db09      	blt.n	db20 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    db0c:	f000 021f 	and.w	r2, r0, #31
    db10:	2101      	movs	r1, #1
    db12:	4091      	lsls	r1, r2
    db14:	0940      	lsrs	r0, r0, #5
    db16:	0080      	lsls	r0, r0, #2
    db18:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    db1c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    db20:	4770      	bx	lr
    db22:	2800      	cmp	r0, #0
    db24:	db0d      	blt.n	db42 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    db26:	f000 021f 	and.w	r2, r0, #31
    db2a:	2101      	movs	r1, #1
    db2c:	4091      	lsls	r1, r2
    db2e:	0940      	lsrs	r0, r0, #5
    db30:	0080      	lsls	r0, r0, #2
    db32:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    db36:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    db3a:	f3bf 8f4f 	dsb	sy
    db3e:	f3bf 8f6f 	isb	sy
    db42:	4770      	bx	lr

0000db44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    db44:	b510      	push	{r4, lr}
    db46:	2801      	cmp	r0, #1
    db48:	d006      	beq.n	db58 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    db4a:	2802      	cmp	r0, #2
    db4c:	d006      	beq.n	db5c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    db4e:	f640 3141 	movw	r1, #2881	; 0xb41
    db52:	203e      	movs	r0, #62	; 0x3e
    db54:	f7f6 fcf8 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db58:	2028      	movs	r0, #40	; 0x28
    db5a:	bd10      	pop	{r4, pc}
    db5c:	2018      	movs	r0, #24
    db5e:	bd10      	pop	{r4, pc}

0000db60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    db60:	b510      	push	{r4, lr}
    db62:	2801      	cmp	r0, #1
    db64:	d006      	beq.n	db74 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    db66:	2802      	cmp	r0, #2
    db68:	d007      	beq.n	db7a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    db6a:	f640 3155 	movw	r1, #2901	; 0xb55
    db6e:	203e      	movs	r0, #62	; 0x3e
    db70:	f7f6 fcea 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db74:	f641 6014 	movw	r0, #7700	; 0x1e14
    db78:	bd10      	pop	{r4, pc}
    db7a:	f241 1030 	movw	r0, #4400	; 0x1130
    db7e:	bd10      	pop	{r4, pc}

0000db80 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    db80:	f7fd b9ba 	b.w	aef8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    db84:	b510      	push	{r4, lr}
    db86:	460a      	mov	r2, r1
    db88:	b130      	cbz	r0, db98 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    db8a:	2801      	cmp	r0, #1
    db8c:	d00b      	beq.n	dba6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    db8e:	f240 6114 	movw	r1, #1556	; 0x614
    db92:	203e      	movs	r0, #62	; 0x3e
    db94:	f7f6 fcd8 	bl	4548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db9c:	f102 0128 	add.w	r1, r2, #40	; 0x28
    dba0:	4610      	mov	r0, r2
    dba2:	f7fc b98d 	b.w	9ec0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    dba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbaa:	f102 0129 	add.w	r1, r2, #41	; 0x29
    dbae:	4610      	mov	r0, r2
    dbb0:	f7fc b970 	b.w	9e94 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
    dbb4:	5840      	ldr	r0, [r0, r1]
    dbb6:	2800      	cmp	r0, #0
    dbb8:	d000      	beq.n	dbbc <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
    dbba:	2001      	movs	r0, #1
    dbbc:	4770      	bx	lr
    dbbe:	5840      	ldr	r0, [r0, r1]
    dbc0:	2800      	cmp	r0, #0
    dbc2:	d000      	beq.n	dbc6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
    dbc4:	2001      	movs	r0, #1
    dbc6:	4770      	bx	lr

0000dbc8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    dbc8:	b570      	push	{r4, r5, r6, lr}
    dbca:	4605      	mov	r5, r0
    dbcc:	4614      	mov	r4, r2
    dbce:	4608      	mov	r0, r1
    dbd0:	f7ff ffc6 	bl	db60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dbd4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    dbd8:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    dbdc:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    dbe0:	4620      	mov	r0, r4
    dbe2:	f7ff ffbd 	bl	db60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dbe6:	4428      	add	r0, r5
    dbe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dbec:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    dbf0:	fbb0 f5f1 	udiv	r5, r0, r1
    dbf4:	4620      	mov	r0, r4
    dbf6:	f7ff ffa5 	bl	db44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    dbfa:	4428      	add	r0, r5
    dbfc:	1d40      	adds	r0, r0, #5
    dbfe:	bd70      	pop	{r4, r5, r6, pc}

0000dc00 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    dc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc04:	4607      	mov	r7, r0
    dc06:	461d      	mov	r5, r3
    dc08:	460e      	mov	r6, r1
    dc0a:	4614      	mov	r4, r2
    dc0c:	4610      	mov	r0, r2
    dc0e:	f7ff ffa7 	bl	db60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dc12:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    dc16:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    dc1a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    dc1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    dc22:	2e02      	cmp	r6, #2
    dc24:	d00e      	beq.n	dc44 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    dc26:	f240 52dc 	movw	r2, #1500	; 0x5dc
    dc2a:	4411      	add	r1, r2
    dc2c:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    dc30:	fbb1 f6f0 	udiv	r6, r1, r0
    dc34:	4620      	mov	r0, r4
    dc36:	f7ff ff85 	bl	db44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    dc3a:	4430      	add	r0, r6
    dc3c:	4428      	add	r0, r5
    dc3e:	1d40      	adds	r0, r0, #5
    dc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc44:	4602      	mov	r2, r0
    dc46:	e7f0      	b.n	dc2a <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000dc48 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    dc48:	b510      	push	{r4, lr}
    dc4a:	4604      	mov	r4, r0
    dc4c:	4608      	mov	r0, r1
    dc4e:	f7ff ff87 	bl	db60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dc52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dc56:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    dc5a:	fbb0 f0f1 	udiv	r0, r0, r1
    dc5e:	1a20      	subs	r0, r4, r0
    dc60:	1e80      	subs	r0, r0, #2
    dc62:	bd10      	pop	{r4, pc}

0000dc64 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    dc64:	b510      	push	{r4, lr}
    dc66:	4604      	mov	r4, r0
    dc68:	4608      	mov	r0, r1
    dc6a:	f7ff ff79 	bl	db60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dc6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dc72:	fbb0 f0f1 	udiv	r0, r0, r1
    dc76:	1a20      	subs	r0, r4, r0
    dc78:	bd10      	pop	{r4, pc}

0000dc7a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    dc7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dc7e:	2902      	cmp	r1, #2
    dc80:	d008      	beq.n	dc94 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    dc82:	f240 51dc 	movw	r1, #1500	; 0x5dc
    dc86:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    dc8a:	fbb1 f1f2 	udiv	r1, r1, r2
    dc8e:	4408      	add	r0, r1
    dc90:	1e80      	subs	r0, r0, #2
    dc92:	4770      	bx	lr
    dc94:	4611      	mov	r1, r2
    dc96:	e7f6      	b.n	dc86 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000dc98 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    dc98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dc9c:	2902      	cmp	r1, #2
    dc9e:	d007      	beq.n	dcb0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    dca0:	f240 51dc 	movw	r1, #1500	; 0x5dc
    dca4:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    dca8:	fbb1 f1f2 	udiv	r1, r1, r2
    dcac:	4408      	add	r0, r1
    dcae:	4770      	bx	lr
    dcb0:	4611      	mov	r1, r2
    dcb2:	e7f7      	b.n	dca4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    dcb4:	1702080c 	.word	0x1702080c
    dcb8:	0201010d 	.word	0x0201010d
    dcbc:	01010909 	.word	0x01010909
    dcc0:	18090206 	.word	0x18090206
    dcc4:	01010318 	.word	0x01010318
    dcc8:	03030909 	.word	0x03030909
    dccc:	05          	.byte	0x05
    dccd:	55          	.byte	0x55
    dcce:	5555      	.short	0x5555
    dcd0:	2625      	.short	0x2625
    dcd2:	27          	.byte	0x27
    dcd3:	01          	.byte	0x01
    dcd4:	0103      	.short	0x0103
    dcd6:	01          	.byte	0x01
    dcd7:	01          	.byte	0x01

0000dcd8 <device_found>:
#include <bluetooth/hci.h>
#include "kalman_filter.h"

static void device_found(const bt_addr_le_t *addr, int8_t rssi, uint8_t type,
			 struct net_buf_simple *ad)
{
    dcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcda:	b093      	sub	sp, #76	; 0x4c
    dcdc:	4604      	mov	r4, r0
    dcde:	460d      	mov	r5, r1
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    dce0:	7803      	ldrb	r3, [r0, #0]
    dce2:	2b03      	cmp	r3, #3
    dce4:	d82f      	bhi.n	dd46 <device_found+0x6e>
    dce6:	e8df f003 	tbb	[pc, r3]
    dcea:	1f02      	.short	0x1f02
    dcec:	2924      	.short	0x2924
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    dcee:	4920      	ldr	r1, [pc, #128]	; (dd70 <device_found+0x98>)
    dcf0:	a807      	add	r0, sp, #28
    dcf2:	f007 f847 	bl	14d84 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    dcf6:	7963      	ldrb	r3, [r4, #5]
    dcf8:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    dcfa:	78e1      	ldrb	r1, [r4, #3]
    dcfc:	78a0      	ldrb	r0, [r4, #2]
    dcfe:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    dd00:	af07      	add	r7, sp, #28
    dd02:	9705      	str	r7, [sp, #20]
    dd04:	9604      	str	r6, [sp, #16]
    dd06:	9003      	str	r0, [sp, #12]
    dd08:	9102      	str	r1, [sp, #8]
    dd0a:	9201      	str	r2, [sp, #4]
    dd0c:	9300      	str	r3, [sp, #0]
    dd0e:	79a3      	ldrb	r3, [r4, #6]
    dd10:	4a18      	ldr	r2, [pc, #96]	; (dd74 <device_found+0x9c>)
    dd12:	211e      	movs	r1, #30
    dd14:	a80a      	add	r0, sp, #40	; 0x28
    dd16:	f006 fb9b 	bl	14450 <snprintk>
	char addr_str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
	if(!strcmp(addr_str,"D5:66:A5:BD:98:48 (random)")){
    dd1a:	4917      	ldr	r1, [pc, #92]	; (dd78 <device_found+0xa0>)
    dd1c:	a80a      	add	r0, sp, #40	; 0x28
    dd1e:	f007 f866 	bl	14dee <strcmp>
    dd22:	b1b0      	cbz	r0, dd52 <device_found+0x7a>
	
		rssi = KALMAN(rssi); 
		printk("Device found: %s (Modified RSSI %d)\n", addr_str, rssi);
	}
	
}
    dd24:	b013      	add	sp, #76	; 0x4c
    dd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    dd28:	4914      	ldr	r1, [pc, #80]	; (dd7c <device_found+0xa4>)
    dd2a:	a807      	add	r0, sp, #28
    dd2c:	f007 f82a 	bl	14d84 <strcpy>
		break;
    dd30:	e7e1      	b.n	dcf6 <device_found+0x1e>
		strcpy(type, "public-id");
    dd32:	4913      	ldr	r1, [pc, #76]	; (dd80 <device_found+0xa8>)
    dd34:	a807      	add	r0, sp, #28
    dd36:	f007 f825 	bl	14d84 <strcpy>
		break;
    dd3a:	e7dc      	b.n	dcf6 <device_found+0x1e>
		strcpy(type, "random-id");
    dd3c:	4911      	ldr	r1, [pc, #68]	; (dd84 <device_found+0xac>)
    dd3e:	a807      	add	r0, sp, #28
    dd40:	f007 f820 	bl	14d84 <strcpy>
		break;
    dd44:	e7d7      	b.n	dcf6 <device_found+0x1e>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    dd46:	4a10      	ldr	r2, [pc, #64]	; (dd88 <device_found+0xb0>)
    dd48:	210a      	movs	r1, #10
    dd4a:	a807      	add	r0, sp, #28
    dd4c:	f006 fb80 	bl	14450 <snprintk>
		break;
    dd50:	e7d1      	b.n	dcf6 <device_found+0x1e>
		printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
    dd52:	462a      	mov	r2, r5
    dd54:	a90a      	add	r1, sp, #40	; 0x28
    dd56:	480d      	ldr	r0, [pc, #52]	; (dd8c <device_found+0xb4>)
    dd58:	f006 fb6c 	bl	14434 <printk>
		rssi = KALMAN(rssi); 
    dd5c:	4628      	mov	r0, r5
    dd5e:	f000 f853 	bl	de08 <KALMAN>
    dd62:	4602      	mov	r2, r0
		printk("Device found: %s (Modified RSSI %d)\n", addr_str, rssi);
    dd64:	a90a      	add	r1, sp, #40	; 0x28
    dd66:	480a      	ldr	r0, [pc, #40]	; (dd90 <device_found+0xb8>)
    dd68:	f006 fb64 	bl	14434 <printk>
}
    dd6c:	e7da      	b.n	dd24 <device_found+0x4c>
    dd6e:	bf00      	nop
    dd70:	00016fc8 	.word	0x00016fc8
    dd74:	00016ff8 	.word	0x00016ff8
    dd78:	0001701c 	.word	0x0001701c
    dd7c:	00016fd0 	.word	0x00016fd0
    dd80:	00016fd8 	.word	0x00016fd8
    dd84:	00016fe4 	.word	0x00016fe4
    dd88:	00016ff0 	.word	0x00016ff0
    dd8c:	00017038 	.word	0x00017038
    dd90:	00017054 	.word	0x00017054

0000dd94 <main>:

void main(void)
{
    dd94:	b510      	push	{r4, lr}
    dd96:	b086      	sub	sp, #24
	struct bt_le_scan_param scan_param = {
    dd98:	2400      	movs	r4, #0
    dd9a:	9401      	str	r4, [sp, #4]
    dd9c:	9404      	str	r4, [sp, #16]
    dd9e:	9405      	str	r4, [sp, #20]
    dda0:	2301      	movs	r3, #1
    dda2:	9302      	str	r3, [sp, #8]
    dda4:	2360      	movs	r3, #96	; 0x60
    dda6:	f8ad 300c 	strh.w	r3, [sp, #12]
    ddaa:	2330      	movs	r3, #48	; 0x30
    ddac:	f8ad 300e 	strh.w	r3, [sp, #14]
		.interval   = BT_GAP_SCAN_FAST_INTERVAL,
		.window     = BT_GAP_SCAN_FAST_WINDOW,
	};
	int err;

	printk("Starting Observer\n");
    ddb0:	480f      	ldr	r0, [pc, #60]	; (ddf0 <main+0x5c>)
    ddb2:	f006 fb3f 	bl	14434 <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
    ddb6:	4620      	mov	r0, r4
    ddb8:	f002 f88a 	bl	fed0 <bt_enable>
	if (err) {
    ddbc:	b968      	cbnz	r0, ddda <main+0x46>
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}

	printk("Bluetooth initialized\n");
    ddbe:	480d      	ldr	r0, [pc, #52]	; (ddf4 <main+0x60>)
    ddc0:	f006 fb38 	bl	14434 <printk>

	err = bt_le_scan_start(&scan_param, device_found);
    ddc4:	490c      	ldr	r1, [pc, #48]	; (ddf8 <main+0x64>)
    ddc6:	a801      	add	r0, sp, #4
    ddc8:	f002 fbf6 	bl	105b8 <bt_le_scan_start>
    ddcc:	4604      	mov	r4, r0
	printk("\n");
    ddce:	480b      	ldr	r0, [pc, #44]	; (ddfc <main+0x68>)
    ddd0:	f006 fb30 	bl	14434 <printk>
	if (err) {
    ddd4:	b934      	cbnz	r4, dde4 <main+0x50>
		printk("Starting scanning failed (err %d)\n", err);
		return;
	}
}
    ddd6:	b006      	add	sp, #24
    ddd8:	bd10      	pop	{r4, pc}
    ddda:	4601      	mov	r1, r0
		printk("Bluetooth init failed (err %d)\n", err);
    dddc:	4808      	ldr	r0, [pc, #32]	; (de00 <main+0x6c>)
    ddde:	f006 fb29 	bl	14434 <printk>
		return;
    dde2:	e7f8      	b.n	ddd6 <main+0x42>
		printk("Starting scanning failed (err %d)\n", err);
    dde4:	4621      	mov	r1, r4
    dde6:	4807      	ldr	r0, [pc, #28]	; (de04 <main+0x70>)
    dde8:	f006 fb24 	bl	14434 <printk>
		return;
    ddec:	e7f3      	b.n	ddd6 <main+0x42>
    ddee:	bf00      	nop
    ddf0:	0001707c 	.word	0x0001707c
    ddf4:	000170b0 	.word	0x000170b0
    ddf8:	0000dcd9 	.word	0x0000dcd9
    ddfc:	000170c8 	.word	0x000170c8
    de00:	00017090 	.word	0x00017090
    de04:	000170cc 	.word	0x000170cc

0000de08 <KALMAN>:
#include "kalman_filter.h"

int8_t KALMAN(int8_t U){
    de08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de0c:	b083      	sub	sp, #12
    U = (double)U;
    de0e:	f7f2 fab7 	bl	380 <__aeabi_i2d>
    de12:	e9cd 0100 	strd	r0, r1, [sp]
    static double P = 0;
    static double U_hat = 0;
    static double K = 0;

    //begin
    K = P*H/(H*P*H+R); // update kalman gain
    de16:	f8df b0a0 	ldr.w	fp, [pc, #160]	; deb8 <KALMAN+0xb0>
    de1a:	e9db 6700 	ldrd	r6, r7, [fp]
    de1e:	2200      	movs	r2, #0
    de20:	4b22      	ldr	r3, [pc, #136]	; (deac <KALMAN+0xa4>)
    de22:	4630      	mov	r0, r6
    de24:	4639      	mov	r1, r7
    de26:	f7f2 f95f 	bl	e8 <__adddf3>
    de2a:	4602      	mov	r2, r0
    de2c:	460b      	mov	r3, r1
    de2e:	4630      	mov	r0, r6
    de30:	4639      	mov	r1, r7
    de32:	f7f2 fc39 	bl	6a8 <__aeabi_ddiv>
    de36:	4604      	mov	r4, r0
    de38:	460d      	mov	r5, r1
    U_hat = U_hat + K*(U-H*U_hat); // update estimated
    de3a:	f8df a080 	ldr.w	sl, [pc, #128]	; debc <KALMAN+0xb4>
    de3e:	e9da 8900 	ldrd	r8, r9, [sl]
    de42:	4642      	mov	r2, r8
    de44:	464b      	mov	r3, r9
    de46:	e9dd 0100 	ldrd	r0, r1, [sp]
    de4a:	f7f2 f94b 	bl	e4 <__aeabi_dsub>
    de4e:	4602      	mov	r2, r0
    de50:	460b      	mov	r3, r1
    de52:	4620      	mov	r0, r4
    de54:	4629      	mov	r1, r5
    de56:	f7f2 fafd 	bl	454 <__aeabi_dmul>
    de5a:	4602      	mov	r2, r0
    de5c:	460b      	mov	r3, r1
    de5e:	4640      	mov	r0, r8
    de60:	4649      	mov	r1, r9
    de62:	f7f2 f941 	bl	e8 <__adddf3>
    de66:	4680      	mov	r8, r0
    de68:	4689      	mov	r9, r1

    //Update error covariance
    P = (1-K*H)*P+Q;
    de6a:	4622      	mov	r2, r4
    de6c:	462b      	mov	r3, r5
    de6e:	2000      	movs	r0, #0
    de70:	490f      	ldr	r1, [pc, #60]	; (deb0 <KALMAN+0xa8>)
    de72:	f7f2 f937 	bl	e4 <__aeabi_dsub>
    de76:	4602      	mov	r2, r0
    de78:	460b      	mov	r3, r1
    de7a:	4630      	mov	r0, r6
    de7c:	4639      	mov	r1, r7
    de7e:	f7f2 fae9 	bl	454 <__aeabi_dmul>
    de82:	2200      	movs	r2, #0
    de84:	4b0b      	ldr	r3, [pc, #44]	; (deb4 <KALMAN+0xac>)
    de86:	f7f2 f92f 	bl	e8 <__adddf3>
    de8a:	e9cb 0100 	strd	r0, r1, [fp]

    U_hat = (int8_t)U_hat;
    de8e:	4640      	mov	r0, r8
    de90:	4649      	mov	r1, r9
    de92:	f7f2 fcf1 	bl	878 <__aeabi_d2iz>
    de96:	b244      	sxtb	r4, r0
    de98:	4620      	mov	r0, r4
    de9a:	f7f2 fa71 	bl	380 <__aeabi_i2d>
    de9e:	e9ca 0100 	strd	r0, r1, [sl]
    return U_hat;


    dea2:	4620      	mov	r0, r4
    dea4:	b003      	add	sp, #12
    dea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    deaa:	bf00      	nop
    deac:	40440000 	.word	0x40440000
    deb0:	3ff00000 	.word	0x3ff00000
    deb4:	40240000 	.word	0x40240000
    deb8:	20001250 	.word	0x20001250
    debc:	20001258 	.word	0x20001258

0000dec0 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    dec0:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    dec2:	680b      	ldr	r3, [r1, #0]
    dec4:	3301      	adds	r3, #1
    dec6:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    dec8:	4b01      	ldr	r3, [pc, #4]	; (ded0 <char_out+0x10>)
    deca:	681b      	ldr	r3, [r3, #0]
    decc:	4798      	blx	r3
}
    dece:	bd08      	pop	{r3, pc}
    ded0:	200003c0 	.word	0x200003c0

0000ded4 <__printk_hook_install>:
	_char_out = fn;
    ded4:	4b01      	ldr	r3, [pc, #4]	; (dedc <__printk_hook_install+0x8>)
    ded6:	6018      	str	r0, [r3, #0]
}
    ded8:	4770      	bx	lr
    deda:	bf00      	nop
    dedc:	200003c0 	.word	0x200003c0

0000dee0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    dee0:	b500      	push	{lr}
    dee2:	b083      	sub	sp, #12
    dee4:	4602      	mov	r2, r0
    dee6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    dee8:	2100      	movs	r1, #0
    deea:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    deec:	a901      	add	r1, sp, #4
    deee:	4803      	ldr	r0, [pc, #12]	; (defc <vprintk+0x1c>)
    def0:	f000 f8c8 	bl	e084 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    def4:	b003      	add	sp, #12
    def6:	f85d fb04 	ldr.w	pc, [sp], #4
    defa:	bf00      	nop
    defc:	0000dec1 	.word	0x0000dec1

0000df00 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    df00:	b510      	push	{r4, lr}
    df02:	b084      	sub	sp, #16
    df04:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    df06:	9001      	str	r0, [sp, #4]
    df08:	9102      	str	r1, [sp, #8]
    df0a:	2100      	movs	r1, #0
    df0c:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    df0e:	a901      	add	r1, sp, #4
    df10:	4805      	ldr	r0, [pc, #20]	; (df28 <vsnprintk+0x28>)
    df12:	f000 f8b7 	bl	e084 <cbvprintf>

	if (ctx.count < ctx.max) {
    df16:	9b03      	ldr	r3, [sp, #12]
    df18:	9a02      	ldr	r2, [sp, #8]
    df1a:	4293      	cmp	r3, r2
    df1c:	da01      	bge.n	df22 <vsnprintk+0x22>
		str[ctx.count] = '\0';
    df1e:	2200      	movs	r2, #0
    df20:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    df22:	9803      	ldr	r0, [sp, #12]
    df24:	b004      	add	sp, #16
    df26:	bd10      	pop	{r4, pc}
    df28:	00014405 	.word	0x00014405

0000df2c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    df2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    df30:	b083      	sub	sp, #12
    df32:	4604      	mov	r4, r0
    df34:	4608      	mov	r0, r1
    df36:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    df38:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    df3a:	f013 0f08 	tst.w	r3, #8
    df3e:	d105      	bne.n	df4c <process_event+0x20>
    df40:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    df44:	2300      	movs	r3, #0
    df46:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    df48:	9301      	str	r3, [sp, #4]
}
    df4a:	e069      	b.n	e020 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    df4c:	2901      	cmp	r1, #1
    df4e:	d009      	beq.n	df64 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    df50:	f043 0320 	orr.w	r3, r3, #32
    df54:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    df56:	f385 8811 	msr	BASEPRI, r5
    df5a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    df5e:	b003      	add	sp, #12
    df60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    df64:	f043 0310 	orr.w	r3, r3, #16
    df68:	8323      	strh	r3, [r4, #24]
    df6a:	e7f4      	b.n	df56 <process_event+0x2a>
			evt = process_recheck(mgr);
    df6c:	4620      	mov	r0, r4
    df6e:	f006 faa4 	bl	144ba <process_recheck>
    df72:	e057      	b.n	e024 <process_event+0xf8>
			res = mgr->last_res;
    df74:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    df78:	464a      	mov	r2, r9
    df7a:	4669      	mov	r1, sp
    df7c:	4620      	mov	r0, r4
    df7e:	f006 fab5 	bl	144ec <process_complete>
		onoff_transition_fn transit = NULL;
    df82:	2700      	movs	r7, #0
    df84:	e05a      	b.n	e03c <process_event+0x110>
			transit = mgr->transitions->start;
    df86:	6923      	ldr	r3, [r4, #16]
    df88:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    df8a:	2106      	movs	r1, #6
    df8c:	4620      	mov	r0, r4
    df8e:	f006 fa6d 	bl	1446c <set_state>
		res = 0;
    df92:	f04f 0900 	mov.w	r9, #0
    df96:	e051      	b.n	e03c <process_event+0x110>
			transit = mgr->transitions->stop;
    df98:	6923      	ldr	r3, [r4, #16]
    df9a:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    df9c:	2104      	movs	r1, #4
    df9e:	4620      	mov	r0, r4
    dfa0:	f006 fa64 	bl	1446c <set_state>
		res = 0;
    dfa4:	f04f 0900 	mov.w	r9, #0
    dfa8:	e048      	b.n	e03c <process_event+0x110>
			transit = mgr->transitions->reset;
    dfaa:	6923      	ldr	r3, [r4, #16]
    dfac:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    dfae:	2105      	movs	r1, #5
    dfb0:	4620      	mov	r0, r4
    dfb2:	f006 fa5b 	bl	1446c <set_state>
		res = 0;
    dfb6:	f04f 0900 	mov.w	r9, #0
    dfba:	e03f      	b.n	e03c <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    dfbc:	2200      	movs	r2, #0
    dfbe:	e046      	b.n	e04e <process_event+0x122>
    dfc0:	2200      	movs	r2, #0
    dfc2:	e044      	b.n	e04e <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    dfc4:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    dfc8:	8323      	strh	r3, [r4, #24]
    dfca:	f385 8811 	msr	BASEPRI, r5
    dfce:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    dfd2:	2900      	cmp	r1, #0
    dfd4:	d144      	bne.n	e060 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    dfd6:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    dfd8:	b12b      	cbz	r3, dfe6 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    dfda:	464b      	mov	r3, r9
    dfdc:	4642      	mov	r2, r8
    dfde:	4669      	mov	r1, sp
    dfe0:	4620      	mov	r0, r4
    dfe2:	f006 faf9 	bl	145d8 <notify_all>
			if (transit != NULL) {
    dfe6:	b117      	cbz	r7, dfee <process_event+0xc2>
				transit(mgr, transition_complete);
    dfe8:	4925      	ldr	r1, [pc, #148]	; (e080 <process_event+0x154>)
    dfea:	4620      	mov	r0, r4
    dfec:	47b8      	blx	r7
	__asm__ volatile(
    dfee:	f04f 0340 	mov.w	r3, #64	; 0x40
    dff2:	f3ef 8511 	mrs	r5, BASEPRI
    dff6:	f383 8812 	msr	BASEPRI_MAX, r3
    dffa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    dffe:	8b23      	ldrh	r3, [r4, #24]
    e000:	f023 0308 	bic.w	r3, r3, #8
    e004:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    e006:	8b23      	ldrh	r3, [r4, #24]
    e008:	f013 0f10 	tst.w	r3, #16
    e00c:	d02e      	beq.n	e06c <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    e00e:	f023 0310 	bic.w	r3, r3, #16
    e012:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    e014:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    e016:	8b26      	ldrh	r6, [r4, #24]
    e018:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    e01c:	2800      	cmp	r0, #0
    e01e:	d09a      	beq.n	df56 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    e020:	2802      	cmp	r0, #2
    e022:	d0a3      	beq.n	df6c <process_event+0x40>
		if (evt == EVT_NOP) {
    e024:	2800      	cmp	r0, #0
    e026:	d096      	beq.n	df56 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    e028:	2801      	cmp	r0, #1
    e02a:	d0a3      	beq.n	df74 <process_event+0x48>
		} else if (evt == EVT_START) {
    e02c:	2803      	cmp	r0, #3
    e02e:	d0aa      	beq.n	df86 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    e030:	2804      	cmp	r0, #4
    e032:	d0b1      	beq.n	df98 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    e034:	2805      	cmp	r0, #5
    e036:	d0b8      	beq.n	dfaa <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    e038:	2700      	movs	r7, #0
		res = 0;
    e03a:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e03c:	8b23      	ldrh	r3, [r4, #24]
    e03e:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e042:	45b0      	cmp	r8, r6
    e044:	d0ba      	beq.n	dfbc <process_event+0x90>
    e046:	68a2      	ldr	r2, [r4, #8]
    e048:	2a00      	cmp	r2, #0
    e04a:	d0b9      	beq.n	dfc0 <process_event+0x94>
    e04c:	2201      	movs	r2, #1
		if (do_monitors
    e04e:	4611      	mov	r1, r2
    e050:	2a00      	cmp	r2, #0
    e052:	d1b7      	bne.n	dfc4 <process_event+0x98>
    e054:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    e056:	2a00      	cmp	r2, #0
    e058:	d1b4      	bne.n	dfc4 <process_event+0x98>
		    || (transit != NULL)) {
    e05a:	2f00      	cmp	r7, #0
    e05c:	d1b2      	bne.n	dfc4 <process_event+0x98>
    e05e:	e7d2      	b.n	e006 <process_event+0xda>
				notify_monitors(mgr, state, res);
    e060:	464a      	mov	r2, r9
    e062:	4641      	mov	r1, r8
    e064:	4620      	mov	r0, r4
    e066:	f006 fa09 	bl	1447c <notify_monitors>
    e06a:	e7b4      	b.n	dfd6 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    e06c:	f013 0f20 	tst.w	r3, #32
    e070:	d004      	beq.n	e07c <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    e072:	f023 0320 	bic.w	r3, r3, #32
    e076:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    e078:	2002      	movs	r0, #2
    e07a:	e7cc      	b.n	e016 <process_event+0xea>
		evt = EVT_NOP;
    e07c:	2000      	movs	r0, #0
    e07e:	e7ca      	b.n	e016 <process_event+0xea>
    e080:	00014607 	.word	0x00014607

0000e084 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    e084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e088:	b093      	sub	sp, #76	; 0x4c
    e08a:	4606      	mov	r6, r0
    e08c:	460d      	mov	r5, r1
    e08e:	4692      	mov	sl, r2
    e090:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    e092:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    e094:	f89a 0000 	ldrb.w	r0, [sl]
    e098:	2800      	cmp	r0, #0
    e09a:	f000 84d6 	beq.w	ea4a <cbvprintf+0x9c6>
		if (*fp != '%') {
    e09e:	2825      	cmp	r0, #37	; 0x25
    e0a0:	d008      	beq.n	e0b4 <cbvprintf+0x30>
			OUTC(*fp++);
    e0a2:	f10a 0a01 	add.w	sl, sl, #1
    e0a6:	4629      	mov	r1, r5
    e0a8:	47b0      	blx	r6
    e0aa:	2800      	cmp	r0, #0
    e0ac:	f2c0 84ce 	blt.w	ea4c <cbvprintf+0x9c8>
    e0b0:	3401      	adds	r4, #1
			continue;
    e0b2:	e7ef      	b.n	e094 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    e0b4:	2300      	movs	r3, #0
    e0b6:	9306      	str	r3, [sp, #24]
    e0b8:	9307      	str	r3, [sp, #28]
    e0ba:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    e0bc:	9308      	str	r3, [sp, #32]
    e0be:	9309      	str	r3, [sp, #36]	; 0x24
    e0c0:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    e0c2:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    e0c6:	f89a 3001 	ldrb.w	r3, [sl, #1]
    e0ca:	2b25      	cmp	r3, #37	; 0x25
    e0cc:	d001      	beq.n	e0d2 <cbvprintf+0x4e>
	bool loop = true;
    e0ce:	2701      	movs	r7, #1
    e0d0:	e02c      	b.n	e12c <cbvprintf+0xa8>
		conv->specifier = *sp++;
    e0d2:	f10a 0802 	add.w	r8, sl, #2
    e0d6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    e0da:	e1a8      	b.n	e42e <cbvprintf+0x3aa>
			conv->flag_dash = true;
    e0dc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e0e0:	f043 0304 	orr.w	r3, r3, #4
    e0e4:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    e0e8:	b1ff      	cbz	r7, e12a <cbvprintf+0xa6>
			++sp;
    e0ea:	f108 0801 	add.w	r8, r8, #1
    e0ee:	e01c      	b.n	e12a <cbvprintf+0xa6>
			conv->flag_plus = true;
    e0f0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e0f4:	f043 0308 	orr.w	r3, r3, #8
    e0f8:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    e0fc:	e7f4      	b.n	e0e8 <cbvprintf+0x64>
			conv->flag_space = true;
    e0fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e102:	f043 0310 	orr.w	r3, r3, #16
    e106:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    e10a:	e7ed      	b.n	e0e8 <cbvprintf+0x64>
			conv->flag_hash = true;
    e10c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e110:	f043 0320 	orr.w	r3, r3, #32
    e114:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    e118:	e7e6      	b.n	e0e8 <cbvprintf+0x64>
			conv->flag_zero = true;
    e11a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e122:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    e126:	e7df      	b.n	e0e8 <cbvprintf+0x64>
		switch (*sp) {
    e128:	2700      	movs	r7, #0
	} while (loop);
    e12a:	b34f      	cbz	r7, e180 <cbvprintf+0xfc>
		switch (*sp) {
    e12c:	f898 3000 	ldrb.w	r3, [r8]
    e130:	3b20      	subs	r3, #32
    e132:	2b10      	cmp	r3, #16
    e134:	d8f8      	bhi.n	e128 <cbvprintf+0xa4>
    e136:	a201      	add	r2, pc, #4	; (adr r2, e13c <cbvprintf+0xb8>)
    e138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e13c:	0000e0ff 	.word	0x0000e0ff
    e140:	0000e129 	.word	0x0000e129
    e144:	0000e129 	.word	0x0000e129
    e148:	0000e10d 	.word	0x0000e10d
    e14c:	0000e129 	.word	0x0000e129
    e150:	0000e129 	.word	0x0000e129
    e154:	0000e129 	.word	0x0000e129
    e158:	0000e129 	.word	0x0000e129
    e15c:	0000e129 	.word	0x0000e129
    e160:	0000e129 	.word	0x0000e129
    e164:	0000e129 	.word	0x0000e129
    e168:	0000e0f1 	.word	0x0000e0f1
    e16c:	0000e129 	.word	0x0000e129
    e170:	0000e0dd 	.word	0x0000e0dd
    e174:	0000e129 	.word	0x0000e129
    e178:	0000e129 	.word	0x0000e129
    e17c:	0000e11b 	.word	0x0000e11b
	if (conv->flag_zero && conv->flag_dash) {
    e180:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e184:	f003 0344 	and.w	r3, r3, #68	; 0x44
    e188:	2b44      	cmp	r3, #68	; 0x44
    e18a:	d06d      	beq.n	e268 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    e18c:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    e190:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e198:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    e19c:	f898 3000 	ldrb.w	r3, [r8]
    e1a0:	2b2a      	cmp	r3, #42	; 0x2a
    e1a2:	d068      	beq.n	e276 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    e1a4:	a805      	add	r0, sp, #20
    e1a6:	f006 fca7 	bl	14af8 <extract_decimal>
	if (sp != wp) {
    e1aa:	9b05      	ldr	r3, [sp, #20]
    e1ac:	4598      	cmp	r8, r3
    e1ae:	d012      	beq.n	e1d6 <cbvprintf+0x152>
		conv->width_present = true;
    e1b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e1b8:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    e1bc:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    e1be:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    e1c2:	2800      	cmp	r0, #0
    e1c4:	db60      	blt.n	e288 <cbvprintf+0x204>
    e1c6:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    e1c8:	4313      	orrs	r3, r2
    e1ca:	f89d 2020 	ldrb.w	r2, [sp, #32]
    e1ce:	f363 0241 	bfi	r2, r3, #1, #1
    e1d2:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    e1d6:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    e1d8:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    e1da:	781b      	ldrb	r3, [r3, #0]
    e1dc:	2b2e      	cmp	r3, #46	; 0x2e
    e1de:	bf14      	ite	ne
    e1e0:	2300      	movne	r3, #0
    e1e2:	2301      	moveq	r3, #1
    e1e4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e1e8:	f363 0241 	bfi	r2, r3, #1, #1
    e1ec:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	d04b      	beq.n	e28c <cbvprintf+0x208>
	++sp;
    e1f4:	9b05      	ldr	r3, [sp, #20]
    e1f6:	1c5a      	adds	r2, r3, #1
    e1f8:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    e1fa:	785b      	ldrb	r3, [r3, #1]
    e1fc:	2b2a      	cmp	r3, #42	; 0x2a
    e1fe:	d048      	beq.n	e292 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    e200:	a805      	add	r0, sp, #20
    e202:	f006 fc79 	bl	14af8 <extract_decimal>
	conv->prec_value = prec;
    e206:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    e208:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e20c:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    e210:	2800      	cmp	r0, #0
    e212:	db47      	blt.n	e2a4 <cbvprintf+0x220>
    e214:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    e216:	4313      	orrs	r3, r2
    e218:	f89d 2020 	ldrb.w	r2, [sp, #32]
    e21c:	f363 0241 	bfi	r2, r3, #1, #1
    e220:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    e224:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    e228:	f898 3000 	ldrb.w	r3, [r8]
    e22c:	3b4c      	subs	r3, #76	; 0x4c
    e22e:	2b2e      	cmp	r3, #46	; 0x2e
    e230:	f200 80dc 	bhi.w	e3ec <cbvprintf+0x368>
    e234:	e8df f003 	tbb	[pc, r3]
    e238:	dadadaca 	.word	0xdadadaca
    e23c:	dadadada 	.word	0xdadadada
    e240:	dadadada 	.word	0xdadadada
    e244:	dadadada 	.word	0xdadadada
    e248:	dadadada 	.word	0xdadadada
    e24c:	dadadada 	.word	0xdadadada
    e250:	dadadada 	.word	0xdadadada
    e254:	da6ada38 	.word	0xda6ada38
    e258:	dadada51 	.word	0xdadada51
    e25c:	dadadada 	.word	0xdadadada
    e260:	dadadac0 	.word	0xdadadac0
    e264:	dada      	.short	0xdada
    e266:	b6          	.byte	0xb6
    e267:	00          	.byte	0x00
		conv->flag_zero = false;
    e268:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e26c:	f36f 1386 	bfc	r3, #6, #1
    e270:	f88d 3020 	strb.w	r3, [sp, #32]
    e274:	e78a      	b.n	e18c <cbvprintf+0x108>
		conv->width_star = true;
    e276:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e27a:	f043 0301 	orr.w	r3, r3, #1
    e27e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    e282:	4643      	mov	r3, r8
    e284:	3301      	adds	r3, #1
    e286:	e7a7      	b.n	e1d8 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    e288:	2201      	movs	r2, #1
    e28a:	e79d      	b.n	e1c8 <cbvprintf+0x144>
		return sp;
    e28c:	f8dd 8014 	ldr.w	r8, [sp, #20]
    e290:	e7ca      	b.n	e228 <cbvprintf+0x1a4>
		conv->prec_star = true;
    e292:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e296:	f043 0304 	orr.w	r3, r3, #4
    e29a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    e29e:	f102 0801 	add.w	r8, r2, #1
    e2a2:	e7c1      	b.n	e228 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    e2a4:	2201      	movs	r2, #1
    e2a6:	e7b6      	b.n	e216 <cbvprintf+0x192>
		if (*++sp == 'h') {
    e2a8:	f108 0201 	add.w	r2, r8, #1
    e2ac:	f898 3001 	ldrb.w	r3, [r8, #1]
    e2b0:	2b68      	cmp	r3, #104	; 0x68
    e2b2:	d008      	beq.n	e2c6 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    e2b4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e2b8:	2102      	movs	r1, #2
    e2ba:	f361 03c6 	bfi	r3, r1, #3, #4
    e2be:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    e2c2:	4690      	mov	r8, r2
    e2c4:	e02b      	b.n	e31e <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    e2c6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e2ca:	2201      	movs	r2, #1
    e2cc:	f362 03c6 	bfi	r3, r2, #3, #4
    e2d0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    e2d4:	f108 0802 	add.w	r8, r8, #2
    e2d8:	e021      	b.n	e31e <cbvprintf+0x29a>
		if (*++sp == 'l') {
    e2da:	f108 0201 	add.w	r2, r8, #1
    e2de:	f898 3001 	ldrb.w	r3, [r8, #1]
    e2e2:	2b6c      	cmp	r3, #108	; 0x6c
    e2e4:	d008      	beq.n	e2f8 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    e2e6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e2ea:	2103      	movs	r1, #3
    e2ec:	f361 03c6 	bfi	r3, r1, #3, #4
    e2f0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    e2f4:	4690      	mov	r8, r2
    e2f6:	e012      	b.n	e31e <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    e2f8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e2fc:	2204      	movs	r2, #4
    e2fe:	f362 03c6 	bfi	r3, r2, #3, #4
    e302:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    e306:	f108 0802 	add.w	r8, r8, #2
    e30a:	e008      	b.n	e31e <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    e30c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e310:	2205      	movs	r2, #5
    e312:	f362 03c6 	bfi	r3, r2, #3, #4
    e316:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    e31a:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    e31e:	f818 3b01 	ldrb.w	r3, [r8], #1
    e322:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    e326:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    e32a:	2a37      	cmp	r2, #55	; 0x37
    e32c:	f200 8150 	bhi.w	e5d0 <cbvprintf+0x54c>
    e330:	e8df f012 	tbh	[pc, r2, lsl #1]
    e334:	014e0126 	.word	0x014e0126
    e338:	014e014e 	.word	0x014e014e
    e33c:	01260126 	.word	0x01260126
    e340:	014e0126 	.word	0x014e0126
    e344:	014e014e 	.word	0x014e014e
    e348:	014e014e 	.word	0x014e014e
    e34c:	014e014e 	.word	0x014e014e
    e350:	014e014e 	.word	0x014e014e
    e354:	014e014e 	.word	0x014e014e
    e358:	014e014e 	.word	0x014e014e
    e35c:	014e014e 	.word	0x014e014e
    e360:	0113014e 	.word	0x0113014e
    e364:	014e014e 	.word	0x014e014e
    e368:	014e014e 	.word	0x014e014e
    e36c:	014e014e 	.word	0x014e014e
    e370:	014e014e 	.word	0x014e014e
    e374:	014e0126 	.word	0x014e0126
    e378:	00630113 	.word	0x00630113
    e37c:	01260126 	.word	0x01260126
    e380:	014e0126 	.word	0x014e0126
    e384:	014e0063 	.word	0x014e0063
    e388:	014e014e 	.word	0x014e014e
    e38c:	012f014e 	.word	0x012f014e
    e390:	013f0113 	.word	0x013f0113
    e394:	014e014e 	.word	0x014e014e
    e398:	014e013f 	.word	0x014e013f
    e39c:	014e0113 	.word	0x014e0113
    e3a0:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    e3a4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e3a8:	2206      	movs	r2, #6
    e3aa:	f362 03c6 	bfi	r3, r2, #3, #4
    e3ae:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    e3b2:	f108 0801 	add.w	r8, r8, #1
		break;
    e3b6:	e7b2      	b.n	e31e <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    e3b8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e3bc:	2207      	movs	r2, #7
    e3be:	f362 03c6 	bfi	r3, r2, #3, #4
    e3c2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    e3c6:	f108 0801 	add.w	r8, r8, #1
		break;
    e3ca:	e7a8      	b.n	e31e <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    e3cc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e3d0:	2208      	movs	r2, #8
    e3d2:	f362 03c6 	bfi	r3, r2, #3, #4
    e3d6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    e3da:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    e3de:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e3e2:	f043 0302 	orr.w	r3, r3, #2
    e3e6:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    e3ea:	e798      	b.n	e31e <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    e3ec:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e3f0:	f36f 03c6 	bfc	r3, #3, #4
    e3f4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    e3f8:	e791      	b.n	e31e <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    e3fa:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    e3fe:	2101      	movs	r1, #1
    e400:	f361 0202 	bfi	r2, r1, #0, #3
    e404:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    e408:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e40c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    e410:	2a40      	cmp	r2, #64	; 0x40
    e412:	f000 80aa 	beq.w	e56a <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    e416:	2b63      	cmp	r3, #99	; 0x63
    e418:	f000 80ae 	beq.w	e578 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    e41c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e420:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e424:	4317      	orrs	r7, r2
    e426:	f367 0341 	bfi	r3, r7, #1, #1
    e42a:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    e42e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e432:	f013 0f01 	tst.w	r3, #1
    e436:	f000 80da 	beq.w	e5ee <cbvprintf+0x56a>
			width = va_arg(ap, int);
    e43a:	9b03      	ldr	r3, [sp, #12]
    e43c:	1d1a      	adds	r2, r3, #4
    e43e:	9203      	str	r2, [sp, #12]
    e440:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    e442:	2f00      	cmp	r7, #0
    e444:	f2c0 80cb 	blt.w	e5de <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    e448:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e44c:	f013 0f04 	tst.w	r3, #4
    e450:	f000 80df 	beq.w	e612 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    e454:	9b03      	ldr	r3, [sp, #12]
    e456:	1d1a      	adds	r2, r3, #4
    e458:	9203      	str	r2, [sp, #12]
    e45a:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    e45e:	f1bb 0f00 	cmp.w	fp, #0
    e462:	f2c0 80cd 	blt.w	e600 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    e466:	2300      	movs	r3, #0
    e468:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    e46a:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    e46c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e470:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    e474:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    e478:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    e47c:	2b01      	cmp	r3, #1
    e47e:	f000 80d1 	beq.w	e624 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    e482:	2b02      	cmp	r3, #2
    e484:	f000 8116 	beq.w	e6b4 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    e488:	2b04      	cmp	r3, #4
    e48a:	f000 8167 	beq.w	e75c <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    e48e:	2b03      	cmp	r3, #3
    e490:	f000 817e 	beq.w	e790 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    e494:	f89d 9020 	ldrb.w	r9, [sp, #32]
    e498:	f019 0303 	ands.w	r3, r9, #3
    e49c:	9302      	str	r3, [sp, #8]
    e49e:	f040 817d 	bne.w	e79c <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    e4a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e4a6:	3b25      	subs	r3, #37	; 0x25
    e4a8:	2b53      	cmp	r3, #83	; 0x53
    e4aa:	f200 8233 	bhi.w	e914 <cbvprintf+0x890>
    e4ae:	e8df f013 	tbh	[pc, r3, lsl #1]
    e4b2:	0181      	.short	0x0181
    e4b4:	02310231 	.word	0x02310231
    e4b8:	02310231 	.word	0x02310231
    e4bc:	02310231 	.word	0x02310231
    e4c0:	02310231 	.word	0x02310231
    e4c4:	02310231 	.word	0x02310231
    e4c8:	02310231 	.word	0x02310231
    e4cc:	02310231 	.word	0x02310231
    e4d0:	02310231 	.word	0x02310231
    e4d4:	02310231 	.word	0x02310231
    e4d8:	02310231 	.word	0x02310231
    e4dc:	02310231 	.word	0x02310231
    e4e0:	02310231 	.word	0x02310231
    e4e4:	02310231 	.word	0x02310231
    e4e8:	02310231 	.word	0x02310231
    e4ec:	02310231 	.word	0x02310231
    e4f0:	02310231 	.word	0x02310231
    e4f4:	02310231 	.word	0x02310231
    e4f8:	02310231 	.word	0x02310231
    e4fc:	02310231 	.word	0x02310231
    e500:	02310231 	.word	0x02310231
    e504:	02310231 	.word	0x02310231
    e508:	02310231 	.word	0x02310231
    e50c:	02310231 	.word	0x02310231
    e510:	02310231 	.word	0x02310231
    e514:	02310231 	.word	0x02310231
    e518:	023101c7 	.word	0x023101c7
    e51c:	02310231 	.word	0x02310231
    e520:	02310231 	.word	0x02310231
    e524:	02310231 	.word	0x02310231
    e528:	02310231 	.word	0x02310231
    e52c:	01a10231 	.word	0x01a10231
    e530:	023101ab 	.word	0x023101ab
    e534:	02310231 	.word	0x02310231
    e538:	01ab0231 	.word	0x01ab0231
    e53c:	02310231 	.word	0x02310231
    e540:	02310231 	.word	0x02310231
    e544:	01c70208 	.word	0x01c70208
    e548:	023101ea 	.word	0x023101ea
    e54c:	018f0231 	.word	0x018f0231
    e550:	01c70231 	.word	0x01c70231
    e554:	02310231 	.word	0x02310231
    e558:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    e55a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    e55e:	2102      	movs	r1, #2
    e560:	f361 0202 	bfi	r2, r1, #0, #3
    e564:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    e568:	e74e      	b.n	e408 <cbvprintf+0x384>
			conv->invalid = true;
    e56a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    e56e:	f041 0101 	orr.w	r1, r1, #1
    e572:	f88d 1020 	strb.w	r1, [sp, #32]
    e576:	e74e      	b.n	e416 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    e578:	1e17      	subs	r7, r2, #0
    e57a:	bf18      	it	ne
    e57c:	2701      	movne	r7, #1
    e57e:	e74d      	b.n	e41c <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    e580:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e584:	2204      	movs	r2, #4
    e586:	f362 0302 	bfi	r3, r2, #0, #3
    e58a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    e58e:	2701      	movs	r7, #1
			break;
    e590:	e744      	b.n	e41c <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    e592:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e596:	2203      	movs	r2, #3
    e598:	f362 0302 	bfi	r3, r2, #0, #3
    e59c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    e5a0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e5a4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    e5a8:	2b40      	cmp	r3, #64	; 0x40
    e5aa:	f47f af37 	bne.w	e41c <cbvprintf+0x398>
			unsupported = true;
    e5ae:	2701      	movs	r7, #1
    e5b0:	e734      	b.n	e41c <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    e5b2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e5b6:	2203      	movs	r2, #3
    e5b8:	f362 0302 	bfi	r3, r2, #0, #3
    e5bc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    e5c0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e5c4:	f013 0f78 	tst.w	r3, #120	; 0x78
    e5c8:	f43f af28 	beq.w	e41c <cbvprintf+0x398>
			unsupported = true;
    e5cc:	2701      	movs	r7, #1
    e5ce:	e725      	b.n	e41c <cbvprintf+0x398>
		conv->invalid = true;
    e5d0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e5d4:	f043 0301 	orr.w	r3, r3, #1
    e5d8:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    e5dc:	e71e      	b.n	e41c <cbvprintf+0x398>
				conv->flag_dash = true;
    e5de:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e5e2:	f043 0304 	orr.w	r3, r3, #4
    e5e6:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    e5ea:	427f      	negs	r7, r7
    e5ec:	e72c      	b.n	e448 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    e5ee:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    e5f2:	2b00      	cmp	r3, #0
    e5f4:	db02      	blt.n	e5fc <cbvprintf+0x578>
		int width = -1;
    e5f6:	f04f 37ff 	mov.w	r7, #4294967295
    e5fa:	e725      	b.n	e448 <cbvprintf+0x3c4>
			width = conv->width_value;
    e5fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
    e5fe:	e723      	b.n	e448 <cbvprintf+0x3c4>
				conv->prec_present = false;
    e600:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e604:	f36f 0341 	bfc	r3, #1, #1
    e608:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    e60c:	f04f 3bff 	mov.w	fp, #4294967295
    e610:	e729      	b.n	e466 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    e612:	f013 0f02 	tst.w	r3, #2
    e616:	d002      	beq.n	e61e <cbvprintf+0x59a>
			precision = conv->prec_value;
    e618:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    e61c:	e723      	b.n	e466 <cbvprintf+0x3e2>
		int precision = -1;
    e61e:	f04f 3bff 	mov.w	fp, #4294967295
    e622:	e720      	b.n	e466 <cbvprintf+0x3e2>
			switch (length_mod) {
    e624:	1ecb      	subs	r3, r1, #3
    e626:	2b04      	cmp	r3, #4
    e628:	d804      	bhi.n	e634 <cbvprintf+0x5b0>
    e62a:	e8df f003 	tbb	[pc, r3]
    e62e:	1d0b      	.short	0x1d0b
    e630:	3529      	.short	0x3529
    e632:	35          	.byte	0x35
    e633:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    e634:	9b03      	ldr	r3, [sp, #12]
    e636:	1d1a      	adds	r2, r3, #4
    e638:	9203      	str	r2, [sp, #12]
    e63a:	681a      	ldr	r2, [r3, #0]
    e63c:	17d3      	asrs	r3, r2, #31
    e63e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    e642:	e006      	b.n	e652 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    e644:	9b03      	ldr	r3, [sp, #12]
    e646:	1d1a      	adds	r2, r3, #4
    e648:	9203      	str	r2, [sp, #12]
    e64a:	681a      	ldr	r2, [r3, #0]
    e64c:	17d3      	asrs	r3, r2, #31
    e64e:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    e652:	2901      	cmp	r1, #1
    e654:	d028      	beq.n	e6a8 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    e656:	2902      	cmp	r1, #2
    e658:	f47f af1c 	bne.w	e494 <cbvprintf+0x410>
				value->sint = (short)value->sint;
    e65c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    e660:	17d3      	asrs	r3, r2, #31
    e662:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e666:	e715      	b.n	e494 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    e668:	9b03      	ldr	r3, [sp, #12]
    e66a:	3307      	adds	r3, #7
    e66c:	f023 0307 	bic.w	r3, r3, #7
    e670:	f103 0208 	add.w	r2, r3, #8
    e674:	9203      	str	r2, [sp, #12]
    e676:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    e67a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    e67e:	e7e8      	b.n	e652 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    e680:	9b03      	ldr	r3, [sp, #12]
    e682:	3307      	adds	r3, #7
    e684:	f023 0307 	bic.w	r3, r3, #7
    e688:	f103 0208 	add.w	r2, r3, #8
    e68c:	9203      	str	r2, [sp, #12]
    e68e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    e692:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    e696:	e7dc      	b.n	e652 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    e698:	9b03      	ldr	r3, [sp, #12]
    e69a:	1d1a      	adds	r2, r3, #4
    e69c:	9203      	str	r2, [sp, #12]
    e69e:	681a      	ldr	r2, [r3, #0]
    e6a0:	17d3      	asrs	r3, r2, #31
				value->sint =
    e6a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    e6a6:	e7d4      	b.n	e652 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    e6a8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e6ac:	9306      	str	r3, [sp, #24]
    e6ae:	2300      	movs	r3, #0
    e6b0:	9307      	str	r3, [sp, #28]
    e6b2:	e6ef      	b.n	e494 <cbvprintf+0x410>
			switch (length_mod) {
    e6b4:	1ecb      	subs	r3, r1, #3
    e6b6:	2b04      	cmp	r3, #4
    e6b8:	d804      	bhi.n	e6c4 <cbvprintf+0x640>
    e6ba:	e8df f003 	tbb	[pc, r3]
    e6be:	1f0b      	.short	0x1f0b
    e6c0:	4135      	.short	0x4135
    e6c2:	41          	.byte	0x41
    e6c3:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    e6c4:	9b03      	ldr	r3, [sp, #12]
    e6c6:	1d1a      	adds	r2, r3, #4
    e6c8:	9203      	str	r2, [sp, #12]
    e6ca:	681b      	ldr	r3, [r3, #0]
    e6cc:	9306      	str	r3, [sp, #24]
    e6ce:	2300      	movs	r3, #0
    e6d0:	9307      	str	r3, [sp, #28]
				break;
    e6d2:	e01e      	b.n	e712 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    e6d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    e6d8:	2b63      	cmp	r3, #99	; 0x63
    e6da:	d007      	beq.n	e6ec <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    e6dc:	9b03      	ldr	r3, [sp, #12]
    e6de:	1d1a      	adds	r2, r3, #4
    e6e0:	9203      	str	r2, [sp, #12]
    e6e2:	681b      	ldr	r3, [r3, #0]
    e6e4:	9306      	str	r3, [sp, #24]
    e6e6:	2300      	movs	r3, #0
    e6e8:	9307      	str	r3, [sp, #28]
    e6ea:	e012      	b.n	e712 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    e6ec:	9b03      	ldr	r3, [sp, #12]
    e6ee:	1d1a      	adds	r2, r3, #4
    e6f0:	9203      	str	r2, [sp, #12]
    e6f2:	681b      	ldr	r3, [r3, #0]
    e6f4:	9306      	str	r3, [sp, #24]
    e6f6:	2300      	movs	r3, #0
    e6f8:	9307      	str	r3, [sp, #28]
    e6fa:	e00a      	b.n	e712 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    e6fc:	9b03      	ldr	r3, [sp, #12]
    e6fe:	3307      	adds	r3, #7
    e700:	f023 0307 	bic.w	r3, r3, #7
    e704:	f103 0208 	add.w	r2, r3, #8
    e708:	9203      	str	r2, [sp, #12]
    e70a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    e70e:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    e712:	2901      	cmp	r1, #1
    e714:	d01c      	beq.n	e750 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    e716:	2902      	cmp	r1, #2
    e718:	f47f aebc 	bne.w	e494 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    e71c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    e720:	9306      	str	r3, [sp, #24]
    e722:	2300      	movs	r3, #0
    e724:	9307      	str	r3, [sp, #28]
    e726:	e6b5      	b.n	e494 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    e728:	9b03      	ldr	r3, [sp, #12]
    e72a:	3307      	adds	r3, #7
    e72c:	f023 0307 	bic.w	r3, r3, #7
    e730:	f103 0208 	add.w	r2, r3, #8
    e734:	9203      	str	r2, [sp, #12]
    e736:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    e73a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    e73e:	e7e8      	b.n	e712 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    e740:	9b03      	ldr	r3, [sp, #12]
    e742:	1d1a      	adds	r2, r3, #4
    e744:	9203      	str	r2, [sp, #12]
    e746:	681b      	ldr	r3, [r3, #0]
				value->uint =
    e748:	9306      	str	r3, [sp, #24]
    e74a:	2300      	movs	r3, #0
    e74c:	9307      	str	r3, [sp, #28]
				break;
    e74e:	e7e0      	b.n	e712 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    e750:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e754:	9306      	str	r3, [sp, #24]
    e756:	2300      	movs	r3, #0
    e758:	9307      	str	r3, [sp, #28]
    e75a:	e69b      	b.n	e494 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    e75c:	2908      	cmp	r1, #8
    e75e:	d00b      	beq.n	e778 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    e760:	9b03      	ldr	r3, [sp, #12]
    e762:	3307      	adds	r3, #7
    e764:	f023 0307 	bic.w	r3, r3, #7
    e768:	f103 0208 	add.w	r2, r3, #8
    e76c:	9203      	str	r2, [sp, #12]
    e76e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e772:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e776:	e68d      	b.n	e494 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    e778:	9b03      	ldr	r3, [sp, #12]
    e77a:	3307      	adds	r3, #7
    e77c:	f023 0307 	bic.w	r3, r3, #7
    e780:	f103 0208 	add.w	r2, r3, #8
    e784:	9203      	str	r2, [sp, #12]
    e786:	e9d3 2300 	ldrd	r2, r3, [r3]
    e78a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e78e:	e681      	b.n	e494 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    e790:	9b03      	ldr	r3, [sp, #12]
    e792:	1d1a      	adds	r2, r3, #4
    e794:	9203      	str	r2, [sp, #12]
    e796:	681b      	ldr	r3, [r3, #0]
    e798:	9306      	str	r3, [sp, #24]
    e79a:	e67b      	b.n	e494 <cbvprintf+0x410>
			OUTS(sp, fp);
    e79c:	4643      	mov	r3, r8
    e79e:	4652      	mov	r2, sl
    e7a0:	4629      	mov	r1, r5
    e7a2:	4630      	mov	r0, r6
    e7a4:	f006 fa25 	bl	14bf2 <outs>
    e7a8:	2800      	cmp	r0, #0
    e7aa:	f2c0 814f 	blt.w	ea4c <cbvprintf+0x9c8>
    e7ae:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    e7b0:	46c2      	mov	sl, r8
			continue;
    e7b2:	e46f      	b.n	e094 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    e7b4:	4629      	mov	r1, r5
    e7b6:	2025      	movs	r0, #37	; 0x25
    e7b8:	47b0      	blx	r6
    e7ba:	2800      	cmp	r0, #0
    e7bc:	f2c0 8146 	blt.w	ea4c <cbvprintf+0x9c8>
    e7c0:	3401      	adds	r4, #1
		char sign = 0;
    e7c2:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    e7c6:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    e7ca:	f04f 0a00 	mov.w	sl, #0
			break;
    e7ce:	e0a7      	b.n	e920 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
    e7d0:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    e7d4:	f1bb 0f00 	cmp.w	fp, #0
    e7d8:	db08      	blt.n	e7ec <cbvprintf+0x768>
				len = strnlen(bps, precision);
    e7da:	4659      	mov	r1, fp
    e7dc:	4650      	mov	r0, sl
    e7de:	f006 fafc 	bl	14dda <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    e7e2:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    e7e6:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    e7ea:	e099      	b.n	e920 <cbvprintf+0x89c>
				len = strlen(bps);
    e7ec:	4650      	mov	r0, sl
    e7ee:	f006 faec 	bl	14dca <strlen>
    e7f2:	e7f6      	b.n	e7e2 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    e7f4:	9b06      	ldr	r3, [sp, #24]
    e7f6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    e7fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    e7fe:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    e802:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    e806:	e08b      	b.n	e920 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    e808:	f019 0f08 	tst.w	r9, #8
    e80c:	d105      	bne.n	e81a <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    e80e:	f019 0910 	ands.w	r9, r9, #16
    e812:	d004      	beq.n	e81e <cbvprintf+0x79a>
				sign = ' ';
    e814:	f04f 0920 	mov.w	r9, #32
    e818:	e001      	b.n	e81e <cbvprintf+0x79a>
				sign = '+';
    e81a:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    e81e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    e822:	2a00      	cmp	r2, #0
    e824:	f173 0100 	sbcs.w	r1, r3, #0
    e828:	db02      	blt.n	e830 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    e82a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e82e:	e009      	b.n	e844 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    e830:	4252      	negs	r2, r2
    e832:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    e836:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    e83a:	f04f 092d 	mov.w	r9, #45	; 0x2d
    e83e:	e001      	b.n	e844 <cbvprintf+0x7c0>
		switch (conv->specifier) {
    e840:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    e844:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    e848:	9300      	str	r3, [sp, #0]
    e84a:	ab0c      	add	r3, sp, #48	; 0x30
    e84c:	aa08      	add	r2, sp, #32
    e84e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    e852:	f006 f964 	bl	14b1e <encode_uint>
    e856:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    e858:	f1bb 0f00 	cmp.w	fp, #0
    e85c:	f2c0 8090 	blt.w	e980 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
    e860:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    e864:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    e868:	f89d 2020 	ldrb.w	r2, [sp, #32]
    e86c:	f36f 1286 	bfc	r2, #6, #1
    e870:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    e874:	459b      	cmp	fp, r3
    e876:	f240 8086 	bls.w	e986 <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
    e87a:	ebab 0303 	sub.w	r3, fp, r3
    e87e:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    e880:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    e884:	e04c      	b.n	e920 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    e886:	9806      	ldr	r0, [sp, #24]
    e888:	b930      	cbnz	r0, e898 <cbvprintf+0x814>
		char sign = 0;
    e88a:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    e88e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; ea54 <cbvprintf+0x9d0>
			bps = "(nil)";
    e892:	f1ab 0a05 	sub.w	sl, fp, #5
    e896:	e043      	b.n	e920 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    e898:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    e89c:	9300      	str	r3, [sp, #0]
    e89e:	ab0c      	add	r3, sp, #48	; 0x30
    e8a0:	aa08      	add	r2, sp, #32
    e8a2:	2100      	movs	r1, #0
    e8a4:	f006 f93b 	bl	14b1e <encode_uint>
    e8a8:	4682      	mov	sl, r0
				conv->altform_0c = true;
    e8aa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e8ae:	f043 0310 	orr.w	r3, r3, #16
    e8b2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    e8b6:	2378      	movs	r3, #120	; 0x78
    e8b8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    e8bc:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    e8c0:	e7ca      	b.n	e858 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    e8c2:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    e8c4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e8c8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    e8cc:	2b07      	cmp	r3, #7
    e8ce:	d806      	bhi.n	e8de <cbvprintf+0x85a>
    e8d0:	e8df f003 	tbb	[pc, r3]
    e8d4:	100e0c04 	.word	0x100e0c04
    e8d8:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    e8dc:	6014      	str	r4, [r2, #0]
		char sign = 0;
    e8de:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    e8e2:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    e8e6:	f04f 0a00 	mov.w	sl, #0
}
    e8ea:	e019      	b.n	e920 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
    e8ec:	7014      	strb	r4, [r2, #0]
		break;
    e8ee:	e7f6      	b.n	e8de <cbvprintf+0x85a>
		*(short *)dp = (short)count;
    e8f0:	8014      	strh	r4, [r2, #0]
		break;
    e8f2:	e7f4      	b.n	e8de <cbvprintf+0x85a>
		*(long *)dp = (long)count;
    e8f4:	6014      	str	r4, [r2, #0]
		break;
    e8f6:	e7f2      	b.n	e8de <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
    e8f8:	4620      	mov	r0, r4
    e8fa:	17e1      	asrs	r1, r4, #31
    e8fc:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    e900:	e7ed      	b.n	e8de <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
    e902:	4620      	mov	r0, r4
    e904:	17e1      	asrs	r1, r4, #31
    e906:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    e90a:	e7e8      	b.n	e8de <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
    e90c:	6014      	str	r4, [r2, #0]
		break;
    e90e:	e7e6      	b.n	e8de <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    e910:	6014      	str	r4, [r2, #0]
		break;
    e912:	e7e4      	b.n	e8de <cbvprintf+0x85a>
		switch (conv->specifier) {
    e914:	f8dd 9008 	ldr.w	r9, [sp, #8]
    e918:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    e91c:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    e920:	f1ba 0f00 	cmp.w	sl, #0
    e924:	f000 808e 	beq.w	ea44 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    e928:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    e92c:	f1b9 0f00 	cmp.w	r9, #0
    e930:	d000      	beq.n	e934 <cbvprintf+0x8b0>
			nj_len += 1U;
    e932:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    e934:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    e938:	f011 0f10 	tst.w	r1, #16
    e93c:	d026      	beq.n	e98c <cbvprintf+0x908>
			nj_len += 2U;
    e93e:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    e940:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e942:	4413      	add	r3, r2
		if (conv->pad_fp) {
    e944:	f011 0f40 	tst.w	r1, #64	; 0x40
    e948:	d001      	beq.n	e94e <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
    e94a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e94c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    e94e:	2f00      	cmp	r7, #0
    e950:	dd32      	ble.n	e9b8 <cbvprintf+0x934>
			width -= (int)nj_len;
    e952:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    e954:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e958:	f013 0f04 	tst.w	r3, #4
    e95c:	d12c      	bne.n	e9b8 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    e95e:	f013 0f40 	tst.w	r3, #64	; 0x40
    e962:	d018      	beq.n	e996 <cbvprintf+0x912>
					if (sign != 0) {
    e964:	f1b9 0f00 	cmp.w	r9, #0
    e968:	d018      	beq.n	e99c <cbvprintf+0x918>
						OUTC(sign);
    e96a:	4629      	mov	r1, r5
    e96c:	4648      	mov	r0, r9
    e96e:	47b0      	blx	r6
    e970:	2800      	cmp	r0, #0
    e972:	db6b      	blt.n	ea4c <cbvprintf+0x9c8>
    e974:	3401      	adds	r4, #1
						sign = 0;
    e976:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    e97a:	2330      	movs	r3, #48	; 0x30
    e97c:	9302      	str	r3, [sp, #8]
    e97e:	e00f      	b.n	e9a0 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
    e980:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    e984:	e7cc      	b.n	e920 <cbvprintf+0x89c>
    e986:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    e98a:	e7c9      	b.n	e920 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
    e98c:	f011 0f08 	tst.w	r1, #8
    e990:	d0d6      	beq.n	e940 <cbvprintf+0x8bc>
			nj_len += 1U;
    e992:	3201      	adds	r2, #1
    e994:	e7d4      	b.n	e940 <cbvprintf+0x8bc>
				char pad = ' ';
    e996:	2320      	movs	r3, #32
    e998:	9302      	str	r3, [sp, #8]
    e99a:	e001      	b.n	e9a0 <cbvprintf+0x91c>
					pad = '0';
    e99c:	2330      	movs	r3, #48	; 0x30
    e99e:	9302      	str	r3, [sp, #8]
    e9a0:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    e9a2:	1e5f      	subs	r7, r3, #1
    e9a4:	2b00      	cmp	r3, #0
    e9a6:	dd07      	ble.n	e9b8 <cbvprintf+0x934>
					OUTC(pad);
    e9a8:	4629      	mov	r1, r5
    e9aa:	9802      	ldr	r0, [sp, #8]
    e9ac:	47b0      	blx	r6
    e9ae:	2800      	cmp	r0, #0
    e9b0:	db4c      	blt.n	ea4c <cbvprintf+0x9c8>
    e9b2:	3401      	adds	r4, #1
				while (width-- > 0) {
    e9b4:	463b      	mov	r3, r7
    e9b6:	e7f4      	b.n	e9a2 <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    e9b8:	f1b9 0f00 	cmp.w	r9, #0
    e9bc:	d005      	beq.n	e9ca <cbvprintf+0x946>
			OUTC(sign);
    e9be:	4629      	mov	r1, r5
    e9c0:	4648      	mov	r0, r9
    e9c2:	47b0      	blx	r6
    e9c4:	2800      	cmp	r0, #0
    e9c6:	db41      	blt.n	ea4c <cbvprintf+0x9c8>
    e9c8:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    e9ca:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e9ce:	f3c3 1200 	ubfx	r2, r3, #4, #1
    e9d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    e9d6:	4313      	orrs	r3, r2
    e9d8:	d005      	beq.n	e9e6 <cbvprintf+0x962>
				OUTC('0');
    e9da:	4629      	mov	r1, r5
    e9dc:	2030      	movs	r0, #48	; 0x30
    e9de:	47b0      	blx	r6
    e9e0:	2800      	cmp	r0, #0
    e9e2:	db33      	blt.n	ea4c <cbvprintf+0x9c8>
    e9e4:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    e9e6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e9ea:	f013 0f10 	tst.w	r3, #16
    e9ee:	d006      	beq.n	e9fe <cbvprintf+0x97a>
				OUTC(conv->specifier);
    e9f0:	4629      	mov	r1, r5
    e9f2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    e9f6:	47b0      	blx	r6
    e9f8:	2800      	cmp	r0, #0
    e9fa:	db27      	blt.n	ea4c <cbvprintf+0x9c8>
    e9fc:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    e9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    ea00:	f103 39ff 	add.w	r9, r3, #4294967295
    ea04:	2b00      	cmp	r3, #0
    ea06:	dd07      	ble.n	ea18 <cbvprintf+0x994>
				OUTC('0');
    ea08:	4629      	mov	r1, r5
    ea0a:	2030      	movs	r0, #48	; 0x30
    ea0c:	47b0      	blx	r6
    ea0e:	2800      	cmp	r0, #0
    ea10:	db1c      	blt.n	ea4c <cbvprintf+0x9c8>
    ea12:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    ea14:	464b      	mov	r3, r9
    ea16:	e7f3      	b.n	ea00 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
    ea18:	465b      	mov	r3, fp
    ea1a:	4652      	mov	r2, sl
    ea1c:	4629      	mov	r1, r5
    ea1e:	4630      	mov	r0, r6
    ea20:	f006 f8e7 	bl	14bf2 <outs>
    ea24:	2800      	cmp	r0, #0
    ea26:	db11      	blt.n	ea4c <cbvprintf+0x9c8>
    ea28:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    ea2a:	2f00      	cmp	r7, #0
    ea2c:	dd07      	ble.n	ea3e <cbvprintf+0x9ba>
			OUTC(' ');
    ea2e:	4629      	mov	r1, r5
    ea30:	2020      	movs	r0, #32
    ea32:	47b0      	blx	r6
    ea34:	2800      	cmp	r0, #0
    ea36:	db09      	blt.n	ea4c <cbvprintf+0x9c8>
    ea38:	3401      	adds	r4, #1
			--width;
    ea3a:	3f01      	subs	r7, #1
    ea3c:	e7f5      	b.n	ea2a <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
    ea3e:	46c2      	mov	sl, r8
    ea40:	f7ff bb28 	b.w	e094 <cbvprintf+0x10>
    ea44:	46c2      	mov	sl, r8
    ea46:	f7ff bb25 	b.w	e094 <cbvprintf+0x10>
		}
	}

	return count;
    ea4a:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    ea4c:	b013      	add	sp, #76	; 0x4c
    ea4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea52:	bf00      	nop
    ea54:	000170f5 	.word	0x000170f5

0000ea58 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    ea58:	b570      	push	{r4, r5, r6, lr}
    ea5a:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    ea5c:	4b2c      	ldr	r3, [pc, #176]	; (eb10 <pm_system_resume+0xb8>)
    ea5e:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    ea60:	f004 031f 	and.w	r3, r4, #31
    ea64:	2201      	movs	r2, #1
    ea66:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ea68:	0961      	lsrs	r1, r4, #5
    ea6a:	4b2a      	ldr	r3, [pc, #168]	; (eb14 <pm_system_resume+0xbc>)
    ea6c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ea70:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ea72:	f3bf 8f5b 	dmb	ish
    ea76:	e853 1f00 	ldrex	r1, [r3]
    ea7a:	ea01 0500 	and.w	r5, r1, r0
    ea7e:	e843 5600 	strex	r6, r5, [r3]
    ea82:	2e00      	cmp	r6, #0
    ea84:	d1f7      	bne.n	ea76 <pm_system_resume+0x1e>
    ea86:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    ea8a:	420a      	tst	r2, r1
    ea8c:	d03d      	beq.n	eb0a <pm_system_resume+0xb2>
		exit_pos_ops(z_power_states[id]);
    ea8e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    ea92:	009a      	lsls	r2, r3, #2
    ea94:	4b20      	ldr	r3, [pc, #128]	; (eb18 <pm_system_resume+0xc0>)
    ea96:	4413      	add	r3, r2
    ea98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    ea9c:	ab04      	add	r3, sp, #16
    ea9e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    eaa2:	4b1e      	ldr	r3, [pc, #120]	; (eb1c <pm_system_resume+0xc4>)
    eaa4:	b163      	cbz	r3, eac0 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
    eaa6:	f006 fa1a 	bl	14ede <pm_power_state_exit_post_ops>
    eaaa:	f04f 0340 	mov.w	r3, #64	; 0x40
    eaae:	f3ef 8611 	mrs	r6, BASEPRI
    eab2:	f383 8812 	msr	BASEPRI_MAX, r3
    eab6:	f3bf 8f6f 	isb	sy
    eaba:	4b19      	ldr	r3, [pc, #100]	; (eb20 <pm_system_resume+0xc8>)
    eabc:	681d      	ldr	r5, [r3, #0]
    eabe:	e00a      	b.n	ead6 <pm_system_resume+0x7e>
	__asm__ volatile(
    eac0:	2300      	movs	r3, #0
    eac2:	f383 8811 	msr	BASEPRI, r3
    eac6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    eaca:	e7ee      	b.n	eaaa <pm_system_resume+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    eacc:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    eace:	b10d      	cbz	r5, ead4 <pm_system_resume+0x7c>
	return node->next;
    ead0:	682b      	ldr	r3, [r5, #0]
    ead2:	b16b      	cbz	r3, eaf0 <pm_system_resume+0x98>
{
    ead4:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    ead6:	b15d      	cbz	r5, eaf0 <pm_system_resume+0x98>
			callback = notifier->state_exit;
    ead8:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    eada:	2a00      	cmp	r2, #0
    eadc:	d0f6      	beq.n	eacc <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
    eade:	4b0c      	ldr	r3, [pc, #48]	; (eb10 <pm_system_resume+0xb8>)
    eae0:	7d1b      	ldrb	r3, [r3, #20]
    eae2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    eae6:	0099      	lsls	r1, r3, #2
    eae8:	4b0b      	ldr	r3, [pc, #44]	; (eb18 <pm_system_resume+0xc0>)
    eaea:	5c58      	ldrb	r0, [r3, r1]
    eaec:	4790      	blx	r2
    eaee:	e7ed      	b.n	eacc <pm_system_resume+0x74>
	__asm__ volatile(
    eaf0:	f386 8811 	msr	BASEPRI, r6
    eaf4:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    eaf8:	4807      	ldr	r0, [pc, #28]	; (eb18 <pm_system_resume+0xc0>)
    eafa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    eafe:	00a2      	lsls	r2, r4, #2
    eb00:	1881      	adds	r1, r0, r2
    eb02:	2300      	movs	r3, #0
    eb04:	5083      	str	r3, [r0, r2]
    eb06:	604b      	str	r3, [r1, #4]
    eb08:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
    eb0a:	b004      	add	sp, #16
    eb0c:	bd70      	pop	{r4, r5, r6, pc}
    eb0e:	bf00      	nop
    eb10:	20001f4c 	.word	0x20001f4c
    eb14:	200017b8 	.word	0x200017b8
    eb18:	200017bc 	.word	0x200017bc
    eb1c:	00014edf 	.word	0x00014edf
    eb20:	200017b0 	.word	0x200017b0

0000eb24 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    eb24:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb26:	b089      	sub	sp, #36	; 0x24
    eb28:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    eb2a:	4b55      	ldr	r3, [pc, #340]	; (ec80 <pm_system_suspend+0x15c>)
    eb2c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    eb2e:	f004 031f 	and.w	r3, r4, #31
    eb32:	2201      	movs	r2, #1
    eb34:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    eb36:	0961      	lsrs	r1, r4, #5
    eb38:	4b52      	ldr	r3, [pc, #328]	; (ec84 <pm_system_suspend+0x160>)
    eb3a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    eb3e:	f3bf 8f5b 	dmb	ish
    eb42:	e853 1f00 	ldrex	r1, [r3]
    eb46:	ea41 0002 	orr.w	r0, r1, r2
    eb4a:	e843 0600 	strex	r6, r0, [r3]
    eb4e:	2e00      	cmp	r6, #0
    eb50:	d1f7      	bne.n	eb42 <pm_system_suspend+0x1e>
    eb52:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    eb56:	420a      	tst	r2, r1
    eb58:	d017      	beq.n	eb8a <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    eb5a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    eb5e:	4a4a      	ldr	r2, [pc, #296]	; (ec88 <pm_system_suspend+0x164>)
    eb60:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    eb64:	2b00      	cmp	r3, #0
    eb66:	f000 8088 	beq.w	ec7a <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    eb6a:	f1b5 3fff 	cmp.w	r5, #4294967295
    eb6e:	d11c      	bne.n	ebaa <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    eb70:	f004 fbea 	bl	13348 <k_sched_lock>
	__asm__ volatile(
    eb74:	f04f 0340 	mov.w	r3, #64	; 0x40
    eb78:	f3ef 8611 	mrs	r6, BASEPRI
    eb7c:	f383 8812 	msr	BASEPRI_MAX, r3
    eb80:	f3bf 8f6f 	isb	sy
	return list->head;
    eb84:	4b41      	ldr	r3, [pc, #260]	; (ec8c <pm_system_suspend+0x168>)
    eb86:	681d      	ldr	r5, [r3, #0]
    eb88:	e02a      	b.n	ebe0 <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    eb8a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    eb8e:	4b3e      	ldr	r3, [pc, #248]	; (ec88 <pm_system_suspend+0x164>)
    eb90:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    eb94:	466f      	mov	r7, sp
    eb96:	462a      	mov	r2, r5
    eb98:	4621      	mov	r1, r4
    eb9a:	4638      	mov	r0, r7
    eb9c:	f006 f844 	bl	14c28 <pm_policy_next_state>
    eba0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    eba4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    eba8:	e7d7      	b.n	eb5a <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    ebaa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    ebae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ebb2:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    ebb4:	0c59      	lsrs	r1, r3, #17
    ebb6:	03d8      	lsls	r0, r3, #15
    ebb8:	4e35      	ldr	r6, [pc, #212]	; (ec90 <pm_system_suspend+0x16c>)
    ebba:	4a36      	ldr	r2, [pc, #216]	; (ec94 <pm_system_suspend+0x170>)
    ebbc:	2300      	movs	r3, #0
    ebbe:	1980      	adds	r0, r0, r6
    ebc0:	f04f 0600 	mov.w	r6, #0
    ebc4:	eb46 0101 	adc.w	r1, r6, r1
    ebc8:	f7f1 fe7e 	bl	8c8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    ebcc:	2101      	movs	r1, #1
    ebce:	1a28      	subs	r0, r5, r0
    ebd0:	f007 ffa5 	bl	16b1e <z_set_timeout_expiry>
    ebd4:	e7cc      	b.n	eb70 <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    ebd6:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    ebd8:	b10d      	cbz	r5, ebde <pm_system_suspend+0xba>
	return node->next;
    ebda:	682b      	ldr	r3, [r5, #0]
    ebdc:	b16b      	cbz	r3, ebfa <pm_system_suspend+0xd6>
{
    ebde:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    ebe0:	b15d      	cbz	r5, ebfa <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
    ebe2:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    ebe4:	2a00      	cmp	r2, #0
    ebe6:	d0f6      	beq.n	ebd6 <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
    ebe8:	4b25      	ldr	r3, [pc, #148]	; (ec80 <pm_system_suspend+0x15c>)
    ebea:	7d1b      	ldrb	r3, [r3, #20]
    ebec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ebf0:	4925      	ldr	r1, [pc, #148]	; (ec88 <pm_system_suspend+0x164>)
    ebf2:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    ebf6:	4790      	blx	r2
    ebf8:	e7ed      	b.n	ebd6 <pm_system_suspend+0xb2>
	__asm__ volatile(
    ebfa:	f386 8811 	msr	BASEPRI, r6
    ebfe:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    ec02:	f004 031f 	and.w	r3, r4, #31
    ec06:	2101      	movs	r1, #1
    ec08:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ec0a:	0963      	lsrs	r3, r4, #5
    ec0c:	4a22      	ldr	r2, [pc, #136]	; (ec98 <pm_system_suspend+0x174>)
    ec0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ec12:	f3bf 8f5b 	dmb	ish
    ec16:	e853 2f00 	ldrex	r2, [r3]
    ec1a:	430a      	orrs	r2, r1
    ec1c:	e843 2000 	strex	r0, r2, [r3]
    ec20:	2800      	cmp	r0, #0
    ec22:	d1f8      	bne.n	ec16 <pm_system_suspend+0xf2>
    ec24:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    ec28:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    ec2c:	4a16      	ldr	r2, [pc, #88]	; (ec88 <pm_system_suspend+0x164>)
    ec2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ec32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    ec36:	ab08      	add	r3, sp, #32
    ec38:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    ec3c:	4b17      	ldr	r3, [pc, #92]	; (ec9c <pm_system_suspend+0x178>)
    ec3e:	b10b      	cbz	r3, ec44 <pm_system_suspend+0x120>
		pm_power_state_set(info);
    ec40:	f006 f93a 	bl	14eb8 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    ec44:	f7ff ff08 	bl	ea58 <pm_system_resume>
	k_sched_unlock();
    ec48:	f004 fd7c 	bl	13744 <k_sched_unlock>
	bool ret = true;
    ec4c:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    ec4e:	f004 021f 	and.w	r2, r4, #31
    ec52:	2301      	movs	r3, #1
    ec54:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ec56:	0964      	lsrs	r4, r4, #5
    ec58:	4a0a      	ldr	r2, [pc, #40]	; (ec84 <pm_system_suspend+0x160>)
    ec5a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    ec5e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ec60:	f3bf 8f5b 	dmb	ish
    ec64:	e854 2f00 	ldrex	r2, [r4]
    ec68:	401a      	ands	r2, r3
    ec6a:	e844 2100 	strex	r1, r2, [r4]
    ec6e:	2900      	cmp	r1, #0
    ec70:	d1f8      	bne.n	ec64 <pm_system_suspend+0x140>
    ec72:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    ec76:	b009      	add	sp, #36	; 0x24
    ec78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    ec7a:	2000      	movs	r0, #0
    ec7c:	e7e7      	b.n	ec4e <pm_system_suspend+0x12a>
    ec7e:	bf00      	nop
    ec80:	20001f4c 	.word	0x20001f4c
    ec84:	200017c8 	.word	0x200017c8
    ec88:	200017bc 	.word	0x200017bc
    ec8c:	200017b0 	.word	0x200017b0
    ec90:	000f423f 	.word	0x000f423f
    ec94:	000f4240 	.word	0x000f4240
    ec98:	200017b8 	.word	0x200017b8
    ec9c:	00014eb9 	.word	0x00014eb9

0000eca0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    eca0:	4901      	ldr	r1, [pc, #4]	; (eca8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    eca2:	2210      	movs	r2, #16
	str	r2, [r1]
    eca4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    eca6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    eca8:	e000ed10 	.word	0xe000ed10

0000ecac <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    ecac:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    ecae:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    ecb0:	f380 8811 	msr	BASEPRI, r0
	isb
    ecb4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    ecb8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    ecbc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    ecbe:	b662      	cpsie	i
	isb
    ecc0:	f3bf 8f6f 	isb	sy

	bx	lr
    ecc4:	4770      	bx	lr
    ecc6:	bf00      	nop

0000ecc8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    ecc8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    ecca:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    eccc:	f381 8811 	msr	BASEPRI, r1

	wfe
    ecd0:	bf20      	wfe

	msr	BASEPRI, r0
    ecd2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    ecd6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    ecd8:	4770      	bx	lr
    ecda:	bf00      	nop

0000ecdc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    ecdc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    ecde:	2b00      	cmp	r3, #0
    ece0:	db08      	blt.n	ecf4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ece2:	f000 001f 	and.w	r0, r0, #31
    ece6:	095b      	lsrs	r3, r3, #5
    ece8:	2201      	movs	r2, #1
    ecea:	fa02 f000 	lsl.w	r0, r2, r0
    ecee:	4a02      	ldr	r2, [pc, #8]	; (ecf8 <arch_irq_enable+0x1c>)
    ecf0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    ecf4:	4770      	bx	lr
    ecf6:	bf00      	nop
    ecf8:	e000e100 	.word	0xe000e100

0000ecfc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    ecfc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    ecfe:	2b00      	cmp	r3, #0
    ed00:	db0d      	blt.n	ed1e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ed02:	f000 001f 	and.w	r0, r0, #31
    ed06:	095b      	lsrs	r3, r3, #5
    ed08:	2201      	movs	r2, #1
    ed0a:	fa02 f000 	lsl.w	r0, r2, r0
    ed0e:	3320      	adds	r3, #32
    ed10:	4a03      	ldr	r2, [pc, #12]	; (ed20 <arch_irq_disable+0x24>)
    ed12:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    ed16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ed1a:	f3bf 8f6f 	isb	sy
}
    ed1e:	4770      	bx	lr
    ed20:	e000e100 	.word	0xe000e100

0000ed24 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    ed24:	0942      	lsrs	r2, r0, #5
    ed26:	4b05      	ldr	r3, [pc, #20]	; (ed3c <arch_irq_is_enabled+0x18>)
    ed28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    ed2c:	f000 001f 	and.w	r0, r0, #31
    ed30:	2301      	movs	r3, #1
    ed32:	fa03 f000 	lsl.w	r0, r3, r0
}
    ed36:	4010      	ands	r0, r2
    ed38:	4770      	bx	lr
    ed3a:	bf00      	nop
    ed3c:	e000e100 	.word	0xe000e100

0000ed40 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    ed40:	f012 0f01 	tst.w	r2, #1
    ed44:	d10c      	bne.n	ed60 <z_arm_irq_priority_set+0x20>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    ed46:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    ed48:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    ed4a:	2b00      	cmp	r3, #0
    ed4c:	db0a      	blt.n	ed64 <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ed4e:	0149      	lsls	r1, r1, #5
    ed50:	b2c9      	uxtb	r1, r1
    ed52:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    ed56:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    ed5a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    ed5e:	4770      	bx	lr
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    ed60:	2100      	movs	r1, #0
    ed62:	e7f1      	b.n	ed48 <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ed64:	f000 000f 	and.w	r0, r0, #15
    ed68:	0149      	lsls	r1, r1, #5
    ed6a:	b2c9      	uxtb	r1, r1
    ed6c:	4b01      	ldr	r3, [pc, #4]	; (ed74 <z_arm_irq_priority_set+0x34>)
    ed6e:	5419      	strb	r1, [r3, r0]
}
    ed70:	4770      	bx	lr
    ed72:	bf00      	nop
    ed74:	e000ed14 	.word	0xe000ed14

0000ed78 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    ed78:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    ed7a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    ed7c:	4b05      	ldr	r3, [pc, #20]	; (ed94 <_arch_isr_direct_pm+0x1c>)
    ed7e:	699b      	ldr	r3, [r3, #24]
    ed80:	b90b      	cbnz	r3, ed86 <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    ed82:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    ed84:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
    ed86:	4b03      	ldr	r3, [pc, #12]	; (ed94 <_arch_isr_direct_pm+0x1c>)
    ed88:	2200      	movs	r2, #0
    ed8a:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    ed8c:	f007 fbfd 	bl	1658a <z_pm_save_idle_exit>
    ed90:	e7f7      	b.n	ed82 <_arch_isr_direct_pm+0xa>
    ed92:	bf00      	nop
    ed94:	20001f4c 	.word	0x20001f4c

0000ed98 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    ed98:	bf30      	wfi
    b z_SysNmiOnReset
    ed9a:	f7ff bffd 	b.w	ed98 <z_SysNmiOnReset>
    ed9e:	bf00      	nop

0000eda0 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    eda0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    eda2:	4b0b      	ldr	r3, [pc, #44]	; (edd0 <z_arm_prep_c+0x30>)
    eda4:	4a0b      	ldr	r2, [pc, #44]	; (edd4 <z_arm_prep_c+0x34>)
    eda6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    edaa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    edac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    edb0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    edb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    edb8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    edbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    edc0:	f003 fe12 	bl	129e8 <z_bss_zero>
	z_data_copy();
    edc4:	f004 fe4e 	bl	13a64 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    edc8:	f000 fa12 	bl	f1f0 <z_arm_interrupt_init>
	z_cstart();
    edcc:	f003 fe18 	bl	12a00 <z_cstart>
    edd0:	e000ed00 	.word	0xe000ed00
    edd4:	00000000 	.word	0x00000000

0000edd8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    edd8:	4a0a      	ldr	r2, [pc, #40]	; (ee04 <arch_swap+0x2c>)
    edda:	6893      	ldr	r3, [r2, #8]
    eddc:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
    ede0:	4909      	ldr	r1, [pc, #36]	; (ee08 <arch_swap+0x30>)
    ede2:	6809      	ldr	r1, [r1, #0]
    ede4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ede8:	4908      	ldr	r1, [pc, #32]	; (ee0c <arch_swap+0x34>)
    edea:	684b      	ldr	r3, [r1, #4]
    edec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    edf0:	604b      	str	r3, [r1, #4]
    edf2:	2300      	movs	r3, #0
    edf4:	f383 8811 	msr	BASEPRI, r3
    edf8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    edfc:	6893      	ldr	r3, [r2, #8]
}
    edfe:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    ee02:	4770      	bx	lr
    ee04:	20001f4c 	.word	0x20001f4c
    ee08:	000173c8 	.word	0x000173c8
    ee0c:	e000ed00 	.word	0xe000ed00

0000ee10 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ee10:	4913      	ldr	r1, [pc, #76]	; (ee60 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ee12:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ee14:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    ee18:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    ee1a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ee1e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ee22:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    ee24:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ee28:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ee2c:	4f0d      	ldr	r7, [pc, #52]	; (ee64 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    ee2e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    ee32:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    ee34:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ee36:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ee38:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    ee3c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ee3e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ee42:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    ee46:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    ee48:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    ee4a:	f000 fa73 	bl	f334 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    ee4e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    ee52:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    ee56:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    ee5a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    ee5e:	4770      	bx	lr
    ldr r1, =_kernel
    ee60:	20001f4c 	.word	0x20001f4c
    ldr v4, =_SCS_ICSR
    ee64:	e000ed04 	.word	0xe000ed04

0000ee68 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    ee68:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    ee6c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    ee6e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    ee72:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    ee76:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    ee78:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    ee7c:	2902      	cmp	r1, #2
    beq _oops
    ee7e:	d0ff      	beq.n	ee80 <_oops>

0000ee80 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    ee80:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    ee82:	f005 feda 	bl	14c3a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    ee86:	bd01      	pop	{r0, pc}

0000ee88 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    ee88:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    ee8a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    ee8e:	490d      	ldr	r1, [pc, #52]	; (eec4 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    ee90:	f021 0101 	bic.w	r1, r1, #1
    ee94:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    ee98:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    ee9c:	9b01      	ldr	r3, [sp, #4]
    ee9e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    eea2:	9b02      	ldr	r3, [sp, #8]
    eea4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    eea8:	9b03      	ldr	r3, [sp, #12]
    eeaa:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    eeae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    eeb2:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    eeb6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    eeb8:	2300      	movs	r3, #0
    eeba:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    eebe:	bc10      	pop	{r4}
    eec0:	4770      	bx	lr
    eec2:	bf00      	nop
    eec4:	00014713 	.word	0x00014713

0000eec8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    eec8:	4b16      	ldr	r3, [pc, #88]	; (ef24 <z_check_thread_stack_fail+0x5c>)
    eeca:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    eecc:	b1da      	cbz	r2, ef06 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    eece:	f110 0f16 	cmn.w	r0, #22
    eed2:	d01a      	beq.n	ef0a <z_check_thread_stack_fail+0x42>
{
    eed4:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    eed6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    eeda:	f1a3 0420 	sub.w	r4, r3, #32
    eede:	4284      	cmp	r4, r0
    eee0:	d805      	bhi.n	eeee <z_check_thread_stack_fail+0x26>
    eee2:	4283      	cmp	r3, r0
    eee4:	d908      	bls.n	eef8 <z_check_thread_stack_fail+0x30>
    eee6:	428b      	cmp	r3, r1
    eee8:	d808      	bhi.n	eefc <z_check_thread_stack_fail+0x34>
    eeea:	2100      	movs	r1, #0
    eeec:	e000      	b.n	eef0 <z_check_thread_stack_fail+0x28>
    eeee:	2100      	movs	r1, #0
    eef0:	b931      	cbnz	r1, ef00 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    eef2:	2000      	movs	r0, #0
}
    eef4:	bc10      	pop	{r4}
    eef6:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    eef8:	2100      	movs	r1, #0
    eefa:	e7f9      	b.n	eef0 <z_check_thread_stack_fail+0x28>
    eefc:	2101      	movs	r1, #1
    eefe:	e7f7      	b.n	eef0 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    ef00:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    ef04:	e7f6      	b.n	eef4 <z_check_thread_stack_fail+0x2c>
		return 0;
    ef06:	2000      	movs	r0, #0
    ef08:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    ef0a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    ef0e:	428b      	cmp	r3, r1
    ef10:	bf94      	ite	ls
    ef12:	2100      	movls	r1, #0
    ef14:	2101      	movhi	r1, #1
    ef16:	b909      	cbnz	r1, ef1c <z_check_thread_stack_fail+0x54>
	return 0;
    ef18:	2000      	movs	r0, #0
}
    ef1a:	4770      	bx	lr
		return thread->stack_info.start;
    ef1c:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    ef20:	4770      	bx	lr
    ef22:	bf00      	nop
    ef24:	20001f4c 	.word	0x20001f4c

0000ef28 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    ef28:	b508      	push	{r3, lr}
    ef2a:	460d      	mov	r5, r1
    ef2c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    ef2e:	4b08      	ldr	r3, [pc, #32]	; (ef50 <arch_switch_to_main_thread+0x28>)
    ef30:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    ef32:	f000 f9ff 	bl	f334 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    ef36:	4620      	mov	r0, r4
    ef38:	f385 8809 	msr	PSP, r5
    ef3c:	2100      	movs	r1, #0
    ef3e:	b663      	cpsie	if
    ef40:	f381 8811 	msr	BASEPRI, r1
    ef44:	f3bf 8f6f 	isb	sy
    ef48:	2200      	movs	r2, #0
    ef4a:	2300      	movs	r3, #0
    ef4c:	f005 fbe1 	bl	14712 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    ef50:	20001f4c 	.word	0x20001f4c

0000ef54 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    ef54:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    ef56:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    ef58:	4a0b      	ldr	r2, [pc, #44]	; (ef88 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    ef5a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    ef5c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    ef5e:	bf1e      	ittt	ne
	movne	r1, #0
    ef60:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    ef62:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    ef64:	f007 fb11 	blne	1658a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    ef68:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    ef6a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    ef6e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    ef72:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    ef76:	4905      	ldr	r1, [pc, #20]	; (ef8c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    ef78:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    ef7a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    ef7c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    ef7e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    ef82:	4903      	ldr	r1, [pc, #12]	; (ef90 <_isr_wrapper+0x3c>)
	bx r1
    ef84:	4708      	bx	r1
    ef86:	0000      	.short	0x0000
	ldr r2, =_kernel
    ef88:	20001f4c 	.word	0x20001f4c
	ldr r1, =_sw_isr_table
    ef8c:	00016e08 	.word	0x00016e08
	ldr r1, =z_arm_int_exit
    ef90:	0000ef95 	.word	0x0000ef95

0000ef94 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    ef94:	4b04      	ldr	r3, [pc, #16]	; (efa8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    ef96:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    ef98:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    ef9a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    ef9c:	d003      	beq.n	efa6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    ef9e:	4903      	ldr	r1, [pc, #12]	; (efac <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    efa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    efa4:	600a      	str	r2, [r1, #0]

0000efa6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    efa6:	4770      	bx	lr
	ldr r3, =_kernel
    efa8:	20001f4c 	.word	0x20001f4c
	ldr r1, =_SCS_ICSR
    efac:	e000ed04 	.word	0xe000ed04

0000efb0 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    efb0:	b510      	push	{r4, lr}
    efb2:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    efb4:	4b12      	ldr	r3, [pc, #72]	; (f000 <bus_fault+0x50>)
    efb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    efb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    efba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    efbc:	f413 7f00 	tst.w	r3, #512	; 0x200
    efc0:	d00b      	beq.n	efda <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    efc2:	4b0f      	ldr	r3, [pc, #60]	; (f000 <bus_fault+0x50>)
    efc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    efc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    efc8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    efcc:	d005      	beq.n	efda <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    efce:	b121      	cbz	r1, efda <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    efd0:	4a0b      	ldr	r2, [pc, #44]	; (f000 <bus_fault+0x50>)
    efd2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    efd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    efd8:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    efda:	4b09      	ldr	r3, [pc, #36]	; (f000 <bus_fault+0x50>)
    efdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    efde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    efe0:	f413 7f80 	tst.w	r3, #256	; 0x100
    efe4:	d101      	bne.n	efea <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    efe6:	4b06      	ldr	r3, [pc, #24]	; (f000 <bus_fault+0x50>)
    efe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    efea:	4a05      	ldr	r2, [pc, #20]	; (f000 <bus_fault+0x50>)
    efec:	6a93      	ldr	r3, [r2, #40]	; 0x28
    efee:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    eff2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    eff4:	2101      	movs	r1, #1
    eff6:	f005 fe32 	bl	14c5e <memory_fault_recoverable>
    effa:	7020      	strb	r0, [r4, #0]

	return reason;
}
    effc:	2000      	movs	r0, #0
    effe:	bd10      	pop	{r4, pc}
    f000:	e000ed00 	.word	0xe000ed00

0000f004 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f004:	4b07      	ldr	r3, [pc, #28]	; (f024 <usage_fault+0x20>)
    f006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    f008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    f00a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    f00c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    f00e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    f010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f014:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    f018:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    f01c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    f01e:	2000      	movs	r0, #0
    f020:	4770      	bx	lr
    f022:	bf00      	nop
    f024:	e000ed00 	.word	0xe000ed00

0000f028 <mem_manage_fault>:
{
    f028:	b570      	push	{r4, r5, r6, lr}
    f02a:	4605      	mov	r5, r0
    f02c:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    f02e:	4b20      	ldr	r3, [pc, #128]	; (f0b0 <mem_manage_fault+0x88>)
    f030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    f032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    f034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f036:	f013 0f02 	tst.w	r3, #2
    f03a:	d00c      	beq.n	f056 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    f03c:	4b1c      	ldr	r3, [pc, #112]	; (f0b0 <mem_manage_fault+0x88>)
    f03e:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    f040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f042:	f013 0f80 	tst.w	r3, #128	; 0x80
    f046:	d025      	beq.n	f094 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
    f048:	b139      	cbz	r1, f05a <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    f04a:	4a19      	ldr	r2, [pc, #100]	; (f0b0 <mem_manage_fault+0x88>)
    f04c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f04e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f052:	6293      	str	r3, [r2, #40]	; 0x28
    f054:	e001      	b.n	f05a <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    f056:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    f05a:	4b15      	ldr	r3, [pc, #84]	; (f0b0 <mem_manage_fault+0x88>)
    f05c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    f05e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    f060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f062:	f013 0f10 	tst.w	r3, #16
    f066:	d104      	bne.n	f072 <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    f068:	4b11      	ldr	r3, [pc, #68]	; (f0b0 <mem_manage_fault+0x88>)
    f06a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    f06c:	f014 0402 	ands.w	r4, r4, #2
    f070:	d004      	beq.n	f07c <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    f072:	4b0f      	ldr	r3, [pc, #60]	; (f0b0 <mem_manage_fault+0x88>)
    f074:	685c      	ldr	r4, [r3, #4]
    f076:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    f07a:	d10e      	bne.n	f09a <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    f07c:	4a0c      	ldr	r2, [pc, #48]	; (f0b0 <mem_manage_fault+0x88>)
    f07e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f080:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    f084:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    f086:	2101      	movs	r1, #1
    f088:	4628      	mov	r0, r5
    f08a:	f005 fde8 	bl	14c5e <memory_fault_recoverable>
    f08e:	7030      	strb	r0, [r6, #0]
}
    f090:	4620      	mov	r0, r4
    f092:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    f094:	f06f 0015 	mvn.w	r0, #21
    f098:	e7df      	b.n	f05a <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    f09a:	4629      	mov	r1, r5
    f09c:	f7ff ff14 	bl	eec8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    f0a0:	4604      	mov	r4, r0
    f0a2:	2800      	cmp	r0, #0
    f0a4:	d0ea      	beq.n	f07c <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    f0a6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    f0aa:	2402      	movs	r4, #2
    f0ac:	e7e6      	b.n	f07c <mem_manage_fault+0x54>
    f0ae:	bf00      	nop
    f0b0:	e000ed00 	.word	0xe000ed00

0000f0b4 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    f0b4:	b510      	push	{r4, lr}
    f0b6:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    f0b8:	2300      	movs	r3, #0
    f0ba:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    f0bc:	4b1b      	ldr	r3, [pc, #108]	; (f12c <hard_fault+0x78>)
    f0be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    f0c0:	f010 0002 	ands.w	r0, r0, #2
    f0c4:	d12d      	bne.n	f122 <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    f0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f0c8:	2b00      	cmp	r3, #0
    f0ca:	db2b      	blt.n	f124 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    f0cc:	4b17      	ldr	r3, [pc, #92]	; (f12c <hard_fault+0x78>)
    f0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f0d0:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    f0d4:	d027      	beq.n	f126 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    f0d6:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    f0d8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    f0dc:	f64d 7302 	movw	r3, #57090	; 0xdf02
    f0e0:	429a      	cmp	r2, r3
    f0e2:	d010      	beq.n	f106 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    f0e4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    f0e8:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    f0ec:	781b      	ldrb	r3, [r3, #0]
    f0ee:	b963      	cbnz	r3, f10a <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    f0f0:	4b0f      	ldr	r3, [pc, #60]	; (f130 <hard_fault+0x7c>)
    f0f2:	781b      	ldrb	r3, [r3, #0]
    f0f4:	b97b      	cbnz	r3, f116 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    f0f6:	4b0f      	ldr	r3, [pc, #60]	; (f134 <hard_fault+0x80>)
    f0f8:	881b      	ldrh	r3, [r3, #0]
    f0fa:	b29b      	uxth	r3, r3
    f0fc:	b193      	cbz	r3, f124 <hard_fault+0x70>
			reason = usage_fault(esf);
    f0fe:	4620      	mov	r0, r4
    f100:	f7ff ff80 	bl	f004 <usage_fault>
    f104:	e00e      	b.n	f124 <hard_fault+0x70>
			reason = esf->basic.r0;
    f106:	6820      	ldr	r0, [r4, #0]
    f108:	e00c      	b.n	f124 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    f10a:	460a      	mov	r2, r1
    f10c:	2101      	movs	r1, #1
    f10e:	4620      	mov	r0, r4
    f110:	f7ff ff8a 	bl	f028 <mem_manage_fault>
    f114:	e006      	b.n	f124 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    f116:	460a      	mov	r2, r1
    f118:	2101      	movs	r1, #1
    f11a:	4620      	mov	r0, r4
    f11c:	f7ff ff48 	bl	efb0 <bus_fault>
    f120:	e000      	b.n	f124 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f122:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    f124:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f126:	4618      	mov	r0, r3
	return reason;
    f128:	e7fc      	b.n	f124 <hard_fault+0x70>
    f12a:	bf00      	nop
    f12c:	e000ed00 	.word	0xe000ed00
    f130:	e000ed29 	.word	0xe000ed29
    f134:	e000ed2a 	.word	0xe000ed2a

0000f138 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    f138:	b570      	push	{r4, r5, r6, lr}
    f13a:	b08a      	sub	sp, #40	; 0x28
    f13c:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f13e:	4b22      	ldr	r3, [pc, #136]	; (f1c8 <z_arm_fault+0x90>)
    f140:	6859      	ldr	r1, [r3, #4]
    f142:	f3c1 0108 	ubfx	r1, r1, #0, #9
    f146:	2300      	movs	r3, #0
    f148:	f383 8811 	msr	BASEPRI, r3
    f14c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    f150:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    f154:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    f158:	d115      	bne.n	f186 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    f15a:	f002 030c 	and.w	r3, r2, #12
    f15e:	2b08      	cmp	r3, #8
    f160:	d014      	beq.n	f18c <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    f162:	f012 0f08 	tst.w	r2, #8
    f166:	d00b      	beq.n	f180 <z_arm_fault+0x48>
	*nested_exc = false;
    f168:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    f16a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    f16e:	4620      	mov	r0, r4
    f170:	f005 fd7a 	bl	14c68 <fault_handle>
    f174:	4605      	mov	r5, r0
	if (recoverable) {
    f176:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    f17a:	b153      	cbz	r3, f192 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    f17c:	b00a      	add	sp, #40	; 0x28
    f17e:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    f180:	4604      	mov	r4, r0
			*nested_exc = true;
    f182:	2601      	movs	r6, #1
    f184:	e7f1      	b.n	f16a <z_arm_fault+0x32>
	*nested_exc = false;
    f186:	2600      	movs	r6, #0
		return NULL;
    f188:	4634      	mov	r4, r6
    f18a:	e7ee      	b.n	f16a <z_arm_fault+0x32>
	*nested_exc = false;
    f18c:	2600      	movs	r6, #0
		return NULL;
    f18e:	4634      	mov	r4, r6
    f190:	e7eb      	b.n	f16a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    f192:	2220      	movs	r2, #32
    f194:	4621      	mov	r1, r4
    f196:	a801      	add	r0, sp, #4
    f198:	f005 fe4a 	bl	14e30 <memcpy>
	if (nested_exc) {
    f19c:	b14e      	cbz	r6, f1b2 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    f19e:	9b08      	ldr	r3, [sp, #32]
    f1a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    f1a4:	b95a      	cbnz	r2, f1be <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    f1a6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    f1aa:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    f1ae:	9308      	str	r3, [sp, #32]
    f1b0:	e005      	b.n	f1be <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    f1b2:	9b08      	ldr	r3, [sp, #32]
    f1b4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    f1b8:	f023 0301 	bic.w	r3, r3, #1
    f1bc:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    f1be:	a901      	add	r1, sp, #4
    f1c0:	4628      	mov	r0, r5
    f1c2:	f005 fd36 	bl	14c32 <z_arm_fatal_error>
    f1c6:	e7d9      	b.n	f17c <z_arm_fault+0x44>
    f1c8:	e000ed00 	.word	0xe000ed00

0000f1cc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    f1cc:	4a02      	ldr	r2, [pc, #8]	; (f1d8 <z_arm_fault_init+0xc>)
    f1ce:	6953      	ldr	r3, [r2, #20]
    f1d0:	f043 0310 	orr.w	r3, r3, #16
    f1d4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    f1d6:	4770      	bx	lr
    f1d8:	e000ed00 	.word	0xe000ed00

0000f1dc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    f1dc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    f1e0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    f1e4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    f1e6:	4672      	mov	r2, lr
	bl z_arm_fault
    f1e8:	f7ff ffa6 	bl	f138 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    f1ec:	bd01      	pop	{r0, pc}
    f1ee:	bf00      	nop

0000f1f0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    f1f0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    f1f2:	e006      	b.n	f202 <z_arm_interrupt_init+0x12>
    f1f4:	f002 010f 	and.w	r1, r2, #15
    f1f8:	4b09      	ldr	r3, [pc, #36]	; (f220 <z_arm_interrupt_init+0x30>)
    f1fa:	440b      	add	r3, r1
    f1fc:	2140      	movs	r1, #64	; 0x40
    f1fe:	7619      	strb	r1, [r3, #24]
    f200:	3201      	adds	r2, #1
    f202:	2a26      	cmp	r2, #38	; 0x26
    f204:	dc0a      	bgt.n	f21c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    f206:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    f208:	2b00      	cmp	r3, #0
    f20a:	dbf3      	blt.n	f1f4 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f20c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    f210:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    f214:	2140      	movs	r1, #64	; 0x40
    f216:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    f21a:	e7f1      	b.n	f200 <z_arm_interrupt_init+0x10>
	}
}
    f21c:	4770      	bx	lr
    f21e:	bf00      	nop
    f220:	e000ecfc 	.word	0xe000ecfc

0000f224 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    f224:	2000      	movs	r0, #0
    msr CONTROL, r0
    f226:	f380 8814 	msr	CONTROL, r0
    isb
    f22a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    f22e:	f007 fd81 	bl	16d34 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    f232:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    f234:	490d      	ldr	r1, [pc, #52]	; (f26c <__start+0x48>)
    str r0, [r1]
    f236:	6008      	str	r0, [r1, #0]
    dsb
    f238:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    f23c:	480c      	ldr	r0, [pc, #48]	; (f270 <__start+0x4c>)
    msr msp, r0
    f23e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    f242:	f000 f829 	bl	f298 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f246:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    f248:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    f24c:	4809      	ldr	r0, [pc, #36]	; (f274 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    f24e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    f252:	1840      	adds	r0, r0, r1
    msr PSP, r0
    f254:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    f258:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    f25c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    f25e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    f260:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    f264:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    f268:	f7ff fd9a 	bl	eda0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    f26c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    f270:	20003620 	.word	0x20003620
    ldr r0, =z_interrupt_stacks
    f274:	200037a0 	.word	0x200037a0

0000f278 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    f278:	4b06      	ldr	r3, [pc, #24]	; (f294 <z_arm_clear_arm_mpu_config+0x1c>)
    f27a:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    f27c:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    f280:	2300      	movs	r3, #0
    f282:	4283      	cmp	r3, r0
    f284:	da05      	bge.n	f292 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    f286:	4a03      	ldr	r2, [pc, #12]	; (f294 <z_arm_clear_arm_mpu_config+0x1c>)
    f288:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    f28a:	2100      	movs	r1, #0
    f28c:	6111      	str	r1, [r2, #16]
    f28e:	3301      	adds	r3, #1
    f290:	e7f7      	b.n	f282 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    f292:	4770      	bx	lr
    f294:	e000ed90 	.word	0xe000ed90

0000f298 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    f298:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    f29a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    f29c:	2400      	movs	r4, #0
    f29e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    f2a2:	f7ff ffe9 	bl	f278 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    f2a6:	4623      	mov	r3, r4
    f2a8:	e008      	b.n	f2bc <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    f2aa:	f103 0120 	add.w	r1, r3, #32
    f2ae:	4a0e      	ldr	r2, [pc, #56]	; (f2e8 <z_arm_init_arch_hw_at_boot+0x50>)
    f2b0:	f04f 30ff 	mov.w	r0, #4294967295
    f2b4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    f2b8:	3301      	adds	r3, #1
    f2ba:	b2db      	uxtb	r3, r3
    f2bc:	2b07      	cmp	r3, #7
    f2be:	d9f4      	bls.n	f2aa <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    f2c0:	2300      	movs	r3, #0
    f2c2:	e008      	b.n	f2d6 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    f2c4:	f103 0160 	add.w	r1, r3, #96	; 0x60
    f2c8:	4a07      	ldr	r2, [pc, #28]	; (f2e8 <z_arm_init_arch_hw_at_boot+0x50>)
    f2ca:	f04f 30ff 	mov.w	r0, #4294967295
    f2ce:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    f2d2:	3301      	adds	r3, #1
    f2d4:	b2db      	uxtb	r3, r3
    f2d6:	2b07      	cmp	r3, #7
    f2d8:	d9f4      	bls.n	f2c4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    f2da:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    f2dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f2e0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    f2e4:	bd10      	pop	{r4, pc}
    f2e6:	bf00      	nop
    f2e8:	e000e100 	.word	0xe000e100

0000f2ec <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    f2ec:	b508      	push	{r3, lr}
	if (_current == thread) {
    f2ee:	4b08      	ldr	r3, [pc, #32]	; (f310 <z_impl_k_thread_abort+0x24>)
    f2f0:	689b      	ldr	r3, [r3, #8]
    f2f2:	4283      	cmp	r3, r0
    f2f4:	d002      	beq.n	f2fc <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    f2f6:	f004 fb7b 	bl	139f0 <z_thread_abort>
}
    f2fa:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f2fc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    f300:	2b00      	cmp	r3, #0
    f302:	d0f8      	beq.n	f2f6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f304:	4a03      	ldr	r2, [pc, #12]	; (f314 <z_impl_k_thread_abort+0x28>)
    f306:	6853      	ldr	r3, [r2, #4]
    f308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f30c:	6053      	str	r3, [r2, #4]
    f30e:	e7f2      	b.n	f2f6 <z_impl_k_thread_abort+0xa>
    f310:	20001f4c 	.word	0x20001f4c
    f314:	e000ed00 	.word	0xe000ed00

0000f318 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    f318:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    f31a:	4b03      	ldr	r3, [pc, #12]	; (f328 <z_arm_configure_static_mpu_regions+0x10>)
    f31c:	4a03      	ldr	r2, [pc, #12]	; (f32c <z_arm_configure_static_mpu_regions+0x14>)
    f31e:	2101      	movs	r1, #1
    f320:	4803      	ldr	r0, [pc, #12]	; (f330 <z_arm_configure_static_mpu_regions+0x18>)
    f322:	f005 fd27 	bl	14d74 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    f326:	bd08      	pop	{r3, pc}
    f328:	20010000 	.word	0x20010000
    f32c:	20000000 	.word	0x20000000
    f330:	000170f8 	.word	0x000170f8

0000f334 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    f334:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    f336:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    f33a:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    f33c:	4804      	ldr	r0, [pc, #16]	; (f350 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    f33e:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    f340:	2320      	movs	r3, #32
    f342:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    f344:	4b03      	ldr	r3, [pc, #12]	; (f354 <z_arm_configure_dynamic_mpu_regions+0x20>)
    f346:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    f348:	2101      	movs	r1, #1
    f34a:	f005 fd17 	bl	14d7c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    f34e:	bd08      	pop	{r3, pc}
    f350:	200017cc 	.word	0x200017cc
    f354:	150b0000 	.word	0x150b0000

0000f358 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    f358:	4a06      	ldr	r2, [pc, #24]	; (f374 <region_init+0x1c>)
    f35a:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    f35c:	680b      	ldr	r3, [r1, #0]
    f35e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    f362:	4303      	orrs	r3, r0
    f364:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    f368:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    f36a:	688b      	ldr	r3, [r1, #8]
    f36c:	f043 0301 	orr.w	r3, r3, #1
    f370:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    f372:	4770      	bx	lr
    f374:	e000ed90 	.word	0xe000ed90

0000f378 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    f378:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    f37a:	4c03      	ldr	r4, [pc, #12]	; (f388 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    f37c:	2301      	movs	r3, #1
    f37e:	7822      	ldrb	r2, [r4, #0]
    f380:	f005 fcd0 	bl	14d24 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    f384:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    f386:	bd10      	pop	{r4, pc}
    f388:	20001f90 	.word	0x20001f90

0000f38c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    f38c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    f38e:	2300      	movs	r3, #0
    f390:	4a08      	ldr	r2, [pc, #32]	; (f3b4 <mpu_configure_dynamic_mpu_regions+0x28>)
    f392:	7812      	ldrb	r2, [r2, #0]
    f394:	f005 fcc6 	bl	14d24 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    f398:	f110 0f16 	cmn.w	r0, #22
    f39c:	d008      	beq.n	f3b0 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    f39e:	4603      	mov	r3, r0
    f3a0:	2b07      	cmp	r3, #7
    f3a2:	dc05      	bgt.n	f3b0 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    f3a4:	4a04      	ldr	r2, [pc, #16]	; (f3b8 <mpu_configure_dynamic_mpu_regions+0x2c>)
    f3a6:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    f3a8:	2100      	movs	r1, #0
    f3aa:	6111      	str	r1, [r2, #16]
    f3ac:	3301      	adds	r3, #1
    f3ae:	e7f7      	b.n	f3a0 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    f3b0:	bd08      	pop	{r3, pc}
    f3b2:	bf00      	nop
    f3b4:	20001f90 	.word	0x20001f90
    f3b8:	e000ed90 	.word	0xe000ed90

0000f3bc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    f3bc:	4b03      	ldr	r3, [pc, #12]	; (f3cc <arm_core_mpu_enable+0x10>)
    f3be:	2205      	movs	r2, #5
    f3c0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    f3c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f3c6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    f3ca:	4770      	bx	lr
    f3cc:	e000ed90 	.word	0xe000ed90

0000f3d0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    f3d0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    f3d4:	4b01      	ldr	r3, [pc, #4]	; (f3dc <arm_core_mpu_disable+0xc>)
    f3d6:	2200      	movs	r2, #0
    f3d8:	605a      	str	r2, [r3, #4]
}
    f3da:	4770      	bx	lr
    f3dc:	e000ed90 	.word	0xe000ed90

0000f3e0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    f3e0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    f3e2:	4b0e      	ldr	r3, [pc, #56]	; (f41c <z_arm_mpu_init+0x3c>)
    f3e4:	681d      	ldr	r5, [r3, #0]
    f3e6:	2d08      	cmp	r5, #8
    f3e8:	d815      	bhi.n	f416 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    f3ea:	f7ff fff1 	bl	f3d0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    f3ee:	2400      	movs	r4, #0
    f3f0:	42a5      	cmp	r5, r4
    f3f2:	d90a      	bls.n	f40a <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    f3f4:	4b09      	ldr	r3, [pc, #36]	; (f41c <z_arm_mpu_init+0x3c>)
    f3f6:	6859      	ldr	r1, [r3, #4]
    f3f8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    f3fc:	0093      	lsls	r3, r2, #2
    f3fe:	4419      	add	r1, r3
    f400:	4620      	mov	r0, r4
    f402:	f7ff ffa9 	bl	f358 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    f406:	3401      	adds	r4, #1
    f408:	e7f2      	b.n	f3f0 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    f40a:	4b05      	ldr	r3, [pc, #20]	; (f420 <z_arm_mpu_init+0x40>)
    f40c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    f40e:	f7ff ffd5 	bl	f3bc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    f412:	2000      	movs	r0, #0
}
    f414:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    f416:	f04f 30ff 	mov.w	r0, #4294967295
    f41a:	e7fb      	b.n	f414 <z_arm_mpu_init+0x34>
    f41c:	00017114 	.word	0x00017114
    f420:	20001f90 	.word	0x20001f90

0000f424 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    f424:	4b01      	ldr	r3, [pc, #4]	; (f42c <__stdout_hook_install+0x8>)
    f426:	6018      	str	r0, [r3, #0]
}
    f428:	4770      	bx	lr
    f42a:	bf00      	nop
    f42c:	200003c4 	.word	0x200003c4

0000f430 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    f430:	f04f 0340 	mov.w	r3, #64	; 0x40
    f434:	f3ef 8211 	mrs	r2, BASEPRI
    f438:	f383 8812 	msr	BASEPRI_MAX, r3
    f43c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    f440:	2301      	movs	r3, #1
    f442:	4906      	ldr	r1, [pc, #24]	; (f45c <nordicsemi_nrf52_init+0x2c>)
    f444:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    f448:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    f44c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    f450:	f382 8811 	msr	BASEPRI, r2
    f454:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    f458:	2000      	movs	r0, #0
    f45a:	4770      	bx	lr
    f45c:	4001e000 	.word	0x4001e000

0000f460 <sys_arch_reboot>:
    *p_gpregret = val;
    f460:	b2c0      	uxtb	r0, r0
    f462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f466:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    f46a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    f46e:	4905      	ldr	r1, [pc, #20]	; (f484 <sys_arch_reboot+0x24>)
    f470:	68ca      	ldr	r2, [r1, #12]
    f472:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f476:	4b04      	ldr	r3, [pc, #16]	; (f488 <sys_arch_reboot+0x28>)
    f478:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    f47a:	60cb      	str	r3, [r1, #12]
    f47c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    f480:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    f482:	e7fd      	b.n	f480 <sys_arch_reboot+0x20>
    f484:	e000ed00 	.word	0xe000ed00
    f488:	05fa0004 	.word	0x05fa0004

0000f48c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    f48c:	b130      	cbz	r0, f49c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    f48e:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    f490:	0180      	lsls	r0, r0, #6
    f492:	4b03      	ldr	r3, [pc, #12]	; (f4a0 <arch_busy_wait+0x14>)
    f494:	f043 0301 	orr.w	r3, r3, #1
    f498:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    f49a:	bd08      	pop	{r3, pc}
    f49c:	4770      	bx	lr
    f49e:	bf00      	nop
    f4a0:	00016fc0 	.word	0x00016fc0

0000f4a4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    f4a4:	b538      	push	{r3, r4, r5, lr}
    f4a6:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    f4a8:	4805      	ldr	r0, [pc, #20]	; (f4c0 <bt_buf_get_rx+0x1c>)
    f4aa:	f005 feff 	bl	152ac <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    f4ae:	4605      	mov	r5, r0
    f4b0:	b120      	cbz	r0, f4bc <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    f4b2:	2100      	movs	r1, #0
    f4b4:	3008      	adds	r0, #8
    f4b6:	f005 ff1b 	bl	152f0 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f4ba:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    f4bc:	4628      	mov	r0, r5
    f4be:	bd38      	pop	{r3, r4, r5, pc}
    f4c0:	20000510 	.word	0x20000510

0000f4c4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    f4c4:	b510      	push	{r4, lr}
    f4c6:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    f4c8:	4b0a      	ldr	r3, [pc, #40]	; (f4f4 <bt_buf_get_cmd_complete+0x30>)
    f4ca:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    f4ce:	b158      	cbz	r0, f4e8 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
    f4d0:	f005 ff45 	bl	1535e <net_buf_ref>
    f4d4:	4604      	mov	r4, r0
    f4d6:	2301      	movs	r3, #1
    f4d8:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
    f4da:	2100      	movs	r1, #0
    f4dc:	8181      	strh	r1, [r0, #12]
    f4de:	3008      	adds	r0, #8
    f4e0:	f005 ff06 	bl	152f0 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    f4e4:	4620      	mov	r0, r4
    f4e6:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    f4e8:	460b      	mov	r3, r1
    f4ea:	2001      	movs	r0, #1
    f4ec:	f7ff ffda 	bl	f4a4 <bt_buf_get_rx>
    f4f0:	4604      	mov	r4, r0
    f4f2:	e7f7      	b.n	f4e4 <bt_buf_get_cmd_complete+0x20>
    f4f4:	20000290 	.word	0x20000290

0000f4f8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    f4f8:	b510      	push	{r4, lr}
	switch (evt) {
    f4fa:	f1a0 040e 	sub.w	r4, r0, #14
    f4fe:	2c01      	cmp	r4, #1
    f500:	d906      	bls.n	f510 <bt_buf_get_evt+0x18>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
    f502:	b959      	cbnz	r1, f51c <bt_buf_get_evt+0x24>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    f504:	2001      	movs	r0, #1
    f506:	f7ff ffcd 	bl	f4a4 <bt_buf_get_rx>
    f50a:	4604      	mov	r4, r0
	}
}
    f50c:	4620      	mov	r0, r4
    f50e:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
    f510:	4610      	mov	r0, r2
    f512:	4619      	mov	r1, r3
    f514:	f7ff ffd6 	bl	f4c4 <bt_buf_get_cmd_complete>
    f518:	4604      	mov	r4, r0
    f51a:	e7f7      	b.n	f50c <bt_buf_get_evt+0x14>
	return net_buf_alloc_fixed(pool, timeout);
    f51c:	4806      	ldr	r0, [pc, #24]	; (f538 <bt_buf_get_evt+0x40>)
    f51e:	f005 fec5 	bl	152ac <net_buf_alloc_fixed>
			if (buf) {
    f522:	4604      	mov	r4, r0
    f524:	2800      	cmp	r0, #0
    f526:	d0f1      	beq.n	f50c <bt_buf_get_evt+0x14>
	net_buf_simple_reserve(&buf->b, reserve);
    f528:	2100      	movs	r1, #0
    f52a:	3008      	adds	r0, #8
    f52c:	f005 fee0 	bl	152f0 <net_buf_simple_reserve>
    f530:	2301      	movs	r3, #1
    f532:	7523      	strb	r3, [r4, #20]
			return buf;
    f534:	e7ea      	b.n	f50c <bt_buf_get_evt+0x14>
    f536:	bf00      	nop
    f538:	200004b8 	.word	0x200004b8

0000f53c <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    f53c:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
    f53e:	7851      	ldrb	r1, [r2, #1]
    f540:	4b08      	ldr	r3, [pc, #32]	; (f564 <read_local_ver_complete+0x28>)
    f542:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    f546:	8851      	ldrh	r1, [r2, #2]
    f548:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    f54c:	7911      	ldrb	r1, [r2, #4]
    f54e:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    f552:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    f556:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    f55a:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    f55e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
    f562:	4770      	bx	lr
    f564:	20000290 	.word	0x20000290

0000f568 <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    f568:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    f56a:	7a19      	ldrb	r1, [r3, #8]
    f56c:	79da      	ldrb	r2, [r3, #7]
    f56e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    f572:	7998      	ldrb	r0, [r3, #6]
    f574:	795a      	ldrb	r2, [r3, #5]
    f576:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    f57a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
    f57e:	7918      	ldrb	r0, [r3, #4]
    f580:	78d9      	ldrb	r1, [r3, #3]
    f582:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    f586:	7898      	ldrb	r0, [r3, #2]
    f588:	785b      	ldrb	r3, [r3, #1]
    f58a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    f58e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    f592:	4903      	ldr	r1, [pc, #12]	; (f5a0 <le_read_supp_states_complete+0x38>)
    f594:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
    f598:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
    f59c:	4770      	bx	lr
    f59e:	bf00      	nop
    f5a0:	20000290 	.word	0x20000290

0000f5a4 <hci_reset_complete>:
{
    f5a4:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
    f5a6:	6883      	ldr	r3, [r0, #8]
    f5a8:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    f5aa:	b9a3      	cbnz	r3, f5d6 <hci_reset_complete+0x32>
		bt_scan_reset();
    f5ac:	f000 ff86 	bl	104bc <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f5b0:	f3bf 8f5b 	dmb	ish
    f5b4:	4b08      	ldr	r3, [pc, #32]	; (f5d8 <hci_reset_complete+0x34>)
    f5b6:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    f5ba:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    f5be:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f5c2:	f3bf 8f5b 	dmb	ish
    f5c6:	e853 1f00 	ldrex	r1, [r3]
    f5ca:	e843 2000 	strex	r0, r2, [r3]
    f5ce:	2800      	cmp	r0, #0
    f5d0:	d1f9      	bne.n	f5c6 <hci_reset_complete+0x22>
    f5d2:	f3bf 8f5b 	dmb	ish
}
    f5d6:	bd08      	pop	{r3, pc}
    f5d8:	20000290 	.word	0x20000290

0000f5dc <read_local_features_complete>:
{
    f5dc:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    f5de:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    f5e0:	2208      	movs	r2, #8
    f5e2:	3101      	adds	r1, #1
    f5e4:	4801      	ldr	r0, [pc, #4]	; (f5ec <read_local_features_complete+0x10>)
    f5e6:	f005 fc23 	bl	14e30 <memcpy>
}
    f5ea:	bd08      	pop	{r3, pc}
    f5ec:	20000300 	.word	0x20000300

0000f5f0 <read_supported_commands_complete>:
{
    f5f0:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    f5f2:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    f5f4:	2240      	movs	r2, #64	; 0x40
    f5f6:	3101      	adds	r1, #1
    f5f8:	4801      	ldr	r0, [pc, #4]	; (f600 <read_supported_commands_complete+0x10>)
    f5fa:	f005 fc19 	bl	14e30 <memcpy>
}
    f5fe:	bd08      	pop	{r3, pc}
    f600:	20000308 	.word	0x20000308

0000f604 <read_le_features_complete>:
{
    f604:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    f606:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    f608:	2208      	movs	r2, #8
    f60a:	3101      	adds	r1, #1
    f60c:	4801      	ldr	r0, [pc, #4]	; (f614 <read_le_features_complete+0x10>)
    f60e:	f005 fc0f 	bl	14e30 <memcpy>
}
    f612:	bd08      	pop	{r3, pc}
    f614:	20000360 	.word	0x20000360

0000f618 <hci_cmd_done>:
{
    f618:	b570      	push	{r4, r5, r6, lr}
    f61a:	4606      	mov	r6, r0
    f61c:	460d      	mov	r5, r1
    f61e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    f620:	7990      	ldrb	r0, [r2, #6]
    f622:	f001 f86d 	bl	10700 <net_buf_pool_get>
    f626:	4b39      	ldr	r3, [pc, #228]	; (f70c <hci_cmd_done+0xf4>)
    f628:	4283      	cmp	r3, r0
    f62a:	d000      	beq.n	f62e <hci_cmd_done+0x16>
}
    f62c:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
    f62e:	4620      	mov	r0, r4
    f630:	f005 fd89 	bl	15146 <net_buf_id>
    f634:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f638:	4b35      	ldr	r3, [pc, #212]	; (f710 <hci_cmd_done+0xf8>)
    f63a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    f63e:	8843      	ldrh	r3, [r0, #2]
    f640:	42b3      	cmp	r3, r6
    f642:	d1f3      	bne.n	f62c <hci_cmd_done+0x14>
	if (bt_dev.sent_cmd) {
    f644:	4b33      	ldr	r3, [pc, #204]	; (f714 <hci_cmd_done+0xfc>)
    f646:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    f64a:	b128      	cbz	r0, f658 <hci_cmd_done+0x40>
		net_buf_unref(bt_dev.sent_cmd);
    f64c:	f005 fe61 	bl	15312 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    f650:	4b30      	ldr	r3, [pc, #192]	; (f714 <hci_cmd_done+0xfc>)
    f652:	2200      	movs	r2, #0
    f654:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	if (cmd(buf)->state && !status) {
    f658:	4620      	mov	r0, r4
    f65a:	f005 fd74 	bl	15146 <net_buf_id>
    f65e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f662:	4b2b      	ldr	r3, [pc, #172]	; (f710 <hci_cmd_done+0xf8>)
    f664:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    f668:	6843      	ldr	r3, [r0, #4]
    f66a:	b103      	cbz	r3, f66e <hci_cmd_done+0x56>
    f66c:	b1ed      	cbz	r5, f6aa <hci_cmd_done+0x92>
	if (cmd(buf)->sync) {
    f66e:	4620      	mov	r0, r4
    f670:	f005 fd69 	bl	15146 <net_buf_id>
    f674:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f678:	4b25      	ldr	r3, [pc, #148]	; (f710 <hci_cmd_done+0xf8>)
    f67a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    f67e:	6883      	ldr	r3, [r0, #8]
    f680:	2b00      	cmp	r3, #0
    f682:	d0d3      	beq.n	f62c <hci_cmd_done+0x14>
		cmd(buf)->status = status;
    f684:	4620      	mov	r0, r4
    f686:	f005 fd5e 	bl	15146 <net_buf_id>
    f68a:	4e21      	ldr	r6, [pc, #132]	; (f710 <hci_cmd_done+0xf8>)
    f68c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f690:	f806 5020 	strb.w	r5, [r6, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
    f694:	4620      	mov	r0, r4
    f696:	f005 fd56 	bl	15146 <net_buf_id>
    f69a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f69e:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    f6a2:	68b0      	ldr	r0, [r6, #8]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    f6a4:	f003 fc1a 	bl	12edc <z_impl_k_sem_give>
}
    f6a8:	e7c0      	b.n	f62c <hci_cmd_done+0x14>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    f6aa:	4620      	mov	r0, r4
    f6ac:	f005 fd4b 	bl	15146 <net_buf_id>
    f6b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f6b4:	4b16      	ldr	r3, [pc, #88]	; (f710 <hci_cmd_done+0xf8>)
    f6b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    f6ba:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    f6bc:	6819      	ldr	r1, [r3, #0]
    f6be:	685a      	ldr	r2, [r3, #4]
    f6c0:	7a18      	ldrb	r0, [r3, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    f6c2:	f002 061f 	and.w	r6, r2, #31
    f6c6:	2301      	movs	r3, #1
    f6c8:	40b3      	lsls	r3, r6

	if (val) {
    f6ca:	b170      	cbz	r0, f6ea <hci_cmd_done+0xd2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f6cc:	0952      	lsrs	r2, r2, #5
    f6ce:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f6d2:	f3bf 8f5b 	dmb	ish
    f6d6:	e852 1f00 	ldrex	r1, [r2]
    f6da:	4319      	orrs	r1, r3
    f6dc:	e842 1000 	strex	r0, r1, [r2]
    f6e0:	2800      	cmp	r0, #0
    f6e2:	d1f8      	bne.n	f6d6 <hci_cmd_done+0xbe>
    f6e4:	f3bf 8f5b 	dmb	ish
    f6e8:	e7c1      	b.n	f66e <hci_cmd_done+0x56>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f6ea:	0952      	lsrs	r2, r2, #5
    f6ec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    f6f0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f6f2:	f3bf 8f5b 	dmb	ish
    f6f6:	e852 1f00 	ldrex	r1, [r2]
    f6fa:	4019      	ands	r1, r3
    f6fc:	e842 1000 	strex	r0, r1, [r2]
    f700:	2800      	cmp	r0, #0
    f702:	d1f8      	bne.n	f6f6 <hci_cmd_done+0xde>
    f704:	f3bf 8f5b 	dmb	ish
	}
}
    f708:	e7b1      	b.n	f66e <hci_cmd_done+0x56>
    f70a:	bf00      	nop
    f70c:	200004e4 	.word	0x200004e4
    f710:	200017d8 	.word	0x200017d8
    f714:	20000290 	.word	0x20000290

0000f718 <hci_cmd_status>:
{
    f718:	b538      	push	{r3, r4, r5, lr}
    f71a:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    f71c:	2104      	movs	r1, #4
    f71e:	3008      	adds	r0, #8
    f720:	f005 fe3a 	bl	15398 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    f724:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    f726:	4622      	mov	r2, r4
    f728:	7801      	ldrb	r1, [r0, #0]
    f72a:	8840      	ldrh	r0, [r0, #2]
    f72c:	f7ff ff74 	bl	f618 <hci_cmd_done>
	if (ncmd) {
    f730:	b905      	cbnz	r5, f734 <hci_cmd_status+0x1c>
}
    f732:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
    f734:	4801      	ldr	r0, [pc, #4]	; (f73c <hci_cmd_status+0x24>)
    f736:	f003 fbd1 	bl	12edc <z_impl_k_sem_give>
    f73a:	e7fa      	b.n	f732 <hci_cmd_status+0x1a>
    f73c:	20000370 	.word	0x20000370

0000f740 <hci_cmd_complete>:
{
    f740:	b538      	push	{r3, r4, r5, lr}
    f742:	4604      	mov	r4, r0
    f744:	2103      	movs	r1, #3
    f746:	3008      	adds	r0, #8
    f748:	f005 fe26 	bl	15398 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    f74c:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
    f74e:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    f750:	4622      	mov	r2, r4
    f752:	7819      	ldrb	r1, [r3, #0]
    f754:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    f758:	f7ff ff5e 	bl	f618 <hci_cmd_done>
	if (ncmd) {
    f75c:	b905      	cbnz	r5, f760 <hci_cmd_complete+0x20>
}
    f75e:	bd38      	pop	{r3, r4, r5, pc}
    f760:	4801      	ldr	r0, [pc, #4]	; (f768 <hci_cmd_complete+0x28>)
    f762:	f003 fbbb 	bl	12edc <z_impl_k_sem_give>
    f766:	e7fa      	b.n	f75e <hci_cmd_complete+0x1e>
    f768:	20000370 	.word	0x20000370

0000f76c <hci_event>:
{
    f76c:	b538      	push	{r3, r4, r5, lr}
    f76e:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    f770:	8983      	ldrh	r3, [r0, #12]
    f772:	2b01      	cmp	r3, #1
    f774:	d927      	bls.n	f7c6 <hci_event+0x5a>
    f776:	2102      	movs	r1, #2
    f778:	f104 0008 	add.w	r0, r4, #8
    f77c:	f005 fe0c 	bl	15398 <net_buf_simple_pull_mem>
    f780:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    f782:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    f784:	2b05      	cmp	r3, #5
    f786:	d02e      	beq.n	f7e6 <hci_event+0x7a>
    f788:	d32f      	bcc.n	f7ea <hci_event+0x7e>
    f78a:	3b0e      	subs	r3, #14
    f78c:	b2db      	uxtb	r3, r3
    f78e:	2b01      	cmp	r3, #1
    f790:	d827      	bhi.n	f7e2 <hci_event+0x76>
		__fallthrough;
#endif /* defined(CONFIG_BT_CONN) */
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    f792:	2301      	movs	r3, #1
    f794:	f013 0f02 	tst.w	r3, #2
    f798:	d029      	beq.n	f7ee <hci_event+0x82>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    f79a:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
    f79c:	2300      	movs	r3, #0
    f79e:	2b02      	cmp	r3, #2
    f7a0:	d80d      	bhi.n	f7be <hci_event+0x52>
		const struct event_handler *handler = &handlers[i];
    f7a2:	4a1b      	ldr	r2, [pc, #108]	; (f810 <hci_event+0xa4>)
    f7a4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
    f7a8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    f7ac:	4282      	cmp	r2, r0
    f7ae:	d12c      	bne.n	f80a <hci_event+0x9e>
		if (buf->len < handler->min_len) {
    f7b0:	89a3      	ldrh	r3, [r4, #12]
    f7b2:	784a      	ldrb	r2, [r1, #1]
    f7b4:	429a      	cmp	r2, r3
    f7b6:	d802      	bhi.n	f7be <hci_event+0x52>
		handler->handler(buf);
    f7b8:	684b      	ldr	r3, [r1, #4]
    f7ba:	4620      	mov	r0, r4
    f7bc:	4798      	blx	r3
	net_buf_unref(buf);
    f7be:	4620      	mov	r0, r4
    f7c0:	f005 fda7 	bl	15312 <net_buf_unref>
}
    f7c4:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    f7c6:	f640 1317 	movw	r3, #2327	; 0x917
    f7ca:	4a12      	ldr	r2, [pc, #72]	; (f814 <hci_event+0xa8>)
    f7cc:	4912      	ldr	r1, [pc, #72]	; (f818 <hci_event+0xac>)
    f7ce:	4813      	ldr	r0, [pc, #76]	; (f81c <hci_event+0xb0>)
    f7d0:	f004 fe30 	bl	14434 <printk>
    f7d4:	4040      	eors	r0, r0
    f7d6:	f380 8811 	msr	BASEPRI, r0
    f7da:	f04f 0003 	mov.w	r0, #3
    f7de:	df02      	svc	2
    f7e0:	e7c9      	b.n	f776 <hci_event+0xa>
	default:
		return BT_HCI_EVT_FLAG_RECV;
    f7e2:	2302      	movs	r3, #2
    f7e4:	e7d6      	b.n	f794 <hci_event+0x28>
	switch (evt) {
    f7e6:	2303      	movs	r3, #3
    f7e8:	e7d4      	b.n	f794 <hci_event+0x28>
		return BT_HCI_EVT_FLAG_RECV;
    f7ea:	2302      	movs	r3, #2
    f7ec:	e7d2      	b.n	f794 <hci_event+0x28>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    f7ee:	f640 131b 	movw	r3, #2331	; 0x91b
    f7f2:	4a08      	ldr	r2, [pc, #32]	; (f814 <hci_event+0xa8>)
    f7f4:	490a      	ldr	r1, [pc, #40]	; (f820 <hci_event+0xb4>)
    f7f6:	4809      	ldr	r0, [pc, #36]	; (f81c <hci_event+0xb0>)
    f7f8:	f004 fe1c 	bl	14434 <printk>
    f7fc:	4040      	eors	r0, r0
    f7fe:	f380 8811 	msr	BASEPRI, r0
    f802:	f04f 0003 	mov.w	r0, #3
    f806:	df02      	svc	2
    f808:	e7c7      	b.n	f79a <hci_event+0x2e>
	for (i = 0; i < num_handlers; i++) {
    f80a:	3301      	adds	r3, #1
    f80c:	e7c7      	b.n	f79e <hci_event+0x32>
    f80e:	bf00      	nop
    f810:	00017268 	.word	0x00017268
    f814:	00017154 	.word	0x00017154
    f818:	00017188 	.word	0x00017188
    f81c:	000171a4 	.word	0x000171a4
    f820:	000171c4 	.word	0x000171c4

0000f824 <hci_le_meta_event>:
{
    f824:	b510      	push	{r4, lr}
    f826:	4604      	mov	r4, r0
    f828:	2101      	movs	r1, #1
    f82a:	3008      	adds	r0, #8
    f82c:	f005 fdb4 	bl	15398 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    f830:	7800      	ldrb	r0, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
    f832:	2300      	movs	r3, #0
    f834:	b96b      	cbnz	r3, f852 <hci_le_meta_event+0x2e>
		const struct event_handler *handler = &handlers[i];
    f836:	4a08      	ldr	r2, [pc, #32]	; (f858 <hci_le_meta_event+0x34>)
    f838:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
    f83c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    f840:	4282      	cmp	r2, r0
    f842:	d107      	bne.n	f854 <hci_le_meta_event+0x30>
		if (buf->len < handler->min_len) {
    f844:	89a3      	ldrh	r3, [r4, #12]
    f846:	784a      	ldrb	r2, [r1, #1]
    f848:	429a      	cmp	r2, r3
    f84a:	d802      	bhi.n	f852 <hci_le_meta_event+0x2e>
		handler->handler(buf);
    f84c:	684b      	ldr	r3, [r1, #4]
    f84e:	4620      	mov	r0, r4
    f850:	4798      	blx	r3
}
    f852:	bd10      	pop	{r4, pc}
	for (i = 0; i < num_handlers; i++) {
    f854:	3301      	adds	r3, #1
    f856:	e7ed      	b.n	f834 <hci_le_meta_event+0x10>
    f858:	00017250 	.word	0x00017250

0000f85c <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
    f85c:	b508      	push	{r3, lr}
    f85e:	e003      	b.n	f868 <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
    f860:	f7ff ff84 	bl	f76c <hci_event>
	z_impl_k_yield();
    f864:	f003 ffee 	bl	13844 <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    f868:	f04f 32ff 	mov.w	r2, #4294967295
    f86c:	f04f 33ff 	mov.w	r3, #4294967295
    f870:	4804      	ldr	r0, [pc, #16]	; (f884 <hci_rx_thread+0x28>)
    f872:	f005 fd22 	bl	152ba <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    f876:	7d03      	ldrb	r3, [r0, #20]
		switch (bt_buf_get_type(buf)) {
    f878:	2b01      	cmp	r3, #1
    f87a:	d0f1      	beq.n	f860 <hci_rx_thread+0x4>
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
    f87c:	f005 fd49 	bl	15312 <net_buf_unref>
			break;
    f880:	e7f0      	b.n	f864 <hci_rx_thread+0x8>
    f882:	bf00      	nop
    f884:	2000038c 	.word	0x2000038c

0000f888 <bt_hci_cmd_state_set_init>:
{
    f888:	b510      	push	{r4, lr}
    f88a:	460c      	mov	r4, r1
	state->target = target;
    f88c:	600a      	str	r2, [r1, #0]
	state->bit = bit;
    f88e:	604b      	str	r3, [r1, #4]
	state->val = val;
    f890:	f89d 3008 	ldrb.w	r3, [sp, #8]
    f894:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    f896:	f005 fc56 	bl	15146 <net_buf_id>
    f89a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f89e:	4b02      	ldr	r3, [pc, #8]	; (f8a8 <bt_hci_cmd_state_set_init+0x20>)
    f8a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    f8a4:	6044      	str	r4, [r0, #4]
}
    f8a6:	bd10      	pop	{r4, pc}
    f8a8:	200017d8 	.word	0x200017d8

0000f8ac <bt_hci_cmd_create>:
{
    f8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f8b0:	4682      	mov	sl, r0
    f8b2:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
    f8b4:	f04f 32ff 	mov.w	r2, #4294967295
    f8b8:	f04f 33ff 	mov.w	r3, #4294967295
    f8bc:	4817      	ldr	r0, [pc, #92]	; (f91c <bt_hci_cmd_create+0x70>)
    f8be:	f005 fcf5 	bl	152ac <net_buf_alloc_fixed>
    f8c2:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    f8c4:	f100 0808 	add.w	r8, r0, #8
    f8c8:	2100      	movs	r1, #0
    f8ca:	4640      	mov	r0, r8
    f8cc:	f005 fd10 	bl	152f0 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f8d0:	2700      	movs	r7, #0
    f8d2:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    f8d4:	4620      	mov	r0, r4
    f8d6:	f005 fc36 	bl	15146 <net_buf_id>
    f8da:	4d11      	ldr	r5, [pc, #68]	; (f920 <bt_hci_cmd_create+0x74>)
    f8dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f8e0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    f8e4:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
    f8e8:	4620      	mov	r0, r4
    f8ea:	f005 fc2c 	bl	15146 <net_buf_id>
    f8ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f8f2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    f8f6:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    f8f8:	4620      	mov	r0, r4
    f8fa:	f005 fc24 	bl	15146 <net_buf_id>
    f8fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f902:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    f906:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
    f908:	2103      	movs	r1, #3
    f90a:	4640      	mov	r0, r8
    f90c:	f005 fd2b 	bl	15366 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    f910:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
    f914:	7086      	strb	r6, [r0, #2]
}
    f916:	4620      	mov	r0, r4
    f918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f91c:	200004e4 	.word	0x200004e4
    f920:	200017d8 	.word	0x200017d8

0000f924 <bt_hci_cmd_send_sync>:
{
    f924:	b570      	push	{r4, r5, r6, lr}
    f926:	b086      	sub	sp, #24
    f928:	4615      	mov	r5, r2
	if (!buf) {
    f92a:	460c      	mov	r4, r1
    f92c:	b359      	cbz	r1, f986 <bt_hci_cmd_send_sync+0x62>
	return z_impl_k_sem_init(sem, initial_count, limit);
    f92e:	2201      	movs	r2, #1
    f930:	2100      	movs	r1, #0
    f932:	4668      	mov	r0, sp
    f934:	f006 ff0e 	bl	16754 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    f938:	4620      	mov	r0, r4
    f93a:	f005 fc04 	bl	15146 <net_buf_id>
    f93e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f942:	4b26      	ldr	r3, [pc, #152]	; (f9dc <bt_hci_cmd_send_sync+0xb8>)
    f944:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    f948:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    f94c:	4620      	mov	r0, r4
    f94e:	f005 fd06 	bl	1535e <net_buf_ref>
    f952:	4601      	mov	r1, r0
    f954:	4822      	ldr	r0, [pc, #136]	; (f9e0 <bt_hci_cmd_send_sync+0xbc>)
    f956:	f005 fccf 	bl	152f8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    f95a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f95e:	2300      	movs	r3, #0
    f960:	4668      	mov	r0, sp
    f962:	f003 fae3 	bl	12f2c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    f966:	4606      	mov	r6, r0
    f968:	b9a8      	cbnz	r0, f996 <bt_hci_cmd_send_sync+0x72>
	status = cmd(buf)->status;
    f96a:	4620      	mov	r0, r4
    f96c:	f005 fbeb 	bl	15146 <net_buf_id>
    f970:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f974:	4b19      	ldr	r3, [pc, #100]	; (f9dc <bt_hci_cmd_send_sync+0xb8>)
    f976:	f813 6020 	ldrb.w	r6, [r3, r0, lsl #2]
	if (status) {
    f97a:	b9f6      	cbnz	r6, f9ba <bt_hci_cmd_send_sync+0x96>
	if (rsp) {
    f97c:	b345      	cbz	r5, f9d0 <bt_hci_cmd_send_sync+0xac>
		*rsp = buf;
    f97e:	602c      	str	r4, [r5, #0]
	return 0;
    f980:	2000      	movs	r0, #0
}
    f982:	b006      	add	sp, #24
    f984:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    f986:	f7ff ff91 	bl	f8ac <bt_hci_cmd_create>
		if (!buf) {
    f98a:	4604      	mov	r4, r0
    f98c:	2800      	cmp	r0, #0
    f98e:	d1ce      	bne.n	f92e <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    f990:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f994:	e7f5      	b.n	f982 <bt_hci_cmd_send_sync+0x5e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    f996:	f240 1331 	movw	r3, #305	; 0x131
    f99a:	4a12      	ldr	r2, [pc, #72]	; (f9e4 <bt_hci_cmd_send_sync+0xc0>)
    f99c:	4912      	ldr	r1, [pc, #72]	; (f9e8 <bt_hci_cmd_send_sync+0xc4>)
    f99e:	4813      	ldr	r0, [pc, #76]	; (f9ec <bt_hci_cmd_send_sync+0xc8>)
    f9a0:	f004 fd48 	bl	14434 <printk>
    f9a4:	4631      	mov	r1, r6
    f9a6:	4812      	ldr	r0, [pc, #72]	; (f9f0 <bt_hci_cmd_send_sync+0xcc>)
    f9a8:	f004 fd44 	bl	14434 <printk>
    f9ac:	4040      	eors	r0, r0
    f9ae:	f380 8811 	msr	BASEPRI, r0
    f9b2:	f04f 0003 	mov.w	r0, #3
    f9b6:	df02      	svc	2
    f9b8:	e7d7      	b.n	f96a <bt_hci_cmd_send_sync+0x46>
		net_buf_unref(buf);
    f9ba:	4620      	mov	r0, r4
    f9bc:	f005 fca9 	bl	15312 <net_buf_unref>
		switch (status) {
    f9c0:	2e09      	cmp	r6, #9
    f9c2:	d002      	beq.n	f9ca <bt_hci_cmd_send_sync+0xa6>
			return -EIO;
    f9c4:	f06f 0004 	mvn.w	r0, #4
    f9c8:	e7db      	b.n	f982 <bt_hci_cmd_send_sync+0x5e>
			return -ECONNREFUSED;
    f9ca:	f06f 006e 	mvn.w	r0, #110	; 0x6e
    f9ce:	e7d8      	b.n	f982 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    f9d0:	4620      	mov	r0, r4
    f9d2:	f005 fc9e 	bl	15312 <net_buf_unref>
	return 0;
    f9d6:	2000      	movs	r0, #0
    f9d8:	e7d3      	b.n	f982 <bt_hci_cmd_send_sync+0x5e>
    f9da:	bf00      	nop
    f9dc:	200017d8 	.word	0x200017d8
    f9e0:	200003a4 	.word	0x200003a4
    f9e4:	00017154 	.word	0x00017154
    f9e8:	000171f4 	.word	0x000171f4
    f9ec:	000171a4 	.word	0x000171a4
    f9f0:	00017200 	.word	0x00017200

0000f9f4 <common_init>:
{
    f9f4:	b510      	push	{r4, lr}
    f9f6:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f9f8:	4b22      	ldr	r3, [pc, #136]	; (fa84 <common_init+0x90>)
    f9fa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
    f9fe:	689b      	ldr	r3, [r3, #8]
    fa00:	f013 0f01 	tst.w	r3, #1
    fa04:	d10d      	bne.n	fa22 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    fa06:	aa01      	add	r2, sp, #4
    fa08:	2100      	movs	r1, #0
    fa0a:	f640 4003 	movw	r0, #3075	; 0xc03
    fa0e:	f7ff ff89 	bl	f924 <bt_hci_cmd_send_sync>
		if (err) {
    fa12:	4604      	mov	r4, r0
    fa14:	b968      	cbnz	r0, fa32 <common_init+0x3e>
		hci_reset_complete(rsp);
    fa16:	9801      	ldr	r0, [sp, #4]
    fa18:	f7ff fdc4 	bl	f5a4 <hci_reset_complete>
		net_buf_unref(rsp);
    fa1c:	9801      	ldr	r0, [sp, #4]
    fa1e:	f005 fc78 	bl	15312 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    fa22:	aa01      	add	r2, sp, #4
    fa24:	2100      	movs	r1, #0
    fa26:	f241 0003 	movw	r0, #4099	; 0x1003
    fa2a:	f7ff ff7b 	bl	f924 <bt_hci_cmd_send_sync>
	if (err) {
    fa2e:	4604      	mov	r4, r0
    fa30:	b110      	cbz	r0, fa38 <common_init+0x44>
}
    fa32:	4620      	mov	r0, r4
    fa34:	b002      	add	sp, #8
    fa36:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
    fa38:	9801      	ldr	r0, [sp, #4]
    fa3a:	f7ff fdcf 	bl	f5dc <read_local_features_complete>
	net_buf_unref(rsp);
    fa3e:	9801      	ldr	r0, [sp, #4]
    fa40:	f005 fc67 	bl	15312 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    fa44:	aa01      	add	r2, sp, #4
    fa46:	2100      	movs	r1, #0
    fa48:	f241 0001 	movw	r0, #4097	; 0x1001
    fa4c:	f7ff ff6a 	bl	f924 <bt_hci_cmd_send_sync>
	if (err) {
    fa50:	4604      	mov	r4, r0
    fa52:	2800      	cmp	r0, #0
    fa54:	d1ed      	bne.n	fa32 <common_init+0x3e>
	read_local_ver_complete(rsp);
    fa56:	9801      	ldr	r0, [sp, #4]
    fa58:	f7ff fd70 	bl	f53c <read_local_ver_complete>
	net_buf_unref(rsp);
    fa5c:	9801      	ldr	r0, [sp, #4]
    fa5e:	f005 fc58 	bl	15312 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    fa62:	aa01      	add	r2, sp, #4
    fa64:	2100      	movs	r1, #0
    fa66:	f241 0002 	movw	r0, #4098	; 0x1002
    fa6a:	f7ff ff5b 	bl	f924 <bt_hci_cmd_send_sync>
	if (err) {
    fa6e:	4604      	mov	r4, r0
    fa70:	2800      	cmp	r0, #0
    fa72:	d1de      	bne.n	fa32 <common_init+0x3e>
	read_supported_commands_complete(rsp);
    fa74:	9801      	ldr	r0, [sp, #4]
    fa76:	f7ff fdbb 	bl	f5f0 <read_supported_commands_complete>
	net_buf_unref(rsp);
    fa7a:	9801      	ldr	r0, [sp, #4]
    fa7c:	f005 fc49 	bl	15312 <net_buf_unref>
	return 0;
    fa80:	e7d7      	b.n	fa32 <common_init+0x3e>
    fa82:	bf00      	nop
    fa84:	20000290 	.word	0x20000290

0000fa88 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    fa88:	4b2b      	ldr	r3, [pc, #172]	; (fb38 <__kernel_ram_size+0x78>)
    fa8a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    fa8e:	f013 0f40 	tst.w	r3, #64	; 0x40
    fa92:	d049      	beq.n	fb28 <__kernel_ram_size+0x68>
{
    fa94:	b510      	push	{r4, lr}
    fa96:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    fa98:	aa01      	add	r2, sp, #4
    fa9a:	2100      	movs	r1, #0
    fa9c:	f242 0003 	movw	r0, #8195	; 0x2003
    faa0:	f7ff ff40 	bl	f924 <bt_hci_cmd_send_sync>
	if (err) {
    faa4:	4603      	mov	r3, r0
    faa6:	b110      	cbz	r0, faae <le_init+0x26>
}
    faa8:	4618      	mov	r0, r3
    faaa:	b002      	add	sp, #8
    faac:	bd10      	pop	{r4, pc}
	read_le_features_complete(rsp);
    faae:	9801      	ldr	r0, [sp, #4]
    fab0:	f7ff fda8 	bl	f604 <read_le_features_complete>
	net_buf_unref(rsp);
    fab4:	9801      	ldr	r0, [sp, #4]
    fab6:	f005 fc2c 	bl	15312 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    faba:	4b1f      	ldr	r3, [pc, #124]	; (fb38 <__kernel_ram_size+0x78>)
    fabc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    fac0:	f013 0f20 	tst.w	r3, #32
    fac4:	d018      	beq.n	faf8 <__kernel_ram_size+0x38>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    fac6:	4b1c      	ldr	r3, [pc, #112]	; (fb38 <__kernel_ram_size+0x78>)
    fac8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
    facc:	f013 0f08 	tst.w	r3, #8
    fad0:	d00e      	beq.n	faf0 <__kernel_ram_size+0x30>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    fad2:	aa01      	add	r2, sp, #4
    fad4:	2100      	movs	r1, #0
    fad6:	f242 001c 	movw	r0, #8220	; 0x201c
    fada:	f7ff ff23 	bl	f924 <bt_hci_cmd_send_sync>
		if (err) {
    fade:	4603      	mov	r3, r0
    fae0:	2800      	cmp	r0, #0
    fae2:	d1e1      	bne.n	faa8 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    fae4:	9801      	ldr	r0, [sp, #4]
    fae6:	f7ff fd3f 	bl	f568 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    faea:	9801      	ldr	r0, [sp, #4]
    faec:	f005 fc11 	bl	15312 <net_buf_unref>
	return  le_set_event_mask();
    faf0:	f005 fa17 	bl	14f22 <le_set_event_mask>
    faf4:	4603      	mov	r3, r0
    faf6:	e7d7      	b.n	faa8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    faf8:	2102      	movs	r1, #2
    fafa:	f640 406d 	movw	r0, #3181	; 0xc6d
    fafe:	f7ff fed5 	bl	f8ac <bt_hci_cmd_create>
		if (!buf) {
    fb02:	4604      	mov	r4, r0
    fb04:	b1a0      	cbz	r0, fb30 <__kernel_ram_size+0x70>
    fb06:	2102      	movs	r1, #2
    fb08:	3008      	adds	r0, #8
    fb0a:	f005 fc2c 	bl	15366 <net_buf_simple_add>
		cp_le->le = 0x01;
    fb0e:	2301      	movs	r3, #1
    fb10:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    fb12:	2200      	movs	r2, #0
    fb14:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    fb16:	4621      	mov	r1, r4
    fb18:	f640 406d 	movw	r0, #3181	; 0xc6d
    fb1c:	f7ff ff02 	bl	f924 <bt_hci_cmd_send_sync>
		if (err) {
    fb20:	4603      	mov	r3, r0
    fb22:	2800      	cmp	r0, #0
    fb24:	d0cf      	beq.n	fac6 <__kernel_ram_size+0x6>
    fb26:	e7bf      	b.n	faa8 <le_init+0x20>
		return -ENODEV;
    fb28:	f06f 0312 	mvn.w	r3, #18
}
    fb2c:	4618      	mov	r0, r3
    fb2e:	4770      	bx	lr
			return -ENOBUFS;
    fb30:	f06f 0368 	mvn.w	r3, #104	; 0x68
    fb34:	e7b8      	b.n	faa8 <le_init+0x20>
    fb36:	bf00      	nop
    fb38:	20000290 	.word	0x20000290

0000fb3c <hci_vs_init>:
{
    fb3c:	b510      	push	{r4, lr}
    fb3e:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    fb40:	aa01      	add	r2, sp, #4
    fb42:	2100      	movs	r1, #0
    fb44:	f64f 4001 	movw	r0, #64513	; 0xfc01
    fb48:	f7ff feec 	bl	f924 <bt_hci_cmd_send_sync>
	if (err) {
    fb4c:	b108      	cbz	r0, fb52 <hci_vs_init+0x16>
}
    fb4e:	b002      	add	sp, #8
    fb50:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    fb52:	9801      	ldr	r0, [sp, #4]
    fb54:	f005 fbdd 	bl	15312 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    fb58:	aa01      	add	r2, sp, #4
    fb5a:	2100      	movs	r1, #0
    fb5c:	f64f 4002 	movw	r0, #64514	; 0xfc02
    fb60:	f7ff fee0 	bl	f924 <bt_hci_cmd_send_sync>
	if (err) {
    fb64:	2800      	cmp	r0, #0
    fb66:	d1f2      	bne.n	fb4e <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    fb68:	9b01      	ldr	r3, [sp, #4]
    fb6a:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    fb6c:	4c11      	ldr	r4, [pc, #68]	; (fbb4 <hci_vs_init+0x78>)
    fb6e:	2202      	movs	r2, #2
    fb70:	3101      	adds	r1, #1
    fb72:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    fb76:	f005 f95b 	bl	14e30 <memcpy>
	net_buf_unref(rsp);
    fb7a:	9801      	ldr	r0, [sp, #4]
    fb7c:	f005 fbc9 	bl	15312 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    fb80:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
    fb84:	f013 0f04 	tst.w	r3, #4
    fb88:	d0e1      	beq.n	fb4e <hci_vs_init+0x12>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    fb8a:	aa01      	add	r2, sp, #4
    fb8c:	2100      	movs	r1, #0
    fb8e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    fb92:	f7ff fec7 	bl	f924 <bt_hci_cmd_send_sync>
		if (err) {
    fb96:	2800      	cmp	r0, #0
    fb98:	d1d9      	bne.n	fb4e <hci_vs_init+0x12>
		rp.feat = (void *)rsp->data;
    fb9a:	9b01      	ldr	r3, [sp, #4]
    fb9c:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    fb9e:	2201      	movs	r2, #1
    fba0:	4411      	add	r1, r2
    fba2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fba6:	f005 f943 	bl	14e30 <memcpy>
		net_buf_unref(rsp);
    fbaa:	9801      	ldr	r0, [sp, #4]
    fbac:	f005 fbb1 	bl	15312 <net_buf_unref>
    fbb0:	e7cd      	b.n	fb4e <hci_vs_init+0x12>
    fbb2:	bf00      	nop
    fbb4:	20000290 	.word	0x20000290

0000fbb8 <hci_init>:
{
    fbb8:	b508      	push	{r3, lr}
	err = common_init();
    fbba:	f7ff ff1b 	bl	f9f4 <common_init>
	if (err) {
    fbbe:	4603      	mov	r3, r0
    fbc0:	b108      	cbz	r0, fbc6 <hci_init+0xe>
}
    fbc2:	4618      	mov	r0, r3
    fbc4:	bd08      	pop	{r3, pc}
	err = le_init();
    fbc6:	f7ff ff5f 	bl	fa88 <le_init>
	if (err) {
    fbca:	4603      	mov	r3, r0
    fbcc:	2800      	cmp	r0, #0
    fbce:	d1f8      	bne.n	fbc2 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    fbd0:	4b0a      	ldr	r3, [pc, #40]	; (fbfc <hci_init+0x44>)
    fbd2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    fbd6:	f013 0f20 	tst.w	r3, #32
    fbda:	d104      	bne.n	fbe6 <hci_init+0x2e>
		err = bt_br_init();
    fbdc:	f005 f999 	bl	14f12 <bt_br_init>
		if (err) {
    fbe0:	4603      	mov	r3, r0
    fbe2:	2800      	cmp	r0, #0
    fbe4:	d1ed      	bne.n	fbc2 <hci_init+0xa>
	err = set_event_mask();
    fbe6:	f005 f9bb 	bl	14f60 <set_event_mask>
	if (err) {
    fbea:	4603      	mov	r3, r0
    fbec:	2800      	cmp	r0, #0
    fbee:	d1e8      	bne.n	fbc2 <hci_init+0xa>
	hci_vs_init();
    fbf0:	f7ff ffa4 	bl	fb3c <hci_vs_init>
	err = bt_id_init();
    fbf4:	f000 fb86 	bl	10304 <bt_id_init>
    fbf8:	4603      	mov	r3, r0
	if (err) {
    fbfa:	e7e2      	b.n	fbc2 <hci_init+0xa>
    fbfc:	20000290 	.word	0x20000290

0000fc00 <bt_send>:
{
    fc00:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    fc02:	4b03      	ldr	r3, [pc, #12]	; (fc10 <bt_send+0x10>)
    fc04:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
    fc08:	691b      	ldr	r3, [r3, #16]
    fc0a:	4798      	blx	r3
}
    fc0c:	bd08      	pop	{r3, pc}
    fc0e:	bf00      	nop
    fc10:	20000290 	.word	0x20000290

0000fc14 <send_cmd>:
{
    fc14:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    fc16:	2200      	movs	r2, #0
    fc18:	2300      	movs	r3, #0
    fc1a:	4826      	ldr	r0, [pc, #152]	; (fcb4 <send_cmd+0xa0>)
    fc1c:	f005 fb4d 	bl	152ba <net_buf_get>
	BT_ASSERT(buf);
    fc20:	4604      	mov	r4, r0
    fc22:	b1d8      	cbz	r0, fc5c <send_cmd+0x48>
    fc24:	4d24      	ldr	r5, [pc, #144]	; (fcb8 <send_cmd+0xa4>)
    fc26:	f04f 32ff 	mov.w	r2, #4294967295
    fc2a:	f04f 33ff 	mov.w	r3, #4294967295
    fc2e:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    fc32:	f003 f97b 	bl	12f2c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    fc36:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    fc3a:	b120      	cbz	r0, fc46 <send_cmd+0x32>
		net_buf_unref(bt_dev.sent_cmd);
    fc3c:	f005 fb69 	bl	15312 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    fc40:	2200      	movs	r2, #0
    fc42:	f8c5 20f8 	str.w	r2, [r5, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    fc46:	4620      	mov	r0, r4
    fc48:	f005 fb89 	bl	1535e <net_buf_ref>
    fc4c:	4b1a      	ldr	r3, [pc, #104]	; (fcb8 <send_cmd+0xa4>)
    fc4e:	f8c3 00f8 	str.w	r0, [r3, #248]	; 0xf8
	err = bt_send(buf);
    fc52:	4620      	mov	r0, r4
    fc54:	f7ff ffd4 	bl	fc00 <bt_send>
	if (err) {
    fc58:	b970      	cbnz	r0, fc78 <send_cmd+0x64>
}
    fc5a:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    fc5c:	f640 132a 	movw	r3, #2346	; 0x92a
    fc60:	4a16      	ldr	r2, [pc, #88]	; (fcbc <send_cmd+0xa8>)
    fc62:	4917      	ldr	r1, [pc, #92]	; (fcc0 <send_cmd+0xac>)
    fc64:	4817      	ldr	r0, [pc, #92]	; (fcc4 <send_cmd+0xb0>)
    fc66:	f004 fbe5 	bl	14434 <printk>
    fc6a:	4040      	eors	r0, r0
    fc6c:	f380 8811 	msr	BASEPRI, r0
    fc70:	f04f 0003 	mov.w	r0, #3
    fc74:	df02      	svc	2
    fc76:	e7d5      	b.n	fc24 <send_cmd+0x10>
	z_impl_k_sem_give(sem);
    fc78:	4d0f      	ldr	r5, [pc, #60]	; (fcb8 <send_cmd+0xa4>)
    fc7a:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    fc7e:	f003 f92d 	bl	12edc <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    fc82:	4620      	mov	r0, r4
    fc84:	f005 fa5f 	bl	15146 <net_buf_id>
    fc88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    fc8c:	4b0e      	ldr	r3, [pc, #56]	; (fcc8 <send_cmd+0xb4>)
    fc8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    fc92:	4622      	mov	r2, r4
    fc94:	211f      	movs	r1, #31
    fc96:	8840      	ldrh	r0, [r0, #2]
    fc98:	f7ff fcbe 	bl	f618 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    fc9c:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    fca0:	f005 fb37 	bl	15312 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    fca4:	2300      	movs	r3, #0
    fca6:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		net_buf_unref(buf);
    fcaa:	4620      	mov	r0, r4
    fcac:	f005 fb31 	bl	15312 <net_buf_unref>
    fcb0:	e7d3      	b.n	fc5a <send_cmd+0x46>
    fcb2:	bf00      	nop
    fcb4:	200003a4 	.word	0x200003a4
    fcb8:	20000290 	.word	0x20000290
    fcbc:	00017154 	.word	0x00017154
    fcc0:	00017220 	.word	0x00017220
    fcc4:	000171a4 	.word	0x000171a4
    fcc8:	200017d8 	.word	0x200017d8

0000fccc <hci_tx_thread>:
{
    fccc:	b508      	push	{r3, lr}
    fcce:	e005      	b.n	fcdc <hci_tx_thread+0x10>
		process_events(events, ev_count);
    fcd0:	2101      	movs	r1, #1
    fcd2:	4810      	ldr	r0, [pc, #64]	; (fd14 <hci_tx_thread+0x48>)
    fcd4:	f005 f965 	bl	14fa2 <process_events>
	z_impl_k_yield();
    fcd8:	f003 fdb4 	bl	13844 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
    fcdc:	480d      	ldr	r0, [pc, #52]	; (fd14 <hci_tx_thread+0x48>)
    fcde:	68c3      	ldr	r3, [r0, #12]
    fce0:	f36f 3352 	bfc	r3, #13, #6
    fce4:	60c3      	str	r3, [r0, #12]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    fce6:	f04f 32ff 	mov.w	r2, #4294967295
    fcea:	f04f 33ff 	mov.w	r3, #4294967295
    fcee:	2101      	movs	r1, #1
    fcf0:	f004 f846 	bl	13d80 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    fcf4:	2800      	cmp	r0, #0
    fcf6:	d0eb      	beq.n	fcd0 <hci_tx_thread+0x4>
    fcf8:	f640 1393 	movw	r3, #2451	; 0x993
    fcfc:	4a06      	ldr	r2, [pc, #24]	; (fd18 <hci_tx_thread+0x4c>)
    fcfe:	4907      	ldr	r1, [pc, #28]	; (fd1c <hci_tx_thread+0x50>)
    fd00:	4807      	ldr	r0, [pc, #28]	; (fd20 <hci_tx_thread+0x54>)
    fd02:	f004 fb97 	bl	14434 <printk>
    fd06:	4040      	eors	r0, r0
    fd08:	f380 8811 	msr	BASEPRI, r0
    fd0c:	f04f 0003 	mov.w	r0, #3
    fd10:	df02      	svc	2
    fd12:	e7dd      	b.n	fcd0 <hci_tx_thread+0x4>
    fd14:	200003c8 	.word	0x200003c8
    fd18:	00017154 	.word	0x00017154
    fd1c:	000171f4 	.word	0x000171f4
    fd20:	000171a4 	.word	0x000171a4

0000fd24 <hci_event_prio>:
{
    fd24:	b570      	push	{r4, r5, r6, lr}
    fd26:	b082      	sub	sp, #8
    fd28:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    fd2a:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    fd2e:	4628      	mov	r0, r5
    fd30:	f005 fb42 	bl	153b8 <net_buf_simple_headroom>
    fd34:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
    fd38:	89a3      	ldrh	r3, [r4, #12]
    fd3a:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    fd3e:	2b01      	cmp	r3, #1
    fd40:	d92f      	bls.n	fda2 <hci_event_prio+0x7e>
	return net_buf_simple_pull_mem(&buf->b, len);
    fd42:	2102      	movs	r1, #2
    fd44:	4628      	mov	r0, r5
    fd46:	f005 fb27 	bl	15398 <net_buf_simple_pull_mem>
    fd4a:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fd4c:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
    fd4e:	2b05      	cmp	r3, #5
    fd50:	d037      	beq.n	fdc2 <hci_event_prio+0x9e>
    fd52:	d338      	bcc.n	fdc6 <hci_event_prio+0xa2>
    fd54:	3b0e      	subs	r3, #14
    fd56:	b2db      	uxtb	r3, r3
    fd58:	2b01      	cmp	r3, #1
    fd5a:	d830      	bhi.n	fdbe <hci_event_prio+0x9a>
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    fd5c:	2601      	movs	r6, #1
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    fd5e:	f016 0f01 	tst.w	r6, #1
    fd62:	d032      	beq.n	fdca <hci_event_prio+0xa6>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    fd64:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
    fd66:	2300      	movs	r3, #0
    fd68:	2b01      	cmp	r3, #1
    fd6a:	d80d      	bhi.n	fd88 <hci_event_prio+0x64>
		const struct event_handler *handler = &handlers[i];
    fd6c:	4a21      	ldr	r2, [pc, #132]	; (fdf4 <hci_event_prio+0xd0>)
    fd6e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
    fd72:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    fd76:	4290      	cmp	r0, r2
    fd78:	d135      	bne.n	fde6 <hci_event_prio+0xc2>
		if (buf->len < handler->min_len) {
    fd7a:	89a2      	ldrh	r2, [r4, #12]
    fd7c:	784b      	ldrb	r3, [r1, #1]
    fd7e:	429a      	cmp	r2, r3
    fd80:	d302      	bcc.n	fd88 <hci_event_prio+0x64>
		handler->handler(buf);
    fd82:	684b      	ldr	r3, [r1, #4]
    fd84:	4620      	mov	r0, r4
    fd86:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    fd88:	f016 0f02 	tst.w	r6, #2
    fd8c:	d02d      	beq.n	fdea <hci_event_prio+0xc6>
	buf->data = buf->__buf + state->offset;
    fd8e:	6923      	ldr	r3, [r4, #16]
    fd90:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fd94:	4413      	add	r3, r2
    fd96:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    fd98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fd9c:	81a3      	strh	r3, [r4, #12]
}
    fd9e:	b002      	add	sp, #8
    fda0:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    fda2:	f640 5327 	movw	r3, #3367	; 0xd27
    fda6:	4a14      	ldr	r2, [pc, #80]	; (fdf8 <hci_event_prio+0xd4>)
    fda8:	4914      	ldr	r1, [pc, #80]	; (fdfc <hci_event_prio+0xd8>)
    fdaa:	4815      	ldr	r0, [pc, #84]	; (fe00 <hci_event_prio+0xdc>)
    fdac:	f004 fb42 	bl	14434 <printk>
    fdb0:	4040      	eors	r0, r0
    fdb2:	f380 8811 	msr	BASEPRI, r0
    fdb6:	f04f 0003 	mov.w	r0, #3
    fdba:	df02      	svc	2
    fdbc:	e7c1      	b.n	fd42 <hci_event_prio+0x1e>
		return BT_HCI_EVT_FLAG_RECV;
    fdbe:	2602      	movs	r6, #2
    fdc0:	e7cd      	b.n	fd5e <hci_event_prio+0x3a>
	switch (evt) {
    fdc2:	2603      	movs	r6, #3
    fdc4:	e7cb      	b.n	fd5e <hci_event_prio+0x3a>
		return BT_HCI_EVT_FLAG_RECV;
    fdc6:	2602      	movs	r6, #2
    fdc8:	e7c9      	b.n	fd5e <hci_event_prio+0x3a>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    fdca:	f640 532b 	movw	r3, #3371	; 0xd2b
    fdce:	4a0a      	ldr	r2, [pc, #40]	; (fdf8 <hci_event_prio+0xd4>)
    fdd0:	490c      	ldr	r1, [pc, #48]	; (fe04 <hci_event_prio+0xe0>)
    fdd2:	480b      	ldr	r0, [pc, #44]	; (fe00 <hci_event_prio+0xdc>)
    fdd4:	f004 fb2e 	bl	14434 <printk>
    fdd8:	4040      	eors	r0, r0
    fdda:	f380 8811 	msr	BASEPRI, r0
    fdde:	f04f 0003 	mov.w	r0, #3
    fde2:	df02      	svc	2
    fde4:	e7be      	b.n	fd64 <hci_event_prio+0x40>
	for (i = 0; i < num_handlers; i++) {
    fde6:	3301      	adds	r3, #1
    fde8:	e7be      	b.n	fd68 <hci_event_prio+0x44>
		net_buf_unref(buf);
    fdea:	4620      	mov	r0, r4
    fdec:	f005 fa91 	bl	15312 <net_buf_unref>
}
    fdf0:	e7d5      	b.n	fd9e <hci_event_prio+0x7a>
    fdf2:	bf00      	nop
    fdf4:	00017280 	.word	0x00017280
    fdf8:	00017154 	.word	0x00017154
    fdfc:	00017188 	.word	0x00017188
    fe00:	000171a4 	.word	0x000171a4
    fe04:	00017224 	.word	0x00017224

0000fe08 <bt_recv>:
{
    fe08:	b538      	push	{r3, r4, r5, lr}
    fe0a:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    fe0c:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    fe0e:	2d01      	cmp	r5, #1
    fe10:	d120      	bne.n	fe54 <bt_recv+0x4c>
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    fe12:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fe14:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
    fe16:	2b05      	cmp	r3, #5
    fe18:	d00e      	beq.n	fe38 <bt_recv+0x30>
    fe1a:	d30f      	bcc.n	fe3c <bt_recv+0x34>
    fe1c:	3b0e      	subs	r3, #14
    fe1e:	b2db      	uxtb	r3, r3
    fe20:	2b01      	cmp	r3, #1
    fe22:	d807      	bhi.n	fe34 <bt_recv+0x2c>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    fe24:	f015 0f01 	tst.w	r5, #1
    fe28:	d10a      	bne.n	fe40 <bt_recv+0x38>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    fe2a:	f015 0f02 	tst.w	r5, #2
    fe2e:	d10b      	bne.n	fe48 <bt_recv+0x40>
		return 0;
    fe30:	2000      	movs	r0, #0
}
    fe32:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV;
    fe34:	2502      	movs	r5, #2
    fe36:	e7f5      	b.n	fe24 <bt_recv+0x1c>
	switch (evt) {
    fe38:	2503      	movs	r5, #3
    fe3a:	e7f3      	b.n	fe24 <bt_recv+0x1c>
		return BT_HCI_EVT_FLAG_RECV;
    fe3c:	2502      	movs	r5, #2
    fe3e:	e7f1      	b.n	fe24 <bt_recv+0x1c>
			hci_event_prio(buf);
    fe40:	4620      	mov	r0, r4
    fe42:	f7ff ff6f 	bl	fd24 <hci_event_prio>
    fe46:	e7f0      	b.n	fe2a <bt_recv+0x22>
			net_buf_put(&bt_dev.rx_queue, buf);
    fe48:	4621      	mov	r1, r4
    fe4a:	4805      	ldr	r0, [pc, #20]	; (fe60 <bt_recv+0x58>)
    fe4c:	f005 fa54 	bl	152f8 <net_buf_put>
		return 0;
    fe50:	2000      	movs	r0, #0
    fe52:	e7ee      	b.n	fe32 <bt_recv+0x2a>
		net_buf_unref(buf);
    fe54:	f005 fa5d 	bl	15312 <net_buf_unref>
		return -EINVAL;
    fe58:	f06f 0015 	mvn.w	r0, #21
    fe5c:	e7e9      	b.n	fe32 <bt_recv+0x2a>
    fe5e:	bf00      	nop
    fe60:	2000038c 	.word	0x2000038c

0000fe64 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    fe64:	4b0a      	ldr	r3, [pc, #40]	; (fe90 <bt_hci_driver_register+0x2c>)
    fe66:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
    fe6a:	b943      	cbnz	r3, fe7e <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    fe6c:	68c3      	ldr	r3, [r0, #12]
    fe6e:	b14b      	cbz	r3, fe84 <bt_hci_driver_register+0x20>
    fe70:	6903      	ldr	r3, [r0, #16]
    fe72:	b153      	cbz	r3, fe8a <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    fe74:	4b06      	ldr	r3, [pc, #24]	; (fe90 <bt_hci_driver_register+0x2c>)
    fe76:	f8c3 012c 	str.w	r0, [r3, #300]	; 0x12c
	return 0;
    fe7a:	2000      	movs	r0, #0
    fe7c:	4770      	bx	lr
		return -EALREADY;
    fe7e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    fe82:	4770      	bx	lr
		return -EINVAL;
    fe84:	f06f 0015 	mvn.w	r0, #21
    fe88:	4770      	bx	lr
    fe8a:	f06f 0015 	mvn.w	r0, #21
}
    fe8e:	4770      	bx	lr
    fe90:	20000290 	.word	0x20000290

0000fe94 <bt_finalize_init>:
{
    fe94:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fe96:	4b08      	ldr	r3, [pc, #32]	; (feb8 <bt_finalize_init+0x24>)
    fe98:	f3bf 8f5b 	dmb	ish
    fe9c:	e853 2f00 	ldrex	r2, [r3]
    fea0:	f042 0202 	orr.w	r2, r2, #2
    fea4:	e843 2100 	strex	r1, r2, [r3]
    fea8:	2900      	cmp	r1, #0
    feaa:	d1f7      	bne.n	fe9c <bt_finalize_init+0x8>
    feac:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
    feb0:	2000      	movs	r0, #0
    feb2:	f000 fb63 	bl	1057c <bt_le_scan_update>
}
    feb6:	bd08      	pop	{r3, pc}
    feb8:	2000035c 	.word	0x2000035c

0000febc <init_work>:
{
    febc:	b508      	push	{r3, lr}
	err = bt_init();
    febe:	f005 f883 	bl	14fc8 <bt_init>
	if (ready_cb) {
    fec2:	4b02      	ldr	r3, [pc, #8]	; (fecc <init_work+0x10>)
    fec4:	681b      	ldr	r3, [r3, #0]
    fec6:	b103      	cbz	r3, feca <init_work+0xe>
		ready_cb(err);
    fec8:	4798      	blx	r3
}
    feca:	bd08      	pop	{r3, pc}
    fecc:	200017f0 	.word	0x200017f0

0000fed0 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    fed0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    fed4:	b088      	sub	sp, #32
	int err;

	if (!bt_dev.drv) {
    fed6:	4b30      	ldr	r3, [pc, #192]	; (ff98 <bt_enable+0xc8>)
    fed8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
    fedc:	2b00      	cmp	r3, #0
    fede:	d054      	beq.n	ff8a <bt_enable+0xba>
    fee0:	4605      	mov	r5, r0
    fee2:	4b2e      	ldr	r3, [pc, #184]	; (ff9c <bt_enable+0xcc>)
    fee4:	f3bf 8f5b 	dmb	ish
    fee8:	e853 2f00 	ldrex	r2, [r3]
    feec:	f042 0101 	orr.w	r1, r2, #1
    fef0:	e843 1000 	strex	r0, r1, [r3]
    fef4:	2800      	cmp	r0, #0
    fef6:	d1f7      	bne.n	fee8 <bt_enable+0x18>
    fef8:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    fefc:	f012 0f01 	tst.w	r2, #1
    ff00:	d146      	bne.n	ff90 <bt_enable+0xc0>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    ff02:	4b27      	ldr	r3, [pc, #156]	; (ffa0 <bt_enable+0xd0>)
    ff04:	601d      	str	r5, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
    ff06:	f04f 0800 	mov.w	r8, #0
    ff0a:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ff0e:	4e25      	ldr	r6, [pc, #148]	; (ffa4 <bt_enable+0xd4>)
    ff10:	e9cd 8906 	strd	r8, r9, [sp, #24]
    ff14:	2400      	movs	r4, #0
    ff16:	9404      	str	r4, [sp, #16]
    ff18:	f06f 0308 	mvn.w	r3, #8
    ff1c:	9303      	str	r3, [sp, #12]
    ff1e:	9402      	str	r4, [sp, #8]
    ff20:	9401      	str	r4, [sp, #4]
    ff22:	9400      	str	r4, [sp, #0]
    ff24:	4b20      	ldr	r3, [pc, #128]	; (ffa8 <bt_enable+0xd8>)
    ff26:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    ff2a:	4920      	ldr	r1, [pc, #128]	; (ffac <bt_enable+0xdc>)
    ff2c:	4630      	mov	r0, r6
    ff2e:	f006 fb0a 	bl	16546 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ff32:	491f      	ldr	r1, [pc, #124]	; (ffb0 <bt_enable+0xe0>)
    ff34:	4630      	mov	r0, r6
    ff36:	f002 fdd9 	bl	12aec <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ff3a:	4e1e      	ldr	r6, [pc, #120]	; (ffb4 <bt_enable+0xe4>)
    ff3c:	e9cd 8906 	strd	r8, r9, [sp, #24]
    ff40:	9404      	str	r4, [sp, #16]
    ff42:	f06f 0307 	mvn.w	r3, #7
    ff46:	9303      	str	r3, [sp, #12]
    ff48:	9402      	str	r4, [sp, #8]
    ff4a:	9401      	str	r4, [sp, #4]
    ff4c:	9400      	str	r4, [sp, #0]
    ff4e:	4b1a      	ldr	r3, [pc, #104]	; (ffb8 <bt_enable+0xe8>)
    ff50:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ff54:	4919      	ldr	r1, [pc, #100]	; (ffbc <bt_enable+0xec>)
    ff56:	4630      	mov	r0, r6
    ff58:	f006 faf5 	bl	16546 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ff5c:	4918      	ldr	r1, [pc, #96]	; (ffc0 <bt_enable+0xf0>)
    ff5e:	4630      	mov	r0, r6
    ff60:	f002 fdc4 	bl	12aec <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    ff64:	4b0c      	ldr	r3, [pc, #48]	; (ff98 <bt_enable+0xc8>)
    ff66:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
    ff6a:	68db      	ldr	r3, [r3, #12]
    ff6c:	4798      	blx	r3
	if (err) {
    ff6e:	4604      	mov	r4, r0
    ff70:	b918      	cbnz	r0, ff7a <bt_enable+0xaa>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    ff72:	b135      	cbz	r5, ff82 <bt_enable+0xb2>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
    ff74:	4813      	ldr	r0, [pc, #76]	; (ffc4 <bt_enable+0xf4>)
    ff76:	f003 f923 	bl	131c0 <k_work_submit>
	return 0;
}
    ff7a:	4620      	mov	r0, r4
    ff7c:	b008      	add	sp, #32
    ff7e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		return bt_init();
    ff82:	f005 f821 	bl	14fc8 <bt_init>
    ff86:	4604      	mov	r4, r0
    ff88:	e7f7      	b.n	ff7a <bt_enable+0xaa>
		return -ENODEV;
    ff8a:	f06f 0412 	mvn.w	r4, #18
    ff8e:	e7f4      	b.n	ff7a <bt_enable+0xaa>
		return -EALREADY;
    ff90:	f06f 0477 	mvn.w	r4, #119	; 0x77
    ff94:	e7f1      	b.n	ff7a <bt_enable+0xaa>
    ff96:	bf00      	nop
    ff98:	20000290 	.word	0x20000290
    ff9c:	2000035c 	.word	0x2000035c
    ffa0:	200017f0 	.word	0x200017f0
    ffa4:	20001318 	.word	0x20001318
    ffa8:	0000fccd 	.word	0x0000fccd
    ffac:	200023c0 	.word	0x200023c0
    ffb0:	00017240 	.word	0x00017240
    ffb4:	20001260 	.word	0x20001260
    ffb8:	0000f85d 	.word	0x0000f85d
    ffbc:	20001fa0 	.word	0x20001fa0
    ffc0:	00017248 	.word	0x00017248
    ffc4:	2000034c 	.word	0x2000034c

0000ffc8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    ffc8:	b570      	push	{r4, r5, r6, lr}
    ffca:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    ffcc:	2400      	movs	r4, #0
    ffce:	4b0a      	ldr	r3, [pc, #40]	; (fff8 <id_find+0x30>)
    ffd0:	79db      	ldrb	r3, [r3, #7]
    ffd2:	42a3      	cmp	r3, r4
    ffd4:	d90c      	bls.n	fff0 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    ffd6:	4626      	mov	r6, r4
    ffd8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    ffdc:	2207      	movs	r2, #7
    ffde:	4b06      	ldr	r3, [pc, #24]	; (fff8 <id_find+0x30>)
    ffe0:	4419      	add	r1, r3
    ffe2:	4628      	mov	r0, r5
    ffe4:	f004 ff0d 	bl	14e02 <memcmp>
    ffe8:	b120      	cbz	r0, fff4 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
    ffea:	3401      	adds	r4, #1
    ffec:	b2e4      	uxtb	r4, r4
    ffee:	e7ee      	b.n	ffce <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
    fff0:	f06f 0601 	mvn.w	r6, #1
}
    fff4:	4630      	mov	r0, r6
    fff6:	bd70      	pop	{r4, r5, r6, pc}
    fff8:	20000290 	.word	0x20000290

0000fffc <set_random_address>:
{
    fffc:	b570      	push	{r4, r5, r6, lr}
    fffe:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   10000:	2206      	movs	r2, #6
   10002:	4914      	ldr	r1, [pc, #80]	; (10054 <CONFIG_PM_SRAM_SIZE+0x54>)
   10004:	f004 fefd 	bl	14e02 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   10008:	4605      	mov	r5, r0
   1000a:	b908      	cbnz	r0, 10010 <CONFIG_PM_SRAM_SIZE+0x10>
}
   1000c:	4628      	mov	r0, r5
   1000e:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   10010:	2106      	movs	r1, #6
   10012:	f242 0005 	movw	r0, #8197	; 0x2005
   10016:	f7ff fc49 	bl	f8ac <bt_hci_cmd_create>
	if (!buf) {
   1001a:	4605      	mov	r5, r0
   1001c:	b1b8      	cbz	r0, 1004e <CONFIG_PM_SRAM_SIZE+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1001e:	2206      	movs	r2, #6
   10020:	4621      	mov	r1, r4
   10022:	3008      	adds	r0, #8
   10024:	f005 f9a5 	bl	15372 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   10028:	2200      	movs	r2, #0
   1002a:	4629      	mov	r1, r5
   1002c:	f242 0005 	movw	r0, #8197	; 0x2005
   10030:	f7ff fc78 	bl	f924 <bt_hci_cmd_send_sync>
	if (err) {
   10034:	4605      	mov	r5, r0
   10036:	2800      	cmp	r0, #0
   10038:	d1e8      	bne.n	1000c <CONFIG_PM_SRAM_SIZE+0xc>
	memcpy(dst, src, sizeof(*dst));
   1003a:	4e06      	ldr	r6, [pc, #24]	; (10054 <CONFIG_PM_SRAM_SIZE+0x54>)
   1003c:	2206      	movs	r2, #6
   1003e:	4621      	mov	r1, r4
   10040:	4630      	mov	r0, r6
   10042:	f004 fef5 	bl	14e30 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   10046:	2301      	movs	r3, #1
   10048:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   1004c:	e7de      	b.n	1000c <CONFIG_PM_SRAM_SIZE+0xc>
		return -ENOBUFS;
   1004e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   10052:	e7db      	b.n	1000c <CONFIG_PM_SRAM_SIZE+0xc>
   10054:	200002f1 	.word	0x200002f1

00010058 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   10058:	b530      	push	{r4, r5, lr}
   1005a:	b085      	sub	sp, #20
   1005c:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1005e:	460d      	mov	r5, r1
   10060:	b149      	cbz	r1, 10076 <id_create+0x1e>
   10062:	2300      	movs	r3, #0
   10064:	9302      	str	r3, [sp, #8]
   10066:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   1006a:	2207      	movs	r2, #7
   1006c:	a902      	add	r1, sp, #8
   1006e:	4628      	mov	r0, r5
   10070:	f004 fec7 	bl	14e02 <memcmp>
   10074:	b9e0      	cbnz	r0, 100b0 <id_create+0x58>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   10076:	4668      	mov	r0, sp
   10078:	f004 ff3c 	bl	14ef4 <bt_addr_le_create_static>
			if (err) {
   1007c:	4603      	mov	r3, r0
   1007e:	b9a0      	cbnz	r0, 100aa <id_create+0x52>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   10080:	4668      	mov	r0, sp
   10082:	f7ff ffa1 	bl	ffc8 <id_find>
   10086:	2800      	cmp	r0, #0
   10088:	daf5      	bge.n	10076 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1008a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1008e:	4b0d      	ldr	r3, [pc, #52]	; (100c4 <id_create+0x6c>)
   10090:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   10092:	2207      	movs	r2, #7
   10094:	4669      	mov	r1, sp
   10096:	4620      	mov	r0, r4
   10098:	f004 feca 	bl	14e30 <memcpy>

		if (addr) {
   1009c:	b125      	cbz	r5, 100a8 <id_create+0x50>
   1009e:	2207      	movs	r2, #7
   100a0:	4621      	mov	r1, r4
   100a2:	4628      	mov	r0, r5
   100a4:	f004 fec4 	bl	14e30 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   100a8:	2300      	movs	r3, #0
}
   100aa:	4618      	mov	r0, r3
   100ac:	b005      	add	sp, #20
   100ae:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   100b0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   100b4:	2207      	movs	r2, #7
   100b6:	4629      	mov	r1, r5
   100b8:	4802      	ldr	r0, [pc, #8]	; (100c4 <id_create+0x6c>)
   100ba:	4420      	add	r0, r4
   100bc:	f004 feb8 	bl	14e30 <memcpy>
}
   100c0:	e7f2      	b.n	100a8 <id_create+0x50>
   100c2:	bf00      	nop
   100c4:	20000290 	.word	0x20000290

000100c8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   100c8:	b570      	push	{r4, r5, r6, lr}
   100ca:	b084      	sub	sp, #16
   100cc:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   100ce:	4605      	mov	r5, r0
   100d0:	b1c0      	cbz	r0, 10104 <bt_id_create+0x3c>
   100d2:	2300      	movs	r3, #0
   100d4:	9300      	str	r3, [sp, #0]
   100d6:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   100da:	2207      	movs	r2, #7
   100dc:	4669      	mov	r1, sp
   100de:	f004 fe90 	bl	14e02 <memcmp>
   100e2:	b178      	cbz	r0, 10104 <bt_id_create+0x3c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   100e4:	782b      	ldrb	r3, [r5, #0]
   100e6:	2b01      	cmp	r3, #1
   100e8:	d132      	bne.n	10150 <bt_id_create+0x88>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   100ea:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   100ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   100f0:	2bc0      	cmp	r3, #192	; 0xc0
   100f2:	d002      	beq.n	100fa <bt_id_create+0x32>
			BT_ERR("Only static random identity address supported");
			return -EINVAL;
   100f4:	f06f 0015 	mvn.w	r0, #21
   100f8:	e028      	b.n	1014c <bt_id_create+0x84>
		}

		if (id_find(addr) >= 0) {
   100fa:	4628      	mov	r0, r5
   100fc:	f7ff ff64 	bl	ffc8 <id_find>
   10100:	2800      	cmp	r0, #0
   10102:	da28      	bge.n	10156 <bt_id_create+0x8e>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   10104:	bb6c      	cbnz	r4, 10162 <bt_id_create+0x9a>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   10106:	4b1a      	ldr	r3, [pc, #104]	; (10170 <bt_id_create+0xa8>)
   10108:	79db      	ldrb	r3, [r3, #7]
   1010a:	2b01      	cmp	r3, #1
   1010c:	d02c      	beq.n	10168 <bt_id_create+0xa0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1010e:	f3bf 8f5b 	dmb	ish
   10112:	4b18      	ldr	r3, [pc, #96]	; (10174 <bt_id_create+0xac>)
   10114:	681b      	ldr	r3, [r3, #0]
   10116:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1011a:	f013 0f01 	tst.w	r3, #1
   1011e:	d10a      	bne.n	10136 <bt_id_create+0x6e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   10120:	b1e5      	cbz	r5, 1015c <bt_id_create+0x94>
   10122:	2300      	movs	r3, #0
   10124:	9302      	str	r3, [sp, #8]
   10126:	f8cd 300b 	str.w	r3, [sp, #11]
   1012a:	2207      	movs	r2, #7
   1012c:	a902      	add	r1, sp, #8
   1012e:	4628      	mov	r0, r5
   10130:	f004 fe67 	bl	14e02 <memcmp>
   10134:	b190      	cbz	r0, 1015c <bt_id_create+0x94>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   10136:	4b0e      	ldr	r3, [pc, #56]	; (10170 <bt_id_create+0xa8>)
   10138:	79de      	ldrb	r6, [r3, #7]
   1013a:	1c72      	adds	r2, r6, #1
   1013c:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   1013e:	4622      	mov	r2, r4
   10140:	4629      	mov	r1, r5
   10142:	4630      	mov	r0, r6
   10144:	f7ff ff88 	bl	10058 <id_create>
	if (err) {
   10148:	b900      	cbnz	r0, 1014c <bt_id_create+0x84>
		return err;
	}

	return new_id;
   1014a:	4630      	mov	r0, r6
}
   1014c:	b004      	add	sp, #16
   1014e:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   10150:	f06f 0015 	mvn.w	r0, #21
   10154:	e7fa      	b.n	1014c <bt_id_create+0x84>
			return -EALREADY;
   10156:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1015a:	e7f7      	b.n	1014c <bt_id_create+0x84>
			return -EINVAL;
   1015c:	f06f 0015 	mvn.w	r0, #21
   10160:	e7f4      	b.n	1014c <bt_id_create+0x84>
		return -EINVAL;
   10162:	f06f 0015 	mvn.w	r0, #21
   10166:	e7f1      	b.n	1014c <bt_id_create+0x84>
		return -ENOMEM;
   10168:	f06f 000b 	mvn.w	r0, #11
   1016c:	e7ee      	b.n	1014c <bt_id_create+0x84>
   1016e:	bf00      	nop
   10170:	20000290 	.word	0x20000290
   10174:	2000035c 	.word	0x2000035c

00010178 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   10178:	b530      	push	{r4, r5, lr}
   1017a:	b087      	sub	sp, #28
   1017c:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1017e:	aa01      	add	r2, sp, #4
   10180:	2100      	movs	r1, #0
   10182:	f241 0009 	movw	r0, #4105	; 0x1009
   10186:	f7ff fbcd 	bl	f924 <bt_hci_cmd_send_sync>
	if (err) {
   1018a:	b110      	cbz	r0, 10192 <bt_id_read_public_addr+0x1a>
		BT_WARN("Failed to read public address");
		return 0U;
   1018c:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1018e:	b007      	add	sp, #28
   10190:	bd30      	pop	{r4, r5, pc}
	rp = (void *)rsp->data;
   10192:	9b01      	ldr	r3, [sp, #4]
   10194:	689c      	ldr	r4, [r3, #8]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   10196:	3401      	adds	r4, #1
   10198:	2300      	movs	r3, #0
   1019a:	9302      	str	r3, [sp, #8]
   1019c:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   101a0:	2206      	movs	r2, #6
   101a2:	a902      	add	r1, sp, #8
   101a4:	4620      	mov	r0, r4
   101a6:	f004 fe2c 	bl	14e02 <memcmp>
   101aa:	b158      	cbz	r0, 101c4 <bt_id_read_public_addr+0x4c>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   101ac:	4b0e      	ldr	r3, [pc, #56]	; (101e8 <bt_id_read_public_addr+0x70>)
   101ae:	e893 0003 	ldmia.w	r3, {r0, r1}
   101b2:	9004      	str	r0, [sp, #16]
   101b4:	f8ad 1014 	strh.w	r1, [sp, #20]
   101b8:	2206      	movs	r2, #6
   101ba:	a904      	add	r1, sp, #16
   101bc:	4620      	mov	r0, r4
   101be:	f004 fe20 	bl	14e02 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   101c2:	b920      	cbnz	r0, 101ce <bt_id_read_public_addr+0x56>
		net_buf_unref(rsp);
   101c4:	9801      	ldr	r0, [sp, #4]
   101c6:	f005 f8a4 	bl	15312 <net_buf_unref>
		return 0U;
   101ca:	2000      	movs	r0, #0
   101cc:	e7df      	b.n	1018e <bt_id_read_public_addr+0x16>
	memcpy(dst, src, sizeof(*dst));
   101ce:	2206      	movs	r2, #6
   101d0:	4621      	mov	r1, r4
   101d2:	1c68      	adds	r0, r5, #1
   101d4:	f004 fe2c 	bl	14e30 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   101d8:	2300      	movs	r3, #0
   101da:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   101dc:	9801      	ldr	r0, [sp, #4]
   101de:	f005 f898 	bl	15312 <net_buf_unref>
	return 1U;
   101e2:	2001      	movs	r0, #1
   101e4:	e7d3      	b.n	1018e <bt_id_read_public_addr+0x16>
   101e6:	bf00      	nop
   101e8:	00016fa0 	.word	0x00016fa0

000101ec <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   101ec:	b500      	push	{lr}
   101ee:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   101f0:	4668      	mov	r0, sp
   101f2:	f7ff ffc1 	bl	10178 <bt_id_read_public_addr>
   101f6:	4b06      	ldr	r3, [pc, #24]	; (10210 <bt_setup_public_id_addr+0x24>)
   101f8:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   101fa:	b918      	cbnz	r0, 10204 <bt_setup_public_id_addr+0x18>
		return 0;
   101fc:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   101fe:	b003      	add	sp, #12
   10200:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   10204:	2200      	movs	r2, #0
   10206:	4669      	mov	r1, sp
   10208:	4610      	mov	r0, r2
   1020a:	f7ff ff25 	bl	10058 <id_create>
   1020e:	e7f6      	b.n	101fe <bt_setup_public_id_addr+0x12>
   10210:	20000290 	.word	0x20000290

00010214 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   10214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10218:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1021a:	4b15      	ldr	r3, [pc, #84]	; (10270 <bt_read_static_addr+0x5c>)
   1021c:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   10220:	f015 0501 	ands.w	r5, r5, #1
   10224:	d103      	bne.n	1022e <bt_read_static_addr+0x1a>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   10226:	4628      	mov	r0, r5
   10228:	b002      	add	sp, #8
   1022a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1022e:	4606      	mov	r6, r0
   10230:	4688      	mov	r8, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   10232:	aa01      	add	r2, sp, #4
   10234:	2100      	movs	r1, #0
   10236:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1023a:	f7ff fb73 	bl	f924 <bt_hci_cmd_send_sync>
	if (err) {
   1023e:	4604      	mov	r4, r0
   10240:	b998      	cbnz	r0, 1026a <bt_read_static_addr+0x56>
	rp = (void *)rsp->data;
   10242:	9b01      	ldr	r3, [sp, #4]
   10244:	689f      	ldr	r7, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   10246:	787d      	ldrb	r5, [r7, #1]
   10248:	4545      	cmp	r5, r8
   1024a:	bf28      	it	cs
   1024c:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   1024e:	e006      	b.n	1025e <bt_read_static_addr+0x4a>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10250:	2216      	movs	r2, #22
   10252:	1cb9      	adds	r1, r7, #2
   10254:	fb02 6004 	mla	r0, r2, r4, r6
   10258:	f004 fdea 	bl	14e30 <memcpy>
	for (i = 0; i < cnt; i++) {
   1025c:	3401      	adds	r4, #1
   1025e:	42a5      	cmp	r5, r4
   10260:	dcf6      	bgt.n	10250 <bt_read_static_addr+0x3c>
	net_buf_unref(rsp);
   10262:	9801      	ldr	r0, [sp, #4]
   10264:	f005 f855 	bl	15312 <net_buf_unref>
	return cnt;
   10268:	e7dd      	b.n	10226 <bt_read_static_addr+0x12>
		return 0;
   1026a:	2500      	movs	r5, #0
   1026c:	e7db      	b.n	10226 <bt_read_static_addr+0x12>
   1026e:	bf00      	nop
   10270:	20000290 	.word	0x20000290

00010274 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   10274:	b510      	push	{r4, lr}
   10276:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   10278:	4b17      	ldr	r3, [pc, #92]	; (102d8 <bt_setup_random_id_addr+0x64>)
   1027a:	79dc      	ldrb	r4, [r3, #7]
   1027c:	b934      	cbnz	r4, 1028c <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1027e:	2101      	movs	r1, #1
   10280:	a802      	add	r0, sp, #8
   10282:	f7ff ffc7 	bl	10214 <bt_read_static_addr>
   10286:	4b14      	ldr	r3, [pc, #80]	; (102d8 <bt_setup_random_id_addr+0x64>)
   10288:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   1028a:	b938      	cbnz	r0, 1029c <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1028c:	2100      	movs	r1, #0
   1028e:	4608      	mov	r0, r1
   10290:	f7ff ff1a 	bl	100c8 <bt_id_create>
   10294:	4603      	mov	r3, r0
}
   10296:	4618      	mov	r0, r3
   10298:	b008      	add	sp, #32
   1029a:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1029c:	4b0e      	ldr	r3, [pc, #56]	; (102d8 <bt_setup_random_id_addr+0x64>)
   1029e:	79db      	ldrb	r3, [r3, #7]
   102a0:	42a3      	cmp	r3, r4
   102a2:	d916      	bls.n	102d2 <bt_setup_random_id_addr+0x5e>
   102a4:	2206      	movs	r2, #6
   102a6:	2116      	movs	r1, #22
   102a8:	ab02      	add	r3, sp, #8
   102aa:	fb01 3104 	mla	r1, r1, r4, r3
   102ae:	f10d 0001 	add.w	r0, sp, #1
   102b2:	f004 fdbd 	bl	14e30 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   102b6:	2301      	movs	r3, #1
   102b8:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   102bc:	2200      	movs	r2, #0
   102be:	4669      	mov	r1, sp
   102c0:	4620      	mov	r0, r4
   102c2:	f7ff fec9 	bl	10058 <id_create>
				if (err) {
   102c6:	4603      	mov	r3, r0
   102c8:	2800      	cmp	r0, #0
   102ca:	d1e4      	bne.n	10296 <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   102cc:	3401      	adds	r4, #1
   102ce:	b2e4      	uxtb	r4, r4
   102d0:	e7e4      	b.n	1029c <bt_setup_random_id_addr+0x28>
			return 0;
   102d2:	2300      	movs	r3, #0
   102d4:	e7df      	b.n	10296 <bt_setup_random_id_addr+0x22>
   102d6:	bf00      	nop
   102d8:	20000290 	.word	0x20000290

000102dc <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   102dc:	b510      	push	{r4, lr}
   102de:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   102e0:	4b07      	ldr	r3, [pc, #28]	; (10300 <bt_id_set_scan_own_addr+0x24>)
   102e2:	781b      	ldrb	r3, [r3, #0]
   102e4:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   102e6:	f004 fe79 	bl	14fdc <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   102ea:	b108      	cbz	r0, 102f0 <bt_id_set_scan_own_addr+0x14>
				return err;
			}
		}
	}

	return 0;
   102ec:	2000      	movs	r0, #0
}
   102ee:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   102f0:	f004 fe78 	bl	14fe4 <bt_id_set_private_addr>
			if (err) {
   102f4:	2800      	cmp	r0, #0
   102f6:	d1fa      	bne.n	102ee <bt_id_set_scan_own_addr+0x12>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   102f8:	2301      	movs	r3, #1
   102fa:	7023      	strb	r3, [r4, #0]
   102fc:	e7f7      	b.n	102ee <bt_id_set_scan_own_addr+0x12>
   102fe:	bf00      	nop
   10300:	20000290 	.word	0x20000290

00010304 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   10304:	b508      	push	{r3, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   10306:	4b0a      	ldr	r3, [pc, #40]	; (10330 <bt_id_init+0x2c>)
   10308:	79db      	ldrb	r3, [r3, #7]
   1030a:	b123      	cbz	r3, 10316 <bt_id_init+0x12>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1030c:	4b08      	ldr	r3, [pc, #32]	; (10330 <bt_id_init+0x2c>)
   1030e:	79db      	ldrb	r3, [r3, #7]
   10310:	b133      	cbz	r3, 10320 <bt_id_init+0x1c>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   10312:	2000      	movs	r0, #0
}
   10314:	bd08      	pop	{r3, pc}
		err = bt_setup_public_id_addr();
   10316:	f7ff ff69 	bl	101ec <bt_setup_public_id_addr>
		if (err) {
   1031a:	2800      	cmp	r0, #0
   1031c:	d0f6      	beq.n	1030c <bt_id_init+0x8>
   1031e:	e7f9      	b.n	10314 <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   10320:	f7ff ffa8 	bl	10274 <bt_setup_random_id_addr>
		if (err) {
   10324:	2800      	cmp	r0, #0
   10326:	d1f5      	bne.n	10314 <bt_id_init+0x10>
		err = set_random_address(&bt_dev.id_addr[0].a);
   10328:	4802      	ldr	r0, [pc, #8]	; (10334 <bt_id_init+0x30>)
   1032a:	f7ff fe67 	bl	fffc <set_random_address>
		if (err) {
   1032e:	e7f1      	b.n	10314 <bt_id_init+0x10>
   10330:	20000290 	.word	0x20000290
   10334:	20000291 	.word	0x20000291

00010338 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   10338:	b530      	push	{r4, r5, lr}
   1033a:	b087      	sub	sp, #28
   1033c:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1033e:	2102      	movs	r1, #2
   10340:	f242 000c 	movw	r0, #8204	; 0x200c
   10344:	f7ff fab2 	bl	f8ac <bt_hci_cmd_create>
	if (!buf) {
   10348:	b330      	cbz	r0, 10398 <bt_le_scan_set_enable_legacy+0x60>
   1034a:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   1034c:	2102      	movs	r1, #2
   1034e:	3008      	adds	r0, #8
   10350:	f005 f809 	bl	15366 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   10354:	2c01      	cmp	r4, #1
   10356:	d015      	beq.n	10384 <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   10358:	2300      	movs	r3, #0
   1035a:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   1035c:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1035e:	2c01      	cmp	r4, #1
   10360:	bf14      	ite	ne
   10362:	2400      	movne	r4, #0
   10364:	2401      	moveq	r4, #1
   10366:	9400      	str	r4, [sp, #0]
   10368:	2305      	movs	r3, #5
   1036a:	4a0d      	ldr	r2, [pc, #52]	; (103a0 <bt_le_scan_set_enable_legacy+0x68>)
   1036c:	a903      	add	r1, sp, #12
   1036e:	4628      	mov	r0, r5
   10370:	f7ff fa8a 	bl	f888 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   10374:	2200      	movs	r2, #0
   10376:	4629      	mov	r1, r5
   10378:	f242 000c 	movw	r0, #8204	; 0x200c
   1037c:	f7ff fad2 	bl	f924 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   10380:	b007      	add	sp, #28
   10382:	bd30      	pop	{r4, r5, pc}
   10384:	f3bf 8f5b 	dmb	ish
   10388:	4b05      	ldr	r3, [pc, #20]	; (103a0 <bt_le_scan_set_enable_legacy+0x68>)
   1038a:	681b      	ldr	r3, [r3, #0]
   1038c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   10390:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   10394:	7043      	strb	r3, [r0, #1]
   10396:	e7e1      	b.n	1035c <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
   10398:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1039c:	e7f0      	b.n	10380 <bt_le_scan_set_enable_legacy+0x48>
   1039e:	bf00      	nop
   103a0:	2000035c 	.word	0x2000035c

000103a4 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf_simple *buf, uint16_t len)
{
   103a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   103a8:	b084      	sub	sp, #16
   103aa:	460f      	mov	r7, r1
   103ac:	4615      	mov	r5, r2
   103ae:	4698      	mov	r8, r3
   103b0:	f3bf 8f5b 	dmb	ish
   103b4:	4b3e      	ldr	r3, [pc, #248]	; (104b0 <le_adv_recv+0x10c>)
   103b6:	681b      	ldr	r3, [r3, #0]
   103b8:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	BT_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr),
	       info->adv_type, len, info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   103bc:	f013 0f40 	tst.w	r3, #64	; 0x40
   103c0:	d003      	beq.n	103ca <le_adv_recv+0x26>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   103c2:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   103c4:	f013 0f04 	tst.w	r3, #4
   103c8:	d16f      	bne.n	104aa <le_adv_recv+0x106>
		BT_DBG("Dropped direct adv report");
		return;
	}

	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   103ca:	7802      	ldrb	r2, [r0, #0]
   103cc:	1e93      	subs	r3, r2, #2
   103ce:	b2db      	uxtb	r3, r3
   103d0:	2b01      	cmp	r3, #1
   103d2:	d92f      	bls.n	10434 <le_adv_recv+0x90>
	    addr->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&id_addr, addr);
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   103d4:	2aff      	cmp	r2, #255	; 0xff
   103d6:	d038      	beq.n	1044a <le_adv_recv+0xa6>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   103d8:	4601      	mov	r1, r0
   103da:	2000      	movs	r0, #0
   103dc:	f004 fe00 	bl	14fe0 <bt_lookup_id_addr>
   103e0:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
   103e2:	2207      	movs	r2, #7
   103e4:	4668      	mov	r0, sp
   103e6:	f004 fd23 	bl	14e30 <memcpy>
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	info->addr = &id_addr;
   103ea:	f8c7 d000 	str.w	sp, [r7]

	if (scan_dev_found_cb) {
   103ee:	4b31      	ldr	r3, [pc, #196]	; (104b4 <le_adv_recv+0x110>)
   103f0:	681b      	ldr	r3, [r3, #0]
   103f2:	b19b      	cbz	r3, 1041c <le_adv_recv+0x78>
	state->offset = net_buf_simple_headroom(buf);
   103f4:	4628      	mov	r0, r5
   103f6:	f004 ffdf 	bl	153b8 <net_buf_simple_headroom>
   103fa:	b284      	uxth	r4, r0
	state->len = buf->len;
   103fc:	88ae      	ldrh	r6, [r5, #4]
		net_buf_simple_save(buf, &state);

		buf->len = len;
   103fe:	f8a5 8004 	strh.w	r8, [r5, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   10402:	4b2c      	ldr	r3, [pc, #176]	; (104b4 <le_adv_recv+0x110>)
   10404:	f8d3 9000 	ldr.w	r9, [r3]
   10408:	462b      	mov	r3, r5
   1040a:	79fa      	ldrb	r2, [r7, #7]
   1040c:	f997 1005 	ldrsb.w	r1, [r7, #5]
   10410:	4668      	mov	r0, sp
   10412:	47c8      	blx	r9
	buf->data = buf->__buf + state->offset;
   10414:	68ab      	ldr	r3, [r5, #8]
   10416:	4423      	add	r3, r4
   10418:	602b      	str	r3, [r5, #0]
	buf->len = state->len;
   1041a:	80ae      	strh	r6, [r5, #4]
	return list->head;
   1041c:	4b26      	ldr	r3, [pc, #152]	; (104b8 <le_adv_recv+0x114>)
   1041e:	681e      	ldr	r6, [r3, #0]

		net_buf_simple_restore(buf, &state);
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   10420:	b1ee      	cbz	r6, 1045e <le_adv_recv+0xba>
   10422:	3e08      	subs	r6, #8
   10424:	d01d      	beq.n	10462 <le_adv_recv+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10426:	f116 0408 	adds.w	r4, r6, #8
   1042a:	d01f      	beq.n	1046c <le_adv_recv+0xc8>
	return node->next;
   1042c:	68b4      	ldr	r4, [r6, #8]
   1042e:	b1ec      	cbz	r4, 1046c <le_adv_recv+0xc8>
   10430:	3c08      	subs	r4, #8
   10432:	e01b      	b.n	1046c <le_adv_recv+0xc8>
   10434:	2207      	movs	r2, #7
   10436:	4601      	mov	r1, r0
   10438:	4668      	mov	r0, sp
   1043a:	f004 fcf9 	bl	14e30 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1043e:	f89d 3000 	ldrb.w	r3, [sp]
   10442:	3b02      	subs	r3, #2
   10444:	f88d 3000 	strb.w	r3, [sp]
   10448:	e7cf      	b.n	103ea <le_adv_recv+0x46>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   1044a:	2300      	movs	r3, #0
   1044c:	9302      	str	r3, [sp, #8]
   1044e:	f8cd 300b 	str.w	r3, [sp, #11]
   10452:	2207      	movs	r2, #7
   10454:	a902      	add	r1, sp, #8
   10456:	4668      	mov	r0, sp
   10458:	f004 fcea 	bl	14e30 <memcpy>
   1045c:	e7c5      	b.n	103ea <le_adv_recv+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1045e:	4634      	mov	r4, r6
   10460:	e004      	b.n	1046c <le_adv_recv+0xc8>
   10462:	4634      	mov	r4, r6
   10464:	e002      	b.n	1046c <le_adv_recv+0xc8>
   10466:	4622      	mov	r2, r4
   10468:	4626      	mov	r6, r4
   1046a:	4614      	mov	r4, r2
   1046c:	b1ee      	cbz	r6, 104aa <le_adv_recv+0x106>
		if (listener->recv) {
   1046e:	6833      	ldr	r3, [r6, #0]
   10470:	b18b      	cbz	r3, 10496 <le_adv_recv+0xf2>
	state->offset = net_buf_simple_headroom(buf);
   10472:	4628      	mov	r0, r5
   10474:	f004 ffa0 	bl	153b8 <net_buf_simple_headroom>
   10478:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
   1047c:	f8b5 9004 	ldrh.w	r9, [r5, #4]
			net_buf_simple_save(buf, &state);

			buf->len = len;
   10480:	f8a5 8004 	strh.w	r8, [r5, #4]
			listener->recv(info, buf);
   10484:	6833      	ldr	r3, [r6, #0]
   10486:	4629      	mov	r1, r5
   10488:	4638      	mov	r0, r7
   1048a:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   1048c:	68aa      	ldr	r2, [r5, #8]
   1048e:	4452      	add	r2, sl
   10490:	602a      	str	r2, [r5, #0]
	buf->len = state->len;
   10492:	f8a5 9004 	strh.w	r9, [r5, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   10496:	2c00      	cmp	r4, #0
   10498:	d0e5      	beq.n	10466 <le_adv_recv+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1049a:	f114 0208 	adds.w	r2, r4, #8
   1049e:	d0e3      	beq.n	10468 <le_adv_recv+0xc4>
	return node->next;
   104a0:	68a2      	ldr	r2, [r4, #8]
   104a2:	2a00      	cmp	r2, #0
   104a4:	d0e0      	beq.n	10468 <le_adv_recv+0xc4>
   104a6:	3a08      	subs	r2, #8
   104a8:	e7de      	b.n	10468 <le_adv_recv+0xc4>
	}

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
#endif /* CONFIG_BT_CENTRAL */
}
   104aa:	b004      	add	sp, #16
   104ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   104b0:	2000035c 	.word	0x2000035c
   104b4:	200017fc 	.word	0x200017fc
   104b8:	200017f4 	.word	0x200017f4

000104bc <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   104bc:	4b01      	ldr	r3, [pc, #4]	; (104c4 <bt_scan_reset+0x8>)
   104be:	2200      	movs	r2, #0
   104c0:	601a      	str	r2, [r3, #0]
}
   104c2:	4770      	bx	lr
   104c4:	200017fc 	.word	0x200017fc

000104c8 <start_le_scan_legacy>:
{
   104c8:	b570      	push	{r4, r5, r6, lr}
   104ca:	b082      	sub	sp, #8
   104cc:	4604      	mov	r4, r0
   104ce:	460e      	mov	r6, r1
   104d0:	4615      	mov	r5, r2
	(void)memset(&set_param, 0, sizeof(set_param));
   104d2:	2207      	movs	r2, #7
   104d4:	2100      	movs	r1, #0
   104d6:	4668      	mov	r0, sp
   104d8:	f004 fcce 	bl	14e78 <memset>
	set_param.scan_type = scan_type;
   104dc:	f88d 4000 	strb.w	r4, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   104e0:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   104e4:	f8ad 5003 	strh.w	r5, [sp, #3]
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   104e8:	2300      	movs	r3, #0
   104ea:	f88d 3006 	strb.w	r3, [sp, #6]
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
   104ee:	2c01      	cmp	r4, #1
   104f0:	bf14      	ite	ne
   104f2:	2400      	movne	r4, #0
   104f4:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   104f6:	f10d 0105 	add.w	r1, sp, #5
   104fa:	4620      	mov	r0, r4
   104fc:	f7ff feee 	bl	102dc <bt_id_set_scan_own_addr>
	if (err) {
   10500:	b108      	cbz	r0, 10506 <start_le_scan_legacy+0x3e>
}
   10502:	b002      	add	sp, #8
   10504:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   10506:	2107      	movs	r1, #7
   10508:	f242 000b 	movw	r0, #8203	; 0x200b
   1050c:	f7ff f9ce 	bl	f8ac <bt_hci_cmd_create>
	if (!buf) {
   10510:	4605      	mov	r5, r0
   10512:	b370      	cbz	r0, 10572 <start_le_scan_legacy+0xaa>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10514:	2207      	movs	r2, #7
   10516:	4669      	mov	r1, sp
   10518:	3008      	adds	r0, #8
   1051a:	f004 ff2a 	bl	15372 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   1051e:	2200      	movs	r2, #0
   10520:	4629      	mov	r1, r5
   10522:	f242 000b 	movw	r0, #8203	; 0x200b
   10526:	f7ff f9fd 	bl	f924 <bt_hci_cmd_send_sync>
	if (err) {
   1052a:	2800      	cmp	r0, #0
   1052c:	d1e9      	bne.n	10502 <start_le_scan_legacy+0x3a>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   1052e:	2001      	movs	r0, #1
   10530:	f004 fda2 	bl	15078 <bt_le_scan_set_enable>
	if (err) {
   10534:	2800      	cmp	r0, #0
   10536:	d1e4      	bne.n	10502 <start_le_scan_legacy+0x3a>
	if (val) {
   10538:	b16c      	cbz	r4, 10556 <start_le_scan_legacy+0x8e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1053a:	4b0f      	ldr	r3, [pc, #60]	; (10578 <start_le_scan_legacy+0xb0>)
   1053c:	f3bf 8f5b 	dmb	ish
   10540:	e853 2f00 	ldrex	r2, [r3]
   10544:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10548:	e843 2100 	strex	r1, r2, [r3]
   1054c:	2900      	cmp	r1, #0
   1054e:	d1f7      	bne.n	10540 <start_le_scan_legacy+0x78>
   10550:	f3bf 8f5b 	dmb	ish
   10554:	e7d5      	b.n	10502 <start_le_scan_legacy+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10556:	4b08      	ldr	r3, [pc, #32]	; (10578 <start_le_scan_legacy+0xb0>)
   10558:	f3bf 8f5b 	dmb	ish
   1055c:	e853 2f00 	ldrex	r2, [r3]
   10560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   10564:	e843 2100 	strex	r1, r2, [r3]
   10568:	2900      	cmp	r1, #0
   1056a:	d1f7      	bne.n	1055c <start_le_scan_legacy+0x94>
   1056c:	f3bf 8f5b 	dmb	ish
}
   10570:	e7c7      	b.n	10502 <start_le_scan_legacy+0x3a>
		return -ENOBUFS;
   10572:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10576:	e7c4      	b.n	10502 <start_le_scan_legacy+0x3a>
   10578:	2000035c 	.word	0x2000035c

0001057c <bt_le_scan_update>:
{
   1057c:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1057e:	f3bf 8f5b 	dmb	ish
   10582:	4b0c      	ldr	r3, [pc, #48]	; (105b4 <bt_le_scan_update+0x38>)
   10584:	681b      	ldr	r3, [r3, #0]
   10586:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1058a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1058e:	d001      	beq.n	10594 <bt_le_scan_update+0x18>
		return 0;
   10590:	2000      	movs	r0, #0
}
   10592:	bd08      	pop	{r3, pc}
   10594:	f3bf 8f5b 	dmb	ish
   10598:	4b06      	ldr	r3, [pc, #24]	; (105b4 <bt_le_scan_update+0x38>)
   1059a:	681b      	ldr	r3, [r3, #0]
   1059c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   105a0:	f3c3 1040 	ubfx	r0, r3, #5, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   105a4:	f013 0f20 	tst.w	r3, #32
   105a8:	d0f3      	beq.n	10592 <bt_le_scan_update+0x16>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   105aa:	2000      	movs	r0, #0
   105ac:	f004 fd64 	bl	15078 <bt_le_scan_set_enable>
		if (err) {
   105b0:	e7ef      	b.n	10592 <bt_le_scan_update+0x16>
   105b2:	bf00      	nop
   105b4:	2000035c 	.word	0x2000035c

000105b8 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   105b8:	b538      	push	{r3, r4, r5, lr}
   105ba:	f3bf 8f5b 	dmb	ish
   105be:	4b48      	ldr	r3, [pc, #288]	; (106e0 <bt_le_scan_start+0x128>)
   105c0:	681b      	ldr	r3, [r3, #0]
   105c2:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   105c6:	f013 0f02 	tst.w	r3, #2
   105ca:	d07d      	beq.n	106c8 <bt_le_scan_start+0x110>
   105cc:	4604      	mov	r4, r0
   105ce:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
   105d0:	f004 fd2f 	bl	15032 <valid_le_scan_param>
   105d4:	2800      	cmp	r0, #0
   105d6:	d07a      	beq.n	106ce <bt_le_scan_start+0x116>
		return -EINVAL;
	}

	if (param->type && !bt_id_scan_random_addr_check()) {
   105d8:	7823      	ldrb	r3, [r4, #0]
   105da:	b11b      	cbz	r3, 105e4 <bt_le_scan_start+0x2c>
   105dc:	f004 fd16 	bl	1500c <bt_id_scan_random_addr_check>
   105e0:	2800      	cmp	r0, #0
   105e2:	d077      	beq.n	106d4 <bt_le_scan_start+0x11c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   105e4:	4b3e      	ldr	r3, [pc, #248]	; (106e0 <bt_le_scan_start+0x128>)
   105e6:	f3bf 8f5b 	dmb	ish
   105ea:	e853 2f00 	ldrex	r2, [r3]
   105ee:	f042 0140 	orr.w	r1, r2, #64	; 0x40
   105f2:	e843 1000 	strex	r0, r1, [r3]
   105f6:	2800      	cmp	r0, #0
   105f8:	d1f7      	bne.n	105ea <bt_le_scan_start+0x32>
   105fa:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   105fe:	f012 0f40 	tst.w	r2, #64	; 0x40
   10602:	d16a      	bne.n	106da <bt_le_scan_start+0x122>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10604:	f3bf 8f5b 	dmb	ish
   10608:	681b      	ldr	r3, [r3, #0]
   1060a:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1060e:	f013 0f20 	tst.w	r3, #32
   10612:	d003      	beq.n	1061c <bt_le_scan_start+0x64>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   10614:	2000      	movs	r0, #0
   10616:	f004 fd2f 	bl	15078 <bt_le_scan_set_enable>
		if (err) {
   1061a:	b9d8      	cbnz	r0, 10654 <bt_le_scan_start+0x9c>
			return err;
		}
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
   1061c:	6863      	ldr	r3, [r4, #4]
	if (val) {
   1061e:	f013 0f01 	tst.w	r3, #1
   10622:	d025      	beq.n	10670 <bt_le_scan_start+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10624:	4b2e      	ldr	r3, [pc, #184]	; (106e0 <bt_le_scan_start+0x128>)
   10626:	f3bf 8f5b 	dmb	ish
   1062a:	e853 2f00 	ldrex	r2, [r3]
   1062e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   10632:	e843 2100 	strex	r1, r2, [r3]
   10636:	2900      	cmp	r1, #0
   10638:	d1f7      	bne.n	1062a <bt_le_scan_start+0x72>
   1063a:	f3bf 8f5b 	dmb	ish
			phy_coded = &param_coded;
		}

		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
	} else {
		if (param->timeout) {
   1063e:	89a3      	ldrh	r3, [r4, #12]
   10640:	bb23      	cbnz	r3, 1068c <bt_le_scan_start+0xd4>
			atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
			return -ENOTSUP;
		}

		err = start_le_scan_legacy(param->type, param->interval,
   10642:	8962      	ldrh	r2, [r4, #10]
   10644:	8921      	ldrh	r1, [r4, #8]
   10646:	7820      	ldrb	r0, [r4, #0]
   10648:	f7ff ff3e 	bl	104c8 <start_le_scan_legacy>
					   param->window);
	}

	if (err) {
   1064c:	bb70      	cbnz	r0, 106ac <bt_le_scan_start+0xf4>
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
	}

	scan_dev_found_cb = cb;
   1064e:	4b25      	ldr	r3, [pc, #148]	; (106e4 <bt_le_scan_start+0x12c>)
   10650:	601d      	str	r5, [r3, #0]

	return 0;
}
   10652:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10654:	4b22      	ldr	r3, [pc, #136]	; (106e0 <bt_le_scan_start+0x128>)
   10656:	f3bf 8f5b 	dmb	ish
   1065a:	e853 2f00 	ldrex	r2, [r3]
   1065e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10662:	e843 2100 	strex	r1, r2, [r3]
   10666:	2900      	cmp	r1, #0
   10668:	d1f7      	bne.n	1065a <bt_le_scan_start+0xa2>
   1066a:	f3bf 8f5b 	dmb	ish
			return err;
   1066e:	e7f0      	b.n	10652 <bt_le_scan_start+0x9a>
   10670:	4b1b      	ldr	r3, [pc, #108]	; (106e0 <bt_le_scan_start+0x128>)
   10672:	f3bf 8f5b 	dmb	ish
   10676:	e853 2f00 	ldrex	r2, [r3]
   1067a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   1067e:	e843 2100 	strex	r1, r2, [r3]
   10682:	2900      	cmp	r1, #0
   10684:	d1f7      	bne.n	10676 <bt_le_scan_start+0xbe>
   10686:	f3bf 8f5b 	dmb	ish
   1068a:	e7d8      	b.n	1063e <bt_le_scan_start+0x86>
   1068c:	4b14      	ldr	r3, [pc, #80]	; (106e0 <bt_le_scan_start+0x128>)
   1068e:	f3bf 8f5b 	dmb	ish
   10692:	e853 2f00 	ldrex	r2, [r3]
   10696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1069a:	e843 2100 	strex	r1, r2, [r3]
   1069e:	2900      	cmp	r1, #0
   106a0:	d1f7      	bne.n	10692 <bt_le_scan_start+0xda>
   106a2:	f3bf 8f5b 	dmb	ish
			return -ENOTSUP;
   106a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   106aa:	e7d2      	b.n	10652 <bt_le_scan_start+0x9a>
   106ac:	4b0c      	ldr	r3, [pc, #48]	; (106e0 <bt_le_scan_start+0x128>)
   106ae:	f3bf 8f5b 	dmb	ish
   106b2:	e853 2f00 	ldrex	r2, [r3]
   106b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   106ba:	e843 2100 	strex	r1, r2, [r3]
   106be:	2900      	cmp	r1, #0
   106c0:	d1f7      	bne.n	106b2 <bt_le_scan_start+0xfa>
   106c2:	f3bf 8f5b 	dmb	ish
		return err;
   106c6:	e7c4      	b.n	10652 <bt_le_scan_start+0x9a>
		return -EAGAIN;
   106c8:	f06f 000a 	mvn.w	r0, #10
   106cc:	e7c1      	b.n	10652 <bt_le_scan_start+0x9a>
		return -EINVAL;
   106ce:	f06f 0015 	mvn.w	r0, #21
   106d2:	e7be      	b.n	10652 <bt_le_scan_start+0x9a>
		return -EINVAL;
   106d4:	f06f 0015 	mvn.w	r0, #21
   106d8:	e7bb      	b.n	10652 <bt_le_scan_start+0x9a>
		return -EALREADY;
   106da:	f06f 0077 	mvn.w	r0, #119	; 0x77
   106de:	e7b8      	b.n	10652 <bt_le_scan_start+0x9a>
   106e0:	2000035c 	.word	0x2000035c
   106e4:	200017fc 	.word	0x200017fc

000106e8 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   106e8:	4b03      	ldr	r3, [pc, #12]	; (106f8 <pool_id+0x10>)
   106ea:	1ac0      	subs	r0, r0, r3
   106ec:	1080      	asrs	r0, r0, #2
}
   106ee:	4b03      	ldr	r3, [pc, #12]	; (106fc <pool_id+0x14>)
   106f0:	fb03 f000 	mul.w	r0, r3, r0
   106f4:	4770      	bx	lr
   106f6:	bf00      	nop
   106f8:	200004b8 	.word	0x200004b8
   106fc:	ba2e8ba3 	.word	0xba2e8ba3

00010700 <net_buf_pool_get>:
}
   10700:	222c      	movs	r2, #44	; 0x2c
   10702:	4b02      	ldr	r3, [pc, #8]	; (1070c <net_buf_pool_get+0xc>)
   10704:	fb02 3000 	mla	r0, r2, r0, r3
   10708:	4770      	bx	lr
   1070a:	bf00      	nop
   1070c:	200004b8 	.word	0x200004b8

00010710 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   10710:	4800      	ldr	r0, [pc, #0]	; (10714 <get_hf_flags+0x4>)
   10712:	4770      	bx	lr
   10714:	20001850 	.word	0x20001850

00010718 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   10718:	4b03      	ldr	r3, [pc, #12]	; (10728 <get_subsys+0x10>)
   1071a:	1ac0      	subs	r0, r0, r3
   1071c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1071e:	4b03      	ldr	r3, [pc, #12]	; (1072c <get_subsys+0x14>)
   10720:	fb03 f000 	mul.w	r0, r3, r0
   10724:	4770      	bx	lr
   10726:	bf00      	nop
   10728:	20001810 	.word	0x20001810
   1072c:	b6db6db7 	.word	0xb6db6db7

00010730 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10730:	b538      	push	{r3, r4, r5, lr}
   10732:	4605      	mov	r5, r0
   10734:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   10736:	f7ff ffef 	bl	10718 <get_subsys>
   1073a:	4601      	mov	r1, r0
   1073c:	2240      	movs	r2, #64	; 0x40
   1073e:	4803      	ldr	r0, [pc, #12]	; (1074c <onoff_stop+0x1c>)
   10740:	f004 feb5 	bl	154ae <stop>
   10744:	4601      	mov	r1, r0
	notify(mgr, res);
   10746:	4628      	mov	r0, r5
   10748:	47a0      	blx	r4
}
   1074a:	bd38      	pop	{r3, r4, r5, pc}
   1074c:	00016da8 	.word	0x00016da8

00010750 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10750:	b530      	push	{r4, r5, lr}
   10752:	b083      	sub	sp, #12
   10754:	4605      	mov	r5, r0
   10756:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   10758:	f7ff ffde 	bl	10718 <get_subsys>
   1075c:	4601      	mov	r1, r0
   1075e:	2340      	movs	r3, #64	; 0x40
   10760:	9300      	str	r3, [sp, #0]
   10762:	4623      	mov	r3, r4
   10764:	4a05      	ldr	r2, [pc, #20]	; (1077c <onoff_start+0x2c>)
   10766:	4806      	ldr	r0, [pc, #24]	; (10780 <onoff_start+0x30>)
   10768:	f004 febb 	bl	154e2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1076c:	1e01      	subs	r1, r0, #0
   1076e:	db01      	blt.n	10774 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   10770:	b003      	add	sp, #12
   10772:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   10774:	4628      	mov	r0, r5
   10776:	47a0      	blx	r4
}
   10778:	e7fa      	b.n	10770 <onoff_start+0x20>
   1077a:	bf00      	nop
   1077c:	0001552b 	.word	0x0001552b
   10780:	00016da8 	.word	0x00016da8

00010784 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   10784:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   10786:	b110      	cbz	r0, 1078e <clock_event_handler+0xa>
   10788:	2801      	cmp	r0, #1
   1078a:	d00d      	beq.n	107a8 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   1078c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1078e:	2100      	movs	r1, #0
   10790:	4808      	ldr	r0, [pc, #32]	; (107b4 <clock_event_handler+0x30>)
   10792:	f004 fe15 	bl	153c0 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   10796:	6883      	ldr	r3, [r0, #8]
   10798:	f013 0f07 	tst.w	r3, #7
   1079c:	d1f6      	bne.n	1078c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1079e:	2100      	movs	r1, #0
   107a0:	4804      	ldr	r0, [pc, #16]	; (107b4 <clock_event_handler+0x30>)
   107a2:	f004 fe72 	bl	1548a <clkstarted_handle>
   107a6:	e7f1      	b.n	1078c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   107a8:	2101      	movs	r1, #1
   107aa:	4802      	ldr	r0, [pc, #8]	; (107b4 <clock_event_handler+0x30>)
   107ac:	f004 fe6d 	bl	1548a <clkstarted_handle>
}
   107b0:	e7ec      	b.n	1078c <clock_event_handler+0x8>
   107b2:	bf00      	nop
   107b4:	00016da8 	.word	0x00016da8

000107b8 <generic_hfclk_start>:
{
   107b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   107ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   107be:	f3ef 8411 	mrs	r4, BASEPRI
   107c2:	f383 8812 	msr	BASEPRI_MAX, r3
   107c6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   107ca:	4a13      	ldr	r2, [pc, #76]	; (10818 <generic_hfclk_start+0x60>)
   107cc:	6813      	ldr	r3, [r2, #0]
   107ce:	f043 0302 	orr.w	r3, r3, #2
   107d2:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   107d4:	f013 0f01 	tst.w	r3, #1
   107d8:	d108      	bne.n	107ec <generic_hfclk_start+0x34>
	bool already_started = false;
   107da:	2300      	movs	r3, #0
	__asm__ volatile(
   107dc:	f384 8811 	msr	BASEPRI, r4
   107e0:	f3bf 8f6f 	isb	sy
	if (already_started) {
   107e4:	b99b      	cbnz	r3, 1080e <generic_hfclk_start+0x56>
	hfclk_start();
   107e6:	f004 fea8 	bl	1553a <hfclk_start>
}
   107ea:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   107ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   107f0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   107f4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   107f8:	f012 0f01 	tst.w	r2, #1
   107fc:	d101      	bne.n	10802 <generic_hfclk_start+0x4a>
	bool already_started = false;
   107fe:	2300      	movs	r3, #0
   10800:	e7ec      	b.n	107dc <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   10802:	f7ff ff85 	bl	10710 <get_hf_flags>
   10806:	f004 fe2d 	bl	15464 <set_on_state>
			already_started = true;
   1080a:	2301      	movs	r3, #1
   1080c:	e7e6      	b.n	107dc <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   1080e:	2100      	movs	r1, #0
   10810:	4802      	ldr	r0, [pc, #8]	; (1081c <generic_hfclk_start+0x64>)
   10812:	f004 fe3a 	bl	1548a <clkstarted_handle>
		return;
   10816:	e7e8      	b.n	107ea <generic_hfclk_start+0x32>
   10818:	20001860 	.word	0x20001860
   1081c:	00016da8 	.word	0x00016da8

00010820 <generic_hfclk_stop>:
{
   10820:	b508      	push	{r3, lr}
   10822:	4b0a      	ldr	r3, [pc, #40]	; (1084c <generic_hfclk_stop+0x2c>)
   10824:	f3bf 8f5b 	dmb	ish
   10828:	e853 2f00 	ldrex	r2, [r3]
   1082c:	f022 0102 	bic.w	r1, r2, #2
   10830:	e843 1000 	strex	r0, r1, [r3]
   10834:	2800      	cmp	r0, #0
   10836:	d1f7      	bne.n	10828 <generic_hfclk_stop+0x8>
   10838:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1083c:	f012 0f01 	tst.w	r2, #1
   10840:	d000      	beq.n	10844 <generic_hfclk_stop+0x24>
}
   10842:	bd08      	pop	{r3, pc}
	hfclk_stop();
   10844:	f004 fe7e 	bl	15544 <hfclk_stop>
   10848:	e7fb      	b.n	10842 <generic_hfclk_stop+0x22>
   1084a:	bf00      	nop
   1084c:	20001860 	.word	0x20001860

00010850 <api_blocking_start>:
{
   10850:	b500      	push	{lr}
   10852:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10854:	f8cd d000 	str.w	sp, [sp]
   10858:	f8cd d004 	str.w	sp, [sp, #4]
   1085c:	2300      	movs	r3, #0
   1085e:	9302      	str	r3, [sp, #8]
   10860:	2301      	movs	r3, #1
   10862:	9303      	str	r3, [sp, #12]
   10864:	ab04      	add	r3, sp, #16
   10866:	9304      	str	r3, [sp, #16]
   10868:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1086a:	466b      	mov	r3, sp
   1086c:	4a06      	ldr	r2, [pc, #24]	; (10888 <api_blocking_start+0x38>)
   1086e:	f004 fe54 	bl	1551a <api_start>
	if (err < 0) {
   10872:	2800      	cmp	r0, #0
   10874:	db05      	blt.n	10882 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   10876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1087a:	2300      	movs	r3, #0
   1087c:	4668      	mov	r0, sp
   1087e:	f002 fb55 	bl	12f2c <z_impl_k_sem_take>
}
   10882:	b007      	add	sp, #28
   10884:	f85d fb04 	ldr.w	pc, [sp], #4
   10888:	00015559 	.word	0x00015559

0001088c <lfclk_start>:
{
   1088c:	b508      	push	{r3, lr}
	if (!once) {
   1088e:	4b07      	ldr	r3, [pc, #28]	; (108ac <lfclk_start+0x20>)
   10890:	781b      	ldrb	r3, [r3, #0]
   10892:	b11b      	cbz	r3, 1089c <lfclk_start+0x10>
}
#endif // defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK_192M

NRFX_STATIC_INLINE void nrfx_clock_lfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   10894:	2000      	movs	r0, #0
   10896:	f001 f8d7 	bl	11a48 <nrfx_clock_start>
}
   1089a:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
   1089c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   108a0:	f006 f96c 	bl	16b7c <z_impl_k_busy_wait>
		once = true;
   108a4:	4b01      	ldr	r3, [pc, #4]	; (108ac <lfclk_start+0x20>)
   108a6:	2201      	movs	r2, #1
   108a8:	701a      	strb	r2, [r3, #0]
   108aa:	e7f3      	b.n	10894 <lfclk_start+0x8>
   108ac:	20001f91 	.word	0x20001f91

000108b0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   108b0:	b570      	push	{r4, r5, r6, lr}
   108b2:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   108b4:	2200      	movs	r2, #0
   108b6:	2101      	movs	r1, #1
   108b8:	4610      	mov	r0, r2
   108ba:	f7fe fa41 	bl	ed40 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   108be:	2000      	movs	r0, #0
   108c0:	f7fe fa0c 	bl	ecdc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   108c4:	4811      	ldr	r0, [pc, #68]	; (1090c <clk_init+0x5c>)
   108c6:	f001 f8d1 	bl	11a6c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   108ca:	4b11      	ldr	r3, [pc, #68]	; (10910 <clk_init+0x60>)
   108cc:	4298      	cmp	r0, r3
   108ce:	d11a      	bne.n	10906 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   108d0:	f005 fce1 	bl	16296 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   108d4:	2400      	movs	r4, #0
   108d6:	e003      	b.n	108e0 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   108d8:	2301      	movs	r3, #1
   108da:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   108dc:	441c      	add	r4, r3
   108de:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   108e0:	2c01      	cmp	r4, #1
   108e2:	d80e      	bhi.n	10902 <clk_init+0x52>
						get_sub_data(dev, i);
   108e4:	4621      	mov	r1, r4
   108e6:	4630      	mov	r0, r6
   108e8:	f004 fd6a 	bl	153c0 <get_sub_data>
   108ec:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   108ee:	4621      	mov	r1, r4
   108f0:	4630      	mov	r0, r6
   108f2:	f004 fd70 	bl	153d6 <get_onoff_manager>
   108f6:	4907      	ldr	r1, [pc, #28]	; (10914 <clk_init+0x64>)
   108f8:	f003 fe93 	bl	14622 <onoff_manager_init>
		if (err < 0) {
   108fc:	2800      	cmp	r0, #0
   108fe:	daeb      	bge.n	108d8 <clk_init+0x28>
   10900:	e000      	b.n	10904 <clk_init+0x54>
	}

	return 0;
   10902:	2000      	movs	r0, #0
}
   10904:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   10906:	f06f 0004 	mvn.w	r0, #4
   1090a:	e7fb      	b.n	10904 <clk_init+0x54>
   1090c:	00010785 	.word	0x00010785
   10910:	0bad0000 	.word	0x0bad0000
   10914:	000172cc 	.word	0x000172cc

00010918 <lfclk_spinwait>:
{
   10918:	b570      	push	{r4, r5, r6, lr}
   1091a:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1091c:	2801      	cmp	r0, #1
   1091e:	d107      	bne.n	10930 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   10920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10924:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   10928:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1092c:	2b01      	cmp	r3, #1
   1092e:	d058      	beq.n	109e2 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10930:	f005 fdf4 	bl	1651c <k_is_in_isr>
   10934:	b928      	cbnz	r0, 10942 <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   10936:	4b2e      	ldr	r3, [pc, #184]	; (109f0 <lfclk_spinwait+0xd8>)
   10938:	781b      	ldrb	r3, [r3, #0]
   1093a:	2b00      	cmp	r3, #0
   1093c:	d041      	beq.n	109c2 <lfclk_spinwait+0xaa>
   1093e:	2300      	movs	r3, #0
   10940:	e000      	b.n	10944 <lfclk_spinwait+0x2c>
   10942:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   10944:	461c      	mov	r4, r3
   10946:	2b00      	cmp	r3, #0
   10948:	d03d      	beq.n	109c6 <lfclk_spinwait+0xae>
	__asm__ volatile(
   1094a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1094e:	f3ef 8611 	mrs	r6, BASEPRI
   10952:	f383 8812 	msr	BASEPRI_MAX, r3
   10956:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   1095a:	b924      	cbnz	r4, 10966 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   1095c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10960:	2202      	movs	r2, #2
   10962:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1096a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1096e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   10972:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   10976:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1097a:	d12b      	bne.n	109d4 <lfclk_spinwait+0xbc>
    return false;
   1097c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1097e:	b11a      	cbz	r2, 10988 <lfclk_spinwait+0x70>
   10980:	2b01      	cmp	r3, #1
   10982:	d029      	beq.n	109d8 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   10984:	2d01      	cmp	r5, #1
   10986:	d027      	beq.n	109d8 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   10988:	b1fc      	cbz	r4, 109ca <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1098a:	4630      	mov	r0, r6
   1098c:	f7fe f99c 	bl	ecc8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   10990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10994:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   10998:	2b00      	cmp	r3, #0
   1099a:	d1e4      	bne.n	10966 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1099c:	4b15      	ldr	r3, [pc, #84]	; (109f4 <lfclk_spinwait+0xdc>)
   1099e:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   109a0:	2b00      	cmp	r3, #0
   109a2:	d0e0      	beq.n	10966 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   109a4:	4b13      	ldr	r3, [pc, #76]	; (109f4 <lfclk_spinwait+0xdc>)
   109a6:	2200      	movs	r2, #0
   109a8:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   109aa:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   109ac:	2301      	movs	r3, #1
   109ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   109b2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   109b6:	4a10      	ldr	r2, [pc, #64]	; (109f8 <lfclk_spinwait+0xe0>)
   109b8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   109bc:	4a0f      	ldr	r2, [pc, #60]	; (109fc <lfclk_spinwait+0xe4>)
   109be:	6013      	str	r3, [r2, #0]
}
   109c0:	e7d1      	b.n	10966 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   109c2:	2301      	movs	r3, #1
   109c4:	e7be      	b.n	10944 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   109c6:	2600      	movs	r6, #0
   109c8:	e7c7      	b.n	1095a <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   109ca:	2021      	movs	r0, #33	; 0x21
   109cc:	2100      	movs	r1, #0
   109ce:	f002 ffcd 	bl	1396c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   109d2:	e7dd      	b.n	10990 <lfclk_spinwait+0x78>
                return true;
   109d4:	2201      	movs	r2, #1
   109d6:	e7d2      	b.n	1097e <lfclk_spinwait+0x66>
	if (isr_mode) {
   109d8:	b124      	cbz	r4, 109e4 <lfclk_spinwait+0xcc>
	__asm__ volatile(
   109da:	f386 8811 	msr	BASEPRI, r6
   109de:	f3bf 8f6f 	isb	sy
}
   109e2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   109e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   109e8:	2202      	movs	r2, #2
   109ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   109ee:	e7f8      	b.n	109e2 <lfclk_spinwait+0xca>
   109f0:	20001f92 	.word	0x20001f92
   109f4:	40000104 	.word	0x40000104
   109f8:	e000e100 	.word	0xe000e100
   109fc:	40000008 	.word	0x40000008

00010a00 <z_nrf_clock_control_lf_on>:
{
   10a00:	b510      	push	{r4, lr}
   10a02:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10a04:	4b10      	ldr	r3, [pc, #64]	; (10a48 <z_nrf_clock_control_lf_on+0x48>)
   10a06:	2101      	movs	r1, #1
   10a08:	f3bf 8f5b 	dmb	ish
   10a0c:	e853 2f00 	ldrex	r2, [r3]
   10a10:	e843 1000 	strex	r0, r1, [r3]
   10a14:	2800      	cmp	r0, #0
   10a16:	d1f9      	bne.n	10a0c <z_nrf_clock_control_lf_on+0xc>
   10a18:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   10a1c:	b11a      	cbz	r2, 10a26 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   10a1e:	1e63      	subs	r3, r4, #1
   10a20:	2b01      	cmp	r3, #1
   10a22:	d90c      	bls.n	10a3e <z_nrf_clock_control_lf_on+0x3e>
}
   10a24:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   10a26:	4809      	ldr	r0, [pc, #36]	; (10a4c <z_nrf_clock_control_lf_on+0x4c>)
   10a28:	f004 fcd5 	bl	153d6 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   10a2c:	4908      	ldr	r1, [pc, #32]	; (10a50 <z_nrf_clock_control_lf_on+0x50>)
   10a2e:	2300      	movs	r3, #0
   10a30:	604b      	str	r3, [r1, #4]
   10a32:	60cb      	str	r3, [r1, #12]
   10a34:	2301      	movs	r3, #1
   10a36:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   10a38:	f003 fe0f 	bl	1465a <onoff_request>
   10a3c:	e7ef      	b.n	10a1e <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   10a3e:	4620      	mov	r0, r4
   10a40:	f7ff ff6a 	bl	10918 <lfclk_spinwait>
		break;
   10a44:	e7ee      	b.n	10a24 <z_nrf_clock_control_lf_on+0x24>
   10a46:	bf00      	nop
   10a48:	20001864 	.word	0x20001864
   10a4c:	00016da8 	.word	0x00016da8
   10a50:	20001800 	.word	0x20001800

00010a54 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   10a54:	b510      	push	{r4, lr}
   10a56:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   10a58:	280a      	cmp	r0, #10
   10a5a:	d007      	beq.n	10a6c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   10a5c:	4b07      	ldr	r3, [pc, #28]	; (10a7c <console_out+0x28>)
   10a5e:	6818      	ldr	r0, [r3, #0]
   10a60:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   10a62:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   10a64:	685b      	ldr	r3, [r3, #4]
   10a66:	4798      	blx	r3

	return c;
}
   10a68:	4620      	mov	r0, r4
   10a6a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   10a6c:	4b03      	ldr	r3, [pc, #12]	; (10a7c <console_out+0x28>)
   10a6e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   10a70:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   10a72:	685b      	ldr	r3, [r3, #4]
   10a74:	210d      	movs	r1, #13
   10a76:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   10a78:	e7f0      	b.n	10a5c <console_out+0x8>
   10a7a:	bf00      	nop
   10a7c:	20001868 	.word	0x20001868

00010a80 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   10a80:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   10a82:	4c04      	ldr	r4, [pc, #16]	; (10a94 <uart_console_hook_install+0x14>)
   10a84:	4620      	mov	r0, r4
   10a86:	f7fe fccd 	bl	f424 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   10a8a:	4620      	mov	r0, r4
   10a8c:	f7fd fa22 	bl	ded4 <__printk_hook_install>
#endif
}
   10a90:	bd10      	pop	{r4, pc}
   10a92:	bf00      	nop
   10a94:	00010a55 	.word	0x00010a55

00010a98 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   10a98:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   10a9a:	4806      	ldr	r0, [pc, #24]	; (10ab4 <uart_console_init+0x1c>)
   10a9c:	4b06      	ldr	r3, [pc, #24]	; (10ab8 <uart_console_init+0x20>)
   10a9e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   10aa0:	f005 fc93 	bl	163ca <z_device_ready>
   10aa4:	b118      	cbz	r0, 10aae <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   10aa6:	f7ff ffeb 	bl	10a80 <uart_console_hook_install>

	return 0;
   10aaa:	2000      	movs	r0, #0
}
   10aac:	bd08      	pop	{r3, pc}
		return -ENODEV;
   10aae:	f06f 0012 	mvn.w	r0, #18
   10ab2:	e7fb      	b.n	10aac <uart_console_init+0x14>
   10ab4:	00016df0 	.word	0x00016df0
   10ab8:	20001868 	.word	0x20001868

00010abc <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10abc:	4b1f      	ldr	r3, [pc, #124]	; (10b3c <get_drive+0x80>)
   10abe:	4003      	ands	r3, r0
   10ac0:	4a1f      	ldr	r2, [pc, #124]	; (10b40 <get_drive+0x84>)
   10ac2:	4293      	cmp	r3, r2
   10ac4:	d032      	beq.n	10b2c <get_drive+0x70>
   10ac6:	d816      	bhi.n	10af6 <get_drive+0x3a>
   10ac8:	2b06      	cmp	r3, #6
   10aca:	d02b      	beq.n	10b24 <get_drive+0x68>
   10acc:	d906      	bls.n	10adc <get_drive+0x20>
   10ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   10ad2:	d10d      	bne.n	10af0 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   10ad4:	2301      	movs	r3, #1
   10ad6:	700b      	strb	r3, [r1, #0]
	int err = 0;
   10ad8:	2000      	movs	r0, #0
		break;
   10ada:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10adc:	b1fb      	cbz	r3, 10b1e <get_drive+0x62>
   10ade:	2b02      	cmp	r3, #2
   10ae0:	d103      	bne.n	10aea <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   10ae2:	2304      	movs	r3, #4
   10ae4:	700b      	strb	r3, [r1, #0]
	int err = 0;
   10ae6:	2000      	movs	r0, #0
		break;
   10ae8:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10aea:	f06f 0015 	mvn.w	r0, #21
   10aee:	4770      	bx	lr
   10af0:	f06f 0015 	mvn.w	r0, #21
   10af4:	4770      	bx	lr
   10af6:	4a13      	ldr	r2, [pc, #76]	; (10b44 <get_drive+0x88>)
   10af8:	4293      	cmp	r3, r2
   10afa:	d01b      	beq.n	10b34 <get_drive+0x78>
   10afc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   10b00:	d103      	bne.n	10b0a <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   10b02:	2303      	movs	r3, #3
   10b04:	700b      	strb	r3, [r1, #0]
	int err = 0;
   10b06:	2000      	movs	r0, #0
		break;
   10b08:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   10b0e:	d103      	bne.n	10b18 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   10b10:	2302      	movs	r3, #2
   10b12:	700b      	strb	r3, [r1, #0]
	int err = 0;
   10b14:	2000      	movs	r0, #0
		break;
   10b16:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10b18:	f06f 0015 	mvn.w	r0, #21
   10b1c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   10b1e:	2000      	movs	r0, #0
   10b20:	7008      	strb	r0, [r1, #0]
		break;
   10b22:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   10b24:	2306      	movs	r3, #6
   10b26:	700b      	strb	r3, [r1, #0]
	int err = 0;
   10b28:	2000      	movs	r0, #0
		break;
   10b2a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   10b2c:	2307      	movs	r3, #7
   10b2e:	700b      	strb	r3, [r1, #0]
	int err = 0;
   10b30:	2000      	movs	r0, #0
		break;
   10b32:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   10b34:	2305      	movs	r3, #5
   10b36:	700b      	strb	r3, [r1, #0]
	int err = 0;
   10b38:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   10b3a:	4770      	bx	lr
   10b3c:	00f00006 	.word	0x00f00006
   10b40:	00100006 	.word	0x00100006
   10b44:	00400002 	.word	0x00400002

00010b48 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   10b48:	b908      	cbnz	r0, 10b4e <get_dev+0x6>
   10b4a:	4802      	ldr	r0, [pc, #8]	; (10b54 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   10b4c:	4770      	bx	lr
	const struct device *dev = NULL;
   10b4e:	2000      	movs	r0, #0
   10b50:	4770      	bx	lr
   10b52:	bf00      	nop
   10b54:	00016dc0 	.word	0x00016dc0

00010b58 <gpio_nrfx_pin_interrupt_configure>:
{
   10b58:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b5a:	b085      	sub	sp, #20
   10b5c:	460e      	mov	r6, r1
   10b5e:	4619      	mov	r1, r3
	return port->config;
   10b60:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   10b62:	7b1b      	ldrb	r3, [r3, #12]
   10b64:	f006 051f 	and.w	r5, r6, #31
   10b68:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   10b6c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   10b70:	d022      	beq.n	10bb8 <gpio_nrfx_pin_interrupt_configure+0x60>
   10b72:	4607      	mov	r7, r0
   10b74:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   10b76:	2300      	movs	r3, #0
   10b78:	9302      	str	r3, [sp, #8]
   10b7a:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   10b7c:	4610      	mov	r0, r2
   10b7e:	f004 fd23 	bl	155c8 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   10b82:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   10b86:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   10b88:	6899      	ldr	r1, [r3, #8]
   10b8a:	40f1      	lsrs	r1, r6
   10b8c:	f011 0f01 	tst.w	r1, #1
   10b90:	d102      	bne.n	10b98 <gpio_nrfx_pin_interrupt_configure+0x40>
   10b92:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   10b96:	d014      	beq.n	10bc2 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   10b98:	2300      	movs	r3, #0
   10b9a:	aa02      	add	r2, sp, #8
   10b9c:	4619      	mov	r1, r3
   10b9e:	4628      	mov	r0, r5
   10ba0:	f001 fb40 	bl	12224 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   10ba4:	4b19      	ldr	r3, [pc, #100]	; (10c0c <gpio_nrfx_pin_interrupt_configure+0xb4>)
   10ba6:	4298      	cmp	r0, r3
   10ba8:	d12c      	bne.n	10c04 <gpio_nrfx_pin_interrupt_configure+0xac>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   10baa:	2101      	movs	r1, #1
   10bac:	4628      	mov	r0, r5
   10bae:	f001 fd03 	bl	125b8 <nrfx_gpiote_trigger_enable>
	return 0;
   10bb2:	2000      	movs	r0, #0
}
   10bb4:	b005      	add	sp, #20
   10bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   10bb8:	4628      	mov	r0, r5
   10bba:	f001 fd55 	bl	12668 <nrfx_gpiote_trigger_disable>
		return 0;
   10bbe:	2000      	movs	r0, #0
   10bc0:	e7f8      	b.n	10bb4 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   10bc2:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   10bc6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   10bca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   10bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   10bd2:	f013 0f01 	tst.w	r3, #1
   10bd6:	d1df      	bne.n	10b98 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   10bd8:	f10d 0107 	add.w	r1, sp, #7
   10bdc:	4628      	mov	r0, r5
   10bde:	f001 fc8f 	bl	12500 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   10be2:	4b0b      	ldr	r3, [pc, #44]	; (10c10 <gpio_nrfx_pin_interrupt_configure+0xb8>)
   10be4:	4298      	cmp	r0, r3
   10be6:	d003      	beq.n	10bf0 <gpio_nrfx_pin_interrupt_configure+0x98>
		trigger_config.p_in_channel = &ch;
   10be8:	f10d 0307 	add.w	r3, sp, #7
   10bec:	9303      	str	r3, [sp, #12]
   10bee:	e7d3      	b.n	10b98 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
   10bf0:	f10d 0007 	add.w	r0, sp, #7
   10bf4:	f001 fcd8 	bl	125a8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   10bf8:	4b04      	ldr	r3, [pc, #16]	; (10c0c <gpio_nrfx_pin_interrupt_configure+0xb4>)
   10bfa:	4298      	cmp	r0, r3
   10bfc:	d0f4      	beq.n	10be8 <gpio_nrfx_pin_interrupt_configure+0x90>
				return -ENOMEM;
   10bfe:	f06f 000b 	mvn.w	r0, #11
   10c02:	e7d7      	b.n	10bb4 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   10c04:	f06f 0004 	mvn.w	r0, #4
   10c08:	e7d4      	b.n	10bb4 <gpio_nrfx_pin_interrupt_configure+0x5c>
   10c0a:	bf00      	nop
   10c0c:	0bad0000 	.word	0x0bad0000
   10c10:	0bad0004 	.word	0x0bad0004

00010c14 <pin_uninit>:
{
   10c14:	b530      	push	{r4, r5, lr}
   10c16:	b083      	sub	sp, #12
   10c18:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   10c1a:	f10d 0107 	add.w	r1, sp, #7
   10c1e:	f001 fc6f 	bl	12500 <nrfx_gpiote_channel_get>
   10c22:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   10c24:	4620      	mov	r0, r4
   10c26:	f001 fd49 	bl	126bc <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   10c2a:	4b0b      	ldr	r3, [pc, #44]	; (10c58 <pin_uninit+0x44>)
   10c2c:	4298      	cmp	r0, r3
   10c2e:	d10f      	bne.n	10c50 <pin_uninit+0x3c>
	if (free_ch) {
   10c30:	429d      	cmp	r5, r3
   10c32:	d005      	beq.n	10c40 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   10c34:	4b08      	ldr	r3, [pc, #32]	; (10c58 <pin_uninit+0x44>)
   10c36:	4298      	cmp	r0, r3
   10c38:	d107      	bne.n	10c4a <pin_uninit+0x36>
   10c3a:	2000      	movs	r0, #0
}
   10c3c:	b003      	add	sp, #12
   10c3e:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   10c40:	f89d 0007 	ldrb.w	r0, [sp, #7]
   10c44:	f001 fca8 	bl	12598 <nrfx_gpiote_channel_free>
   10c48:	e7f4      	b.n	10c34 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   10c4a:	f06f 0004 	mvn.w	r0, #4
   10c4e:	e7f5      	b.n	10c3c <pin_uninit+0x28>
		return -EIO;
   10c50:	f06f 0004 	mvn.w	r0, #4
   10c54:	e7f2      	b.n	10c3c <pin_uninit+0x28>
   10c56:	bf00      	nop
   10c58:	0bad0000 	.word	0x0bad0000

00010c5c <gpio_nrfx_pin_configure>:
{
   10c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10c60:	b087      	sub	sp, #28
	return port->config;
   10c62:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10c66:	f898 300c 	ldrb.w	r3, [r8, #12]
   10c6a:	f001 051f 	and.w	r5, r1, #31
   10c6e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   10c72:	2a00      	cmp	r2, #0
   10c74:	d044      	beq.n	10d00 <gpio_nrfx_pin_configure+0xa4>
   10c76:	460c      	mov	r4, r1
   10c78:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   10c7a:	2600      	movs	r6, #0
   10c7c:	9603      	str	r6, [sp, #12]
   10c7e:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   10c80:	f10d 0117 	add.w	r1, sp, #23
   10c84:	4620      	mov	r0, r4
   10c86:	f001 fc3b 	bl	12500 <nrfx_gpiote_channel_get>
   10c8a:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   10c8c:	4633      	mov	r3, r6
   10c8e:	aa03      	add	r2, sp, #12
   10c90:	4631      	mov	r1, r6
   10c92:	4628      	mov	r0, r5
   10c94:	f001 fac6 	bl	12224 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   10c98:	4b30      	ldr	r3, [pc, #192]	; (10d5c <gpio_nrfx_pin_configure+0x100>)
   10c9a:	4298      	cmp	r0, r3
   10c9c:	d15b      	bne.n	10d56 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
   10c9e:	4599      	cmp	r9, r3
   10ca0:	d036      	beq.n	10d10 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
   10ca2:	f417 7f00 	tst.w	r7, #512	; 0x200
   10ca6:	d043      	beq.n	10d30 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
   10ca8:	f10d 0103 	add.w	r1, sp, #3
   10cac:	4638      	mov	r0, r7
   10cae:	f7ff ff05 	bl	10abc <get_drive>
		if (rv != 0) {
   10cb2:	4606      	mov	r6, r0
   10cb4:	bb40      	cbnz	r0, 10d08 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
   10cb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10cba:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   10cbe:	f417 7f80 	tst.w	r7, #256	; 0x100
   10cc2:	bf0c      	ite	eq
   10cc4:	2301      	moveq	r3, #1
   10cc6:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   10cc8:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   10ccc:	4638      	mov	r0, r7
   10cce:	f004 fc48 	bl	15562 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   10cd2:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   10cd6:	f417 6f00 	tst.w	r7, #2048	; 0x800
   10cda:	d01e      	beq.n	10d1a <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   10cdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10ce0:	2101      	movs	r1, #1
   10ce2:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   10ce6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   10cea:	2200      	movs	r2, #0
   10cec:	a901      	add	r1, sp, #4
   10cee:	4628      	mov	r0, r5
   10cf0:	f001 fb48 	bl	12384 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   10cf4:	4b19      	ldr	r3, [pc, #100]	; (10d5c <gpio_nrfx_pin_configure+0x100>)
   10cf6:	4298      	cmp	r0, r3
   10cf8:	d006      	beq.n	10d08 <gpio_nrfx_pin_configure+0xac>
   10cfa:	f06f 0615 	mvn.w	r6, #21
   10cfe:	e003      	b.n	10d08 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
   10d00:	4628      	mov	r0, r5
   10d02:	f7ff ff87 	bl	10c14 <pin_uninit>
   10d06:	4606      	mov	r6, r0
}
   10d08:	4630      	mov	r0, r6
   10d0a:	b007      	add	sp, #28
   10d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   10d10:	f89d 0017 	ldrb.w	r0, [sp, #23]
   10d14:	f001 fc40 	bl	12598 <nrfx_gpiote_channel_free>
   10d18:	e7c3      	b.n	10ca2 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   10d1a:	f417 6f80 	tst.w	r7, #1024	; 0x400
   10d1e:	d0e4      	beq.n	10cea <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   10d20:	f8d8 2004 	ldr.w	r2, [r8, #4]
   10d24:	2301      	movs	r3, #1
   10d26:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   10d2a:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
   10d2e:	e7dc      	b.n	10cea <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   10d30:	4638      	mov	r0, r7
   10d32:	f004 fc16 	bl	15562 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   10d36:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   10d3a:	2300      	movs	r3, #0
   10d3c:	461a      	mov	r2, r3
   10d3e:	a902      	add	r1, sp, #8
   10d40:	4628      	mov	r0, r5
   10d42:	f001 fa6f 	bl	12224 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   10d46:	4b05      	ldr	r3, [pc, #20]	; (10d5c <gpio_nrfx_pin_configure+0x100>)
   10d48:	4298      	cmp	r0, r3
   10d4a:	d101      	bne.n	10d50 <gpio_nrfx_pin_configure+0xf4>
   10d4c:	2600      	movs	r6, #0
   10d4e:	e7db      	b.n	10d08 <gpio_nrfx_pin_configure+0xac>
   10d50:	f06f 0615 	mvn.w	r6, #21
   10d54:	e7d8      	b.n	10d08 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
   10d56:	f06f 0615 	mvn.w	r6, #21
   10d5a:	e7d5      	b.n	10d08 <gpio_nrfx_pin_configure+0xac>
   10d5c:	0bad0000 	.word	0x0bad0000

00010d60 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   10d60:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   10d62:	f001 fc0f 	bl	12584 <nrfx_gpiote_is_init>
   10d66:	b108      	cbz	r0, 10d6c <gpio_nrfx_init+0xc>
		return 0;
   10d68:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   10d6a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   10d6c:	f001 fbe0 	bl	12530 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   10d70:	4b08      	ldr	r3, [pc, #32]	; (10d94 <gpio_nrfx_init+0x34>)
   10d72:	4298      	cmp	r0, r3
   10d74:	d10a      	bne.n	10d8c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   10d76:	2100      	movs	r1, #0
   10d78:	4807      	ldr	r0, [pc, #28]	; (10d98 <gpio_nrfx_init+0x38>)
   10d7a:	f001 fbbb 	bl	124f4 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   10d7e:	2200      	movs	r2, #0
   10d80:	2105      	movs	r1, #5
   10d82:	2006      	movs	r0, #6
   10d84:	f7fd ffdc 	bl	ed40 <z_arm_irq_priority_set>
	return 0;
   10d88:	2000      	movs	r0, #0
   10d8a:	e7ee      	b.n	10d6a <gpio_nrfx_init+0xa>
		return -EIO;
   10d8c:	f06f 0004 	mvn.w	r0, #4
   10d90:	e7eb      	b.n	10d6a <gpio_nrfx_init+0xa>
   10d92:	bf00      	nop
   10d94:	0bad0000 	.word	0x0bad0000
   10d98:	00015659 	.word	0x00015659

00010d9c <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   10d9c:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
   10d9e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   10da0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   10da4:	d06f      	beq.n	10e86 <baudrate_set+0xea>
   10da6:	d83a      	bhi.n	10e1e <baudrate_set+0x82>
   10da8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   10dac:	d06e      	beq.n	10e8c <baudrate_set+0xf0>
   10dae:	d90a      	bls.n	10dc6 <baudrate_set+0x2a>
   10db0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   10db4:	d075      	beq.n	10ea2 <baudrate_set+0x106>
   10db6:	d924      	bls.n	10e02 <baudrate_set+0x66>
   10db8:	f647 2312 	movw	r3, #31250	; 0x7a12
   10dbc:	4299      	cmp	r1, r3
   10dbe:	d12b      	bne.n	10e18 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   10dc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   10dc4:	e013      	b.n	10dee <baudrate_set+0x52>
	switch (baudrate) {
   10dc6:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   10dca:	d061      	beq.n	10e90 <baudrate_set+0xf4>
   10dcc:	d907      	bls.n	10dde <baudrate_set+0x42>
   10dce:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   10dd2:	d063      	beq.n	10e9c <baudrate_set+0x100>
   10dd4:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   10dd8:	d110      	bne.n	10dfc <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   10dda:	4b3c      	ldr	r3, [pc, #240]	; (10ecc <baudrate_set+0x130>)
   10ddc:	e007      	b.n	10dee <baudrate_set+0x52>
	switch (baudrate) {
   10dde:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   10de2:	d058      	beq.n	10e96 <baudrate_set+0xfa>
   10de4:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   10de8:	d105      	bne.n	10df6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   10dea:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   10dee:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   10df2:	2000      	movs	r0, #0
   10df4:	4770      	bx	lr
	switch (baudrate) {
   10df6:	f06f 0015 	mvn.w	r0, #21
   10dfa:	4770      	bx	lr
   10dfc:	f06f 0015 	mvn.w	r0, #21
   10e00:	4770      	bx	lr
   10e02:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   10e06:	d04e      	beq.n	10ea6 <baudrate_set+0x10a>
   10e08:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   10e0c:	d101      	bne.n	10e12 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   10e0e:	4b30      	ldr	r3, [pc, #192]	; (10ed0 <baudrate_set+0x134>)
   10e10:	e7ed      	b.n	10dee <baudrate_set+0x52>
	switch (baudrate) {
   10e12:	f06f 0015 	mvn.w	r0, #21
   10e16:	4770      	bx	lr
   10e18:	f06f 0015 	mvn.w	r0, #21
   10e1c:	4770      	bx	lr
   10e1e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   10e22:	d042      	beq.n	10eaa <baudrate_set+0x10e>
   10e24:	d909      	bls.n	10e3a <baudrate_set+0x9e>
   10e26:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   10e2a:	d046      	beq.n	10eba <baudrate_set+0x11e>
   10e2c:	d91f      	bls.n	10e6e <baudrate_set+0xd2>
   10e2e:	4b29      	ldr	r3, [pc, #164]	; (10ed4 <baudrate_set+0x138>)
   10e30:	4299      	cmp	r1, r3
   10e32:	d148      	bne.n	10ec6 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   10e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10e38:	e7d9      	b.n	10dee <baudrate_set+0x52>
	switch (baudrate) {
   10e3a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   10e3e:	d037      	beq.n	10eb0 <baudrate_set+0x114>
   10e40:	d905      	bls.n	10e4e <baudrate_set+0xb2>
   10e42:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   10e46:	d10f      	bne.n	10e68 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   10e48:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   10e4c:	e7cf      	b.n	10dee <baudrate_set+0x52>
	switch (baudrate) {
   10e4e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   10e52:	4299      	cmp	r1, r3
   10e54:	d02e      	beq.n	10eb4 <baudrate_set+0x118>
   10e56:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   10e5a:	d102      	bne.n	10e62 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   10e5c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   10e60:	e7c5      	b.n	10dee <baudrate_set+0x52>
	switch (baudrate) {
   10e62:	f06f 0015 	mvn.w	r0, #21
   10e66:	4770      	bx	lr
   10e68:	f06f 0015 	mvn.w	r0, #21
   10e6c:	4770      	bx	lr
   10e6e:	4b1a      	ldr	r3, [pc, #104]	; (10ed8 <baudrate_set+0x13c>)
   10e70:	4299      	cmp	r1, r3
   10e72:	d025      	beq.n	10ec0 <baudrate_set+0x124>
   10e74:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   10e78:	d102      	bne.n	10e80 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   10e7a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   10e7e:	e7b6      	b.n	10dee <baudrate_set+0x52>
	switch (baudrate) {
   10e80:	f06f 0015 	mvn.w	r0, #21
   10e84:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   10e86:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   10e8a:	e7b0      	b.n	10dee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   10e8c:	4b13      	ldr	r3, [pc, #76]	; (10edc <baudrate_set+0x140>)
   10e8e:	e7ae      	b.n	10dee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   10e90:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   10e94:	e7ab      	b.n	10dee <baudrate_set+0x52>
	switch (baudrate) {
   10e96:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   10e9a:	e7a8      	b.n	10dee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   10e9c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   10ea0:	e7a5      	b.n	10dee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   10ea2:	4b0f      	ldr	r3, [pc, #60]	; (10ee0 <baudrate_set+0x144>)
   10ea4:	e7a3      	b.n	10dee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   10ea6:	4b0f      	ldr	r3, [pc, #60]	; (10ee4 <baudrate_set+0x148>)
   10ea8:	e7a1      	b.n	10dee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   10eaa:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   10eae:	e79e      	b.n	10dee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   10eb0:	4b0d      	ldr	r3, [pc, #52]	; (10ee8 <baudrate_set+0x14c>)
   10eb2:	e79c      	b.n	10dee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   10eb4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   10eb8:	e799      	b.n	10dee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   10eba:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   10ebe:	e796      	b.n	10dee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   10ec0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   10ec4:	e793      	b.n	10dee <baudrate_set+0x52>
	switch (baudrate) {
   10ec6:	f06f 0015 	mvn.w	r0, #21
}
   10eca:	4770      	bx	lr
   10ecc:	0013b000 	.word	0x0013b000
   10ed0:	004ea000 	.word	0x004ea000
   10ed4:	000f4240 	.word	0x000f4240
   10ed8:	0003d090 	.word	0x0003d090
   10edc:	00275000 	.word	0x00275000
   10ee0:	0075c000 	.word	0x0075c000
   10ee4:	003af000 	.word	0x003af000
   10ee8:	013a9000 	.word	0x013a9000

00010eec <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   10eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ef0:	4605      	mov	r5, r0
   10ef2:	460f      	mov	r7, r1
	return dev->data;
   10ef4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10ef8:	f005 fb10 	bl	1651c <k_is_in_isr>
   10efc:	b920      	cbnz	r0, 10f08 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   10efe:	4b16      	ldr	r3, [pc, #88]	; (10f58 <uarte_nrfx_poll_out+0x6c>)
   10f00:	781b      	ldrb	r3, [r3, #0]
   10f02:	b1ab      	cbz	r3, 10f30 <uarte_nrfx_poll_out+0x44>
   10f04:	2300      	movs	r3, #0
   10f06:	e000      	b.n	10f0a <uarte_nrfx_poll_out+0x1e>
   10f08:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   10f0a:	b19b      	cbz	r3, 10f34 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   10f0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   10f10:	f3ef 8411 	mrs	r4, BASEPRI
   10f14:	f383 8812 	msr	BASEPRI_MAX, r3
   10f18:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   10f1c:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   10f1e:	4628      	mov	r0, r5
   10f20:	f004 fcef 	bl	15902 <is_tx_ready>
   10f24:	b950      	cbnz	r0, 10f3c <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   10f26:	f384 8811 	msr	BASEPRI, r4
   10f2a:	f3bf 8f6f 	isb	sy
}
   10f2e:	e7ed      	b.n	10f0c <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10f30:	2301      	movs	r3, #1
   10f32:	e7ea      	b.n	10f0a <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   10f34:	4628      	mov	r0, r5
   10f36:	f004 fd33 	bl	159a0 <wait_tx_ready>
   10f3a:	4606      	mov	r6, r0
	}

	data->char_out = c;
   10f3c:	4641      	mov	r1, r8
   10f3e:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   10f42:	2201      	movs	r2, #1
   10f44:	4628      	mov	r0, r5
   10f46:	f004 fcf6 	bl	15936 <tx_start>
	__asm__ volatile(
   10f4a:	f386 8811 	msr	BASEPRI, r6
   10f4e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   10f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f56:	bf00      	nop
   10f58:	20001f92 	.word	0x20001f92

00010f5c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   10f5c:	b538      	push	{r3, r4, r5, lr}
   10f5e:	4604      	mov	r4, r0
   10f60:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   10f62:	f101 0012 	add.w	r0, r1, #18
   10f66:	f001 fbf5 	bl	12754 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   10f6a:	4b0c      	ldr	r3, [pc, #48]	; (10f9c <endtx_stoptx_ppi_init+0x40>)
   10f6c:	4298      	cmp	r0, r3
   10f6e:	d111      	bne.n	10f94 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   10f70:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   10f72:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   10f76:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   10f78:	4a09      	ldr	r2, [pc, #36]	; (10fa0 <endtx_stoptx_ppi_init+0x44>)
   10f7a:	33a2      	adds	r3, #162	; 0xa2
   10f7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   10f80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   10f84:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   10f86:	7ca9      	ldrb	r1, [r5, #18]
   10f88:	2301      	movs	r3, #1
   10f8a:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   10f8c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   10f90:	2000      	movs	r0, #0
}
   10f92:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   10f94:	f06f 0004 	mvn.w	r0, #4
   10f98:	e7fb      	b.n	10f92 <endtx_stoptx_ppi_init+0x36>
   10f9a:	bf00      	nop
   10f9c:	0bad0000 	.word	0x0bad0000
   10fa0:	4001f000 	.word	0x4001f000

00010fa4 <random_byte_get>:
	__asm__ volatile(
   10fa4:	f04f 0340 	mov.w	r3, #64	; 0x40
   10fa8:	f3ef 8211 	mrs	r2, BASEPRI
   10fac:	f383 8812 	msr	BASEPRI_MAX, r3
   10fb0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   10fb4:	4b09      	ldr	r3, [pc, #36]	; (10fdc <random_byte_get+0x38>)
   10fb6:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   10fb8:	b16b      	cbz	r3, 10fd6 <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   10fba:	4b09      	ldr	r3, [pc, #36]	; (10fe0 <random_byte_get+0x3c>)
   10fbc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   10fc0:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   10fc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
   10fc6:	2100      	movs	r1, #0
   10fc8:	6019      	str	r1, [r3, #0]
   10fca:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   10fcc:	f382 8811 	msr	BASEPRI, r2
   10fd0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   10fd4:	4770      	bx	lr
	int retval = -EAGAIN;
   10fd6:	f06f 000a 	mvn.w	r0, #10
   10fda:	e7f7      	b.n	10fcc <random_byte_get+0x28>
   10fdc:	4000d100 	.word	0x4000d100
   10fe0:	4000d000 	.word	0x4000d000

00010fe4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   10fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fe8:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   10fea:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   10fee:	78c5      	ldrb	r5, [r0, #3]
   10ff0:	462f      	mov	r7, r5
	__asm__ volatile(
   10ff2:	f04f 0340 	mov.w	r3, #64	; 0x40
   10ff6:	f3ef 8811 	mrs	r8, BASEPRI
   10ffa:	f383 8812 	msr	BASEPRI_MAX, r3
   10ffe:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   11002:	7800      	ldrb	r0, [r0, #0]
   11004:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   11006:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   1100a:	ebac 0c00 	sub.w	ip, ip, r0
   1100e:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   11012:	4562      	cmp	r2, ip
   11014:	d901      	bls.n	1101a <rng_pool_get+0x36>
		len = available;
   11016:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1101a:	1883      	adds	r3, r0, r2
   1101c:	402b      	ands	r3, r5
   1101e:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   11020:	f388 8811 	msr	BASEPRI, r8
   11024:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   11028:	460b      	mov	r3, r1
}
   1102a:	e006      	b.n	1103a <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1102c:	1932      	adds	r2, r6, r4
   1102e:	7952      	ldrb	r2, [r2, #5]
   11030:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   11034:	3401      	adds	r4, #1
   11036:	403c      	ands	r4, r7
	while (likely(len--)) {
   11038:	462a      	mov	r2, r5
   1103a:	1e55      	subs	r5, r2, #1
   1103c:	b2ad      	uxth	r5, r5
   1103e:	2a00      	cmp	r2, #0
   11040:	d1f4      	bne.n	1102c <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   11042:	4570      	cmp	r0, lr
   11044:	d10d      	bne.n	11062 <rng_pool_get+0x7e>
	__asm__ volatile(
   11046:	f04f 0040 	mov.w	r0, #64	; 0x40
   1104a:	f3ef 8211 	mrs	r2, BASEPRI
   1104e:	f380 8812 	msr	BASEPRI_MAX, r0
   11052:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   11056:	7830      	ldrb	r0, [r6, #0]
   11058:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   1105a:	f382 8811 	msr	BASEPRI, r2
   1105e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   11062:	1a5b      	subs	r3, r3, r1
   11064:	b298      	uxth	r0, r3
	available = available - len;
   11066:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   1106a:	7933      	ldrb	r3, [r6, #4]
   1106c:	4563      	cmp	r3, ip
   1106e:	d302      	bcc.n	11076 <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   11070:	4b02      	ldr	r3, [pc, #8]	; (1107c <rng_pool_get+0x98>)
   11072:	2201      	movs	r2, #1
   11074:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   11076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1107a:	bf00      	nop
   1107c:	4000d000 	.word	0x4000d000

00011080 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   11080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11082:	460d      	mov	r5, r1
   11084:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   11086:	f013 0f01 	tst.w	r3, #1
   1108a:	d103      	bne.n	11094 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1108c:	4822      	ldr	r0, [pc, #136]	; (11118 <entropy_nrf5_get_entropy_isr+0x98>)
   1108e:	f7ff ffa9 	bl	10fe4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   11092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   11094:	b90a      	cbnz	r2, 1109a <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   11096:	4620      	mov	r0, r4
   11098:	e7fb      	b.n	11092 <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   1109a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1109e:	f3ef 8611 	mrs	r6, BASEPRI
   110a2:	f383 8812 	msr	BASEPRI_MAX, r3
   110a6:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   110aa:	200d      	movs	r0, #13
   110ac:	f7fd fe3a 	bl	ed24 <arch_irq_is_enabled>
   110b0:	4607      	mov	r7, r0
		irq_disable(IRQN);
   110b2:	200d      	movs	r0, #13
   110b4:	f7fd fe22 	bl	ecfc <arch_irq_disable>
	__asm__ volatile(
   110b8:	f386 8811 	msr	BASEPRI, r6
   110bc:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   110c0:	4b16      	ldr	r3, [pc, #88]	; (1111c <entropy_nrf5_get_entropy_isr+0x9c>)
   110c2:	2200      	movs	r2, #0
   110c4:	601a      	str	r2, [r3, #0]
   110c6:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   110c8:	4b15      	ldr	r3, [pc, #84]	; (11120 <entropy_nrf5_get_entropy_isr+0xa0>)
   110ca:	2201      	movs	r2, #1
   110cc:	601a      	str	r2, [r3, #0]
   110ce:	4b15      	ldr	r3, [pc, #84]	; (11124 <entropy_nrf5_get_entropy_isr+0xa4>)
   110d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   110d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   110d8:	4626      	mov	r6, r4
   110da:	e004      	b.n	110e6 <entropy_nrf5_get_entropy_isr+0x66>
   110dc:	f3bf 8f4f 	dsb	sy
				__WFE();
   110e0:	bf20      	wfe
				__SEV();
   110e2:	bf40      	sev
				__WFE();
   110e4:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   110e6:	4b0d      	ldr	r3, [pc, #52]	; (1111c <entropy_nrf5_get_entropy_isr+0x9c>)
   110e8:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   110ea:	2b00      	cmp	r3, #0
   110ec:	d0f6      	beq.n	110dc <entropy_nrf5_get_entropy_isr+0x5c>
			byte = random_byte_get();
   110ee:	f7ff ff59 	bl	10fa4 <random_byte_get>
   110f2:	4b0c      	ldr	r3, [pc, #48]	; (11124 <entropy_nrf5_get_entropy_isr+0xa4>)
   110f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   110f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   110fc:	2800      	cmp	r0, #0
   110fe:	db02      	blt.n	11106 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   11100:	3e01      	subs	r6, #1
   11102:	b2b6      	uxth	r6, r6
   11104:	55a8      	strb	r0, [r5, r6]
		} while (len);
   11106:	2e00      	cmp	r6, #0
   11108:	d1ed      	bne.n	110e6 <entropy_nrf5_get_entropy_isr+0x66>
		if (irq_enabled) {
   1110a:	2f00      	cmp	r7, #0
   1110c:	d0c3      	beq.n	11096 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   1110e:	200d      	movs	r0, #13
   11110:	f7fd fde4 	bl	ecdc <arch_irq_enable>
   11114:	e7bf      	b.n	11096 <entropy_nrf5_get_entropy_isr+0x16>
   11116:	bf00      	nop
   11118:	200018a8 	.word	0x200018a8
   1111c:	4000d100 	.word	0x4000d100
   11120:	4000d000 	.word	0x4000d000
   11124:	e000e100 	.word	0xe000e100

00011128 <isr>:
{
   11128:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1112a:	f7ff ff3b 	bl	10fa4 <random_byte_get>
	if (byte < 0) {
   1112e:	2800      	cmp	r0, #0
   11130:	db06      	blt.n	11140 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   11132:	b2c4      	uxtb	r4, r0
   11134:	4621      	mov	r1, r4
   11136:	480a      	ldr	r0, [pc, #40]	; (11160 <isr+0x38>)
   11138:	f004 fcb2 	bl	15aa0 <rng_pool_put>
	if (ret < 0) {
   1113c:	2800      	cmp	r0, #0
   1113e:	db00      	blt.n	11142 <isr+0x1a>
}
   11140:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   11142:	4621      	mov	r1, r4
   11144:	4807      	ldr	r0, [pc, #28]	; (11164 <isr+0x3c>)
   11146:	f004 fcab 	bl	15aa0 <rng_pool_put>
		if (ret < 0) {
   1114a:	2800      	cmp	r0, #0
   1114c:	db03      	blt.n	11156 <isr+0x2e>
	z_impl_k_sem_give(sem);
   1114e:	4806      	ldr	r0, [pc, #24]	; (11168 <isr+0x40>)
   11150:	f001 fec4 	bl	12edc <z_impl_k_sem_give>
}
   11154:	e7f4      	b.n	11140 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   11156:	4b05      	ldr	r3, [pc, #20]	; (1116c <isr+0x44>)
   11158:	2201      	movs	r2, #1
   1115a:	601a      	str	r2, [r3, #0]
}
   1115c:	e7f7      	b.n	1114e <isr+0x26>
   1115e:	bf00      	nop
   11160:	200018a8 	.word	0x200018a8
   11164:	200018bd 	.word	0x200018bd
   11168:	20001890 	.word	0x20001890
   1116c:	4000d004 	.word	0x4000d004

00011170 <entropy_nrf5_get_entropy>:
{
   11170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11172:	460f      	mov	r7, r1
   11174:	4614      	mov	r4, r2
	while (len) {
   11176:	e002      	b.n	1117e <entropy_nrf5_get_entropy+0xe>
		len -= bytes;
   11178:	1b64      	subs	r4, r4, r5
   1117a:	b2a4      	uxth	r4, r4
		buf += bytes;
   1117c:	442f      	add	r7, r5
	while (len) {
   1117e:	b1e4      	cbz	r4, 111ba <entropy_nrf5_get_entropy+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   11180:	4e0f      	ldr	r6, [pc, #60]	; (111c0 <entropy_nrf5_get_entropy+0x50>)
   11182:	f04f 32ff 	mov.w	r2, #4294967295
   11186:	f04f 33ff 	mov.w	r3, #4294967295
   1118a:	4630      	mov	r0, r6
   1118c:	f001 fece 	bl	12f2c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   11190:	4622      	mov	r2, r4
   11192:	4639      	mov	r1, r7
   11194:	f106 0045 	add.w	r0, r6, #69	; 0x45
   11198:	f7ff ff24 	bl	10fe4 <rng_pool_get>
   1119c:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1119e:	4630      	mov	r0, r6
   111a0:	f001 fe9c 	bl	12edc <z_impl_k_sem_give>
		if (bytes == 0U) {
   111a4:	2d00      	cmp	r5, #0
   111a6:	d1e7      	bne.n	11178 <entropy_nrf5_get_entropy+0x8>
	return z_impl_k_sem_take(sem, timeout);
   111a8:	f04f 32ff 	mov.w	r2, #4294967295
   111ac:	f04f 33ff 	mov.w	r3, #4294967295
   111b0:	f106 0018 	add.w	r0, r6, #24
   111b4:	f001 feba 	bl	12f2c <z_impl_k_sem_take>
			continue;
   111b8:	e7e1      	b.n	1117e <entropy_nrf5_get_entropy+0xe>
}
   111ba:	2000      	movs	r0, #0
   111bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   111be:	bf00      	nop
   111c0:	20001878 	.word	0x20001878

000111c4 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   111c4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   111c6:	4c18      	ldr	r4, [pc, #96]	; (11228 <entropy_nrf5_init+0x64>)
   111c8:	2201      	movs	r2, #1
   111ca:	4611      	mov	r1, r2
   111cc:	4620      	mov	r0, r4
   111ce:	f005 fac1 	bl	16754 <z_impl_k_sem_init>
   111d2:	2201      	movs	r2, #1
   111d4:	2100      	movs	r1, #0
   111d6:	f104 0018 	add.w	r0, r4, #24
   111da:	f005 fabb 	bl	16754 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   111de:	2204      	movs	r2, #4
   111e0:	2108      	movs	r1, #8
   111e2:	f104 0045 	add.w	r0, r4, #69	; 0x45
   111e6:	f004 fc6f 	bl	15ac8 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   111ea:	220c      	movs	r2, #12
   111ec:	2110      	movs	r1, #16
   111ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
   111f2:	f004 fc69 	bl	15ac8 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   111f6:	4b0d      	ldr	r3, [pc, #52]	; (1122c <entropy_nrf5_init+0x68>)
   111f8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   111fc:	f022 0201 	bic.w	r2, r2, #1
   11200:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   11204:	4a0a      	ldr	r2, [pc, #40]	; (11230 <entropy_nrf5_init+0x6c>)
   11206:	2400      	movs	r4, #0
   11208:	6014      	str	r4, [r2, #0]
   1120a:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1120c:	2101      	movs	r1, #1
   1120e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   11212:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   11214:	4622      	mov	r2, r4
   11216:	200d      	movs	r0, #13
   11218:	f7fd fd92 	bl	ed40 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1121c:	200d      	movs	r0, #13
   1121e:	f7fd fd5d 	bl	ecdc <arch_irq_enable>

	return 0;
}
   11222:	4620      	mov	r0, r4
   11224:	bd10      	pop	{r4, pc}
   11226:	bf00      	nop
   11228:	20001878 	.word	0x20001878
   1122c:	4000d000 	.word	0x4000d000
   11230:	4000d100 	.word	0x4000d100

00011234 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   11234:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   11238:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1123c:	4b01      	ldr	r3, [pc, #4]	; (11244 <set_comparator+0x10>)
   1123e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   11242:	4770      	bx	lr
   11244:	40011000 	.word	0x40011000

00011248 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   11248:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1124c:	4b01      	ldr	r3, [pc, #4]	; (11254 <get_comparator+0xc>)
   1124e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   11252:	4770      	bx	lr
   11254:	40011000 	.word	0x40011000

00011258 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1125c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1125e:	4a02      	ldr	r2, [pc, #8]	; (11268 <event_enable+0x10>)
   11260:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   11264:	4770      	bx	lr
   11266:	bf00      	nop
   11268:	40011000 	.word	0x40011000

0001126c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1126c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11270:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   11272:	4a02      	ldr	r2, [pc, #8]	; (1127c <event_disable+0x10>)
   11274:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   11278:	4770      	bx	lr
   1127a:	bf00      	nop
   1127c:	40011000 	.word	0x40011000

00011280 <counter>:
     return p_reg->COUNTER;
   11280:	4b01      	ldr	r3, [pc, #4]	; (11288 <counter+0x8>)
   11282:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   11286:	4770      	bx	lr
   11288:	40011000 	.word	0x40011000

0001128c <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   1128c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1128e:	2301      	movs	r3, #1
   11290:	4083      	lsls	r3, r0
   11292:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11294:	4a10      	ldr	r2, [pc, #64]	; (112d8 <compare_int_lock+0x4c>)
   11296:	f3bf 8f5b 	dmb	ish
   1129a:	e852 1f00 	ldrex	r1, [r2]
   1129e:	ea01 0c04 	and.w	ip, r1, r4
   112a2:	e842 ce00 	strex	lr, ip, [r2]
   112a6:	f1be 0f00 	cmp.w	lr, #0
   112aa:	d1f6      	bne.n	1129a <compare_int_lock+0xe>
   112ac:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   112b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   112b4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   112b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   112bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   112c0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   112c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   112c8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   112cc:	420b      	tst	r3, r1
}
   112ce:	bf14      	ite	ne
   112d0:	2001      	movne	r0, #1
   112d2:	2000      	moveq	r0, #0
   112d4:	bd10      	pop	{r4, pc}
   112d6:	bf00      	nop
   112d8:	200018d0 	.word	0x200018d0

000112dc <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   112dc:	b570      	push	{r4, r5, r6, lr}
   112de:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   112e0:	f004 fc0e 	bl	15b00 <full_int_lock>
   112e4:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   112e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   112ea:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   112ec:	4a17      	ldr	r2, [pc, #92]	; (1134c <channel_processing_check_and_clear+0x70>)
   112ee:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   112f2:	4213      	tst	r3, r2
   112f4:	d105      	bne.n	11302 <channel_processing_check_and_clear+0x26>
	bool result = false;
   112f6:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   112f8:	4628      	mov	r0, r5
   112fa:	f004 fc05 	bl	15b08 <full_int_unlock>

	return result;
}
   112fe:	4630      	mov	r0, r6
   11300:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   11302:	2301      	movs	r3, #1
   11304:	40a3      	lsls	r3, r4
   11306:	43db      	mvns	r3, r3
   11308:	4a11      	ldr	r2, [pc, #68]	; (11350 <channel_processing_check_and_clear+0x74>)
   1130a:	f3bf 8f5b 	dmb	ish
   1130e:	e852 1f00 	ldrex	r1, [r2]
   11312:	ea01 0003 	and.w	r0, r1, r3
   11316:	e842 0600 	strex	r6, r0, [r2]
   1131a:	2e00      	cmp	r6, #0
   1131c:	d1f7      	bne.n	1130e <channel_processing_check_and_clear+0x32>
   1131e:	f3bf 8f5b 	dmb	ish
   11322:	b959      	cbnz	r1, 1133c <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   11324:	f104 0350 	add.w	r3, r4, #80	; 0x50
   11328:	009b      	lsls	r3, r3, #2
   1132a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1132c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11330:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   11334:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   11336:	b113      	cbz	r3, 1133e <channel_processing_check_and_clear+0x62>
   11338:	2301      	movs	r3, #1
   1133a:	e000      	b.n	1133e <channel_processing_check_and_clear+0x62>
   1133c:	2301      	movs	r3, #1
		if (result) {
   1133e:	461e      	mov	r6, r3
   11340:	2b00      	cmp	r3, #0
   11342:	d0d9      	beq.n	112f8 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   11344:	4620      	mov	r0, r4
   11346:	f004 fbcc 	bl	15ae2 <event_clear>
   1134a:	e7d5      	b.n	112f8 <channel_processing_check_and_clear+0x1c>
   1134c:	40011000 	.word	0x40011000
   11350:	200018cc 	.word	0x200018cc

00011354 <compare_int_unlock>:
	if (key) {
   11354:	b901      	cbnz	r1, 11358 <compare_int_unlock+0x4>
}
   11356:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   11358:	2301      	movs	r3, #1
   1135a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1135c:	4a11      	ldr	r2, [pc, #68]	; (113a4 <compare_int_unlock+0x50>)
   1135e:	f3bf 8f5b 	dmb	ish
   11362:	e852 1f00 	ldrex	r1, [r2]
   11366:	4319      	orrs	r1, r3
   11368:	e842 1c00 	strex	ip, r1, [r2]
   1136c:	f1bc 0f00 	cmp.w	ip, #0
   11370:	d1f7      	bne.n	11362 <compare_int_unlock+0xe>
   11372:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1137a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1137c:	4a0a      	ldr	r2, [pc, #40]	; (113a8 <compare_int_unlock+0x54>)
   1137e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11382:	f3bf 8f5b 	dmb	ish
   11386:	4b09      	ldr	r3, [pc, #36]	; (113ac <compare_int_unlock+0x58>)
   11388:	681b      	ldr	r3, [r3, #0]
   1138a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1138e:	fa23 f000 	lsr.w	r0, r3, r0
   11392:	f010 0f01 	tst.w	r0, #1
   11396:	d0de      	beq.n	11356 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11398:	4b05      	ldr	r3, [pc, #20]	; (113b0 <compare_int_unlock+0x5c>)
   1139a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1139e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   113a2:	e7d8      	b.n	11356 <compare_int_unlock+0x2>
   113a4:	200018d0 	.word	0x200018d0
   113a8:	40011000 	.word	0x40011000
   113ac:	200018cc 	.word	0x200018cc
   113b0:	e000e100 	.word	0xe000e100

000113b4 <sys_clock_timeout_handler>:
{
   113b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   113b6:	4607      	mov	r7, r0
   113b8:	4614      	mov	r4, r2
   113ba:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   113bc:	4610      	mov	r0, r2
   113be:	4619      	mov	r1, r3
   113c0:	f004 fb9b 	bl	15afa <absolute_time_to_cc>
   113c4:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   113c6:	4b15      	ldr	r3, [pc, #84]	; (1141c <sys_clock_timeout_handler+0x68>)
   113c8:	681a      	ldr	r2, [r3, #0]
   113ca:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   113cc:	601c      	str	r4, [r3, #0]
   113ce:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   113d0:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   113d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   113d8:	d308      	bcc.n	113ec <sys_clock_timeout_handler+0x38>
	return false;
   113da:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   113dc:	f002 fc4e 	bl	13c7c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   113e0:	4638      	mov	r0, r7
   113e2:	f7ff ff31 	bl	11248 <get_comparator>
   113e6:	42a8      	cmp	r0, r5
   113e8:	d00c      	beq.n	11404 <sys_clock_timeout_handler+0x50>
}
   113ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   113ec:	4b0c      	ldr	r3, [pc, #48]	; (11420 <sys_clock_timeout_handler+0x6c>)
   113ee:	6819      	ldr	r1, [r3, #0]
   113f0:	0a0b      	lsrs	r3, r1, #8
   113f2:	060a      	lsls	r2, r1, #24
   113f4:	1952      	adds	r2, r2, r5
   113f6:	f143 0300 	adc.w	r3, r3, #0
   113fa:	490a      	ldr	r1, [pc, #40]	; (11424 <sys_clock_timeout_handler+0x70>)
   113fc:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   11400:	2401      	movs	r4, #1
   11402:	e7eb      	b.n	113dc <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   11404:	b11c      	cbz	r4, 1140e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   11406:	4638      	mov	r0, r7
   11408:	f7ff ff26 	bl	11258 <event_enable>
}
   1140c:	e7ed      	b.n	113ea <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   1140e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   11412:	4638      	mov	r0, r7
   11414:	f7ff ff0e 	bl	11234 <set_comparator>
   11418:	e7f5      	b.n	11406 <sys_clock_timeout_handler+0x52>
   1141a:	bf00      	nop
   1141c:	200013e8 	.word	0x200013e8
   11420:	200018d4 	.word	0x200018d4
   11424:	200013d0 	.word	0x200013d0

00011428 <z_nrf_rtc_timer_read>:
{
   11428:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1142a:	4b0d      	ldr	r3, [pc, #52]	; (11460 <z_nrf_rtc_timer_read+0x38>)
   1142c:	681b      	ldr	r3, [r3, #0]
   1142e:	0a1d      	lsrs	r5, r3, #8
   11430:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   11432:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   11436:	f7ff ff23 	bl	11280 <counter>
   1143a:	4603      	mov	r3, r0
	val += cntr;
   1143c:	1820      	adds	r0, r4, r0
   1143e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   11442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   11446:	d20a      	bcs.n	1145e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   11448:	4b06      	ldr	r3, [pc, #24]	; (11464 <z_nrf_rtc_timer_read+0x3c>)
   1144a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1144e:	4299      	cmp	r1, r3
   11450:	bf08      	it	eq
   11452:	4290      	cmpeq	r0, r2
   11454:	d203      	bcs.n	1145e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   11456:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1145a:	f141 0100 	adc.w	r1, r1, #0
}
   1145e:	bd38      	pop	{r3, r4, r5, pc}
   11460:	200018d4 	.word	0x200018d4
   11464:	200013d0 	.word	0x200013d0

00011468 <compare_set_nolocks>:
{
   11468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1146c:	4606      	mov	r6, r0
   1146e:	4614      	mov	r4, r2
   11470:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   11472:	4610      	mov	r0, r2
   11474:	4619      	mov	r1, r3
   11476:	f004 fb40 	bl	15afa <absolute_time_to_cc>
   1147a:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1147c:	f7ff ffd4 	bl	11428 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   11480:	42a9      	cmp	r1, r5
   11482:	bf08      	it	eq
   11484:	42a0      	cmpeq	r0, r4
   11486:	d21e      	bcs.n	114c6 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   11488:	ebb4 0800 	subs.w	r8, r4, r0
   1148c:	eb65 0901 	sbc.w	r9, r5, r1
   11490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   11494:	2300      	movs	r3, #0
   11496:	454b      	cmp	r3, r9
   11498:	bf08      	it	eq
   1149a:	4542      	cmpeq	r2, r8
   1149c:	d32e      	bcc.n	114fc <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   1149e:	4b19      	ldr	r3, [pc, #100]	; (11504 <compare_set_nolocks+0x9c>)
   114a0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   114a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   114a8:	42ab      	cmp	r3, r5
   114aa:	bf08      	it	eq
   114ac:	42a2      	cmpeq	r2, r4
   114ae:	d018      	beq.n	114e2 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   114b0:	4639      	mov	r1, r7
   114b2:	4630      	mov	r0, r6
   114b4:	f004 fb2b 	bl	15b0e <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   114b8:	4639      	mov	r1, r7
   114ba:	f004 fb0e 	bl	15ada <counter_sub>
   114be:	1824      	adds	r4, r4, r0
   114c0:	f145 0500 	adc.w	r5, r5, #0
   114c4:	e00d      	b.n	114e2 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   114c6:	2301      	movs	r3, #1
   114c8:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   114ca:	4a0f      	ldr	r2, [pc, #60]	; (11508 <compare_set_nolocks+0xa0>)
   114cc:	f3bf 8f5b 	dmb	ish
   114d0:	e852 1f00 	ldrex	r1, [r2]
   114d4:	4319      	orrs	r1, r3
   114d6:	e842 1000 	strex	r0, r1, [r2]
   114da:	2800      	cmp	r0, #0
   114dc:	d1f8      	bne.n	114d0 <compare_set_nolocks+0x68>
   114de:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   114e2:	4b08      	ldr	r3, [pc, #32]	; (11504 <compare_set_nolocks+0x9c>)
   114e4:	0132      	lsls	r2, r6, #4
   114e6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   114ea:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   114ee:	9908      	ldr	r1, [sp, #32]
   114f0:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   114f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   114f4:	6073      	str	r3, [r6, #4]
	return ret;
   114f6:	2000      	movs	r0, #0
}
   114f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   114fc:	f06f 0015 	mvn.w	r0, #21
   11500:	e7fa      	b.n	114f8 <compare_set_nolocks+0x90>
   11502:	bf00      	nop
   11504:	200013d8 	.word	0x200013d8
   11508:	200018cc 	.word	0x200018cc

0001150c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1150c:	b530      	push	{r4, r5, lr}
   1150e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   11510:	2300      	movs	r3, #0
   11512:	4a1e      	ldr	r2, [pc, #120]	; (1158c <sys_clock_driver_init+0x80>)
   11514:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   11518:	2b00      	cmp	r3, #0
   1151a:	dd25      	ble.n	11568 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
   1151c:	4c1b      	ldr	r4, [pc, #108]	; (1158c <sys_clock_driver_init+0x80>)
   1151e:	2502      	movs	r5, #2
   11520:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11524:	4b1a      	ldr	r3, [pc, #104]	; (11590 <sys_clock_driver_init+0x84>)
   11526:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1152a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1152e:	2200      	movs	r2, #0
   11530:	2101      	movs	r1, #1
   11532:	2011      	movs	r0, #17
   11534:	f7fd fc04 	bl	ed40 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   11538:	2011      	movs	r0, #17
   1153a:	f7fd fbcf 	bl	ecdc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1153e:	2301      	movs	r3, #1
   11540:	4a14      	ldr	r2, [pc, #80]	; (11594 <sys_clock_driver_init+0x88>)
   11542:	6013      	str	r3, [r2, #0]
   11544:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   11546:	4a14      	ldr	r2, [pc, #80]	; (11598 <sys_clock_driver_init+0x8c>)
   11548:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1154a:	2400      	movs	r4, #0
   1154c:	9401      	str	r4, [sp, #4]
   1154e:	4b13      	ldr	r3, [pc, #76]	; (1159c <sys_clock_driver_init+0x90>)
   11550:	9300      	str	r3, [sp, #0]
   11552:	4a13      	ldr	r2, [pc, #76]	; (115a0 <sys_clock_driver_init+0x94>)
   11554:	2300      	movs	r3, #0
   11556:	4620      	mov	r0, r4
   11558:	f004 fb14 	bl	15b84 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1155c:	4628      	mov	r0, r5
   1155e:	f7ff fa4f 	bl	10a00 <z_nrf_clock_control_lf_on>

	return 0;
}
   11562:	4620      	mov	r0, r4
   11564:	b003      	add	sp, #12
   11566:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   11568:	4a0e      	ldr	r2, [pc, #56]	; (115a4 <sys_clock_driver_init+0x98>)
   1156a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1156e:	f04f 30ff 	mov.w	r0, #4294967295
   11572:	f04f 31ff 	mov.w	r1, #4294967295
   11576:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1157a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1157e:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   11580:	4902      	ldr	r1, [pc, #8]	; (1158c <sys_clock_driver_init+0x80>)
   11582:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   11586:	3301      	adds	r3, #1
   11588:	e7c6      	b.n	11518 <sys_clock_driver_init+0xc>
   1158a:	bf00      	nop
   1158c:	40011000 	.word	0x40011000
   11590:	e000e100 	.word	0xe000e100
   11594:	40011008 	.word	0x40011008
   11598:	200018d0 	.word	0x200018d0
   1159c:	000113b5 	.word	0x000113b5
   115a0:	007fffff 	.word	0x007fffff
   115a4:	200013d8 	.word	0x200013d8

000115a8 <process_channel>:
{
   115a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   115ac:	b082      	sub	sp, #8
   115ae:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   115b0:	f7ff fe94 	bl	112dc <channel_processing_check_and_clear>
   115b4:	b910      	cbnz	r0, 115bc <process_channel+0x14>
}
   115b6:	b002      	add	sp, #8
   115b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   115bc:	f7ff ff34 	bl	11428 <z_nrf_rtc_timer_read>
   115c0:	4606      	mov	r6, r0
   115c2:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   115c4:	f004 fa9c 	bl	15b00 <full_int_lock>
   115c8:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   115ca:	4b13      	ldr	r3, [pc, #76]	; (11618 <process_channel+0x70>)
   115cc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   115d0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   115d4:	454f      	cmp	r7, r9
   115d6:	bf08      	it	eq
   115d8:	4546      	cmpeq	r6, r8
   115da:	d20b      	bcs.n	115f4 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   115dc:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   115de:	4650      	mov	r0, sl
   115e0:	f004 fa92 	bl	15b08 <full_int_unlock>
		if (handler) {
   115e4:	2e00      	cmp	r6, #0
   115e6:	d0e6      	beq.n	115b6 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   115e8:	9500      	str	r5, [sp, #0]
   115ea:	4642      	mov	r2, r8
   115ec:	464b      	mov	r3, r9
   115ee:	4620      	mov	r0, r4
   115f0:	47b0      	blx	r6
}
   115f2:	e7e0      	b.n	115b6 <process_channel+0xe>
			handler = cc_data[chan].callback;
   115f4:	4a08      	ldr	r2, [pc, #32]	; (11618 <process_channel+0x70>)
   115f6:	0123      	lsls	r3, r4, #4
   115f8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   115fc:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   115fe:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   11600:	2000      	movs	r0, #0
   11602:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   11604:	f04f 32ff 	mov.w	r2, #4294967295
   11608:	f04f 33ff 	mov.w	r3, #4294967295
   1160c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   11610:	4620      	mov	r0, r4
   11612:	f7ff fe2b 	bl	1126c <event_disable>
   11616:	e7e2      	b.n	115de <process_channel+0x36>
   11618:	200013d8 	.word	0x200013d8

0001161c <rtc_nrf_isr>:
{
   1161c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1161e:	4b0d      	ldr	r3, [pc, #52]	; (11654 <rtc_nrf_isr+0x38>)
   11620:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   11624:	f013 0f02 	tst.w	r3, #2
   11628:	d00a      	beq.n	11640 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1162a:	4b0b      	ldr	r3, [pc, #44]	; (11658 <rtc_nrf_isr+0x3c>)
   1162c:	681b      	ldr	r3, [r3, #0]
   1162e:	b13b      	cbz	r3, 11640 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11630:	4b09      	ldr	r3, [pc, #36]	; (11658 <rtc_nrf_isr+0x3c>)
   11632:	2200      	movs	r2, #0
   11634:	601a      	str	r2, [r3, #0]
   11636:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
   11638:	4a08      	ldr	r2, [pc, #32]	; (1165c <rtc_nrf_isr+0x40>)
   1163a:	6813      	ldr	r3, [r2, #0]
   1163c:	3301      	adds	r3, #1
   1163e:	6013      	str	r3, [r2, #0]
{
   11640:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   11642:	2c00      	cmp	r4, #0
   11644:	dd00      	ble.n	11648 <rtc_nrf_isr+0x2c>
}
   11646:	bd10      	pop	{r4, pc}
		process_channel(chan);
   11648:	4620      	mov	r0, r4
   1164a:	f7ff ffad 	bl	115a8 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1164e:	3401      	adds	r4, #1
   11650:	e7f7      	b.n	11642 <rtc_nrf_isr+0x26>
   11652:	bf00      	nop
   11654:	40011000 	.word	0x40011000
   11658:	40011104 	.word	0x40011104
   1165c:	200018d4 	.word	0x200018d4

00011660 <sys_clock_set_timeout>:
{
   11660:	b510      	push	{r4, lr}
   11662:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   11664:	f1b0 3fff 	cmp.w	r0, #4294967295
   11668:	d007      	beq.n	1167a <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1166a:	1e44      	subs	r4, r0, #1
   1166c:	2c00      	cmp	r4, #0
   1166e:	dd07      	ble.n	11680 <sys_clock_set_timeout+0x20>
   11670:	4b11      	ldr	r3, [pc, #68]	; (116b8 <sys_clock_set_timeout+0x58>)
   11672:	429c      	cmp	r4, r3
   11674:	dd05      	ble.n	11682 <sys_clock_set_timeout+0x22>
   11676:	4c11      	ldr	r4, [pc, #68]	; (116bc <sys_clock_set_timeout+0x5c>)
   11678:	e003      	b.n	11682 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1167a:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   1167e:	e7f4      	b.n	1166a <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11680:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   11682:	f7ff fed1 	bl	11428 <z_nrf_rtc_timer_read>
   11686:	4b0e      	ldr	r3, [pc, #56]	; (116c0 <sys_clock_set_timeout+0x60>)
   11688:	e9d3 2300 	ldrd	r2, r3, [r3]
   1168c:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   1168e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11692:	d300      	bcc.n	11696 <sys_clock_set_timeout+0x36>
		ticks = 0;
   11694:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   11696:	4404      	add	r4, r0
   11698:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   1169a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   1169e:	d300      	bcc.n	116a2 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   116a0:	4c06      	ldr	r4, [pc, #24]	; (116bc <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   116a2:	2000      	movs	r0, #0
   116a4:	9001      	str	r0, [sp, #4]
   116a6:	4907      	ldr	r1, [pc, #28]	; (116c4 <sys_clock_set_timeout+0x64>)
   116a8:	9100      	str	r1, [sp, #0]
   116aa:	1912      	adds	r2, r2, r4
   116ac:	f143 0300 	adc.w	r3, r3, #0
   116b0:	f004 fa68 	bl	15b84 <compare_set>
}
   116b4:	b002      	add	sp, #8
   116b6:	bd10      	pop	{r4, pc}
   116b8:	007ffffe 	.word	0x007ffffe
   116bc:	007fffff 	.word	0x007fffff
   116c0:	200013e8 	.word	0x200013e8
   116c4:	000113b5 	.word	0x000113b5

000116c8 <sys_clock_elapsed>:
{
   116c8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   116ca:	f7ff fead 	bl	11428 <z_nrf_rtc_timer_read>
   116ce:	4b02      	ldr	r3, [pc, #8]	; (116d8 <sys_clock_elapsed+0x10>)
   116d0:	681b      	ldr	r3, [r3, #0]
}
   116d2:	1ac0      	subs	r0, r0, r3
   116d4:	bd08      	pop	{r3, pc}
   116d6:	bf00      	nop
   116d8:	200013e8 	.word	0x200013e8

000116dc <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   116dc:	b508      	push	{r3, lr}
   116de:	4602      	mov	r2, r0
   116e0:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   116e2:	4802      	ldr	r0, [pc, #8]	; (116ec <multithreading_lock_acquire+0x10>)
   116e4:	f001 faf0 	bl	12cc8 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   116e8:	bd08      	pop	{r3, pc}
   116ea:	bf00      	nop
   116ec:	20000474 	.word	0x20000474

000116f0 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   116f0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   116f2:	4802      	ldr	r0, [pc, #8]	; (116fc <multithreading_lock_release+0xc>)
   116f4:	f001 fb72 	bl	12ddc <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   116f8:	bd08      	pop	{r3, pc}
   116fa:	bf00      	nop
   116fc:	20000474 	.word	0x20000474

00011700 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   11700:	b510      	push	{r4, lr}
   11702:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   11704:	4a03      	ldr	r2, [pc, #12]	; (11714 <rand_prio_low_vector_get_blocking+0x14>)
   11706:	6810      	ldr	r0, [r2, #0]
   11708:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1170a:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1170c:	680c      	ldr	r4, [r1, #0]
   1170e:	4619      	mov	r1, r3
   11710:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   11712:	bd10      	pop	{r4, pc}
   11714:	200018d8 	.word	0x200018d8

00011718 <host_signal>:
{
   11718:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1171a:	4802      	ldr	r0, [pc, #8]	; (11724 <host_signal+0xc>)
   1171c:	f001 fbde 	bl	12edc <z_impl_k_sem_give>
}
   11720:	bd08      	pop	{r3, pc}
   11722:	bf00      	nop
   11724:	20000488 	.word	0x20000488

00011728 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   11728:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1172a:	4803      	ldr	r0, [pc, #12]	; (11738 <hci_driver_init+0x10>)
   1172c:	f7fe fb9a 	bl	fe64 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   11730:	4802      	ldr	r0, [pc, #8]	; (1173c <hci_driver_init+0x14>)
   11732:	f7f2 febd 	bl	44b0 <sdc_init>
	return err;
}
   11736:	bd08      	pop	{r3, pc}
   11738:	0001737c 	.word	0x0001737c
   1173c:	00015bbf 	.word	0x00015bbf

00011740 <cmd_handle>:
{
   11740:	b538      	push	{r3, r4, r5, lr}
   11742:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   11744:	f04f 30ff 	mov.w	r0, #4294967295
   11748:	f04f 31ff 	mov.w	r1, #4294967295
   1174c:	f7ff ffc6 	bl	116dc <multithreading_lock_acquire>
	if (!errcode) {
   11750:	4604      	mov	r4, r0
   11752:	b110      	cbz	r0, 1175a <cmd_handle+0x1a>
	if (errcode) {
   11754:	b144      	cbz	r4, 11768 <cmd_handle+0x28>
}
   11756:	4620      	mov	r0, r4
   11758:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   1175a:	68a8      	ldr	r0, [r5, #8]
   1175c:	f000 f8b0 	bl	118c0 <hci_internal_cmd_put>
   11760:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   11762:	f7ff ffc5 	bl	116f0 <multithreading_lock_release>
   11766:	e7f5      	b.n	11754 <cmd_handle+0x14>
   11768:	4801      	ldr	r0, [pc, #4]	; (11770 <cmd_handle+0x30>)
   1176a:	f001 fbb7 	bl	12edc <z_impl_k_sem_give>
	return 0;
   1176e:	e7f2      	b.n	11756 <cmd_handle+0x16>
   11770:	20000488 	.word	0x20000488

00011774 <rand_prio_high_vector_get>:
{
   11774:	b538      	push	{r3, r4, r5, lr}
   11776:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   11778:	4b07      	ldr	r3, [pc, #28]	; (11798 <rand_prio_high_vector_get+0x24>)
   1177a:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1177c:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1177e:	685d      	ldr	r5, [r3, #4]
   11780:	b13d      	cbz	r5, 11792 <rand_prio_high_vector_get+0x1e>
   11782:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   11784:	2300      	movs	r3, #0
   11786:	4621      	mov	r1, r4
   11788:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1178a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1178e:	b2c0      	uxtb	r0, r0
   11790:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   11792:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11796:	e7f8      	b.n	1178a <rand_prio_high_vector_get+0x16>
   11798:	200018d8 	.word	0x200018d8

0001179c <rand_prio_low_vector_get>:
{
   1179c:	b538      	push	{r3, r4, r5, lr}
   1179e:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   117a0:	4b07      	ldr	r3, [pc, #28]	; (117c0 <rand_prio_low_vector_get+0x24>)
   117a2:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   117a4:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   117a6:	685d      	ldr	r5, [r3, #4]
   117a8:	b13d      	cbz	r5, 117ba <rand_prio_low_vector_get+0x1e>
   117aa:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   117ac:	2300      	movs	r3, #0
   117ae:	4621      	mov	r1, r4
   117b0:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   117b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   117b6:	b2c0      	uxtb	r0, r0
   117b8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   117ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
   117be:	e7f8      	b.n	117b2 <rand_prio_low_vector_get+0x16>
   117c0:	200018d8 	.word	0x200018d8

000117c4 <recv_thread>:
{
   117c4:	b510      	push	{r4, lr}
	bool received_evt = false;
   117c6:	2400      	movs	r4, #0
   117c8:	e005      	b.n	117d6 <recv_thread+0x12>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   117ca:	4808      	ldr	r0, [pc, #32]	; (117ec <recv_thread+0x28>)
   117cc:	f004 fa46 	bl	15c5c <fetch_and_process_hci_evt>
   117d0:	4604      	mov	r4, r0
	z_impl_k_yield();
   117d2:	f002 f837 	bl	13844 <z_impl_k_yield>
		if (!received_evt && !received_data) {
   117d6:	2c00      	cmp	r4, #0
   117d8:	d1f7      	bne.n	117ca <recv_thread+0x6>
	return z_impl_k_sem_take(sem, timeout);
   117da:	f04f 32ff 	mov.w	r2, #4294967295
   117de:	f04f 33ff 	mov.w	r3, #4294967295
   117e2:	4803      	ldr	r0, [pc, #12]	; (117f0 <recv_thread+0x2c>)
   117e4:	f001 fba2 	bl	12f2c <z_impl_k_sem_take>
   117e8:	e7ef      	b.n	117ca <recv_thread+0x6>
   117ea:	bf00      	nop
   117ec:	200018dc 	.word	0x200018dc
   117f0:	20000488 	.word	0x20000488

000117f4 <hci_driver_open>:
{
   117f4:	b530      	push	{r4, r5, lr}
   117f6:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   117f8:	4c28      	ldr	r4, [pc, #160]	; (1189c <hci_driver_open+0xa8>)
   117fa:	2200      	movs	r2, #0
   117fc:	2300      	movs	r3, #0
   117fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11802:	2300      	movs	r3, #0
   11804:	9304      	str	r3, [sp, #16]
   11806:	f06f 0209 	mvn.w	r2, #9
   1180a:	9203      	str	r2, [sp, #12]
   1180c:	9302      	str	r3, [sp, #8]
   1180e:	9301      	str	r3, [sp, #4]
   11810:	9300      	str	r3, [sp, #0]
   11812:	4b23      	ldr	r3, [pc, #140]	; (118a0 <hci_driver_open+0xac>)
   11814:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11818:	4922      	ldr	r1, [pc, #136]	; (118a4 <hci_driver_open+0xb0>)
   1181a:	4620      	mov	r0, r4
   1181c:	f004 fe93 	bl	16546 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   11820:	4921      	ldr	r1, [pc, #132]	; (118a8 <hci_driver_open+0xb4>)
   11822:	4620      	mov	r0, r4
   11824:	f001 f962 	bl	12aec <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   11828:	a80b      	add	r0, sp, #44	; 0x2c
   1182a:	f7f2 fdad 	bl	4388 <sdc_build_revision_get>
	err = configure_supported_features();
   1182e:	f004 fa2e 	bl	15c8e <configure_supported_features>
	if (err) {
   11832:	4604      	mov	r4, r0
   11834:	b110      	cbz	r0, 1183c <hci_driver_open+0x48>
}
   11836:	4620      	mov	r0, r4
   11838:	b011      	add	sp, #68	; 0x44
   1183a:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   1183c:	f004 fa2f 	bl	15c9e <configure_memory_usage>
	if (err) {
   11840:	4604      	mov	r4, r0
   11842:	2800      	cmp	r0, #0
   11844:	d1f7      	bne.n	11836 <hci_driver_open+0x42>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11846:	4819      	ldr	r0, [pc, #100]	; (118ac <hci_driver_open+0xb8>)
   11848:	f000 fff6 	bl	12838 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1184c:	4b18      	ldr	r3, [pc, #96]	; (118b0 <hci_driver_open+0xbc>)
   1184e:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   11850:	b1e8      	cbz	r0, 1188e <hci_driver_open+0x9a>
	sdc_rand_source_t rand_functions = {
   11852:	4a18      	ldr	r2, [pc, #96]	; (118b4 <hci_driver_open+0xc0>)
   11854:	ab08      	add	r3, sp, #32
   11856:	ca07      	ldmia	r2, {r0, r1, r2}
   11858:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1185c:	4618      	mov	r0, r3
   1185e:	f7f2 fefb 	bl	4658 <sdc_rand_source_register>
	if (err) {
   11862:	4604      	mov	r4, r0
   11864:	b9b0      	cbnz	r0, 11894 <hci_driver_open+0xa0>
	err = MULTITHREADING_LOCK_ACQUIRE();
   11866:	f04f 30ff 	mov.w	r0, #4294967295
   1186a:	f04f 31ff 	mov.w	r1, #4294967295
   1186e:	f7ff ff35 	bl	116dc <multithreading_lock_acquire>
	if (!err) {
   11872:	4605      	mov	r5, r0
   11874:	b118      	cbz	r0, 1187e <hci_driver_open+0x8a>
	if (err < 0) {
   11876:	2d00      	cmp	r5, #0
   11878:	dadd      	bge.n	11836 <hci_driver_open+0x42>
		return err;
   1187a:	462c      	mov	r4, r5
   1187c:	e7db      	b.n	11836 <hci_driver_open+0x42>
		err = sdc_enable(host_signal, sdc_mempool);
   1187e:	490e      	ldr	r1, [pc, #56]	; (118b8 <hci_driver_open+0xc4>)
   11880:	480e      	ldr	r0, [pc, #56]	; (118bc <hci_driver_open+0xc8>)
   11882:	f7f2 fded 	bl	4460 <sdc_enable>
   11886:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   11888:	f7ff ff32 	bl	116f0 <multithreading_lock_release>
   1188c:	e7f3      	b.n	11876 <hci_driver_open+0x82>
		return -ENODEV;
   1188e:	f06f 0412 	mvn.w	r4, #18
   11892:	e7d0      	b.n	11836 <hci_driver_open+0x42>
		return -EINVAL;
   11894:	f06f 0415 	mvn.w	r4, #21
   11898:	e7cd      	b.n	11836 <hci_driver_open+0x42>
   1189a:	bf00      	nop
   1189c:	200013f0 	.word	0x200013f0
   118a0:	000117c5 	.word	0x000117c5
   118a4:	200029e0 	.word	0x200029e0
   118a8:	0001735c 	.word	0x0001735c
   118ac:	00017350 	.word	0x00017350
   118b0:	200018d8 	.word	0x200018d8
   118b4:	00016fa8 	.word	0x00016fa8
   118b8:	20001924 	.word	0x20001924
   118bc:	00011719 	.word	0x00011719

000118c0 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   118c0:	4b0b      	ldr	r3, [pc, #44]	; (118f0 <hci_internal_cmd_put+0x30>)
   118c2:	781b      	ldrb	r3, [r3, #0]
   118c4:	b96b      	cbnz	r3, 118e2 <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   118c6:	7883      	ldrb	r3, [r0, #2]
   118c8:	3303      	adds	r3, #3
   118ca:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   118ce:	dc0b      	bgt.n	118e8 <hci_internal_cmd_put+0x28>
{
   118d0:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   118d2:	4c07      	ldr	r4, [pc, #28]	; (118f0 <hci_internal_cmd_put+0x30>)
   118d4:	1c61      	adds	r1, r4, #1
   118d6:	f004 fc52 	bl	1617e <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   118da:	2301      	movs	r3, #1
   118dc:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   118de:	2000      	movs	r0, #0
}
   118e0:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   118e2:	f04f 30ff 	mov.w	r0, #4294967295
   118e6:	4770      	bx	lr
		return -EINVAL;
   118e8:	f06f 0015 	mvn.w	r0, #21
}
   118ec:	4770      	bx	lr
   118ee:	bf00      	nop
   118f0:	20001a44 	.word	0x20001a44

000118f4 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   118f4:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   118f6:	4b07      	ldr	r3, [pc, #28]	; (11914 <hci_internal_evt_get+0x20>)
   118f8:	781b      	ldrb	r3, [r3, #0]
   118fa:	b913      	cbnz	r3, 11902 <hci_internal_evt_get+0xe>
		cmd_complete_or_status.occurred = false;

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
   118fc:	f7fa f875 	bl	b9ea <sdc_hci_evt_get>
}
   11900:	bd10      	pop	{r4, pc}
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   11902:	4c04      	ldr	r4, [pc, #16]	; (11914 <hci_internal_evt_get+0x20>)
   11904:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   11906:	3202      	adds	r2, #2
   11908:	1c61      	adds	r1, r4, #1
   1190a:	f003 fa91 	bl	14e30 <memcpy>
		cmd_complete_or_status.occurred = false;
   1190e:	2000      	movs	r0, #0
   11910:	7020      	strb	r0, [r4, #0]
		return 0;
   11912:	e7f5      	b.n	11900 <hci_internal_evt_get+0xc>
   11914:	20001a44 	.word	0x20001a44

00011918 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   11918:	b538      	push	{r3, r4, r5, lr}
   1191a:	4605      	mov	r5, r0
   1191c:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   1191e:	4b0a      	ldr	r3, [pc, #40]	; (11948 <bt_rand+0x30>)
   11920:	681b      	ldr	r3, [r3, #0]
   11922:	b13b      	cbz	r3, 11934 <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   11924:	4b08      	ldr	r3, [pc, #32]	; (11948 <bt_rand+0x30>)
   11926:	6818      	ldr	r0, [r3, #0]
   11928:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   1192a:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   1192c:	681b      	ldr	r3, [r3, #0]
   1192e:	4629      	mov	r1, r5
   11930:	4798      	blx	r3
}
   11932:	bd38      	pop	{r3, r4, r5, pc}
   11934:	4805      	ldr	r0, [pc, #20]	; (1194c <bt_rand+0x34>)
   11936:	f000 ff7f 	bl	12838 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1193a:	4b03      	ldr	r3, [pc, #12]	; (11948 <bt_rand+0x30>)
   1193c:	6018      	str	r0, [r3, #0]
		if (!dev) {
   1193e:	2800      	cmp	r0, #0
   11940:	d1f0      	bne.n	11924 <bt_rand+0xc>
			return -ENODEV;
   11942:	f06f 0012 	mvn.w	r0, #18
   11946:	e7f4      	b.n	11932 <bt_rand+0x1a>
   11948:	20001a8c 	.word	0x20001a8c
   1194c:	00017350 	.word	0x00017350

00011950 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   11950:	b510      	push	{r4, lr}
   11952:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   11954:	f004 fc6b 	bl	1622e <m_config_clock_source_get>
   11958:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1195c:	2332      	movs	r3, #50	; 0x32
   1195e:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   11962:	2300      	movs	r3, #0
   11964:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   11968:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   1196c:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   11970:	4a0c      	ldr	r2, [pc, #48]	; (119a4 <mpsl_lib_init+0x54>)
   11972:	2119      	movs	r1, #25
   11974:	4668      	mov	r0, sp
   11976:	f7f2 fb2b 	bl	3fd0 <mpsl_init>
	if (err) {
   1197a:	4604      	mov	r4, r0
   1197c:	b110      	cbz	r0, 11984 <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1197e:	4620      	mov	r0, r4
   11980:	b002      	add	sp, #8
   11982:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   11984:	2201      	movs	r2, #1
   11986:	2100      	movs	r1, #0
   11988:	2008      	movs	r0, #8
   1198a:	f7fd f9d9 	bl	ed40 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1198e:	2201      	movs	r2, #1
   11990:	2100      	movs	r1, #0
   11992:	200b      	movs	r0, #11
   11994:	f7fd f9d4 	bl	ed40 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   11998:	2201      	movs	r2, #1
   1199a:	2100      	movs	r1, #0
   1199c:	4610      	mov	r0, r2
   1199e:	f7fd f9cf 	bl	ed40 <z_arm_irq_priority_set>
	return 0;
   119a2:	e7ec      	b.n	1197e <mpsl_lib_init+0x2e>
   119a4:	00016221 	.word	0x00016221

000119a8 <signal_thread>:
{
   119a8:	b538      	push	{r3, r4, r5, lr}
		k_sem_take(&sem_signal, K_FOREVER);
   119aa:	f04f 34ff 	mov.w	r4, #4294967295
   119ae:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   119b2:	4622      	mov	r2, r4
   119b4:	462b      	mov	r3, r5
   119b6:	4806      	ldr	r0, [pc, #24]	; (119d0 <signal_thread+0x28>)
   119b8:	f001 fab8 	bl	12f2c <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   119bc:	4620      	mov	r0, r4
   119be:	4629      	mov	r1, r5
   119c0:	f7ff fe8c 	bl	116dc <multithreading_lock_acquire>
		mpsl_low_priority_process();
   119c4:	f7f9 fbd3 	bl	b16e <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   119c8:	f7ff fe92 	bl	116f0 <multithreading_lock_release>
	while (true) {
   119cc:	e7ed      	b.n	119aa <signal_thread+0x2>
   119ce:	bf00      	nop
   119d0:	200004a0 	.word	0x200004a0

000119d4 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   119d4:	b530      	push	{r4, r5, lr}
   119d6:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   119d8:	4d0f      	ldr	r5, [pc, #60]	; (11a18 <mpsl_signal_thread_init+0x44>)
   119da:	2200      	movs	r2, #0
   119dc:	2300      	movs	r3, #0
   119de:	e9cd 2306 	strd	r2, r3, [sp, #24]
   119e2:	2400      	movs	r4, #0
   119e4:	9404      	str	r4, [sp, #16]
   119e6:	f06f 0309 	mvn.w	r3, #9
   119ea:	9303      	str	r3, [sp, #12]
   119ec:	9402      	str	r4, [sp, #8]
   119ee:	9401      	str	r4, [sp, #4]
   119f0:	9400      	str	r4, [sp, #0]
   119f2:	4b0a      	ldr	r3, [pc, #40]	; (11a1c <mpsl_signal_thread_init+0x48>)
   119f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   119f8:	4909      	ldr	r1, [pc, #36]	; (11a20 <mpsl_signal_thread_init+0x4c>)
   119fa:	4628      	mov	r0, r5
   119fc:	f004 fda3 	bl	16546 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   11a00:	4908      	ldr	r1, [pc, #32]	; (11a24 <mpsl_signal_thread_init+0x50>)
   11a02:	4628      	mov	r0, r5
   11a04:	f001 f872 	bl	12aec <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   11a08:	4622      	mov	r2, r4
   11a0a:	2104      	movs	r1, #4
   11a0c:	2019      	movs	r0, #25
   11a0e:	f7fd f997 	bl	ed40 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   11a12:	4620      	mov	r0, r4
   11a14:	b009      	add	sp, #36	; 0x24
   11a16:	bd30      	pop	{r4, r5, pc}
   11a18:	200014a8 	.word	0x200014a8
   11a1c:	000119a9 	.word	0x000119a9
   11a20:	20002e00 	.word	0x20002e00
   11a24:	00017390 	.word	0x00017390

00011a28 <mpsl_low_prio_irq_handler>:
{
   11a28:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   11a2a:	4802      	ldr	r0, [pc, #8]	; (11a34 <mpsl_low_prio_irq_handler+0xc>)
   11a2c:	f001 fa56 	bl	12edc <z_impl_k_sem_give>
}
   11a30:	bd08      	pop	{r3, pc}
   11a32:	bf00      	nop
   11a34:	200004a0 	.word	0x200004a0

00011a38 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   11a38:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   11a3a:	4b02      	ldr	r3, [pc, #8]	; (11a44 <mpsl_hfclk_callback+0xc>)
   11a3c:	681b      	ldr	r3, [r3, #0]
   11a3e:	2000      	movs	r0, #0
   11a40:	4798      	blx	r3
}
   11a42:	bd08      	pop	{r3, pc}
   11a44:	20001a90 	.word	0x20001a90

00011a48 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   11a48:	b508      	push	{r3, lr}
	switch (domain) {
   11a4a:	b128      	cbz	r0, 11a58 <nrfx_clock_start+0x10>
   11a4c:	2801      	cmp	r0, #1
   11a4e:	d102      	bne.n	11a56 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   11a50:	4804      	ldr	r0, [pc, #16]	; (11a64 <nrfx_clock_start+0x1c>)
   11a52:	f7f2 f927 	bl	3ca4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   11a56:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   11a58:	4b03      	ldr	r3, [pc, #12]	; (11a68 <nrfx_clock_start+0x20>)
   11a5a:	681b      	ldr	r3, [r3, #0]
   11a5c:	2001      	movs	r0, #1
   11a5e:	4798      	blx	r3
}
   11a60:	e7f9      	b.n	11a56 <nrfx_clock_start+0xe>
   11a62:	bf00      	nop
   11a64:	00011a39 	.word	0x00011a39
   11a68:	20001a90 	.word	0x20001a90

00011a6c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   11a6c:	4b01      	ldr	r3, [pc, #4]	; (11a74 <nrfx_clock_init+0x8>)
   11a6e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   11a70:	4801      	ldr	r0, [pc, #4]	; (11a78 <nrfx_clock_init+0xc>)
   11a72:	4770      	bx	lr
   11a74:	20001a90 	.word	0x20001a90
   11a78:	0bad0000 	.word	0x0bad0000

00011a7c <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   11a7c:	4b06      	ldr	r3, [pc, #24]	; (11a98 <nrf52_errata_12+0x1c>)
   11a7e:	681b      	ldr	r3, [r3, #0]
   11a80:	f1b3 3fff 	cmp.w	r3, #4294967295
   11a84:	d003      	beq.n	11a8e <nrf52_errata_12+0x12>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   11a86:	2b06      	cmp	r3, #6
   11a88:	d004      	beq.n	11a94 <nrf52_errata_12+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   11a8a:	2000      	movs	r0, #0
   11a8c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   11a8e:	4b03      	ldr	r3, [pc, #12]	; (11a9c <nrf52_errata_12+0x20>)
   11a90:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   11a92:	e7f8      	b.n	11a86 <nrf52_errata_12+0xa>
                        return true;
   11a94:	2001      	movs	r0, #1
    #endif
}
   11a96:	4770      	bx	lr
   11a98:	10000130 	.word	0x10000130
   11a9c:	f0000fe0 	.word	0xf0000fe0

00011aa0 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   11aa0:	4b09      	ldr	r3, [pc, #36]	; (11ac8 <nrf52_errata_16+0x28>)
   11aa2:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   11aa4:	3308      	adds	r3, #8
   11aa6:	681b      	ldr	r3, [r3, #0]
   11aa8:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   11aac:	2a06      	cmp	r2, #6
   11aae:	d001      	beq.n	11ab4 <nrf52_errata_16+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   11ab0:	2000      	movs	r0, #0
   11ab2:	4770      	bx	lr
                switch(var2)
   11ab4:	3b03      	subs	r3, #3
   11ab6:	2b00      	cmp	r3, #0
   11ab8:	d804      	bhi.n	11ac4 <nrf52_errata_16+0x24>
   11aba:	e8df f003 	tbb	[pc, r3]
   11abe:	01          	.byte	0x01
   11abf:	00          	.byte	0x00
            if (var1 == 0x06)
   11ac0:	2001      	movs	r0, #1
   11ac2:	4770      	bx	lr
                        return false;
   11ac4:	2000      	movs	r0, #0
    #endif
}
   11ac6:	4770      	bx	lr
   11ac8:	f0000fe0 	.word	0xf0000fe0

00011acc <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   11acc:	4b06      	ldr	r3, [pc, #24]	; (11ae8 <nrf52_errata_31+0x1c>)
   11ace:	681b      	ldr	r3, [r3, #0]
   11ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
   11ad4:	d003      	beq.n	11ade <nrf52_errata_31+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   11ad6:	2b06      	cmp	r3, #6
   11ad8:	d004      	beq.n	11ae4 <nrf52_errata_31+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   11ada:	2000      	movs	r0, #0
   11adc:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   11ade:	4b03      	ldr	r3, [pc, #12]	; (11aec <nrf52_errata_31+0x20>)
   11ae0:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   11ae2:	e7f8      	b.n	11ad6 <nrf52_errata_31+0xa>
                        return true;
   11ae4:	2001      	movs	r0, #1
    #endif
}
   11ae6:	4770      	bx	lr
   11ae8:	10000130 	.word	0x10000130
   11aec:	f0000fe0 	.word	0xf0000fe0

00011af0 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   11af0:	4b09      	ldr	r3, [pc, #36]	; (11b18 <nrf52_errata_32+0x28>)
   11af2:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   11af4:	3308      	adds	r3, #8
   11af6:	681b      	ldr	r3, [r3, #0]
   11af8:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   11afc:	2a06      	cmp	r2, #6
   11afe:	d001      	beq.n	11b04 <nrf52_errata_32+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   11b00:	2000      	movs	r0, #0
   11b02:	4770      	bx	lr
                switch(var2)
   11b04:	3b03      	subs	r3, #3
   11b06:	2b00      	cmp	r3, #0
   11b08:	d804      	bhi.n	11b14 <nrf52_errata_32+0x24>
   11b0a:	e8df f003 	tbb	[pc, r3]
   11b0e:	01          	.byte	0x01
   11b0f:	00          	.byte	0x00
            if (var1 == 0x06)
   11b10:	2001      	movs	r0, #1
   11b12:	4770      	bx	lr
                        return false;
   11b14:	2000      	movs	r0, #0
    #endif
}
   11b16:	4770      	bx	lr
   11b18:	f0000fe0 	.word	0xf0000fe0

00011b1c <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   11b1c:	4b06      	ldr	r3, [pc, #24]	; (11b38 <nrf52_errata_36+0x1c>)
   11b1e:	681b      	ldr	r3, [r3, #0]
   11b20:	f1b3 3fff 	cmp.w	r3, #4294967295
   11b24:	d003      	beq.n	11b2e <nrf52_errata_36+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   11b26:	2b06      	cmp	r3, #6
   11b28:	d004      	beq.n	11b34 <nrf52_errata_36+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   11b2a:	2000      	movs	r0, #0
   11b2c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   11b2e:	4b03      	ldr	r3, [pc, #12]	; (11b3c <nrf52_errata_36+0x20>)
   11b30:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   11b32:	e7f8      	b.n	11b26 <nrf52_errata_36+0xa>
                        return true;
   11b34:	2001      	movs	r0, #1
    #endif
}
   11b36:	4770      	bx	lr
   11b38:	10000130 	.word	0x10000130
   11b3c:	f0000fe0 	.word	0xf0000fe0

00011b40 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   11b40:	4b09      	ldr	r3, [pc, #36]	; (11b68 <nrf52_errata_37+0x28>)
   11b42:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   11b44:	3308      	adds	r3, #8
   11b46:	681b      	ldr	r3, [r3, #0]
   11b48:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   11b4c:	2a06      	cmp	r2, #6
   11b4e:	d001      	beq.n	11b54 <nrf52_errata_37+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   11b50:	2000      	movs	r0, #0
   11b52:	4770      	bx	lr
                switch(var2)
   11b54:	3b03      	subs	r3, #3
   11b56:	2b00      	cmp	r3, #0
   11b58:	d804      	bhi.n	11b64 <nrf52_errata_37+0x24>
   11b5a:	e8df f003 	tbb	[pc, r3]
   11b5e:	01          	.byte	0x01
   11b5f:	00          	.byte	0x00
            if (var1 == 0x06)
   11b60:	2001      	movs	r0, #1
   11b62:	4770      	bx	lr
                        return false;
   11b64:	2000      	movs	r0, #0
    #endif
}
   11b66:	4770      	bx	lr
   11b68:	f0000fe0 	.word	0xf0000fe0

00011b6c <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   11b6c:	4b09      	ldr	r3, [pc, #36]	; (11b94 <nrf52_errata_57+0x28>)
   11b6e:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   11b70:	3308      	adds	r3, #8
   11b72:	681b      	ldr	r3, [r3, #0]
   11b74:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   11b78:	2a06      	cmp	r2, #6
   11b7a:	d001      	beq.n	11b80 <nrf52_errata_57+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   11b7c:	2000      	movs	r0, #0
   11b7e:	4770      	bx	lr
                switch(var2)
   11b80:	3b03      	subs	r3, #3
   11b82:	2b00      	cmp	r3, #0
   11b84:	d804      	bhi.n	11b90 <nrf52_errata_57+0x24>
   11b86:	e8df f003 	tbb	[pc, r3]
   11b8a:	01          	.byte	0x01
   11b8b:	00          	.byte	0x00
            if (var1 == 0x06)
   11b8c:	2001      	movs	r0, #1
   11b8e:	4770      	bx	lr
                        return false;
   11b90:	2000      	movs	r0, #0
    #endif
}
   11b92:	4770      	bx	lr
   11b94:	f0000fe0 	.word	0xf0000fe0

00011b98 <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   11b98:	4b0d      	ldr	r3, [pc, #52]	; (11bd0 <nrf52_errata_66+0x38>)
   11b9a:	681a      	ldr	r2, [r3, #0]
   11b9c:	f1b2 3fff 	cmp.w	r2, #4294967295
   11ba0:	d005      	beq.n	11bae <nrf52_errata_66+0x16>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   11ba2:	4b0c      	ldr	r3, [pc, #48]	; (11bd4 <nrf52_errata_66+0x3c>)
   11ba4:	681b      	ldr	r3, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   11ba6:	2a06      	cmp	r2, #6
   11ba8:	d008      	beq.n	11bbc <nrf52_errata_66+0x24>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   11baa:	2000      	movs	r0, #0
   11bac:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   11bae:	4b0a      	ldr	r3, [pc, #40]	; (11bd8 <nrf52_errata_66+0x40>)
   11bb0:	781a      	ldrb	r2, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   11bb2:	3308      	adds	r3, #8
   11bb4:	681b      	ldr	r3, [r3, #0]
   11bb6:	f3c3 1303 	ubfx	r3, r3, #4, #4
   11bba:	e7f4      	b.n	11ba6 <nrf52_errata_66+0xe>
                switch(var2)
   11bbc:	3b03      	subs	r3, #3
   11bbe:	2b01      	cmp	r3, #1
   11bc0:	d804      	bhi.n	11bcc <nrf52_errata_66+0x34>
   11bc2:	e8df f003 	tbb	[pc, r3]
   11bc6:	0101      	.short	0x0101
            if (var1 == 0x06)
   11bc8:	2000      	movs	r0, #0
   11bca:	4770      	bx	lr
                        return true;
   11bcc:	2001      	movs	r0, #1
    #endif
}
   11bce:	4770      	bx	lr
   11bd0:	10000130 	.word	0x10000130
   11bd4:	10000134 	.word	0x10000134
   11bd8:	f0000fe0 	.word	0xf0000fe0

00011bdc <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   11bdc:	4b06      	ldr	r3, [pc, #24]	; (11bf8 <nrf52_errata_108+0x1c>)
   11bde:	681b      	ldr	r3, [r3, #0]
   11be0:	f1b3 3fff 	cmp.w	r3, #4294967295
   11be4:	d003      	beq.n	11bee <nrf52_errata_108+0x12>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   11be6:	2b06      	cmp	r3, #6
   11be8:	d004      	beq.n	11bf4 <nrf52_errata_108+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   11bea:	2000      	movs	r0, #0
   11bec:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   11bee:	4b03      	ldr	r3, [pc, #12]	; (11bfc <nrf52_errata_108+0x20>)
   11bf0:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   11bf2:	e7f8      	b.n	11be6 <nrf52_errata_108+0xa>
                        return true;
   11bf4:	2001      	movs	r0, #1
    #endif
}
   11bf6:	4770      	bx	lr
   11bf8:	10000130 	.word	0x10000130
   11bfc:	f0000fe0 	.word	0xf0000fe0

00011c00 <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   11c00:	4b06      	ldr	r3, [pc, #24]	; (11c1c <nrf52_errata_136+0x1c>)
   11c02:	681b      	ldr	r3, [r3, #0]
   11c04:	f1b3 3fff 	cmp.w	r3, #4294967295
   11c08:	d003      	beq.n	11c12 <nrf52_errata_136+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   11c0a:	2b06      	cmp	r3, #6
   11c0c:	d004      	beq.n	11c18 <nrf52_errata_136+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   11c0e:	2000      	movs	r0, #0
   11c10:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   11c12:	4b03      	ldr	r3, [pc, #12]	; (11c20 <nrf52_errata_136+0x20>)
   11c14:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   11c16:	e7f8      	b.n	11c0a <nrf52_errata_136+0xa>
                        return true;
   11c18:	2001      	movs	r0, #1
    #endif
}
   11c1a:	4770      	bx	lr
   11c1c:	10000130 	.word	0x10000130
   11c20:	f0000fe0 	.word	0xf0000fe0

00011c24 <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   11c24:	4b08      	ldr	r3, [pc, #32]	; (11c48 <nrf52_errata_182+0x24>)
   11c26:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   11c28:	4a08      	ldr	r2, [pc, #32]	; (11c4c <nrf52_errata_182+0x28>)
   11c2a:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   11c2c:	2b06      	cmp	r3, #6
   11c2e:	d001      	beq.n	11c34 <nrf52_errata_182+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   11c30:	2000      	movs	r0, #0
   11c32:	4770      	bx	lr
                switch(var2)
   11c34:	2a05      	cmp	r2, #5
   11c36:	d803      	bhi.n	11c40 <nrf52_errata_182+0x1c>
   11c38:	2a03      	cmp	r2, #3
   11c3a:	d303      	bcc.n	11c44 <nrf52_errata_182+0x20>
   11c3c:	2000      	movs	r0, #0
   11c3e:	4770      	bx	lr
                        return true;
   11c40:	2001      	movs	r0, #1
   11c42:	4770      	bx	lr
                        return true;
   11c44:	2001      	movs	r0, #1
    #endif
}
   11c46:	4770      	bx	lr
   11c48:	10000130 	.word	0x10000130
   11c4c:	10000134 	.word	0x10000134

00011c50 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   11c50:	4b08      	ldr	r3, [pc, #32]	; (11c74 <nrf52_configuration_249+0x24>)
   11c52:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   11c54:	4a08      	ldr	r2, [pc, #32]	; (11c78 <nrf52_configuration_249+0x28>)
   11c56:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   11c58:	2b06      	cmp	r3, #6
   11c5a:	d001      	beq.n	11c60 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   11c5c:	2000      	movs	r0, #0
   11c5e:	4770      	bx	lr
                switch(var2)
   11c60:	2a06      	cmp	r2, #6
   11c62:	d803      	bhi.n	11c6c <nrf52_configuration_249+0x1c>
   11c64:	2a03      	cmp	r2, #3
   11c66:	d303      	bcc.n	11c70 <nrf52_configuration_249+0x20>
   11c68:	2000      	movs	r0, #0
   11c6a:	4770      	bx	lr
                        return true;
   11c6c:	2001      	movs	r0, #1
   11c6e:	4770      	bx	lr
                        return true;
   11c70:	2001      	movs	r0, #1
    #endif
}
   11c72:	4770      	bx	lr
   11c74:	10000130 	.word	0x10000130
   11c78:	10000134 	.word	0x10000134

00011c7c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   11c7c:	4b02      	ldr	r3, [pc, #8]	; (11c88 <nvmc_wait+0xc>)
   11c7e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   11c82:	2b00      	cmp	r3, #0
   11c84:	d0fa      	beq.n	11c7c <nvmc_wait>
}
   11c86:	4770      	bx	lr
   11c88:	4001e000 	.word	0x4001e000

00011c8c <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   11c8c:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   11c8e:	4b03      	ldr	r3, [pc, #12]	; (11c9c <nvmc_config+0x10>)
   11c90:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   11c94:	f7ff fff2 	bl	11c7c <nvmc_wait>
}
   11c98:	bd08      	pop	{r3, pc}
   11c9a:	bf00      	nop
   11c9c:	4001e000 	.word	0x4001e000

00011ca0 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   11ca0:	4b01      	ldr	r3, [pc, #4]	; (11ca8 <SystemCoreClockUpdate+0x8>)
   11ca2:	4a02      	ldr	r2, [pc, #8]	; (11cac <SystemCoreClockUpdate+0xc>)
   11ca4:	601a      	str	r2, [r3, #0]
}
   11ca6:	4770      	bx	lr
   11ca8:	200003f0 	.word	0x200003f0
   11cac:	03d09000 	.word	0x03d09000

00011cb0 <SystemInit>:

void SystemInit(void)
{
   11cb0:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   11cb2:	f7ff fee3 	bl	11a7c <nrf52_errata_12>
   11cb6:	b128      	cbz	r0, 11cc4 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   11cb8:	4b70      	ldr	r3, [pc, #448]	; (11e7c <SystemInit+0x1cc>)
   11cba:	681b      	ldr	r3, [r3, #0]
   11cbc:	f3c3 2304 	ubfx	r3, r3, #8, #5
   11cc0:	4a6f      	ldr	r2, [pc, #444]	; (11e80 <SystemInit+0x1d0>)
   11cc2:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   11cc4:	f7ff feec 	bl	11aa0 <nrf52_errata_16>
   11cc8:	b110      	cbz	r0, 11cd0 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   11cca:	4b6e      	ldr	r3, [pc, #440]	; (11e84 <SystemInit+0x1d4>)
   11ccc:	4a6e      	ldr	r2, [pc, #440]	; (11e88 <SystemInit+0x1d8>)
   11cce:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   11cd0:	f7ff fefc 	bl	11acc <nrf52_errata_31>
   11cd4:	b128      	cbz	r0, 11ce2 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   11cd6:	4b6d      	ldr	r3, [pc, #436]	; (11e8c <SystemInit+0x1dc>)
   11cd8:	681b      	ldr	r3, [r3, #0]
   11cda:	f3c3 3342 	ubfx	r3, r3, #13, #3
   11cde:	4a6c      	ldr	r2, [pc, #432]	; (11e90 <SystemInit+0x1e0>)
   11ce0:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   11ce2:	f7ff ff05 	bl	11af0 <nrf52_errata_32>
   11ce6:	b120      	cbz	r0, 11cf2 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   11ce8:	4a6a      	ldr	r2, [pc, #424]	; (11e94 <SystemInit+0x1e4>)
   11cea:	68d3      	ldr	r3, [r2, #12]
   11cec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   11cf0:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   11cf2:	f7ff ff13 	bl	11b1c <nrf52_errata_36>
   11cf6:	b140      	cbz	r0, 11d0a <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   11cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11cfc:	2200      	movs	r2, #0
   11cfe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   11d02:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   11d06:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   11d0a:	f7ff ff19 	bl	11b40 <nrf52_errata_37>
   11d0e:	b110      	cbz	r0, 11d16 <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   11d10:	4b61      	ldr	r3, [pc, #388]	; (11e98 <SystemInit+0x1e8>)
   11d12:	2203      	movs	r2, #3
   11d14:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   11d16:	f7ff ff29 	bl	11b6c <nrf52_errata_57>
   11d1a:	b158      	cbz	r0, 11d34 <SystemInit+0x84>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   11d1c:	4b5f      	ldr	r3, [pc, #380]	; (11e9c <SystemInit+0x1ec>)
   11d1e:	2205      	movs	r2, #5
   11d20:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   11d22:	3378      	adds	r3, #120	; 0x78
   11d24:	2201      	movs	r2, #1
   11d26:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   11d28:	3b70      	subs	r3, #112	; 0x70
   11d2a:	2200      	movs	r2, #0
   11d2c:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   11d2e:	3b04      	subs	r3, #4
   11d30:	223f      	movs	r2, #63	; 0x3f
   11d32:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   11d34:	f7ff ff30 	bl	11b98 <nrf52_errata_66>
   11d38:	2800      	cmp	r0, #0
   11d3a:	d046      	beq.n	11dca <SystemInit+0x11a>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   11d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11d40:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   11d44:	4b56      	ldr	r3, [pc, #344]	; (11ea0 <SystemInit+0x1f0>)
   11d46:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   11d4a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   11d4e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   11d52:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   11d56:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   11d5a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   11d5e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   11d62:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   11d66:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   11d6a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   11d6e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   11d72:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   11d76:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   11d7a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   11d7e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   11d82:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   11d86:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   11d8a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   11d8e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   11d92:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   11d96:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   11d9a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   11d9e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   11da2:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   11da6:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   11daa:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   11dae:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   11db2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   11db6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   11dba:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   11dbe:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   11dc2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   11dc6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   11dca:	f7ff ff07 	bl	11bdc <nrf52_errata_108>
   11dce:	b128      	cbz	r0, 11ddc <SystemInit+0x12c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   11dd0:	4b34      	ldr	r3, [pc, #208]	; (11ea4 <SystemInit+0x1f4>)
   11dd2:	681b      	ldr	r3, [r3, #0]
   11dd4:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   11dd8:	4a33      	ldr	r2, [pc, #204]	; (11ea8 <SystemInit+0x1f8>)
   11dda:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   11ddc:	f7ff ff10 	bl	11c00 <nrf52_errata_136>
   11de0:	b160      	cbz	r0, 11dfc <SystemInit+0x14c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   11de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11de6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   11dea:	f013 0f01 	tst.w	r3, #1
   11dee:	d005      	beq.n	11dfc <SystemInit+0x14c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   11df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11df4:	f06f 0201 	mvn.w	r2, #1
   11df8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   11dfc:	f7ff ff12 	bl	11c24 <nrf52_errata_182>
   11e00:	b120      	cbz	r0, 11e0c <SystemInit+0x15c>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   11e02:	4a2a      	ldr	r2, [pc, #168]	; (11eac <SystemInit+0x1fc>)
   11e04:	6813      	ldr	r3, [r2, #0]
   11e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   11e0a:	6013      	str	r3, [r2, #0]
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   11e0c:	f7ff ff20 	bl	11c50 <nrf52_configuration_249>
   11e10:	b138      	cbz	r0, 11e22 <SystemInit+0x172>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   11e12:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   11e16:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   11e1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11e1e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   11e22:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   11e26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   11e2a:	2b00      	cmp	r3, #0
   11e2c:	db08      	blt.n	11e40 <SystemInit+0x190>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   11e2e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   11e32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   11e36:	2b00      	cmp	r3, #0
   11e38:	db02      	blt.n	11e40 <SystemInit+0x190>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   11e3a:	f7ff ff31 	bl	11ca0 <SystemCoreClockUpdate>
}
   11e3e:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   11e40:	2001      	movs	r0, #1
   11e42:	f7ff ff23 	bl	11c8c <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   11e46:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   11e4a:	2515      	movs	r5, #21
   11e4c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   11e50:	f7ff ff14 	bl	11c7c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   11e54:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   11e58:	f7ff ff10 	bl	11c7c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   11e5c:	2000      	movs	r0, #0
   11e5e:	f7ff ff15 	bl	11c8c <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   11e62:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11e66:	4912      	ldr	r1, [pc, #72]	; (11eb0 <SystemInit+0x200>)
   11e68:	68ca      	ldr	r2, [r1, #12]
   11e6a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11e6e:	4b11      	ldr	r3, [pc, #68]	; (11eb4 <SystemInit+0x204>)
   11e70:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11e72:	60cb      	str	r3, [r1, #12]
   11e74:	f3bf 8f4f 	dsb	sy
    __NOP();
   11e78:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11e7a:	e7fd      	b.n	11e78 <SystemInit+0x1c8>
   11e7c:	10000324 	.word	0x10000324
   11e80:	40013540 	.word	0x40013540
   11e84:	4007c074 	.word	0x4007c074
   11e88:	baadf00d 	.word	0xbaadf00d
   11e8c:	10000244 	.word	0x10000244
   11e90:	4000053c 	.word	0x4000053c
   11e94:	e000edf0 	.word	0xe000edf0
   11e98:	400005a0 	.word	0x400005a0
   11e9c:	40005610 	.word	0x40005610
   11ea0:	4000c000 	.word	0x4000c000
   11ea4:	10000258 	.word	0x10000258
   11ea8:	40000ee4 	.word	0x40000ee4
   11eac:	4000173c 	.word	0x4000173c
   11eb0:	e000ed00 	.word	0xe000ed00
   11eb4:	05fa0004 	.word	0x05fa0004

00011eb8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   11eb8:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   11eba:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   11ebc:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   11ec0:	f1d3 031f 	rsbs	r3, r3, #31
   11ec4:	d415      	bmi.n	11ef2 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   11ec6:	2201      	movs	r2, #1
   11ec8:	409a      	lsls	r2, r3
   11eca:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   11ece:	f3bf 8f5b 	dmb	ish
   11ed2:	e850 5f00 	ldrex	r5, [r0]
   11ed6:	42a5      	cmp	r5, r4
   11ed8:	d104      	bne.n	11ee4 <nrfx_flag32_alloc+0x2c>
   11eda:	e840 2c00 	strex	ip, r2, [r0]
   11ede:	f1bc 0f00 	cmp.w	ip, #0
   11ee2:	d1f6      	bne.n	11ed2 <nrfx_flag32_alloc+0x1a>
   11ee4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   11ee8:	d1e7      	bne.n	11eba <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   11eea:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   11eec:	4802      	ldr	r0, [pc, #8]	; (11ef8 <nrfx_flag32_alloc+0x40>)
}
   11eee:	bc30      	pop	{r4, r5}
   11ef0:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
   11ef2:	4802      	ldr	r0, [pc, #8]	; (11efc <nrfx_flag32_alloc+0x44>)
   11ef4:	e7fb      	b.n	11eee <nrfx_flag32_alloc+0x36>
   11ef6:	bf00      	nop
   11ef8:	0bad0000 	.word	0x0bad0000
   11efc:	0bad0002 	.word	0x0bad0002

00011f00 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   11f00:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   11f02:	6803      	ldr	r3, [r0, #0]
   11f04:	460c      	mov	r4, r1
   11f06:	fa23 f101 	lsr.w	r1, r3, r1
   11f0a:	f011 0f01 	tst.w	r1, #1
   11f0e:	d114      	bne.n	11f3a <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   11f10:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   11f12:	2301      	movs	r3, #1
   11f14:	40a3      	lsls	r3, r4
   11f16:	4313      	orrs	r3, r2
   11f18:	f3bf 8f5b 	dmb	ish
   11f1c:	e850 1f00 	ldrex	r1, [r0]
   11f20:	4291      	cmp	r1, r2
   11f22:	d104      	bne.n	11f2e <nrfx_flag32_free+0x2e>
   11f24:	e840 3c00 	strex	ip, r3, [r0]
   11f28:	f1bc 0f00 	cmp.w	ip, #0
   11f2c:	d1f6      	bne.n	11f1c <nrfx_flag32_free+0x1c>
   11f2e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   11f32:	d1ed      	bne.n	11f10 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   11f34:	4802      	ldr	r0, [pc, #8]	; (11f40 <nrfx_flag32_free+0x40>)
}
   11f36:	bc10      	pop	{r4}
   11f38:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   11f3a:	4802      	ldr	r0, [pc, #8]	; (11f44 <nrfx_flag32_free+0x44>)
   11f3c:	e7fb      	b.n	11f36 <nrfx_flag32_free+0x36>
   11f3e:	bf00      	nop
   11f40:	0bad0000 	.word	0x0bad0000
   11f44:	0bad0004 	.word	0x0bad0004

00011f48 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   11f48:	3008      	adds	r0, #8
   11f4a:	4b03      	ldr	r3, [pc, #12]	; (11f58 <pin_in_use+0x10>)
   11f4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   11f50:	f000 0001 	and.w	r0, r0, #1
   11f54:	4770      	bx	lr
   11f56:	bf00      	nop
   11f58:	200003f4 	.word	0x200003f4

00011f5c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   11f5c:	3008      	adds	r0, #8
   11f5e:	4b03      	ldr	r3, [pc, #12]	; (11f6c <pin_in_use_by_te+0x10>)
   11f60:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   11f64:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11f68:	4770      	bx	lr
   11f6a:	bf00      	nop
   11f6c:	200003f4 	.word	0x200003f4

00011f70 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   11f70:	3008      	adds	r0, #8
   11f72:	4b04      	ldr	r3, [pc, #16]	; (11f84 <pin_has_trigger+0x14>)
   11f74:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   11f78:	f010 001c 	ands.w	r0, r0, #28
   11f7c:	bf18      	it	ne
   11f7e:	2001      	movne	r0, #1
   11f80:	4770      	bx	lr
   11f82:	bf00      	nop
   11f84:	200003f4 	.word	0x200003f4

00011f88 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   11f88:	3008      	adds	r0, #8
   11f8a:	4b03      	ldr	r3, [pc, #12]	; (11f98 <pin_is_output+0x10>)
   11f8c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   11f90:	f3c0 0040 	ubfx	r0, r0, #1, #1
   11f94:	4770      	bx	lr
   11f96:	bf00      	nop
   11f98:	200003f4 	.word	0x200003f4

00011f9c <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   11f9c:	3008      	adds	r0, #8
   11f9e:	4b02      	ldr	r3, [pc, #8]	; (11fa8 <pin_te_get+0xc>)
   11fa0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   11fa4:	0b40      	lsrs	r0, r0, #13
   11fa6:	4770      	bx	lr
   11fa8:	200003f4 	.word	0x200003f4

00011fac <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   11fac:	2200      	movs	r2, #0
   11fae:	e004      	b.n	11fba <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   11fb0:	f04f 33ff 	mov.w	r3, #4294967295
   11fb4:	4283      	cmp	r3, r0
   11fb6:	d00f      	beq.n	11fd8 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   11fb8:	3201      	adds	r2, #1
   11fba:	2a1f      	cmp	r2, #31
   11fbc:	d80a      	bhi.n	11fd4 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   11fbe:	f102 0308 	add.w	r3, r2, #8
   11fc2:	4906      	ldr	r1, [pc, #24]	; (11fdc <handler_in_use+0x30>)
   11fc4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   11fc8:	f413 7f80 	tst.w	r3, #256	; 0x100
   11fcc:	d0f0      	beq.n	11fb0 <handler_in_use+0x4>
   11fce:	f3c3 2343 	ubfx	r3, r3, #9, #4
   11fd2:	e7ef      	b.n	11fb4 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   11fd4:	2000      	movs	r0, #0
   11fd6:	4770      	bx	lr
            return true;
   11fd8:	2001      	movs	r0, #1
}
   11fda:	4770      	bx	lr
   11fdc:	200003f4 	.word	0x200003f4

00011fe0 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   11fe0:	2300      	movs	r3, #0
   11fe2:	b113      	cbz	r3, 11fea <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   11fe4:	f04f 30ff 	mov.w	r0, #4294967295
}
   11fe8:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   11fea:	4a07      	ldr	r2, [pc, #28]	; (12008 <find_handler+0x28>)
   11fec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   11ff0:	4282      	cmp	r2, r0
   11ff2:	d001      	beq.n	11ff8 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   11ff4:	3301      	adds	r3, #1
   11ff6:	e7f4      	b.n	11fe2 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   11ff8:	4a03      	ldr	r2, [pc, #12]	; (12008 <find_handler+0x28>)
   11ffa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   11ffe:	6852      	ldr	r2, [r2, #4]
   12000:	428a      	cmp	r2, r1
   12002:	d1f7      	bne.n	11ff4 <find_handler+0x14>
            return i;
   12004:	4618      	mov	r0, r3
   12006:	4770      	bx	lr
   12008:	200003f4 	.word	0x200003f4

0001200c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1200c:	3008      	adds	r0, #8
   1200e:	4b06      	ldr	r3, [pc, #24]	; (12028 <channel_handler_get+0x1c>)
   12010:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12014:	f410 7f80 	tst.w	r0, #256	; 0x100
   12018:	d004      	beq.n	12024 <channel_handler_get+0x18>
   1201a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   1201e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   12022:	4770      	bx	lr
        return NULL;
   12024:	2000      	movs	r0, #0
}
   12026:	4770      	bx	lr
   12028:	200003f4 	.word	0x200003f4

0001202c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1202c:	b570      	push	{r4, r5, r6, lr}
   1202e:	4604      	mov	r4, r0
   12030:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   12032:	f7ff ffeb 	bl	1200c <channel_handler_get>

    if (handler)
   12036:	b120      	cbz	r0, 12042 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   12038:	6806      	ldr	r6, [r0, #0]
   1203a:	6842      	ldr	r2, [r0, #4]
   1203c:	4629      	mov	r1, r5
   1203e:	4620      	mov	r0, r4
   12040:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   12042:	4b04      	ldr	r3, [pc, #16]	; (12054 <call_handler+0x28>)
   12044:	689b      	ldr	r3, [r3, #8]
   12046:	b123      	cbz	r3, 12052 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   12048:	4a02      	ldr	r2, [pc, #8]	; (12054 <call_handler+0x28>)
   1204a:	68d2      	ldr	r2, [r2, #12]
   1204c:	4629      	mov	r1, r5
   1204e:	4620      	mov	r0, r4
   12050:	4798      	blx	r3
    }
}
   12052:	bd70      	pop	{r4, r5, r6, pc}
   12054:	200003f4 	.word	0x200003f4

00012058 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   12058:	f100 0208 	add.w	r2, r0, #8
   1205c:	4b0e      	ldr	r3, [pc, #56]	; (12098 <release_handler+0x40>)
   1205e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   12062:	f413 7f80 	tst.w	r3, #256	; 0x100
   12066:	d016      	beq.n	12096 <release_handler+0x3e>
{
   12068:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1206a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1206e:	4610      	mov	r0, r2
   12070:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   12074:	4a08      	ldr	r2, [pc, #32]	; (12098 <release_handler+0x40>)
   12076:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   1207a:	4620      	mov	r0, r4
   1207c:	f7ff ff96 	bl	11fac <handler_in_use>
   12080:	b100      	cbz	r0, 12084 <release_handler+0x2c>
}
   12082:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   12084:	4804      	ldr	r0, [pc, #16]	; (12098 <release_handler+0x40>)
   12086:	2300      	movs	r3, #0
   12088:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1208c:	4621      	mov	r1, r4
   1208e:	3054      	adds	r0, #84	; 0x54
   12090:	f7ff ff36 	bl	11f00 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   12094:	e7f5      	b.n	12082 <release_handler+0x2a>
   12096:	4770      	bx	lr
   12098:	200003f4 	.word	0x200003f4

0001209c <pin_handler_trigger_uninit>:
{
   1209c:	b510      	push	{r4, lr}
   1209e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   120a0:	f7ff ff5c 	bl	11f5c <pin_in_use_by_te>
   120a4:	b140      	cbz	r0, 120b8 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   120a6:	4620      	mov	r0, r4
   120a8:	f7ff ff78 	bl	11f9c <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   120ac:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   120b0:	4b06      	ldr	r3, [pc, #24]	; (120cc <pin_handler_trigger_uninit+0x30>)
   120b2:	2200      	movs	r2, #0
   120b4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   120b8:	4620      	mov	r0, r4
   120ba:	f7ff ffcd 	bl	12058 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   120be:	3408      	adds	r4, #8
   120c0:	4b03      	ldr	r3, [pc, #12]	; (120d0 <pin_handler_trigger_uninit+0x34>)
   120c2:	2200      	movs	r2, #0
   120c4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   120c8:	bd10      	pop	{r4, pc}
   120ca:	bf00      	nop
   120cc:	40006000 	.word	0x40006000
   120d0:	200003f4 	.word	0x200003f4

000120d4 <pin_handler_set>:
{
   120d4:	b570      	push	{r4, r5, r6, lr}
   120d6:	b082      	sub	sp, #8
   120d8:	4606      	mov	r6, r0
   120da:	460c      	mov	r4, r1
   120dc:	4615      	mov	r5, r2
    release_handler(pin);
   120de:	f7ff ffbb 	bl	12058 <release_handler>
    if (!handler)
   120e2:	b324      	cbz	r4, 1212e <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   120e4:	4629      	mov	r1, r5
   120e6:	4620      	mov	r0, r4
   120e8:	f7ff ff7a 	bl	11fe0 <find_handler>
    if (handler_id < 0)
   120ec:	1e03      	subs	r3, r0, #0
   120ee:	db13      	blt.n	12118 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   120f0:	4a10      	ldr	r2, [pc, #64]	; (12134 <pin_handler_set+0x60>)
   120f2:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   120f6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   120fa:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   120fc:	025b      	lsls	r3, r3, #9
   120fe:	b29b      	uxth	r3, r3
   12100:	f106 0008 	add.w	r0, r6, #8
   12104:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   12108:	430b      	orrs	r3, r1
   1210a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1210e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   12112:	4809      	ldr	r0, [pc, #36]	; (12138 <pin_handler_set+0x64>)
}
   12114:	b002      	add	sp, #8
   12116:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   12118:	f10d 0107 	add.w	r1, sp, #7
   1211c:	4807      	ldr	r0, [pc, #28]	; (1213c <pin_handler_set+0x68>)
   1211e:	f7ff fecb 	bl	11eb8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   12122:	4b05      	ldr	r3, [pc, #20]	; (12138 <pin_handler_set+0x64>)
   12124:	4298      	cmp	r0, r3
   12126:	d1f5      	bne.n	12114 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   12128:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1212c:	e7e0      	b.n	120f0 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   1212e:	4802      	ldr	r0, [pc, #8]	; (12138 <pin_handler_set+0x64>)
   12130:	e7f0      	b.n	12114 <pin_handler_set+0x40>
   12132:	bf00      	nop
   12134:	200003f4 	.word	0x200003f4
   12138:	0bad0000 	.word	0x0bad0000
   1213c:	20000448 	.word	0x20000448

00012140 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   12140:	b5f0      	push	{r4, r5, r6, r7, lr}
   12142:	b083      	sub	sp, #12
    for (i = start_port; i < (start_port + length); i++)
   12144:	2300      	movs	r3, #0
   12146:	a801      	add	r0, sp, #4
   12148:	e008      	b.n	1215c <port_event_handle+0x1c>
        *p_masks = gpio_regs[i]->LATCH;
   1214a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1214e:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   12152:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   12156:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1215a:	3301      	adds	r3, #1
   1215c:	2b00      	cmp	r3, #0
   1215e:	d0f4      	beq.n	1214a <port_event_handle+0xa>
   12160:	e038      	b.n	121d4 <port_event_handle+0x94>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
        {
            while (latch[i])
   12162:	ab02      	add	r3, sp, #8
   12164:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   12168:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1216c:	b338      	cbz	r0, 121be <port_event_handle+0x7e>
            {
                uint32_t pin = NRF_CTZ(latch[i]);
   1216e:	fa90 f0a0 	rbit	r0, r0
   12172:	fab0 f080 	clz	r0, r0

                /* Convert to absolute value. */
                pin += 32 * i;
   12176:	eb00 1045 	add.w	r0, r0, r5, lsl #5
                nrf_gpio_pin_sense_t sense;
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1217a:	f100 0208 	add.w	r2, r0, #8
   1217e:	4b17      	ldr	r3, [pc, #92]	; (121dc <port_event_handle+0x9c>)
   12180:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   12184:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   12186:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1218a:	af01      	add	r7, sp, #4
   1218c:	2401      	movs	r4, #1
   1218e:	fa04 f203 	lsl.w	r2, r4, r3
   12192:	5dbb      	ldrb	r3, [r7, r6]
   12194:	ea23 0302 	bic.w	r3, r3, r2
   12198:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
   1219a:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1219e:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   121a2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
   121a6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   121aa:	f3c2 4201 	ubfx	r2, r2, #16, #2
   121ae:	f3c1 0182 	ubfx	r1, r1, #2, #3
   121b2:	f004 f899 	bl	162e8 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   121b6:	40bc      	lsls	r4, r7
   121b8:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
   121bc:	e7d1      	b.n	12162 <port_event_handle+0x22>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   121be:	3501      	adds	r5, #1
   121c0:	2d00      	cmp	r5, #0
   121c2:	d0ce      	beq.n	12162 <port_event_handle+0x22>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   121c4:	4b06      	ldr	r3, [pc, #24]	; (121e0 <port_event_handle+0xa0>)
   121c6:	2200      	movs	r2, #0
   121c8:	601a      	str	r2, [r3, #0]
   121ca:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   121cc:	a801      	add	r0, sp, #4
   121ce:	f004 f8d9 	bl	16384 <latch_pending_read_and_check>
   121d2:	b108      	cbz	r0, 121d8 <port_event_handle+0x98>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   121d4:	2500      	movs	r5, #0
   121d6:	e7f3      	b.n	121c0 <port_event_handle+0x80>
}
   121d8:	b003      	add	sp, #12
   121da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   121dc:	200003f4 	.word	0x200003f4
   121e0:	4000617c 	.word	0x4000617c

000121e4 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   121e4:	b538      	push	{r3, r4, r5, lr}
   121e6:	4604      	mov	r4, r0
    while (mask)
   121e8:	b1cc      	cbz	r4, 1221e <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
   121ea:	fa94 f3a4 	rbit	r3, r4
   121ee:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   121f2:	2201      	movs	r2, #1
   121f4:	409a      	lsls	r2, r3
   121f6:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   121fa:	4a09      	ldr	r2, [pc, #36]	; (12220 <gpiote_evt_handle+0x3c>)
   121fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   12200:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   12204:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   12208:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1220c:	f3c0 4001 	ubfx	r0, r0, #16, #2
   12210:	f004 f863 	bl	162da <gpiote_polarity_to_trigger>
   12214:	4601      	mov	r1, r0
   12216:	4628      	mov	r0, r5
   12218:	f7ff ff08 	bl	1202c <call_handler>
   1221c:	e7e4      	b.n	121e8 <gpiote_evt_handle+0x4>
    }
}
   1221e:	bd38      	pop	{r3, r4, r5, pc}
   12220:	40006000 	.word	0x40006000

00012224 <nrfx_gpiote_input_configure>:
{
   12224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12228:	4604      	mov	r4, r0
   1222a:	4615      	mov	r5, r2
   1222c:	461e      	mov	r6, r3
    if (p_input_config)
   1222e:	b359      	cbz	r1, 12288 <nrfx_gpiote_input_configure+0x64>
   12230:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   12232:	f004 f83c 	bl	162ae <pin_is_task_output>
   12236:	2800      	cmp	r0, #0
   12238:	f040 8094 	bne.w	12364 <nrfx_gpiote_input_configure+0x140>
    *p_pin = pin_number & 0x1F;
   1223c:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   12240:	f502 71e0 	add.w	r1, r2, #448	; 0x1c0
   12244:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   12248:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1224c:	2f00      	cmp	r7, #0
   1224e:	d03c      	beq.n	122ca <nrfx_gpiote_input_configure+0xa6>
   12250:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   12252:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   12256:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1225a:	2f00      	cmp	r7, #0
   1225c:	d037      	beq.n	122ce <nrfx_gpiote_input_configure+0xaa>
   1225e:	7839      	ldrb	r1, [r7, #0]
   12260:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   12262:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   12264:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   12268:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1226c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   12270:	4a40      	ldr	r2, [pc, #256]	; (12374 <nrfx_gpiote_input_configure+0x150>)
   12272:	f104 0108 	add.w	r1, r4, #8
   12276:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1227a:	f023 0302 	bic.w	r3, r3, #2
   1227e:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   12280:	f043 0301 	orr.w	r3, r3, #1
   12284:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   12288:	b1b5      	cbz	r5, 122b8 <nrfx_gpiote_input_configure+0x94>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1228a:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1228e:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
   12292:	4620      	mov	r0, r4
   12294:	f7ff fe78 	bl	11f88 <pin_is_output>
   12298:	b1d8      	cbz	r0, 122d2 <nrfx_gpiote_input_configure+0xae>
            if (use_evt)
   1229a:	f1b9 0f00 	cmp.w	r9, #0
   1229e:	d163      	bne.n	12368 <nrfx_gpiote_input_configure+0x144>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   122a0:	4b34      	ldr	r3, [pc, #208]	; (12374 <nrfx_gpiote_input_configure+0x150>)
   122a2:	f104 0208 	add.w	r2, r4, #8
   122a6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   122aa:	f020 001c 	bic.w	r0, r0, #28
   122ae:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   122b0:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
   122b4:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
   122b8:	2e00      	cmp	r6, #0
   122ba:	d059      	beq.n	12370 <nrfx_gpiote_input_configure+0x14c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   122bc:	6872      	ldr	r2, [r6, #4]
   122be:	6831      	ldr	r1, [r6, #0]
   122c0:	4620      	mov	r0, r4
   122c2:	f7ff ff07 	bl	120d4 <pin_handler_set>
}
   122c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   122ca:	2100      	movs	r1, #0
   122cc:	e7c1      	b.n	12252 <nrfx_gpiote_input_configure+0x2e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   122ce:	2100      	movs	r1, #0
   122d0:	e7c7      	b.n	12262 <nrfx_gpiote_input_configure+0x3e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   122d2:	4b28      	ldr	r3, [pc, #160]	; (12374 <nrfx_gpiote_input_configure+0x150>)
   122d4:	f104 0208 	add.w	r2, r4, #8
   122d8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
   122dc:	f027 0720 	bic.w	r7, r7, #32
   122e0:	04ff      	lsls	r7, r7, #19
   122e2:	0cff      	lsrs	r7, r7, #19
   122e4:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
   122e8:	f1b9 0f00 	cmp.w	r9, #0
   122ec:	d0d8      	beq.n	122a0 <nrfx_gpiote_input_configure+0x7c>
                if (!edge)
   122ee:	f1b8 0f03 	cmp.w	r8, #3
   122f2:	d83b      	bhi.n	1236c <nrfx_gpiote_input_configure+0x148>
                uint8_t ch = *p_trigger_config->p_in_channel;
   122f4:	686b      	ldr	r3, [r5, #4]
   122f6:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   122f8:	f1b8 0f00 	cmp.w	r8, #0
   122fc:	d106      	bne.n	1230c <nrfx_gpiote_input_configure+0xe8>
    p_reg->CONFIG[idx] = 0;
   122fe:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   12302:	4b1d      	ldr	r3, [pc, #116]	; (12378 <nrfx_gpiote_input_configure+0x154>)
   12304:	2200      	movs	r2, #0
   12306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1230a:	e7c9      	b.n	122a0 <nrfx_gpiote_input_configure+0x7c>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   1230c:	4640      	mov	r0, r8
   1230e:	f003 ffe5 	bl	162dc <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   12312:	4b19      	ldr	r3, [pc, #100]	; (12378 <nrfx_gpiote_input_configure+0x154>)
   12314:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   12318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1231c:	f021 0103 	bic.w	r1, r1, #3
   12320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   12324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   12328:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   1232c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   12330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12334:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   12338:	0221      	lsls	r1, r4, #8
   1233a:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1233e:	0400      	lsls	r0, r0, #16
   12340:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12344:	4301      	orrs	r1, r0
   12346:	ea4c 0101 	orr.w	r1, ip, r1
   1234a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1234e:	036d      	lsls	r5, r5, #13
   12350:	b2ad      	uxth	r5, r5
   12352:	f104 0308 	add.w	r3, r4, #8
   12356:	432f      	orrs	r7, r5
   12358:	f047 0720 	orr.w	r7, r7, #32
   1235c:	4a05      	ldr	r2, [pc, #20]	; (12374 <nrfx_gpiote_input_configure+0x150>)
   1235e:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
   12362:	e79d      	b.n	122a0 <nrfx_gpiote_input_configure+0x7c>
            return NRFX_ERROR_INVALID_PARAM;
   12364:	4805      	ldr	r0, [pc, #20]	; (1237c <nrfx_gpiote_input_configure+0x158>)
   12366:	e7ae      	b.n	122c6 <nrfx_gpiote_input_configure+0xa2>
                return NRFX_ERROR_INVALID_PARAM;
   12368:	4804      	ldr	r0, [pc, #16]	; (1237c <nrfx_gpiote_input_configure+0x158>)
   1236a:	e7ac      	b.n	122c6 <nrfx_gpiote_input_configure+0xa2>
                    return NRFX_ERROR_INVALID_PARAM;
   1236c:	4803      	ldr	r0, [pc, #12]	; (1237c <nrfx_gpiote_input_configure+0x158>)
   1236e:	e7aa      	b.n	122c6 <nrfx_gpiote_input_configure+0xa2>
        err = NRFX_SUCCESS;
   12370:	4803      	ldr	r0, [pc, #12]	; (12380 <nrfx_gpiote_input_configure+0x15c>)
   12372:	e7a8      	b.n	122c6 <nrfx_gpiote_input_configure+0xa2>
   12374:	200003f4 	.word	0x200003f4
   12378:	40006000 	.word	0x40006000
   1237c:	0bad0004 	.word	0x0bad0004
   12380:	0bad0000 	.word	0x0bad0000

00012384 <nrfx_gpiote_output_configure>:
{
   12384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12386:	4604      	mov	r4, r0
   12388:	4616      	mov	r6, r2
    if (p_config)
   1238a:	2900      	cmp	r1, #0
   1238c:	d04d      	beq.n	1242a <nrfx_gpiote_output_configure+0xa6>
   1238e:	460d      	mov	r5, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   12390:	f003 ff9c 	bl	162cc <pin_is_input>
   12394:	b128      	cbz	r0, 123a2 <nrfx_gpiote_output_configure+0x1e>
   12396:	4620      	mov	r0, r4
   12398:	f7ff fde0 	bl	11f5c <pin_in_use_by_te>
   1239c:	2800      	cmp	r0, #0
   1239e:	f040 8096 	bne.w	124ce <nrfx_gpiote_output_configure+0x14a>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   123a2:	4620      	mov	r0, r4
   123a4:	f7ff fde4 	bl	11f70 <pin_has_trigger>
   123a8:	b118      	cbz	r0, 123b2 <nrfx_gpiote_output_configure+0x2e>
   123aa:	786b      	ldrb	r3, [r5, #1]
   123ac:	2b01      	cmp	r3, #1
   123ae:	f000 8090 	beq.w	124d2 <nrfx_gpiote_output_configure+0x14e>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   123b2:	1ca8      	adds	r0, r5, #2
    *p_pin = pin_number & 0x1F;
   123b4:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   123b8:	f502 71e0 	add.w	r1, r2, #448	; 0x1c0
   123bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   123c0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   123c4:	1c6f      	adds	r7, r5, #1
   123c6:	d074      	beq.n	124b2 <nrfx_gpiote_output_configure+0x12e>
   123c8:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   123ca:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   123ce:	2800      	cmp	r0, #0
   123d0:	d071      	beq.n	124b6 <nrfx_gpiote_output_configure+0x132>
   123d2:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   123d6:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   123da:	2d00      	cmp	r5, #0
   123dc:	d06e      	beq.n	124bc <nrfx_gpiote_output_configure+0x138>
   123de:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   123e2:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   123e6:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   123ea:	2f00      	cmp	r7, #0
   123ec:	d069      	beq.n	124c2 <nrfx_gpiote_output_configure+0x13e>
   123ee:	786b      	ldrb	r3, [r5, #1]
   123f0:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   123f2:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   123f6:	2800      	cmp	r0, #0
   123f8:	d065      	beq.n	124c6 <nrfx_gpiote_output_configure+0x142>
   123fa:	78a8      	ldrb	r0, [r5, #2]
   123fc:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   123fe:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   12400:	2d00      	cmp	r5, #0
   12402:	d062      	beq.n	124ca <nrfx_gpiote_output_configure+0x146>
   12404:	7828      	ldrb	r0, [r5, #0]
   12406:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   12408:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1240a:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   1240c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   12410:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   12414:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   12418:	4a32      	ldr	r2, [pc, #200]	; (124e4 <nrfx_gpiote_output_configure+0x160>)
   1241a:	f104 0108 	add.w	r1, r4, #8
   1241e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   12422:	f043 0303 	orr.w	r3, r3, #3
   12426:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1242a:	2e00      	cmp	r6, #0
   1242c:	d053      	beq.n	124d6 <nrfx_gpiote_output_configure+0x152>
        if (pin_is_input(pin))
   1242e:	4620      	mov	r0, r4
   12430:	f003 ff4c 	bl	162cc <pin_is_input>
   12434:	2800      	cmp	r0, #0
   12436:	d150      	bne.n	124da <nrfx_gpiote_output_configure+0x156>
        uint32_t ch = p_task_config->task_ch;
   12438:	7832      	ldrb	r2, [r6, #0]
    p_reg->CONFIG[idx] = 0;
   1243a:	f502 71a2 	add.w	r1, r2, #324	; 0x144
   1243e:	4b2a      	ldr	r3, [pc, #168]	; (124e8 <nrfx_gpiote_output_configure+0x164>)
   12440:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   12444:	4927      	ldr	r1, [pc, #156]	; (124e4 <nrfx_gpiote_output_configure+0x160>)
   12446:	f104 0008 	add.w	r0, r4, #8
   1244a:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   1244e:	f023 0320 	bic.w	r3, r3, #32
   12452:	04db      	lsls	r3, r3, #19
   12454:	0cdb      	lsrs	r3, r3, #19
   12456:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1245a:	7871      	ldrb	r1, [r6, #1]
   1245c:	2900      	cmp	r1, #0
   1245e:	d03e      	beq.n	124de <nrfx_gpiote_output_configure+0x15a>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   12460:	f896 c002 	ldrb.w	ip, [r6, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   12464:	4d20      	ldr	r5, [pc, #128]	; (124e8 <nrfx_gpiote_output_configure+0x164>)
   12466:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   1246a:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1246e:	f420 1098 	bic.w	r0, r0, #1245184	; 0x130000
   12472:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
   12476:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1247a:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
   1247e:	0220      	lsls	r0, r4, #8
   12480:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   12484:	0409      	lsls	r1, r1, #16
   12486:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1248a:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1248c:	ea4f 500c 	mov.w	r0, ip, lsl #20
   12490:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   12494:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12496:	4339      	orrs	r1, r7
   12498:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1249c:	0352      	lsls	r2, r2, #13
   1249e:	b292      	uxth	r2, r2
   124a0:	3408      	adds	r4, #8
   124a2:	431a      	orrs	r2, r3
   124a4:	f042 0220 	orr.w	r2, r2, #32
   124a8:	4b0e      	ldr	r3, [pc, #56]	; (124e4 <nrfx_gpiote_output_configure+0x160>)
   124aa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
   124ae:	480f      	ldr	r0, [pc, #60]	; (124ec <nrfx_gpiote_output_configure+0x168>)
   124b0:	e012      	b.n	124d8 <nrfx_gpiote_output_configure+0x154>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   124b2:	2300      	movs	r3, #0
   124b4:	e789      	b.n	123ca <nrfx_gpiote_output_configure+0x46>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   124b6:	f04f 0c00 	mov.w	ip, #0
   124ba:	e78c      	b.n	123d6 <nrfx_gpiote_output_configure+0x52>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   124bc:	f04f 0c00 	mov.w	ip, #0
   124c0:	e78f      	b.n	123e2 <nrfx_gpiote_output_configure+0x5e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   124c2:	2300      	movs	r3, #0
   124c4:	e795      	b.n	123f2 <nrfx_gpiote_output_configure+0x6e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   124c6:	2000      	movs	r0, #0
   124c8:	e799      	b.n	123fe <nrfx_gpiote_output_configure+0x7a>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   124ca:	2000      	movs	r0, #0
   124cc:	e79c      	b.n	12408 <nrfx_gpiote_output_configure+0x84>
   124ce:	4808      	ldr	r0, [pc, #32]	; (124f0 <nrfx_gpiote_output_configure+0x16c>)
   124d0:	e002      	b.n	124d8 <nrfx_gpiote_output_configure+0x154>
   124d2:	4807      	ldr	r0, [pc, #28]	; (124f0 <nrfx_gpiote_output_configure+0x16c>)
   124d4:	e000      	b.n	124d8 <nrfx_gpiote_output_configure+0x154>
   124d6:	4805      	ldr	r0, [pc, #20]	; (124ec <nrfx_gpiote_output_configure+0x168>)
}
   124d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
   124da:	4805      	ldr	r0, [pc, #20]	; (124f0 <nrfx_gpiote_output_configure+0x16c>)
   124dc:	e7fc      	b.n	124d8 <nrfx_gpiote_output_configure+0x154>
    return NRFX_SUCCESS;
   124de:	4803      	ldr	r0, [pc, #12]	; (124ec <nrfx_gpiote_output_configure+0x168>)
   124e0:	e7fa      	b.n	124d8 <nrfx_gpiote_output_configure+0x154>
   124e2:	bf00      	nop
   124e4:	200003f4 	.word	0x200003f4
   124e8:	40006000 	.word	0x40006000
   124ec:	0bad0000 	.word	0x0bad0000
   124f0:	0bad0004 	.word	0x0bad0004

000124f4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   124f4:	4b01      	ldr	r3, [pc, #4]	; (124fc <nrfx_gpiote_global_callback_set+0x8>)
   124f6:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   124f8:	60d9      	str	r1, [r3, #12]
}
   124fa:	4770      	bx	lr
   124fc:	200003f4 	.word	0x200003f4

00012500 <nrfx_gpiote_channel_get>:
{
   12500:	b538      	push	{r3, r4, r5, lr}
   12502:	4604      	mov	r4, r0
   12504:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   12506:	f7ff fd29 	bl	11f5c <pin_in_use_by_te>
   1250a:	b140      	cbz	r0, 1251e <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1250c:	f104 0008 	add.w	r0, r4, #8
   12510:	4b04      	ldr	r3, [pc, #16]	; (12524 <nrfx_gpiote_channel_get+0x24>)
   12512:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   12516:	0b5b      	lsrs	r3, r3, #13
   12518:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   1251a:	4803      	ldr	r0, [pc, #12]	; (12528 <nrfx_gpiote_channel_get+0x28>)
}
   1251c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1251e:	4803      	ldr	r0, [pc, #12]	; (1252c <nrfx_gpiote_channel_get+0x2c>)
   12520:	e7fc      	b.n	1251c <nrfx_gpiote_channel_get+0x1c>
   12522:	bf00      	nop
   12524:	200003f4 	.word	0x200003f4
   12528:	0bad0000 	.word	0x0bad0000
   1252c:	0bad0004 	.word	0x0bad0004

00012530 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   12530:	4b0f      	ldr	r3, [pc, #60]	; (12570 <nrfx_gpiote_init+0x40>)
   12532:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   12536:	b10b      	cbz	r3, 1253c <nrfx_gpiote_init+0xc>
        return err_code;
   12538:	480e      	ldr	r0, [pc, #56]	; (12574 <nrfx_gpiote_init+0x44>)
}
   1253a:	4770      	bx	lr
{
   1253c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1253e:	4c0c      	ldr	r4, [pc, #48]	; (12570 <nrfx_gpiote_init+0x40>)
   12540:	2240      	movs	r2, #64	; 0x40
   12542:	2100      	movs	r1, #0
   12544:	f104 0010 	add.w	r0, r4, #16
   12548:	f002 fc96 	bl	14e78 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1254c:	2006      	movs	r0, #6
   1254e:	f7fc fbc5 	bl	ecdc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   12552:	4b09      	ldr	r3, [pc, #36]	; (12578 <nrfx_gpiote_init+0x48>)
   12554:	2200      	movs	r2, #0
   12556:	601a      	str	r2, [r3, #0]
   12558:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1255a:	4b08      	ldr	r3, [pc, #32]	; (1257c <nrfx_gpiote_init+0x4c>)
   1255c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   12560:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   12564:	2301      	movs	r3, #1
   12566:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1256a:	6563      	str	r3, [r4, #84]	; 0x54
    return err_code;
   1256c:	4804      	ldr	r0, [pc, #16]	; (12580 <nrfx_gpiote_init+0x50>)
}
   1256e:	bd10      	pop	{r4, pc}
   12570:	200003f4 	.word	0x200003f4
   12574:	0bad0005 	.word	0x0bad0005
   12578:	4000617c 	.word	0x4000617c
   1257c:	40006000 	.word	0x40006000
   12580:	0bad0000 	.word	0x0bad0000

00012584 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   12584:	4b03      	ldr	r3, [pc, #12]	; (12594 <nrfx_gpiote_is_init+0x10>)
   12586:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1258a:	3800      	subs	r0, #0
   1258c:	bf18      	it	ne
   1258e:	2001      	movne	r0, #1
   12590:	4770      	bx	lr
   12592:	bf00      	nop
   12594:	200003f4 	.word	0x200003f4

00012598 <nrfx_gpiote_channel_free>:
{
   12598:	b508      	push	{r3, lr}
   1259a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1259c:	4801      	ldr	r0, [pc, #4]	; (125a4 <nrfx_gpiote_channel_free+0xc>)
   1259e:	f7ff fcaf 	bl	11f00 <nrfx_flag32_free>
}
   125a2:	bd08      	pop	{r3, pc}
   125a4:	20000444 	.word	0x20000444

000125a8 <nrfx_gpiote_channel_alloc>:
{
   125a8:	b508      	push	{r3, lr}
   125aa:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   125ac:	4801      	ldr	r0, [pc, #4]	; (125b4 <nrfx_gpiote_channel_alloc+0xc>)
   125ae:	f7ff fc83 	bl	11eb8 <nrfx_flag32_alloc>
}
   125b2:	bd08      	pop	{r3, pc}
   125b4:	20000444 	.word	0x20000444

000125b8 <nrfx_gpiote_trigger_enable>:
{
   125b8:	b538      	push	{r3, r4, r5, lr}
   125ba:	4604      	mov	r4, r0
   125bc:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   125be:	f7ff fccd 	bl	11f5c <pin_in_use_by_te>
   125c2:	b308      	cbz	r0, 12608 <nrfx_gpiote_trigger_enable+0x50>
   125c4:	4620      	mov	r0, r4
   125c6:	f003 fe81 	bl	162cc <pin_is_input>
   125ca:	b1e8      	cbz	r0, 12608 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
   125cc:	4620      	mov	r0, r4
   125ce:	f7ff fce5 	bl	11f9c <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   125d2:	0083      	lsls	r3, r0, #2
   125d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   125d8:	b29b      	uxth	r3, r3
   125da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   125de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   125e2:	2200      	movs	r2, #0
   125e4:	601a      	str	r2, [r3, #0]
   125e6:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   125e8:	4a1d      	ldr	r2, [pc, #116]	; (12660 <nrfx_gpiote_trigger_enable+0xa8>)
   125ea:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   125ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   125f2:	f043 0301 	orr.w	r3, r3, #1
   125f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   125fa:	b365      	cbz	r5, 12656 <nrfx_gpiote_trigger_enable+0x9e>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   125fc:	2301      	movs	r3, #1
   125fe:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   12602:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   12606:	e026      	b.n	12656 <nrfx_gpiote_trigger_enable+0x9e>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   12608:	f104 0308 	add.w	r3, r4, #8
   1260c:	4a15      	ldr	r2, [pc, #84]	; (12664 <nrfx_gpiote_trigger_enable+0xac>)
   1260e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   12612:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   12616:	2b04      	cmp	r3, #4
   12618:	d00e      	beq.n	12638 <nrfx_gpiote_trigger_enable+0x80>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1261a:	2b05      	cmp	r3, #5
   1261c:	d01c      	beq.n	12658 <nrfx_gpiote_trigger_enable+0xa0>
    *p_pin = pin_number & 0x1F;
   1261e:	f004 031f 	and.w	r3, r4, #31
    return p_reg->IN;
   12622:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12626:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1262a:	fa22 f303 	lsr.w	r3, r2, r3
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1262e:	f013 0f01 	tst.w	r3, #1
   12632:	d013      	beq.n	1265c <nrfx_gpiote_trigger_enable+0xa4>
   12634:	2103      	movs	r1, #3
   12636:	e000      	b.n	1263a <nrfx_gpiote_trigger_enable+0x82>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   12638:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
   1263a:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1263e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12642:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   12646:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   1264a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1264e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   12652:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   12656:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   12658:	2102      	movs	r1, #2
   1265a:	e7ee      	b.n	1263a <nrfx_gpiote_trigger_enable+0x82>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1265c:	2102      	movs	r1, #2
   1265e:	e7ec      	b.n	1263a <nrfx_gpiote_trigger_enable+0x82>
   12660:	40006000 	.word	0x40006000
   12664:	200003f4 	.word	0x200003f4

00012668 <nrfx_gpiote_trigger_disable>:
{
   12668:	b510      	push	{r4, lr}
   1266a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1266c:	f7ff fc76 	bl	11f5c <pin_in_use_by_te>
   12670:	b1a0      	cbz	r0, 1269c <nrfx_gpiote_trigger_disable+0x34>
   12672:	4620      	mov	r0, r4
   12674:	f003 fe2a 	bl	162cc <pin_is_input>
   12678:	b180      	cbz	r0, 1269c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   1267a:	4620      	mov	r0, r4
   1267c:	f7ff fc8e 	bl	11f9c <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   12680:	2201      	movs	r2, #1
   12682:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   12684:	4b0c      	ldr	r3, [pc, #48]	; (126b8 <nrfx_gpiote_trigger_disable+0x50>)
   12686:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1268a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1268e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   12692:	f022 0203 	bic.w	r2, r2, #3
   12696:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   1269a:	e00b      	b.n	126b4 <nrfx_gpiote_trigger_disable+0x4c>
    *p_pin = pin_number & 0x1F;
   1269c:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   126a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   126a4:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   126a8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   126ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   126b0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   126b4:	bd10      	pop	{r4, pc}
   126b6:	bf00      	nop
   126b8:	40006000 	.word	0x40006000

000126bc <nrfx_gpiote_pin_uninit>:
{
   126bc:	b510      	push	{r4, lr}
   126be:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   126c0:	f7ff fc42 	bl	11f48 <pin_in_use>
   126c4:	b908      	cbnz	r0, 126ca <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   126c6:	4809      	ldr	r0, [pc, #36]	; (126ec <nrfx_gpiote_pin_uninit+0x30>)
}
   126c8:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   126ca:	4620      	mov	r0, r4
   126cc:	f7ff ffcc 	bl	12668 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   126d0:	4620      	mov	r0, r4
   126d2:	f7ff fce3 	bl	1209c <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   126d6:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   126da:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   126de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   126e2:	2202      	movs	r2, #2
   126e4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
   126e8:	4801      	ldr	r0, [pc, #4]	; (126f0 <nrfx_gpiote_pin_uninit+0x34>)
   126ea:	e7ed      	b.n	126c8 <nrfx_gpiote_pin_uninit+0xc>
   126ec:	0bad0004 	.word	0x0bad0004
   126f0:	0bad0000 	.word	0x0bad0000

000126f4 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   126f4:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   126f6:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   126f8:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   126fc:	2100      	movs	r1, #0
    uint32_t status = 0;
   126fe:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   12700:	e003      	b.n	1270a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   12702:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   12704:	3304      	adds	r3, #4
   12706:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   12708:	3101      	adds	r1, #1
   1270a:	2907      	cmp	r1, #7
   1270c:	d814      	bhi.n	12738 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1270e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   12712:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   12716:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   12718:	2a00      	cmp	r2, #0
   1271a:	d0f2      	beq.n	12702 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   1271c:	4a0b      	ldr	r2, [pc, #44]	; (1274c <nrfx_gpiote_irq_handler+0x58>)
   1271e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   12722:	4210      	tst	r0, r2
   12724:	d0ed      	beq.n	12702 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   12726:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1272a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1272e:	2400      	movs	r4, #0
   12730:	6014      	str	r4, [r2, #0]
   12732:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   12734:	4305      	orrs	r5, r0
   12736:	e7e4      	b.n	12702 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12738:	4b05      	ldr	r3, [pc, #20]	; (12750 <nrfx_gpiote_irq_handler+0x5c>)
   1273a:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1273c:	b91b      	cbnz	r3, 12746 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   1273e:	4628      	mov	r0, r5
   12740:	f7ff fd50 	bl	121e4 <gpiote_evt_handle>
}
   12744:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   12746:	f7ff fcfb 	bl	12140 <port_event_handle>
   1274a:	e7f8      	b.n	1273e <nrfx_gpiote_irq_handler+0x4a>
   1274c:	40006000 	.word	0x40006000
   12750:	4000617c 	.word	0x4000617c

00012754 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   12754:	b508      	push	{r3, lr}
   12756:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   12758:	4801      	ldr	r0, [pc, #4]	; (12760 <nrfx_ppi_channel_alloc+0xc>)
   1275a:	f7ff fbad 	bl	11eb8 <nrfx_flag32_alloc>
}
   1275e:	bd08      	pop	{r3, pc}
   12760:	20000450 	.word	0x20000450

00012764 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   12764:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   12766:	4c14      	ldr	r4, [pc, #80]	; (127b8 <_DoInit+0x54>)
   12768:	2303      	movs	r3, #3
   1276a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1276c:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1276e:	4a13      	ldr	r2, [pc, #76]	; (127bc <_DoInit+0x58>)
   12770:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   12772:	4b13      	ldr	r3, [pc, #76]	; (127c0 <_DoInit+0x5c>)
   12774:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   12776:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1277a:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1277c:	2300      	movs	r3, #0
   1277e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   12780:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   12782:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   12784:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   12786:	4a0f      	ldr	r2, [pc, #60]	; (127c4 <_DoInit+0x60>)
   12788:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1278a:	2210      	movs	r2, #16
   1278c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1278e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   12790:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   12792:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   12794:	490c      	ldr	r1, [pc, #48]	; (127c8 <_DoInit+0x64>)
   12796:	1de0      	adds	r0, r4, #7
   12798:	f002 faf4 	bl	14d84 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1279c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   127a0:	490a      	ldr	r1, [pc, #40]	; (127cc <_DoInit+0x68>)
   127a2:	4620      	mov	r0, r4
   127a4:	f002 faee 	bl	14d84 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   127a8:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   127ac:	2320      	movs	r3, #32
   127ae:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   127b0:	f3bf 8f5f 	dmb	sy
}
   127b4:	bd10      	pop	{r4, pc}
   127b6:	bf00      	nop
   127b8:	20001a94 	.word	0x20001a94
   127bc:	0001739c 	.word	0x0001739c
   127c0:	20001b4c 	.word	0x20001b4c
   127c4:	20001b3c 	.word	0x20001b3c
   127c8:	000173a8 	.word	0x000173a8
   127cc:	000173ac 	.word	0x000173ac

000127d0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   127d0:	4b03      	ldr	r3, [pc, #12]	; (127e0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   127d2:	4a04      	ldr	r2, [pc, #16]	; (127e4 <z_device_state_init+0x14>)
   127d4:	4293      	cmp	r3, r2
   127d6:	d201      	bcs.n	127dc <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   127d8:	3318      	adds	r3, #24
   127da:	e7fa      	b.n	127d2 <z_device_state_init+0x2>
	}
}
   127dc:	4770      	bx	lr
   127de:	bf00      	nop
   127e0:	00016da8 	.word	0x00016da8
   127e4:	00016e08 	.word	0x00016e08

000127e8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   127e8:	b570      	push	{r4, r5, r6, lr}
   127ea:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   127ec:	4b11      	ldr	r3, [pc, #68]	; (12834 <z_sys_init_run_level+0x4c>)
   127ee:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   127f2:	e009      	b.n	12808 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   127f4:	4240      	negs	r0, r0
   127f6:	e017      	b.n	12828 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   127f8:	68eb      	ldr	r3, [r5, #12]
   127fa:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   127fc:	68ea      	ldr	r2, [r5, #12]
   127fe:	7853      	ldrb	r3, [r2, #1]
   12800:	f043 0301 	orr.w	r3, r3, #1
   12804:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   12806:	3408      	adds	r4, #8
   12808:	1c73      	adds	r3, r6, #1
   1280a:	4a0a      	ldr	r2, [pc, #40]	; (12834 <z_sys_init_run_level+0x4c>)
   1280c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12810:	42a3      	cmp	r3, r4
   12812:	d90d      	bls.n	12830 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   12814:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   12816:	6823      	ldr	r3, [r4, #0]
   12818:	4628      	mov	r0, r5
   1281a:	4798      	blx	r3
		if (dev != NULL) {
   1281c:	2d00      	cmp	r5, #0
   1281e:	d0f2      	beq.n	12806 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   12820:	2800      	cmp	r0, #0
   12822:	d0eb      	beq.n	127fc <z_sys_init_run_level+0x14>
				if (rc < 0) {
   12824:	2800      	cmp	r0, #0
   12826:	dbe5      	blt.n	127f4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   12828:	28ff      	cmp	r0, #255	; 0xff
   1282a:	dde5      	ble.n	127f8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1282c:	20ff      	movs	r0, #255	; 0xff
   1282e:	e7e3      	b.n	127f8 <z_sys_init_run_level+0x10>
		}
	}
}
   12830:	bd70      	pop	{r4, r5, r6, pc}
   12832:	bf00      	nop
   12834:	000173b4 	.word	0x000173b4

00012838 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   12838:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1283a:	4605      	mov	r5, r0
   1283c:	b328      	cbz	r0, 1288a <z_impl_device_get_binding+0x52>
   1283e:	7803      	ldrb	r3, [r0, #0]
   12840:	b32b      	cbz	r3, 1288e <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   12842:	4c14      	ldr	r4, [pc, #80]	; (12894 <z_impl_device_get_binding+0x5c>)
   12844:	e000      	b.n	12848 <z_impl_device_get_binding+0x10>
   12846:	3418      	adds	r4, #24
   12848:	4b13      	ldr	r3, [pc, #76]	; (12898 <z_impl_device_get_binding+0x60>)
   1284a:	429c      	cmp	r4, r3
   1284c:	d008      	beq.n	12860 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   1284e:	4620      	mov	r0, r4
   12850:	f003 fdbb 	bl	163ca <z_device_ready>
   12854:	2800      	cmp	r0, #0
   12856:	d0f6      	beq.n	12846 <z_impl_device_get_binding+0xe>
   12858:	6823      	ldr	r3, [r4, #0]
   1285a:	42ab      	cmp	r3, r5
   1285c:	d1f3      	bne.n	12846 <z_impl_device_get_binding+0xe>
   1285e:	e012      	b.n	12886 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   12860:	4c0c      	ldr	r4, [pc, #48]	; (12894 <z_impl_device_get_binding+0x5c>)
   12862:	e000      	b.n	12866 <z_impl_device_get_binding+0x2e>
   12864:	3418      	adds	r4, #24
   12866:	4b0c      	ldr	r3, [pc, #48]	; (12898 <z_impl_device_get_binding+0x60>)
   12868:	429c      	cmp	r4, r3
   1286a:	d00b      	beq.n	12884 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1286c:	4620      	mov	r0, r4
   1286e:	f003 fdac 	bl	163ca <z_device_ready>
   12872:	2800      	cmp	r0, #0
   12874:	d0f6      	beq.n	12864 <z_impl_device_get_binding+0x2c>
   12876:	6821      	ldr	r1, [r4, #0]
   12878:	4628      	mov	r0, r5
   1287a:	f002 fab8 	bl	14dee <strcmp>
   1287e:	2800      	cmp	r0, #0
   12880:	d1f0      	bne.n	12864 <z_impl_device_get_binding+0x2c>
   12882:	e000      	b.n	12886 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   12884:	2400      	movs	r4, #0
}
   12886:	4620      	mov	r0, r4
   12888:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1288a:	4604      	mov	r4, r0
   1288c:	e7fb      	b.n	12886 <z_impl_device_get_binding+0x4e>
   1288e:	2400      	movs	r4, #0
   12890:	e7f9      	b.n	12886 <z_impl_device_get_binding+0x4e>
   12892:	bf00      	nop
   12894:	00016da8 	.word	0x00016da8
   12898:	00016e08 	.word	0x00016e08

0001289c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1289c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1289e:	b089      	sub	sp, #36	; 0x24
   128a0:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   128a2:	4b15      	ldr	r3, [pc, #84]	; (128f8 <init_idle_thread+0x5c>)
   128a4:	25b8      	movs	r5, #184	; 0xb8
   128a6:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   128aa:	4b14      	ldr	r3, [pc, #80]	; (128fc <init_idle_thread+0x60>)
   128ac:	f44f 76b0 	mov.w	r6, #352	; 0x160
   128b0:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   128b4:	af06      	add	r7, sp, #24
   128b6:	4603      	mov	r3, r0
   128b8:	4a11      	ldr	r2, [pc, #68]	; (12900 <init_idle_thread+0x64>)
   128ba:	2108      	movs	r1, #8
   128bc:	4638      	mov	r0, r7
   128be:	f001 fdc7 	bl	14450 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   128c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   128c6:	480f      	ldr	r0, [pc, #60]	; (12904 <init_idle_thread+0x68>)
   128c8:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   128cc:	9705      	str	r7, [sp, #20]
   128ce:	2301      	movs	r3, #1
   128d0:	9304      	str	r3, [sp, #16]
   128d2:	230f      	movs	r3, #15
   128d4:	9303      	str	r3, [sp, #12]
   128d6:	2300      	movs	r3, #0
   128d8:	9302      	str	r3, [sp, #8]
   128da:	9301      	str	r3, [sp, #4]
   128dc:	9400      	str	r4, [sp, #0]
   128de:	4b0a      	ldr	r3, [pc, #40]	; (12908 <init_idle_thread+0x6c>)
   128e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   128e4:	4631      	mov	r1, r6
   128e6:	4628      	mov	r0, r5
   128e8:	f000 f924 	bl	12b34 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   128ec:	7b6b      	ldrb	r3, [r5, #13]
   128ee:	f023 0304 	bic.w	r3, r3, #4
   128f2:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   128f4:	b009      	add	sp, #36	; 0x24
   128f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   128f8:	20001560 	.word	0x20001560
   128fc:	20003640 	.word	0x20003640
   12900:	000173cc 	.word	0x000173cc
   12904:	20001f4c 	.word	0x20001f4c
   12908:	00012c99 	.word	0x00012c99

0001290c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1290c:	b570      	push	{r4, r5, r6, lr}
   1290e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   12910:	f000 ff8c 	bl	1382c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   12914:	4d1b      	ldr	r5, [pc, #108]	; (12984 <prepare_multithreading+0x78>)
   12916:	4b1c      	ldr	r3, [pc, #112]	; (12988 <prepare_multithreading+0x7c>)
   12918:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1291a:	4b1c      	ldr	r3, [pc, #112]	; (1298c <prepare_multithreading+0x80>)
   1291c:	9305      	str	r3, [sp, #20]
   1291e:	2301      	movs	r3, #1
   12920:	9304      	str	r3, [sp, #16]
   12922:	2400      	movs	r4, #0
   12924:	9403      	str	r4, [sp, #12]
   12926:	9402      	str	r4, [sp, #8]
   12928:	9401      	str	r4, [sp, #4]
   1292a:	9400      	str	r4, [sp, #0]
   1292c:	4b18      	ldr	r3, [pc, #96]	; (12990 <prepare_multithreading+0x84>)
   1292e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12932:	4918      	ldr	r1, [pc, #96]	; (12994 <prepare_multithreading+0x88>)
   12934:	4628      	mov	r0, r5
   12936:	f000 f8fd 	bl	12b34 <z_setup_new_thread>
   1293a:	4606      	mov	r6, r0
   1293c:	7b6b      	ldrb	r3, [r5, #13]
   1293e:	f023 0304 	bic.w	r3, r3, #4
   12942:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   12944:	4628      	mov	r0, r5
   12946:	f003 ff8d 	bl	16864 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1294a:	2c00      	cmp	r4, #0
   1294c:	dd02      	ble.n	12954 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   1294e:	4630      	mov	r0, r6
   12950:	b006      	add	sp, #24
   12952:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   12954:	4620      	mov	r0, r4
   12956:	f7ff ffa1 	bl	1289c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1295a:	4b0f      	ldr	r3, [pc, #60]	; (12998 <prepare_multithreading+0x8c>)
   1295c:	22b8      	movs	r2, #184	; 0xb8
   1295e:	fb02 3204 	mla	r2, r2, r4, r3
   12962:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   12966:	4b08      	ldr	r3, [pc, #32]	; (12988 <prepare_multithreading+0x7c>)
   12968:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1296c:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1296e:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   12970:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   12974:	4a09      	ldr	r2, [pc, #36]	; (1299c <prepare_multithreading+0x90>)
   12976:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   1297a:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   1297e:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   12980:	3401      	adds	r4, #1
   12982:	e7e2      	b.n	1294a <prepare_multithreading+0x3e>
   12984:	20001618 	.word	0x20001618
   12988:	20001f4c 	.word	0x20001f4c
   1298c:	000173d8 	.word	0x000173d8
   12990:	000129a1 	.word	0x000129a1
   12994:	20003220 	.word	0x20003220
   12998:	20001560 	.word	0x20001560
   1299c:	200037a0 	.word	0x200037a0

000129a0 <bg_thread_main>:
{
   129a0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   129a2:	4b0a      	ldr	r3, [pc, #40]	; (129cc <bg_thread_main+0x2c>)
   129a4:	2201      	movs	r2, #1
   129a6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   129a8:	2002      	movs	r0, #2
   129aa:	f7ff ff1d 	bl	127e8 <z_sys_init_run_level>
	boot_banner();
   129ae:	f001 fcc7 	bl	14340 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   129b2:	2003      	movs	r0, #3
   129b4:	f7ff ff18 	bl	127e8 <z_sys_init_run_level>
	z_init_static_threads();
   129b8:	f000 f920 	bl	12bfc <z_init_static_threads>
	main();
   129bc:	f7fb f9ea 	bl	dd94 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   129c0:	4a03      	ldr	r2, [pc, #12]	; (129d0 <bg_thread_main+0x30>)
   129c2:	7b13      	ldrb	r3, [r2, #12]
   129c4:	f023 0301 	bic.w	r3, r3, #1
   129c8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   129ca:	bd08      	pop	{r3, pc}
   129cc:	20001f92 	.word	0x20001f92
   129d0:	20001618 	.word	0x20001618

000129d4 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   129d4:	b508      	push	{r3, lr}
   129d6:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   129d8:	4a01      	ldr	r2, [pc, #4]	; (129e0 <switch_to_main_thread+0xc>)
   129da:	4802      	ldr	r0, [pc, #8]	; (129e4 <switch_to_main_thread+0x10>)
   129dc:	f7fc faa4 	bl	ef28 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   129e0:	000129a1 	.word	0x000129a1
   129e4:	20001618 	.word	0x20001618

000129e8 <z_bss_zero>:
{
   129e8:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   129ea:	4803      	ldr	r0, [pc, #12]	; (129f8 <z_bss_zero+0x10>)
   129ec:	4a03      	ldr	r2, [pc, #12]	; (129fc <z_bss_zero+0x14>)
   129ee:	1a12      	subs	r2, r2, r0
   129f0:	2100      	movs	r1, #0
   129f2:	f002 fa41 	bl	14e78 <memset>
}
   129f6:	bd08      	pop	{r3, pc}
   129f8:	20000540 	.word	0x20000540
   129fc:	20001f94 	.word	0x20001f94

00012a00 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   12a00:	b500      	push	{lr}
   12a02:	b0af      	sub	sp, #188	; 0xbc
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   12a04:	4b1d      	ldr	r3, [pc, #116]	; (12a7c <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   12a06:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   12a0a:	4c1d      	ldr	r4, [pc, #116]	; (12a80 <z_cstart+0x80>)
   12a0c:	6963      	ldr	r3, [r4, #20]
   12a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   12a12:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12a14:	23e0      	movs	r3, #224	; 0xe0
   12a16:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   12a1a:	2320      	movs	r3, #32
   12a1c:	77e3      	strb	r3, [r4, #31]
   12a1e:	2500      	movs	r5, #0
   12a20:	7625      	strb	r5, [r4, #24]
   12a22:	7665      	strb	r5, [r4, #25]
   12a24:	76a5      	strb	r5, [r4, #26]
   12a26:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   12a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12a2c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   12a30:	6263      	str	r3, [r4, #36]	; 0x24
   12a32:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   12a36:	f7fc fbc9 	bl	f1cc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   12a3a:	f7fc f931 	bl	eca0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   12a3e:	f04f 33ff 	mov.w	r3, #4294967295
   12a42:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   12a44:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   12a46:	f7fc fccb 	bl	f3e0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   12a4a:	f7fc fc65 	bl	f318 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   12a4e:	2401      	movs	r4, #1
   12a50:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   12a54:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   12a58:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   12a5a:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   12a5c:	4b09      	ldr	r3, [pc, #36]	; (12a84 <z_cstart+0x84>)
   12a5e:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   12a62:	f7ff feb5 	bl	127d0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   12a66:	4628      	mov	r0, r5
   12a68:	f7ff febe 	bl	127e8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   12a6c:	4620      	mov	r0, r4
   12a6e:	f7ff febb 	bl	127e8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   12a72:	f7ff ff4b 	bl	1290c <prepare_multithreading>
   12a76:	f7ff ffad 	bl	129d4 <switch_to_main_thread>
   12a7a:	bf00      	nop
   12a7c:	20003fc0 	.word	0x20003fc0
   12a80:	e000ed00 	.word	0xe000ed00
   12a84:	20001f4c 	.word	0x20001f4c

00012a88 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   12a88:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   12a8a:	4c06      	ldr	r4, [pc, #24]	; (12aa4 <statics_init+0x1c>)
   12a8c:	4b06      	ldr	r3, [pc, #24]	; (12aa8 <statics_init+0x20>)
   12a8e:	429c      	cmp	r4, r3
   12a90:	d206      	bcs.n	12aa0 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   12a92:	68a2      	ldr	r2, [r4, #8]
   12a94:	6861      	ldr	r1, [r4, #4]
   12a96:	4620      	mov	r0, r4
   12a98:	f003 fcbe 	bl	16418 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   12a9c:	3414      	adds	r4, #20
   12a9e:	e7f5      	b.n	12a8c <statics_init+0x4>
		}
	}
	return 0;
}
   12aa0:	2000      	movs	r0, #0
   12aa2:	bd10      	pop	{r4, pc}
   12aa4:	20000474 	.word	0x20000474
   12aa8:	20000474 	.word	0x20000474

00012aac <z_thread_monitor_exit>:
	__asm__ volatile(
   12aac:	f04f 0340 	mov.w	r3, #64	; 0x40
   12ab0:	f3ef 8111 	mrs	r1, BASEPRI
   12ab4:	f383 8812 	msr	BASEPRI_MAX, r3
   12ab8:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   12abc:	4b0a      	ldr	r3, [pc, #40]	; (12ae8 <z_thread_monitor_exit+0x3c>)
   12abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12ac0:	4283      	cmp	r3, r0
   12ac2:	d104      	bne.n	12ace <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   12ac4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   12ac6:	4b08      	ldr	r3, [pc, #32]	; (12ae8 <z_thread_monitor_exit+0x3c>)
   12ac8:	629a      	str	r2, [r3, #40]	; 0x28
   12aca:	e007      	b.n	12adc <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   12acc:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   12ace:	b113      	cbz	r3, 12ad6 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   12ad0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   12ad2:	4282      	cmp	r2, r0
   12ad4:	d1fa      	bne.n	12acc <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   12ad6:	b10b      	cbz	r3, 12adc <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   12ad8:	6f42      	ldr	r2, [r0, #116]	; 0x74
   12ada:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   12adc:	f381 8811 	msr	BASEPRI, r1
   12ae0:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   12ae4:	4770      	bx	lr
   12ae6:	bf00      	nop
   12ae8:	20001f4c 	.word	0x20001f4c

00012aec <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   12aec:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   12aee:	4604      	mov	r4, r0
   12af0:	b140      	cbz	r0, 12b04 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   12af2:	2220      	movs	r2, #32
   12af4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   12af8:	f002 f94d 	bl	14d96 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   12afc:	2000      	movs	r0, #0
   12afe:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   12b02:	bd10      	pop	{r4, pc}
		thread = _current;
   12b04:	4b01      	ldr	r3, [pc, #4]	; (12b0c <z_impl_k_thread_name_set+0x20>)
   12b06:	689c      	ldr	r4, [r3, #8]
   12b08:	e7f3      	b.n	12af2 <z_impl_k_thread_name_set+0x6>
   12b0a:	bf00      	nop
   12b0c:	20001f4c 	.word	0x20001f4c

00012b10 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   12b10:	b538      	push	{r3, r4, r5, lr}
   12b12:	4614      	mov	r4, r2
   12b14:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   12b16:	ea54 0305 	orrs.w	r3, r4, r5
   12b1a:	d102      	bne.n	12b22 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   12b1c:	f003 fd04 	bl	16528 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   12b20:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   12b22:	462b      	mov	r3, r5
   12b24:	4902      	ldr	r1, [pc, #8]	; (12b30 <schedule_new_thread+0x20>)
   12b26:	3018      	adds	r0, #24
   12b28:	f000 fffe 	bl	13b28 <z_add_timeout>
   12b2c:	e7f8      	b.n	12b20 <schedule_new_thread+0x10>
   12b2e:	bf00      	nop
   12b30:	0001689d 	.word	0x0001689d

00012b34 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   12b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b38:	b085      	sub	sp, #20
   12b3a:	4604      	mov	r4, r0
   12b3c:	460f      	mov	r7, r1
   12b3e:	4615      	mov	r5, r2
   12b40:	461e      	mov	r6, r3
   12b42:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   12b46:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   12b4a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   12b4e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   12b52:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   12b56:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   12b58:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   12b5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12b5c:	2204      	movs	r2, #4
   12b5e:	9911      	ldr	r1, [sp, #68]	; 0x44
   12b60:	f003 fce6 	bl	16530 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   12b64:	462a      	mov	r2, r5
   12b66:	4639      	mov	r1, r7
   12b68:	4620      	mov	r0, r4
   12b6a:	f003 fcc5 	bl	164f8 <setup_thread_stack>
   12b6e:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   12b70:	f8cd 8008 	str.w	r8, [sp, #8]
   12b74:	f8cd 9004 	str.w	r9, [sp, #4]
   12b78:	f8cd a000 	str.w	sl, [sp]
   12b7c:	4633      	mov	r3, r6
   12b7e:	4602      	mov	r2, r0
   12b80:	4639      	mov	r1, r7
   12b82:	4620      	mov	r0, r4
   12b84:	f7fc f980 	bl	ee88 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   12b88:	2300      	movs	r3, #0
   12b8a:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   12b8c:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   12b8e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   12b92:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   12b96:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   12b9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   12b9e:	f3ef 8211 	mrs	r2, BASEPRI
   12ba2:	f383 8812 	msr	BASEPRI_MAX, r3
   12ba6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   12baa:	4b13      	ldr	r3, [pc, #76]	; (12bf8 <z_setup_new_thread+0xc4>)
   12bac:	6a99      	ldr	r1, [r3, #40]	; 0x28
   12bae:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   12bb0:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   12bb2:	f382 8811 	msr	BASEPRI, r2
   12bb6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   12bba:	f1bb 0f00 	cmp.w	fp, #0
   12bbe:	d013      	beq.n	12be8 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   12bc0:	221f      	movs	r2, #31
   12bc2:	4659      	mov	r1, fp
   12bc4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   12bc8:	f002 f8e5 	bl	14d96 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   12bcc:	2300      	movs	r3, #0
   12bce:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   12bd2:	4b09      	ldr	r3, [pc, #36]	; (12bf8 <z_setup_new_thread+0xc4>)
   12bd4:	689b      	ldr	r3, [r3, #8]
   12bd6:	b15b      	cbz	r3, 12bf0 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   12bd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   12bdc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   12be0:	4628      	mov	r0, r5
   12be2:	b005      	add	sp, #20
   12be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   12be8:	2300      	movs	r3, #0
   12bea:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   12bee:	e7f0      	b.n	12bd2 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   12bf0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   12bf4:	e7f4      	b.n	12be0 <z_setup_new_thread+0xac>
   12bf6:	bf00      	nop
   12bf8:	20001f4c 	.word	0x20001f4c

00012bfc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   12bfc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   12c00:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   12c02:	4c23      	ldr	r4, [pc, #140]	; (12c90 <z_init_static_threads+0x94>)
   12c04:	4b23      	ldr	r3, [pc, #140]	; (12c94 <z_init_static_threads+0x98>)
   12c06:	429c      	cmp	r4, r3
   12c08:	d215      	bcs.n	12c36 <z_init_static_threads+0x3a>
		z_setup_new_thread(
   12c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12c0c:	9305      	str	r3, [sp, #20]
   12c0e:	6a23      	ldr	r3, [r4, #32]
   12c10:	9304      	str	r3, [sp, #16]
   12c12:	69e3      	ldr	r3, [r4, #28]
   12c14:	9303      	str	r3, [sp, #12]
   12c16:	69a3      	ldr	r3, [r4, #24]
   12c18:	9302      	str	r3, [sp, #8]
   12c1a:	6963      	ldr	r3, [r4, #20]
   12c1c:	9301      	str	r3, [sp, #4]
   12c1e:	6923      	ldr	r3, [r4, #16]
   12c20:	9300      	str	r3, [sp, #0]
   12c22:	68e3      	ldr	r3, [r4, #12]
   12c24:	68a2      	ldr	r2, [r4, #8]
   12c26:	6861      	ldr	r1, [r4, #4]
   12c28:	6820      	ldr	r0, [r4, #0]
   12c2a:	f7ff ff83 	bl	12b34 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   12c2e:	6823      	ldr	r3, [r4, #0]
   12c30:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   12c32:	3430      	adds	r4, #48	; 0x30
   12c34:	e7e6      	b.n	12c04 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   12c36:	f000 fb87 	bl	13348 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   12c3a:	4c15      	ldr	r4, [pc, #84]	; (12c90 <z_init_static_threads+0x94>)
   12c3c:	e01b      	b.n	12c76 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   12c3e:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   12c40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12c44:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
   12c48:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   12c4c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   12c50:	03d8      	lsls	r0, r3, #15
   12c52:	f240 35e7 	movw	r5, #999	; 0x3e7
   12c56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12c5a:	2300      	movs	r3, #0
   12c5c:	1940      	adds	r0, r0, r5
   12c5e:	f04f 0500 	mov.w	r5, #0
   12c62:	eb45 0101 	adc.w	r1, r5, r1
   12c66:	f7ed fe2f 	bl	8c8 <__aeabi_uldivmod>
   12c6a:	4602      	mov	r2, r0
   12c6c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   12c6e:	4630      	mov	r0, r6
   12c70:	f7ff ff4e 	bl	12b10 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   12c74:	3430      	adds	r4, #48	; 0x30
   12c76:	4b07      	ldr	r3, [pc, #28]	; (12c94 <z_init_static_threads+0x98>)
   12c78:	429c      	cmp	r4, r3
   12c7a:	d204      	bcs.n	12c86 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   12c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
   12c82:	d0f7      	beq.n	12c74 <z_init_static_threads+0x78>
   12c84:	e7db      	b.n	12c3e <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   12c86:	f000 fd5d 	bl	13744 <k_sched_unlock>
}
   12c8a:	b006      	add	sp, #24
   12c8c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   12c90:	20000474 	.word	0x20000474
   12c94:	20000474 	.word	0x20000474

00012c98 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   12c98:	b508      	push	{r3, lr}
   12c9a:	e001      	b.n	12ca0 <idle+0x8>
	arch_cpu_idle();
   12c9c:	f7fc f806 	bl	ecac <arch_cpu_idle>
	__asm__ volatile(
   12ca0:	f04f 0240 	mov.w	r2, #64	; 0x40
   12ca4:	f3ef 8311 	mrs	r3, BASEPRI
   12ca8:	f382 8812 	msr	BASEPRI_MAX, r2
   12cac:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   12cb0:	f003 ff1f 	bl	16af2 <z_get_next_timeout_expiry>
   12cb4:	4b03      	ldr	r3, [pc, #12]	; (12cc4 <idle+0x2c>)
   12cb6:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   12cb8:	f7fb ff34 	bl	eb24 <pm_system_suspend>
   12cbc:	2800      	cmp	r0, #0
   12cbe:	d1ef      	bne.n	12ca0 <idle+0x8>
   12cc0:	e7ec      	b.n	12c9c <idle+0x4>
   12cc2:	bf00      	nop
   12cc4:	20001f4c 	.word	0x20001f4c

00012cc8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   12cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12ccc:	b083      	sub	sp, #12
   12cce:	4604      	mov	r4, r0
   12cd0:	461d      	mov	r5, r3
   12cd2:	f04f 0340 	mov.w	r3, #64	; 0x40
   12cd6:	f3ef 8711 	mrs	r7, BASEPRI
   12cda:	f383 8812 	msr	BASEPRI_MAX, r3
   12cde:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   12ce2:	68c1      	ldr	r1, [r0, #12]
   12ce4:	b999      	cbnz	r1, 12d0e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   12ce6:	2900      	cmp	r1, #0
   12ce8:	d14f      	bne.n	12d8a <z_impl_k_mutex_lock+0xc2>
   12cea:	4b3a      	ldr	r3, [pc, #232]	; (12dd4 <z_impl_k_mutex_lock+0x10c>)
   12cec:	689b      	ldr	r3, [r3, #8]
   12cee:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   12cf2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   12cf4:	3101      	adds	r1, #1
   12cf6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   12cf8:	4b36      	ldr	r3, [pc, #216]	; (12dd4 <z_impl_k_mutex_lock+0x10c>)
   12cfa:	689b      	ldr	r3, [r3, #8]
   12cfc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   12cfe:	f387 8811 	msr	BASEPRI, r7
   12d02:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   12d06:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   12d08:	b003      	add	sp, #12
   12d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12d0e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   12d10:	6882      	ldr	r2, [r0, #8]
   12d12:	4b30      	ldr	r3, [pc, #192]	; (12dd4 <z_impl_k_mutex_lock+0x10c>)
   12d14:	689b      	ldr	r3, [r3, #8]
   12d16:	429a      	cmp	r2, r3
   12d18:	d0e5      	beq.n	12ce6 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   12d1a:	ea55 0106 	orrs.w	r1, r5, r6
   12d1e:	bf0c      	ite	eq
   12d20:	f04f 0801 	moveq.w	r8, #1
   12d24:	f04f 0800 	movne.w	r8, #0
   12d28:	d031      	beq.n	12d8e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   12d2a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   12d2e:	4649      	mov	r1, r9
   12d30:	f993 000e 	ldrsb.w	r0, [r3, #14]
   12d34:	f003 fc2f 	bl	16596 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   12d38:	4581      	cmp	r9, r0
   12d3a:	dc2f      	bgt.n	12d9c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   12d3c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   12d40:	9600      	str	r6, [sp, #0]
   12d42:	9501      	str	r5, [sp, #4]
   12d44:	4622      	mov	r2, r4
   12d46:	4639      	mov	r1, r7
   12d48:	4823      	ldr	r0, [pc, #140]	; (12dd8 <z_impl_k_mutex_lock+0x110>)
   12d4a:	f000 fc45 	bl	135d8 <z_pend_curr>
	if (got_mutex == 0) {
   12d4e:	2800      	cmp	r0, #0
   12d50:	d0da      	beq.n	12d08 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   12d52:	f04f 0340 	mov.w	r3, #64	; 0x40
   12d56:	f3ef 8511 	mrs	r5, BASEPRI
   12d5a:	f383 8812 	msr	BASEPRI_MAX, r3
   12d5e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   12d62:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12d64:	429c      	cmp	r4, r3
   12d66:	d01f      	beq.n	12da8 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   12d68:	b1f3      	cbz	r3, 12da8 <z_impl_k_mutex_lock+0xe0>
   12d6a:	6921      	ldr	r1, [r4, #16]
   12d6c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   12d70:	f003 fc11 	bl	16596 <new_prio_for_inheritance>
   12d74:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   12d76:	4620      	mov	r0, r4
   12d78:	f003 fc18 	bl	165ac <adjust_owner_prio>
   12d7c:	b9b0      	cbnz	r0, 12dac <z_impl_k_mutex_lock+0xe4>
   12d7e:	f1b9 0f00 	cmp.w	r9, #0
   12d82:	d015      	beq.n	12db0 <z_impl_k_mutex_lock+0xe8>
   12d84:	f04f 0801 	mov.w	r8, #1
   12d88:	e012      	b.n	12db0 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   12d8a:	6923      	ldr	r3, [r4, #16]
   12d8c:	e7b1      	b.n	12cf2 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   12d8e:	f387 8811 	msr	BASEPRI, r7
   12d92:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   12d96:	f06f 000f 	mvn.w	r0, #15
   12d9a:	e7b5      	b.n	12d08 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   12d9c:	4601      	mov	r1, r0
   12d9e:	4620      	mov	r0, r4
   12da0:	f003 fc04 	bl	165ac <adjust_owner_prio>
   12da4:	4681      	mov	r9, r0
   12da6:	e7cb      	b.n	12d40 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   12da8:	6921      	ldr	r1, [r4, #16]
   12daa:	e7e4      	b.n	12d76 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   12dac:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   12db0:	f1b8 0f00 	cmp.w	r8, #0
   12db4:	d106      	bne.n	12dc4 <z_impl_k_mutex_lock+0xfc>
   12db6:	f385 8811 	msr	BASEPRI, r5
   12dba:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   12dbe:	f06f 000a 	mvn.w	r0, #10
   12dc2:	e7a1      	b.n	12d08 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   12dc4:	4629      	mov	r1, r5
   12dc6:	4804      	ldr	r0, [pc, #16]	; (12dd8 <z_impl_k_mutex_lock+0x110>)
   12dc8:	f000 faa2 	bl	13310 <z_reschedule>
	return -EAGAIN;
   12dcc:	f06f 000a 	mvn.w	r0, #10
   12dd0:	e79a      	b.n	12d08 <z_impl_k_mutex_lock+0x40>
   12dd2:	bf00      	nop
   12dd4:	20001f4c 	.word	0x20001f4c
   12dd8:	20001f78 	.word	0x20001f78

00012ddc <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   12ddc:	6882      	ldr	r2, [r0, #8]
   12dde:	2a00      	cmp	r2, #0
   12de0:	d035      	beq.n	12e4e <z_impl_k_mutex_unlock+0x72>
{
   12de2:	b538      	push	{r3, r4, r5, lr}
   12de4:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   12de6:	4b1d      	ldr	r3, [pc, #116]	; (12e5c <z_impl_k_mutex_unlock+0x80>)
   12de8:	689b      	ldr	r3, [r3, #8]
   12dea:	429a      	cmp	r2, r3
   12dec:	d132      	bne.n	12e54 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   12dee:	7bda      	ldrb	r2, [r3, #15]
   12df0:	3a01      	subs	r2, #1
   12df2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   12df4:	68c3      	ldr	r3, [r0, #12]
   12df6:	2b01      	cmp	r3, #1
   12df8:	d905      	bls.n	12e06 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   12dfa:	3b01      	subs	r3, #1
   12dfc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   12dfe:	f000 fca1 	bl	13744 <k_sched_unlock>

	return 0;
   12e02:	2000      	movs	r0, #0
}
   12e04:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   12e06:	f04f 0340 	mov.w	r3, #64	; 0x40
   12e0a:	f3ef 8511 	mrs	r5, BASEPRI
   12e0e:	f383 8812 	msr	BASEPRI_MAX, r3
   12e12:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   12e16:	6901      	ldr	r1, [r0, #16]
   12e18:	f003 fbc8 	bl	165ac <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   12e1c:	4620      	mov	r0, r4
   12e1e:	f003 fdbc 	bl	1699a <z_unpend_first_thread>
	mutex->owner = new_owner;
   12e22:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   12e24:	b160      	cbz	r0, 12e40 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   12e26:	f990 300e 	ldrsb.w	r3, [r0, #14]
   12e2a:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   12e2c:	2300      	movs	r3, #0
   12e2e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   12e32:	f003 fd17 	bl	16864 <z_ready_thread>
		z_reschedule(&lock, key);
   12e36:	4629      	mov	r1, r5
   12e38:	4809      	ldr	r0, [pc, #36]	; (12e60 <z_impl_k_mutex_unlock+0x84>)
   12e3a:	f000 fa69 	bl	13310 <z_reschedule>
   12e3e:	e7de      	b.n	12dfe <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   12e40:	2300      	movs	r3, #0
   12e42:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   12e44:	f385 8811 	msr	BASEPRI, r5
   12e48:	f3bf 8f6f 	isb	sy
   12e4c:	e7d7      	b.n	12dfe <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   12e4e:	f06f 0015 	mvn.w	r0, #21
}
   12e52:	4770      	bx	lr
		return -EPERM;
   12e54:	f04f 30ff 	mov.w	r0, #4294967295
   12e58:	e7d4      	b.n	12e04 <z_impl_k_mutex_unlock+0x28>
   12e5a:	bf00      	nop
   12e5c:	20001f4c 	.word	0x20001f4c
   12e60:	20001f78 	.word	0x20001f78

00012e64 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   12e64:	b5d0      	push	{r4, r6, r7, lr}
   12e66:	b082      	sub	sp, #8
   12e68:	4601      	mov	r1, r0
   12e6a:	4616      	mov	r6, r2
   12e6c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   12e6e:	4602      	mov	r2, r0
	__asm__ volatile(
   12e70:	f04f 0340 	mov.w	r3, #64	; 0x40
   12e74:	f3ef 8411 	mrs	r4, BASEPRI
   12e78:	f383 8812 	msr	BASEPRI_MAX, r3
   12e7c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   12e80:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   12e84:	b188      	cbz	r0, 12eaa <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   12e86:	6803      	ldr	r3, [r0, #0]
   12e88:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   12e8c:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   12e8e:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   12e90:	4290      	cmp	r0, r2
   12e92:	d008      	beq.n	12ea6 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   12e94:	2101      	movs	r1, #1
   12e96:	f003 fc07 	bl	166a8 <z_queue_node_peek>
	__asm__ volatile(
   12e9a:	f384 8811 	msr	BASEPRI, r4
   12e9e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   12ea2:	b002      	add	sp, #8
   12ea4:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   12ea6:	604b      	str	r3, [r1, #4]
}
   12ea8:	e7f4      	b.n	12e94 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   12eaa:	ea56 0307 	orrs.w	r3, r6, r7
   12eae:	d00a      	beq.n	12ec6 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   12eb0:	e9cd 6700 	strd	r6, r7, [sp]
   12eb4:	4621      	mov	r1, r4
   12eb6:	4610      	mov	r0, r2
   12eb8:	f000 fb8e 	bl	135d8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   12ebc:	b948      	cbnz	r0, 12ed2 <z_impl_k_queue_get+0x6e>
   12ebe:	4b06      	ldr	r3, [pc, #24]	; (12ed8 <z_impl_k_queue_get+0x74>)
   12ec0:	689b      	ldr	r3, [r3, #8]
   12ec2:	6958      	ldr	r0, [r3, #20]
   12ec4:	e7ed      	b.n	12ea2 <z_impl_k_queue_get+0x3e>
   12ec6:	f384 8811 	msr	BASEPRI, r4
   12eca:	f3bf 8f6f 	isb	sy
		return NULL;
   12ece:	2000      	movs	r0, #0
   12ed0:	e7e7      	b.n	12ea2 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   12ed2:	2000      	movs	r0, #0
   12ed4:	e7e5      	b.n	12ea2 <z_impl_k_queue_get+0x3e>
   12ed6:	bf00      	nop
   12ed8:	20001f4c 	.word	0x20001f4c

00012edc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   12edc:	b538      	push	{r3, r4, r5, lr}
   12ede:	4604      	mov	r4, r0
	__asm__ volatile(
   12ee0:	f04f 0340 	mov.w	r3, #64	; 0x40
   12ee4:	f3ef 8511 	mrs	r5, BASEPRI
   12ee8:	f383 8812 	msr	BASEPRI_MAX, r3
   12eec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   12ef0:	f003 fd53 	bl	1699a <z_unpend_first_thread>

	if (thread != NULL) {
   12ef4:	b148      	cbz	r0, 12f0a <z_impl_k_sem_give+0x2e>
   12ef6:	2200      	movs	r2, #0
   12ef8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   12efc:	f003 fcb2 	bl	16864 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   12f00:	4629      	mov	r1, r5
   12f02:	4809      	ldr	r0, [pc, #36]	; (12f28 <z_impl_k_sem_give+0x4c>)
   12f04:	f000 fa04 	bl	13310 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   12f08:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   12f0a:	68a3      	ldr	r3, [r4, #8]
   12f0c:	68e2      	ldr	r2, [r4, #12]
   12f0e:	4293      	cmp	r3, r2
   12f10:	d008      	beq.n	12f24 <z_impl_k_sem_give+0x48>
   12f12:	2201      	movs	r2, #1
   12f14:	4413      	add	r3, r2
   12f16:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   12f18:	2102      	movs	r1, #2
   12f1a:	f104 0010 	add.w	r0, r4, #16
   12f1e:	f003 fed5 	bl	16ccc <z_handle_obj_poll_events>
}
   12f22:	e7ed      	b.n	12f00 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   12f24:	2200      	movs	r2, #0
   12f26:	e7f5      	b.n	12f14 <z_impl_k_sem_give+0x38>
   12f28:	20001f78 	.word	0x20001f78

00012f2c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   12f2c:	b530      	push	{r4, r5, lr}
   12f2e:	b083      	sub	sp, #12
   12f30:	461d      	mov	r5, r3
   12f32:	f04f 0340 	mov.w	r3, #64	; 0x40
   12f36:	f3ef 8111 	mrs	r1, BASEPRI
   12f3a:	f383 8812 	msr	BASEPRI_MAX, r3
   12f3e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   12f42:	6883      	ldr	r3, [r0, #8]
   12f44:	b143      	cbz	r3, 12f58 <z_impl_k_sem_take+0x2c>
		sem->count--;
   12f46:	3b01      	subs	r3, #1
   12f48:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   12f4a:	f381 8811 	msr	BASEPRI, r1
   12f4e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   12f52:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   12f54:	b003      	add	sp, #12
   12f56:	bd30      	pop	{r4, r5, pc}
   12f58:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   12f5a:	ea54 0305 	orrs.w	r3, r4, r5
   12f5e:	d006      	beq.n	12f6e <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   12f60:	e9cd 4500 	strd	r4, r5, [sp]
   12f64:	4602      	mov	r2, r0
   12f66:	4805      	ldr	r0, [pc, #20]	; (12f7c <z_impl_k_sem_take+0x50>)
   12f68:	f000 fb36 	bl	135d8 <z_pend_curr>
	return ret;
   12f6c:	e7f2      	b.n	12f54 <z_impl_k_sem_take+0x28>
   12f6e:	f381 8811 	msr	BASEPRI, r1
   12f72:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   12f76:	f06f 000f 	mvn.w	r0, #15
   12f7a:	e7eb      	b.n	12f54 <z_impl_k_sem_take+0x28>
   12f7c:	20001f78 	.word	0x20001f78

00012f80 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   12f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f82:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   12f84:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   12f86:	f013 0f02 	tst.w	r3, #2
   12f8a:	d15b      	bne.n	13044 <submit_to_queue_locked+0xc4>
   12f8c:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   12f8e:	f013 0f04 	tst.w	r3, #4
   12f92:	d15c      	bne.n	1304e <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   12f94:	680b      	ldr	r3, [r1, #0]
   12f96:	2b00      	cmp	r3, #0
   12f98:	d037      	beq.n	1300a <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   12f9a:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   12f9c:	f013 0f01 	tst.w	r3, #1
   12fa0:	d036      	beq.n	13010 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   12fa2:	68a3      	ldr	r3, [r4, #8]
   12fa4:	602b      	str	r3, [r5, #0]
			ret = 2;
   12fa6:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   12fa8:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   12faa:	2e00      	cmp	r6, #0
   12fac:	d03e      	beq.n	1302c <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   12fae:	4b29      	ldr	r3, [pc, #164]	; (13054 <submit_to_queue_locked+0xd4>)
   12fb0:	689b      	ldr	r3, [r3, #8]
   12fb2:	42b3      	cmp	r3, r6
   12fb4:	d02e      	beq.n	13014 <submit_to_queue_locked+0x94>
   12fb6:	2300      	movs	r3, #0
   12fb8:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   12fba:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   12fbe:	f3c3 0180 	ubfx	r1, r3, #2, #1
   12fc2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   12fc6:	f013 0f01 	tst.w	r3, #1
   12fca:	d032      	beq.n	13032 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   12fcc:	b101      	cbz	r1, 12fd0 <submit_to_queue_locked+0x50>
   12fce:	b39a      	cbz	r2, 13038 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   12fd0:	b100      	cbz	r0, 12fd4 <submit_to_queue_locked+0x54>
   12fd2:	b3a1      	cbz	r1, 1303e <submit_to_queue_locked+0xbe>
	parent->next = child;
   12fd4:	2300      	movs	r3, #0
   12fd6:	6023      	str	r3, [r4, #0]
	return list->tail;
   12fd8:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   12fdc:	b30b      	cbz	r3, 13022 <submit_to_queue_locked+0xa2>
	parent->next = child;
   12fde:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12fe0:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   12fe4:	2200      	movs	r2, #0
   12fe6:	4611      	mov	r1, r2
   12fe8:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   12fec:	f003 fd15 	bl	16a1a <z_sched_wake>
		ret = 1;
   12ff0:	2001      	movs	r0, #1

		if (rc < 0) {
   12ff2:	2800      	cmp	r0, #0
   12ff4:	db06      	blt.n	13004 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   12ff6:	68e3      	ldr	r3, [r4, #12]
   12ff8:	f043 0304 	orr.w	r3, r3, #4
   12ffc:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   12ffe:	682b      	ldr	r3, [r5, #0]
   13000:	60a3      	str	r3, [r4, #8]
   13002:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   13004:	2800      	cmp	r0, #0
   13006:	dc21      	bgt.n	1304c <submit_to_queue_locked+0xcc>
   13008:	e01e      	b.n	13048 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   1300a:	6883      	ldr	r3, [r0, #8]
   1300c:	600b      	str	r3, [r1, #0]
   1300e:	e7c4      	b.n	12f9a <submit_to_queue_locked+0x1a>
		ret = 1;
   13010:	2701      	movs	r7, #1
   13012:	e7c9      	b.n	12fa8 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   13014:	f003 fa82 	bl	1651c <k_is_in_isr>
   13018:	b908      	cbnz	r0, 1301e <submit_to_queue_locked+0x9e>
   1301a:	2301      	movs	r3, #1
   1301c:	e7cc      	b.n	12fb8 <submit_to_queue_locked+0x38>
   1301e:	2300      	movs	r3, #0
   13020:	e7ca      	b.n	12fb8 <submit_to_queue_locked+0x38>
   13022:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   13026:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   1302a:	e7db      	b.n	12fe4 <submit_to_queue_locked+0x64>
		return -EINVAL;
   1302c:	f06f 0015 	mvn.w	r0, #21
   13030:	e7df      	b.n	12ff2 <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   13032:	f06f 0012 	mvn.w	r0, #18
   13036:	e7dc      	b.n	12ff2 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   13038:	f06f 000f 	mvn.w	r0, #15
   1303c:	e7d9      	b.n	12ff2 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1303e:	f06f 000f 	mvn.w	r0, #15
   13042:	e7d6      	b.n	12ff2 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   13044:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   13048:	2300      	movs	r3, #0
   1304a:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1304c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1304e:	2000      	movs	r0, #0
   13050:	e7fa      	b.n	13048 <submit_to_queue_locked+0xc8>
   13052:	bf00      	nop
   13054:	20001f4c 	.word	0x20001f4c

00013058 <finalize_cancel_locked>:
{
   13058:	b570      	push	{r4, r5, r6, lr}
   1305a:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   1305c:	68c3      	ldr	r3, [r0, #12]
   1305e:	f023 0302 	bic.w	r3, r3, #2
   13062:	60c3      	str	r3, [r0, #12]
	return list->head;
   13064:	4b19      	ldr	r3, [pc, #100]	; (130cc <finalize_cancel_locked+0x74>)
   13066:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   13068:	b1e8      	cbz	r0, 130a6 <finalize_cancel_locked+0x4e>
   1306a:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1306c:	b100      	cbz	r0, 13070 <finalize_cancel_locked+0x18>
	return node->next;
   1306e:	6804      	ldr	r4, [r0, #0]
   13070:	2600      	movs	r6, #0
   13072:	e01d      	b.n	130b0 <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   13074:	b15e      	cbz	r6, 1308e <finalize_cancel_locked+0x36>
	return node->next;
   13076:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   13078:	6033      	str	r3, [r6, #0]
	return list->tail;
   1307a:	4b14      	ldr	r3, [pc, #80]	; (130cc <finalize_cancel_locked+0x74>)
   1307c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1307e:	4298      	cmp	r0, r3
   13080:	d00e      	beq.n	130a0 <finalize_cancel_locked+0x48>
	parent->next = child;
   13082:	2300      	movs	r3, #0
   13084:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   13088:	f7ff ff28 	bl	12edc <z_impl_k_sem_give>
}
   1308c:	e015      	b.n	130ba <finalize_cancel_locked+0x62>
	return node->next;
   1308e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   13090:	4b0e      	ldr	r3, [pc, #56]	; (130cc <finalize_cancel_locked+0x74>)
   13092:	601a      	str	r2, [r3, #0]
	return list->tail;
   13094:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   13096:	4298      	cmp	r0, r3
   13098:	d1f3      	bne.n	13082 <finalize_cancel_locked+0x2a>
	list->tail = node;
   1309a:	4b0c      	ldr	r3, [pc, #48]	; (130cc <finalize_cancel_locked+0x74>)
   1309c:	605a      	str	r2, [r3, #4]
}
   1309e:	e7f0      	b.n	13082 <finalize_cancel_locked+0x2a>
	list->tail = node;
   130a0:	4b0a      	ldr	r3, [pc, #40]	; (130cc <finalize_cancel_locked+0x74>)
   130a2:	605e      	str	r6, [r3, #4]
}
   130a4:	e7ed      	b.n	13082 <finalize_cancel_locked+0x2a>
   130a6:	4604      	mov	r4, r0
   130a8:	e7e2      	b.n	13070 <finalize_cancel_locked+0x18>
   130aa:	4623      	mov	r3, r4
   130ac:	4620      	mov	r0, r4
   130ae:	461c      	mov	r4, r3
   130b0:	b150      	cbz	r0, 130c8 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   130b2:	6843      	ldr	r3, [r0, #4]
   130b4:	42ab      	cmp	r3, r5
   130b6:	d0dd      	beq.n	13074 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   130b8:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   130ba:	2c00      	cmp	r4, #0
   130bc:	d0f5      	beq.n	130aa <finalize_cancel_locked+0x52>
   130be:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   130c0:	2c00      	cmp	r4, #0
   130c2:	d0f3      	beq.n	130ac <finalize_cancel_locked+0x54>
	return node->next;
   130c4:	6823      	ldr	r3, [r4, #0]
   130c6:	e7f1      	b.n	130ac <finalize_cancel_locked+0x54>
}
   130c8:	bd70      	pop	{r4, r5, r6, pc}
   130ca:	bf00      	nop
   130cc:	20001f78 	.word	0x20001f78

000130d0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   130d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   130d2:	b085      	sub	sp, #20
   130d4:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   130d6:	e016      	b.n	13106 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   130d8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   130dc:	f023 0204 	bic.w	r2, r3, #4
   130e0:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   130e4:	f013 0f04 	tst.w	r3, #4
   130e8:	d158      	bne.n	1319c <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   130ea:	2300      	movs	r3, #0
   130ec:	9302      	str	r3, [sp, #8]
   130ee:	f04f 32ff 	mov.w	r2, #4294967295
   130f2:	f04f 33ff 	mov.w	r3, #4294967295
   130f6:	e9cd 2300 	strd	r2, r3, [sp]
   130fa:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   130fe:	4631      	mov	r1, r6
   13100:	482e      	ldr	r0, [pc, #184]	; (131bc <work_queue_main+0xec>)
   13102:	f000 fc9d 	bl	13a40 <z_sched_wait>
	__asm__ volatile(
   13106:	f04f 0340 	mov.w	r3, #64	; 0x40
   1310a:	f3ef 8611 	mrs	r6, BASEPRI
   1310e:	f383 8812 	msr	BASEPRI_MAX, r3
   13112:	f3bf 8f6f 	isb	sy
	return list->head;
   13116:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   1311a:	2c00      	cmp	r4, #0
   1311c:	d0dc      	beq.n	130d8 <work_queue_main+0x8>
	return node->next;
   1311e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   13120:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   13124:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13128:	4294      	cmp	r4, r2
   1312a:	d034      	beq.n	13196 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   1312c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   13130:	f043 0302 	orr.w	r3, r3, #2
   13134:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   13138:	68e3      	ldr	r3, [r4, #12]
   1313a:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   1313e:	f023 0304 	bic.w	r3, r3, #4
   13142:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   13144:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   13146:	2c00      	cmp	r4, #0
   13148:	d0cf      	beq.n	130ea <work_queue_main+0x1a>
	__asm__ volatile(
   1314a:	f386 8811 	msr	BASEPRI, r6
   1314e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   13152:	4620      	mov	r0, r4
   13154:	4798      	blx	r3
	__asm__ volatile(
   13156:	f04f 0340 	mov.w	r3, #64	; 0x40
   1315a:	f3ef 8611 	mrs	r6, BASEPRI
   1315e:	f383 8812 	msr	BASEPRI_MAX, r3
   13162:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   13166:	68e3      	ldr	r3, [r4, #12]
   13168:	f023 0301 	bic.w	r3, r3, #1
   1316c:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1316e:	f013 0f02 	tst.w	r3, #2
   13172:	d11e      	bne.n	131b2 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   13174:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   13178:	f023 0302 	bic.w	r3, r3, #2
   1317c:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   13180:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   13184:	f386 8811 	msr	BASEPRI, r6
   13188:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1318c:	2b00      	cmp	r3, #0
   1318e:	d1ba      	bne.n	13106 <work_queue_main+0x36>
	z_impl_k_yield();
   13190:	f000 fb58 	bl	13844 <z_impl_k_yield>
}
   13194:	e7b7      	b.n	13106 <work_queue_main+0x36>
	list->tail = node;
   13196:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   1319a:	e7c7      	b.n	1312c <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1319c:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   131a0:	2200      	movs	r2, #0
   131a2:	2101      	movs	r1, #1
   131a4:	4638      	mov	r0, r7
   131a6:	f003 fc38 	bl	16a1a <z_sched_wake>
   131aa:	2800      	cmp	r0, #0
   131ac:	d1f8      	bne.n	131a0 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   131ae:	2300      	movs	r3, #0
   131b0:	e7c9      	b.n	13146 <work_queue_main+0x76>
			finalize_cancel_locked(work);
   131b2:	4620      	mov	r0, r4
   131b4:	f7ff ff50 	bl	13058 <finalize_cancel_locked>
   131b8:	e7dc      	b.n	13174 <work_queue_main+0xa4>
   131ba:	bf00      	nop
   131bc:	20001f78 	.word	0x20001f78

000131c0 <k_work_submit>:
{
   131c0:	b508      	push	{r3, lr}
   131c2:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   131c4:	4801      	ldr	r0, [pc, #4]	; (131cc <k_work_submit+0xc>)
   131c6:	f003 fad8 	bl	1677a <k_work_submit_to_queue>
}
   131ca:	bd08      	pop	{r3, pc}
   131cc:	200016d8 	.word	0x200016d8

000131d0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   131d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   131d2:	b089      	sub	sp, #36	; 0x24
   131d4:	4604      	mov	r4, r0
   131d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   131d8:	2000      	movs	r0, #0
   131da:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   131de:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   131e2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   131e6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   131ea:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   131ee:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   131f2:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   131f6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   131fa:	b1fd      	cbz	r5, 1323c <k_work_queue_start+0x6c>
   131fc:	7928      	ldrb	r0, [r5, #4]
   131fe:	b9f8      	cbnz	r0, 13240 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   13200:	2001      	movs	r0, #1
	*flagp = flags;
   13202:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13206:	f04f 36ff 	mov.w	r6, #4294967295
   1320a:	f04f 37ff 	mov.w	r7, #4294967295
   1320e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   13212:	2000      	movs	r0, #0
   13214:	9004      	str	r0, [sp, #16]
   13216:	9303      	str	r3, [sp, #12]
   13218:	9002      	str	r0, [sp, #8]
   1321a:	9001      	str	r0, [sp, #4]
   1321c:	9400      	str	r4, [sp, #0]
   1321e:	4b0a      	ldr	r3, [pc, #40]	; (13248 <k_work_queue_start+0x78>)
   13220:	4620      	mov	r0, r4
   13222:	f003 f990 	bl	16546 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   13226:	b125      	cbz	r5, 13232 <k_work_queue_start+0x62>
   13228:	6829      	ldr	r1, [r5, #0]
   1322a:	b111      	cbz	r1, 13232 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   1322c:	4620      	mov	r0, r4
   1322e:	f7ff fc5d 	bl	12aec <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   13232:	4620      	mov	r0, r4
   13234:	f003 f978 	bl	16528 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   13238:	b009      	add	sp, #36	; 0x24
   1323a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1323c:	2001      	movs	r0, #1
   1323e:	e7e0      	b.n	13202 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   13240:	f240 1001 	movw	r0, #257	; 0x101
   13244:	e7dd      	b.n	13202 <k_work_queue_start+0x32>
   13246:	bf00      	nop
   13248:	000130d1 	.word	0x000130d1

0001324c <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   1324c:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1324e:	f1b3 3fff 	cmp.w	r3, #4294967295
   13252:	bf08      	it	eq
   13254:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   13258:	d100      	bne.n	1325c <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1325a:	bd38      	pop	{r3, r4, r5, pc}
   1325c:	4902      	ldr	r1, [pc, #8]	; (13268 <add_thread_timeout+0x1c>)
   1325e:	3018      	adds	r0, #24
   13260:	f000 fc62 	bl	13b28 <z_add_timeout>
   13264:	e7f9      	b.n	1325a <add_thread_timeout+0xe>
   13266:	bf00      	nop
   13268:	0001689d 	.word	0x0001689d

0001326c <z_reset_time_slice>:
{
   1326c:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1326e:	4b08      	ldr	r3, [pc, #32]	; (13290 <z_reset_time_slice+0x24>)
   13270:	681b      	ldr	r3, [r3, #0]
   13272:	b903      	cbnz	r3, 13276 <z_reset_time_slice+0xa>
}
   13274:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   13276:	f7fe fa27 	bl	116c8 <sys_clock_elapsed>
   1327a:	4603      	mov	r3, r0
   1327c:	4a04      	ldr	r2, [pc, #16]	; (13290 <z_reset_time_slice+0x24>)
   1327e:	6810      	ldr	r0, [r2, #0]
   13280:	4403      	add	r3, r0
   13282:	4a04      	ldr	r2, [pc, #16]	; (13294 <z_reset_time_slice+0x28>)
   13284:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   13286:	2100      	movs	r1, #0
   13288:	f003 fc49 	bl	16b1e <z_set_timeout_expiry>
}
   1328c:	e7f2      	b.n	13274 <z_reset_time_slice+0x8>
   1328e:	bf00      	nop
   13290:	20001f88 	.word	0x20001f88
   13294:	20001f4c 	.word	0x20001f4c

00013298 <k_sched_time_slice_set>:
{
   13298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1329c:	4606      	mov	r6, r0
   1329e:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   132a0:	2300      	movs	r3, #0
	__asm__ volatile(
   132a2:	f04f 0240 	mov.w	r2, #64	; 0x40
   132a6:	f3ef 8711 	mrs	r7, BASEPRI
   132aa:	f382 8812 	msr	BASEPRI_MAX, r2
   132ae:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   132b2:	e009      	b.n	132c8 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   132b4:	4b13      	ldr	r3, [pc, #76]	; (13304 <k_sched_time_slice_set+0x6c>)
   132b6:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   132ba:	f7ff ffd7 	bl	1326c <z_reset_time_slice>
	__asm__ volatile(
   132be:	f387 8811 	msr	BASEPRI, r7
   132c2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   132c6:	2301      	movs	r3, #1
   132c8:	b9cb      	cbnz	r3, 132fe <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   132ca:	2300      	movs	r3, #0
   132cc:	4a0e      	ldr	r2, [pc, #56]	; (13308 <k_sched_time_slice_set+0x70>)
   132ce:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   132d0:	0c75      	lsrs	r5, r6, #17
   132d2:	03f4      	lsls	r4, r6, #15
   132d4:	f240 30e7 	movw	r0, #999	; 0x3e7
   132d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   132dc:	2300      	movs	r3, #0
   132de:	1820      	adds	r0, r4, r0
   132e0:	f04f 0100 	mov.w	r1, #0
   132e4:	eb45 0101 	adc.w	r1, r5, r1
   132e8:	f7ed faee 	bl	8c8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   132ec:	4b07      	ldr	r3, [pc, #28]	; (1330c <k_sched_time_slice_set+0x74>)
   132ee:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   132f0:	2e00      	cmp	r6, #0
   132f2:	dddf      	ble.n	132b4 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   132f4:	2802      	cmp	r0, #2
   132f6:	bfb8      	it	lt
   132f8:	2002      	movlt	r0, #2
   132fa:	6018      	str	r0, [r3, #0]
   132fc:	e7da      	b.n	132b4 <k_sched_time_slice_set+0x1c>
}
   132fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13302:	bf00      	nop
   13304:	20001f84 	.word	0x20001f84
   13308:	20001f4c 	.word	0x20001f4c
   1330c:	20001f88 	.word	0x20001f88

00013310 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   13310:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   13312:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13314:	b921      	cbnz	r1, 13320 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13316:	f3ef 8305 	mrs	r3, IPSR
   1331a:	b913      	cbnz	r3, 13322 <z_reschedule+0x12>
   1331c:	2101      	movs	r1, #1
   1331e:	e000      	b.n	13322 <z_reschedule+0x12>
   13320:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   13322:	f011 0f01 	tst.w	r1, #1
   13326:	d007      	beq.n	13338 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   13328:	4b06      	ldr	r3, [pc, #24]	; (13344 <z_reschedule+0x34>)
   1332a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   1332c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1332e:	429a      	cmp	r2, r3
   13330:	d002      	beq.n	13338 <z_reschedule+0x28>
	ret = arch_swap(key);
   13332:	f7fb fd51 	bl	edd8 <arch_swap>
		z_swap(lock, key);
   13336:	e003      	b.n	13340 <z_reschedule+0x30>
   13338:	f380 8811 	msr	BASEPRI, r0
   1333c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   13340:	bd08      	pop	{r3, pc}
   13342:	bf00      	nop
   13344:	20001f4c 	.word	0x20001f4c

00013348 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   13348:	2300      	movs	r3, #0
	__asm__ volatile(
   1334a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1334e:	f3ef 8111 	mrs	r1, BASEPRI
   13352:	f382 8812 	msr	BASEPRI_MAX, r2
   13356:	f3bf 8f6f 	isb	sy
   1335a:	b953      	cbnz	r3, 13372 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   1335c:	4b05      	ldr	r3, [pc, #20]	; (13374 <k_sched_lock+0x2c>)
   1335e:	689a      	ldr	r2, [r3, #8]
   13360:	7bd3      	ldrb	r3, [r2, #15]
   13362:	3b01      	subs	r3, #1
   13364:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   13366:	f381 8811 	msr	BASEPRI, r1
   1336a:	f3bf 8f6f 	isb	sy
   1336e:	2301      	movs	r3, #1
   13370:	e7f3      	b.n	1335a <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   13372:	4770      	bx	lr
   13374:	20001f4c 	.word	0x20001f4c

00013378 <update_cache>:
{
   13378:	b538      	push	{r3, r4, r5, lr}
   1337a:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   1337c:	480f      	ldr	r0, [pc, #60]	; (133bc <update_cache+0x44>)
   1337e:	f003 fa6a 	bl	16856 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   13382:	4605      	mov	r5, r0
   13384:	b170      	cbz	r0, 133a4 <update_cache+0x2c>
	if (preempt_ok != 0) {
   13386:	b984      	cbnz	r4, 133aa <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   13388:	4b0d      	ldr	r3, [pc, #52]	; (133c0 <update_cache+0x48>)
   1338a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1338c:	7b5a      	ldrb	r2, [r3, #13]
   1338e:	f012 0f1f 	tst.w	r2, #31
   13392:	d10a      	bne.n	133aa <update_cache+0x32>
	return node->next != NULL;
   13394:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   13396:	b942      	cbnz	r2, 133aa <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   13398:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1339a:	2a7f      	cmp	r2, #127	; 0x7f
   1339c:	d905      	bls.n	133aa <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1339e:	4a08      	ldr	r2, [pc, #32]	; (133c0 <update_cache+0x48>)
   133a0:	61d3      	str	r3, [r2, #28]
   133a2:	e00a      	b.n	133ba <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   133a4:	4b06      	ldr	r3, [pc, #24]	; (133c0 <update_cache+0x48>)
   133a6:	68dd      	ldr	r5, [r3, #12]
   133a8:	e7ed      	b.n	13386 <update_cache+0xe>
		if (thread != _current) {
   133aa:	4b05      	ldr	r3, [pc, #20]	; (133c0 <update_cache+0x48>)
   133ac:	689b      	ldr	r3, [r3, #8]
   133ae:	42ab      	cmp	r3, r5
   133b0:	d001      	beq.n	133b6 <update_cache+0x3e>
			z_reset_time_slice();
   133b2:	f7ff ff5b 	bl	1326c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   133b6:	4b02      	ldr	r3, [pc, #8]	; (133c0 <update_cache+0x48>)
   133b8:	61dd      	str	r5, [r3, #28]
}
   133ba:	bd38      	pop	{r3, r4, r5, pc}
   133bc:	20001f6c 	.word	0x20001f6c
   133c0:	20001f4c 	.word	0x20001f4c

000133c4 <move_thread_to_end_of_prio_q>:
{
   133c4:	b538      	push	{r3, r4, r5, lr}
   133c6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   133c8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   133ca:	f990 300d 	ldrsb.w	r3, [r0, #13]
   133ce:	2b00      	cmp	r3, #0
   133d0:	db28      	blt.n	13424 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   133d2:	7b6b      	ldrb	r3, [r5, #13]
   133d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   133d8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   133da:	4b1a      	ldr	r3, [pc, #104]	; (13444 <move_thread_to_end_of_prio_q+0x80>)
   133dc:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   133e0:	429c      	cmp	r4, r3
   133e2:	d02d      	beq.n	13440 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   133e4:	b16c      	cbz	r4, 13402 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   133e6:	4621      	mov	r1, r4
   133e8:	4628      	mov	r0, r5
   133ea:	f003 f9ea 	bl	167c2 <z_sched_prio_cmp>
   133ee:	2800      	cmp	r0, #0
   133f0:	dc20      	bgt.n	13434 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   133f2:	b134      	cbz	r4, 13402 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   133f4:	4b13      	ldr	r3, [pc, #76]	; (13444 <move_thread_to_end_of_prio_q+0x80>)
   133f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   133f8:	429c      	cmp	r4, r3
   133fa:	d002      	beq.n	13402 <move_thread_to_end_of_prio_q+0x3e>
   133fc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   133fe:	2c00      	cmp	r4, #0
   13400:	d1f0      	bne.n	133e4 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   13402:	4b10      	ldr	r3, [pc, #64]	; (13444 <move_thread_to_end_of_prio_q+0x80>)
   13404:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   13406:	f103 0120 	add.w	r1, r3, #32
   1340a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1340c:	606a      	str	r2, [r5, #4]

	tail->next = node;
   1340e:	6015      	str	r5, [r2, #0]
	list->tail = node;
   13410:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   13412:	4b0c      	ldr	r3, [pc, #48]	; (13444 <move_thread_to_end_of_prio_q+0x80>)
   13414:	6898      	ldr	r0, [r3, #8]
   13416:	42a8      	cmp	r0, r5
   13418:	bf14      	ite	ne
   1341a:	2000      	movne	r0, #0
   1341c:	2001      	moveq	r0, #1
   1341e:	f7ff ffab 	bl	13378 <update_cache>
}
   13422:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   13424:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   13428:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1342a:	4601      	mov	r1, r0
   1342c:	4806      	ldr	r0, [pc, #24]	; (13448 <move_thread_to_end_of_prio_q+0x84>)
   1342e:	f003 f9e7 	bl	16800 <z_priq_dumb_remove>
}
   13432:	e7ce      	b.n	133d2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   13434:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   13436:	606b      	str	r3, [r5, #4]
	node->next = successor;
   13438:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1343a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1343c:	6065      	str	r5, [r4, #4]
}
   1343e:	e7e8      	b.n	13412 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13440:	2400      	movs	r4, #0
   13442:	e7cf      	b.n	133e4 <move_thread_to_end_of_prio_q+0x20>
   13444:	20001f4c 	.word	0x20001f4c
   13448:	20001f6c 	.word	0x20001f6c

0001344c <z_time_slice>:
{
   1344c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1344e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13452:	f3ef 8411 	mrs	r4, BASEPRI
   13456:	f383 8812 	msr	BASEPRI_MAX, r3
   1345a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1345e:	4b1c      	ldr	r3, [pc, #112]	; (134d0 <z_time_slice+0x84>)
   13460:	689b      	ldr	r3, [r3, #8]
   13462:	4a1c      	ldr	r2, [pc, #112]	; (134d4 <z_time_slice+0x88>)
   13464:	6812      	ldr	r2, [r2, #0]
   13466:	4293      	cmp	r3, r2
   13468:	d01d      	beq.n	134a6 <z_time_slice+0x5a>
	pending_current = NULL;
   1346a:	4a1a      	ldr	r2, [pc, #104]	; (134d4 <z_time_slice+0x88>)
   1346c:	2100      	movs	r1, #0
   1346e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   13470:	4a19      	ldr	r2, [pc, #100]	; (134d8 <z_time_slice+0x8c>)
   13472:	6812      	ldr	r2, [r2, #0]
   13474:	b322      	cbz	r2, 134c0 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   13476:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   13478:	2a7f      	cmp	r2, #127	; 0x7f
   1347a:	d821      	bhi.n	134c0 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   1347c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1347e:	f012 0f1f 	tst.w	r2, #31
   13482:	d11d      	bne.n	134c0 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   13484:	f993 100e 	ldrsb.w	r1, [r3, #14]
   13488:	4a14      	ldr	r2, [pc, #80]	; (134dc <z_time_slice+0x90>)
   1348a:	6812      	ldr	r2, [r2, #0]
   1348c:	4291      	cmp	r1, r2
   1348e:	db17      	blt.n	134c0 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   13490:	4a13      	ldr	r2, [pc, #76]	; (134e0 <z_time_slice+0x94>)
   13492:	4293      	cmp	r3, r2
   13494:	d014      	beq.n	134c0 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   13496:	4a0e      	ldr	r2, [pc, #56]	; (134d0 <z_time_slice+0x84>)
   13498:	6912      	ldr	r2, [r2, #16]
   1349a:	4282      	cmp	r2, r0
   1349c:	dd0a      	ble.n	134b4 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   1349e:	1a10      	subs	r0, r2, r0
   134a0:	4b0b      	ldr	r3, [pc, #44]	; (134d0 <z_time_slice+0x84>)
   134a2:	6118      	str	r0, [r3, #16]
   134a4:	e00f      	b.n	134c6 <z_time_slice+0x7a>
		z_reset_time_slice();
   134a6:	f7ff fee1 	bl	1326c <z_reset_time_slice>
	__asm__ volatile(
   134aa:	f384 8811 	msr	BASEPRI, r4
   134ae:	f3bf 8f6f 	isb	sy
		return;
   134b2:	e00c      	b.n	134ce <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   134b4:	4618      	mov	r0, r3
   134b6:	f7ff ff85 	bl	133c4 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   134ba:	f7ff fed7 	bl	1326c <z_reset_time_slice>
   134be:	e002      	b.n	134c6 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   134c0:	4b03      	ldr	r3, [pc, #12]	; (134d0 <z_time_slice+0x84>)
   134c2:	2200      	movs	r2, #0
   134c4:	611a      	str	r2, [r3, #16]
   134c6:	f384 8811 	msr	BASEPRI, r4
   134ca:	f3bf 8f6f 	isb	sy
}
   134ce:	bd10      	pop	{r4, pc}
   134d0:	20001f4c 	.word	0x20001f4c
   134d4:	20001f80 	.word	0x20001f80
   134d8:	20001f88 	.word	0x20001f88
   134dc:	20001f84 	.word	0x20001f84
   134e0:	20001560 	.word	0x20001560

000134e4 <ready_thread>:
{
   134e4:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   134e6:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   134e8:	f990 200d 	ldrsb.w	r2, [r0, #13]
   134ec:	2a00      	cmp	r2, #0
   134ee:	db2d      	blt.n	1354c <ready_thread+0x68>
   134f0:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   134f2:	f013 0f1f 	tst.w	r3, #31
   134f6:	d105      	bne.n	13504 <ready_thread+0x20>
	return node->next != NULL;
   134f8:	6982      	ldr	r2, [r0, #24]
   134fa:	b10a      	cbz	r2, 13500 <ready_thread+0x1c>
   134fc:	2200      	movs	r2, #0
   134fe:	e002      	b.n	13506 <ready_thread+0x22>
   13500:	2201      	movs	r2, #1
   13502:	e000      	b.n	13506 <ready_thread+0x22>
   13504:	2200      	movs	r2, #0
   13506:	b30a      	cbz	r2, 1354c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   13508:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1350c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1350e:	4b14      	ldr	r3, [pc, #80]	; (13560 <ready_thread+0x7c>)
   13510:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13514:	429d      	cmp	r5, r3
   13516:	d020      	beq.n	1355a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13518:	b16d      	cbz	r5, 13536 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1351a:	4629      	mov	r1, r5
   1351c:	4620      	mov	r0, r4
   1351e:	f003 f950 	bl	167c2 <z_sched_prio_cmp>
   13522:	2800      	cmp	r0, #0
   13524:	dc13      	bgt.n	1354e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13526:	b135      	cbz	r5, 13536 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   13528:	4b0d      	ldr	r3, [pc, #52]	; (13560 <ready_thread+0x7c>)
   1352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1352c:	429d      	cmp	r5, r3
   1352e:	d002      	beq.n	13536 <ready_thread+0x52>
   13530:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13532:	2d00      	cmp	r5, #0
   13534:	d1f0      	bne.n	13518 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   13536:	4b0a      	ldr	r3, [pc, #40]	; (13560 <ready_thread+0x7c>)
   13538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1353a:	f103 0120 	add.w	r1, r3, #32
   1353e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   13540:	6062      	str	r2, [r4, #4]
	tail->next = node;
   13542:	6014      	str	r4, [r2, #0]
	list->tail = node;
   13544:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   13546:	2000      	movs	r0, #0
   13548:	f7ff ff16 	bl	13378 <update_cache>
}
   1354c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   1354e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   13550:	6063      	str	r3, [r4, #4]
	node->next = successor;
   13552:	6025      	str	r5, [r4, #0]
	prev->next = node;
   13554:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   13556:	606c      	str	r4, [r5, #4]
}
   13558:	e7f5      	b.n	13546 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1355a:	2500      	movs	r5, #0
   1355c:	e7dc      	b.n	13518 <ready_thread+0x34>
   1355e:	bf00      	nop
   13560:	20001f4c 	.word	0x20001f4c

00013564 <z_sched_start>:
{
   13564:	b510      	push	{r4, lr}
	__asm__ volatile(
   13566:	f04f 0340 	mov.w	r3, #64	; 0x40
   1356a:	f3ef 8411 	mrs	r4, BASEPRI
   1356e:	f383 8812 	msr	BASEPRI_MAX, r3
   13572:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   13576:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   13578:	f013 0f04 	tst.w	r3, #4
   1357c:	d104      	bne.n	13588 <z_sched_start+0x24>
	__asm__ volatile(
   1357e:	f384 8811 	msr	BASEPRI, r4
   13582:	f3bf 8f6f 	isb	sy
}
   13586:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13588:	f023 0304 	bic.w	r3, r3, #4
   1358c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   1358e:	f7ff ffa9 	bl	134e4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   13592:	4621      	mov	r1, r4
   13594:	4801      	ldr	r0, [pc, #4]	; (1359c <z_sched_start+0x38>)
   13596:	f7ff febb 	bl	13310 <z_reschedule>
   1359a:	e7f4      	b.n	13586 <z_sched_start+0x22>
   1359c:	20001f84 	.word	0x20001f84

000135a0 <unready_thread>:
{
   135a0:	b510      	push	{r4, lr}
   135a2:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   135a4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   135a6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   135aa:	2b00      	cmp	r3, #0
   135ac:	db08      	blt.n	135c0 <unready_thread+0x20>
	update_cache(thread == _current);
   135ae:	4b08      	ldr	r3, [pc, #32]	; (135d0 <unready_thread+0x30>)
   135b0:	6898      	ldr	r0, [r3, #8]
   135b2:	42a0      	cmp	r0, r4
   135b4:	bf14      	ite	ne
   135b6:	2000      	movne	r0, #0
   135b8:	2001      	moveq	r0, #1
   135ba:	f7ff fedd 	bl	13378 <update_cache>
}
   135be:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   135c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   135c4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   135c6:	4601      	mov	r1, r0
   135c8:	4802      	ldr	r0, [pc, #8]	; (135d4 <unready_thread+0x34>)
   135ca:	f003 f919 	bl	16800 <z_priq_dumb_remove>
}
   135ce:	e7ee      	b.n	135ae <unready_thread+0xe>
   135d0:	20001f4c 	.word	0x20001f4c
   135d4:	20001f6c 	.word	0x20001f6c

000135d8 <z_pend_curr>:
{
   135d8:	b510      	push	{r4, lr}
   135da:	460c      	mov	r4, r1
   135dc:	4611      	mov	r1, r2
	pending_current = _current;
   135de:	4b06      	ldr	r3, [pc, #24]	; (135f8 <z_pend_curr+0x20>)
   135e0:	6898      	ldr	r0, [r3, #8]
   135e2:	4b06      	ldr	r3, [pc, #24]	; (135fc <z_pend_curr+0x24>)
   135e4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   135e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   135ea:	f003 f9b5 	bl	16958 <pend>
   135ee:	4620      	mov	r0, r4
   135f0:	f7fb fbf2 	bl	edd8 <arch_swap>
}
   135f4:	bd10      	pop	{r4, pc}
   135f6:	bf00      	nop
   135f8:	20001f4c 	.word	0x20001f4c
   135fc:	20001f80 	.word	0x20001f80

00013600 <z_set_prio>:
{
   13600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13604:	4604      	mov	r4, r0
   13606:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   13608:	2300      	movs	r3, #0
	__asm__ volatile(
   1360a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1360e:	f3ef 8611 	mrs	r6, BASEPRI
   13612:	f382 8812 	msr	BASEPRI_MAX, r2
   13616:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   1361a:	4698      	mov	r8, r3
   1361c:	e008      	b.n	13630 <z_set_prio+0x30>
		if (need_sched) {
   1361e:	f012 0801 	ands.w	r8, r2, #1
   13622:	d111      	bne.n	13648 <z_set_prio+0x48>
			thread->base.prio = prio;
   13624:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   13626:	f386 8811 	msr	BASEPRI, r6
   1362a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1362e:	2301      	movs	r3, #1
   13630:	461a      	mov	r2, r3
   13632:	2b00      	cmp	r3, #0
   13634:	d13d      	bne.n	136b2 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   13636:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   13638:	f013 0f1f 	tst.w	r3, #31
   1363c:	d1ef      	bne.n	1361e <z_set_prio+0x1e>
	return node->next != NULL;
   1363e:	69a1      	ldr	r1, [r4, #24]
   13640:	2900      	cmp	r1, #0
   13642:	d1ec      	bne.n	1361e <z_set_prio+0x1e>
   13644:	2201      	movs	r2, #1
   13646:	e7ea      	b.n	1361e <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   13648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1364c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1364e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 136bc <z_set_prio+0xbc>
   13652:	4621      	mov	r1, r4
   13654:	4648      	mov	r0, r9
   13656:	f003 f8d3 	bl	16800 <z_priq_dumb_remove>
				thread->base.prio = prio;
   1365a:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1365c:	7b63      	ldrb	r3, [r4, #13]
   1365e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13662:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   13664:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13668:	454d      	cmp	r5, r9
   1366a:	d020      	beq.n	136ae <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1366c:	b16d      	cbz	r5, 1368a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1366e:	4629      	mov	r1, r5
   13670:	4620      	mov	r0, r4
   13672:	f003 f8a6 	bl	167c2 <z_sched_prio_cmp>
   13676:	2800      	cmp	r0, #0
   13678:	dc13      	bgt.n	136a2 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1367a:	b135      	cbz	r5, 1368a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   1367c:	4b0e      	ldr	r3, [pc, #56]	; (136b8 <z_set_prio+0xb8>)
   1367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13680:	429d      	cmp	r5, r3
   13682:	d002      	beq.n	1368a <z_set_prio+0x8a>
   13684:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13686:	2d00      	cmp	r5, #0
   13688:	d1f0      	bne.n	1366c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   1368a:	4b0b      	ldr	r3, [pc, #44]	; (136b8 <z_set_prio+0xb8>)
   1368c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1368e:	f103 0120 	add.w	r1, r3, #32
   13692:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   13694:	6062      	str	r2, [r4, #4]
	tail->next = node;
   13696:	6014      	str	r4, [r2, #0]
	list->tail = node;
   13698:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   1369a:	2001      	movs	r0, #1
   1369c:	f7ff fe6c 	bl	13378 <update_cache>
   136a0:	e7c1      	b.n	13626 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   136a2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   136a4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   136a6:	6025      	str	r5, [r4, #0]
	prev->next = node;
   136a8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   136aa:	606c      	str	r4, [r5, #4]
}
   136ac:	e7f5      	b.n	1369a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   136ae:	2500      	movs	r5, #0
   136b0:	e7dc      	b.n	1366c <z_set_prio+0x6c>
}
   136b2:	4640      	mov	r0, r8
   136b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   136b8:	20001f4c 	.word	0x20001f4c
   136bc:	20001f6c 	.word	0x20001f6c

000136c0 <z_impl_k_thread_suspend>:
{
   136c0:	b538      	push	{r3, r4, r5, lr}
   136c2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   136c4:	3018      	adds	r0, #24
   136c6:	f003 f9f6 	bl	16ab6 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   136ca:	2300      	movs	r3, #0
	__asm__ volatile(
   136cc:	f04f 0240 	mov.w	r2, #64	; 0x40
   136d0:	f3ef 8511 	mrs	r5, BASEPRI
   136d4:	f382 8812 	msr	BASEPRI_MAX, r2
   136d8:	f3bf 8f6f 	isb	sy
   136dc:	e010      	b.n	13700 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   136de:	7b63      	ldrb	r3, [r4, #13]
   136e0:	f043 0310 	orr.w	r3, r3, #16
   136e4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   136e6:	4b15      	ldr	r3, [pc, #84]	; (1373c <z_impl_k_thread_suspend+0x7c>)
   136e8:	6898      	ldr	r0, [r3, #8]
   136ea:	42a0      	cmp	r0, r4
   136ec:	bf14      	ite	ne
   136ee:	2000      	movne	r0, #0
   136f0:	2001      	moveq	r0, #1
   136f2:	f7ff fe41 	bl	13378 <update_cache>
	__asm__ volatile(
   136f6:	f385 8811 	msr	BASEPRI, r5
   136fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   136fe:	2301      	movs	r3, #1
   13700:	b963      	cbnz	r3, 1371c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   13702:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   13704:	f994 300d 	ldrsb.w	r3, [r4, #13]
   13708:	2b00      	cmp	r3, #0
   1370a:	dae8      	bge.n	136de <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1370c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   13710:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   13712:	4621      	mov	r1, r4
   13714:	480a      	ldr	r0, [pc, #40]	; (13740 <z_impl_k_thread_suspend+0x80>)
   13716:	f003 f873 	bl	16800 <z_priq_dumb_remove>
}
   1371a:	e7e0      	b.n	136de <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   1371c:	4b07      	ldr	r3, [pc, #28]	; (1373c <z_impl_k_thread_suspend+0x7c>)
   1371e:	689b      	ldr	r3, [r3, #8]
   13720:	42a3      	cmp	r3, r4
   13722:	d000      	beq.n	13726 <z_impl_k_thread_suspend+0x66>
}
   13724:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   13726:	f04f 0340 	mov.w	r3, #64	; 0x40
   1372a:	f3ef 8011 	mrs	r0, BASEPRI
   1372e:	f383 8812 	msr	BASEPRI_MAX, r3
   13732:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   13736:	f003 f84e 	bl	167d6 <z_reschedule_irqlock>
   1373a:	e7f3      	b.n	13724 <z_impl_k_thread_suspend+0x64>
   1373c:	20001f4c 	.word	0x20001f4c
   13740:	20001f6c 	.word	0x20001f6c

00013744 <k_sched_unlock>:

void k_sched_unlock(void)
{
   13744:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   13746:	2300      	movs	r3, #0
   13748:	f04f 0240 	mov.w	r2, #64	; 0x40
   1374c:	f3ef 8411 	mrs	r4, BASEPRI
   13750:	f382 8812 	msr	BASEPRI_MAX, r2
   13754:	f3bf 8f6f 	isb	sy
   13758:	b96b      	cbnz	r3, 13776 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1375a:	4b0c      	ldr	r3, [pc, #48]	; (1378c <k_sched_unlock+0x48>)
   1375c:	689a      	ldr	r2, [r3, #8]
   1375e:	7bd3      	ldrb	r3, [r2, #15]
   13760:	3301      	adds	r3, #1
   13762:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   13764:	2000      	movs	r0, #0
   13766:	f7ff fe07 	bl	13378 <update_cache>
	__asm__ volatile(
   1376a:	f384 8811 	msr	BASEPRI, r4
   1376e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13772:	2301      	movs	r3, #1
   13774:	e7f0      	b.n	13758 <k_sched_unlock+0x14>
	__asm__ volatile(
   13776:	f04f 0340 	mov.w	r3, #64	; 0x40
   1377a:	f3ef 8011 	mrs	r0, BASEPRI
   1377e:	f383 8812 	msr	BASEPRI_MAX, r3
   13782:	f3bf 8f6f 	isb	sy
   13786:	f003 f826 	bl	167d6 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1378a:	bd10      	pop	{r4, pc}
   1378c:	20001f4c 	.word	0x20001f4c

00013790 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   13790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   13792:	7b43      	ldrb	r3, [r0, #13]
   13794:	f013 0f08 	tst.w	r3, #8
   13798:	d145      	bne.n	13826 <end_thread+0x96>
   1379a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   1379c:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   137a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   137a4:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   137a6:	f013 0f80 	tst.w	r3, #128	; 0x80
   137aa:	d114      	bne.n	137d6 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   137ac:	68ab      	ldr	r3, [r5, #8]
   137ae:	b15b      	cbz	r3, 137c8 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   137b0:	4628      	mov	r0, r5
   137b2:	f003 f804 	bl	167be <pended_on_thread>
   137b6:	4629      	mov	r1, r5
   137b8:	f003 f822 	bl	16800 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   137bc:	7b6b      	ldrb	r3, [r5, #13]
   137be:	f023 0302 	bic.w	r3, r3, #2
   137c2:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   137c4:	2300      	movs	r3, #0
   137c6:	60ab      	str	r3, [r5, #8]
   137c8:	f105 0018 	add.w	r0, r5, #24
   137cc:	f003 f973 	bl	16ab6 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   137d0:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   137d4:	e01c      	b.n	13810 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   137d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   137da:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   137dc:	4601      	mov	r1, r0
   137de:	4812      	ldr	r0, [pc, #72]	; (13828 <end_thread+0x98>)
   137e0:	f003 f80e 	bl	16800 <z_priq_dumb_remove>
}
   137e4:	e7e2      	b.n	137ac <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   137e6:	4620      	mov	r0, r4
   137e8:	f002 ffe9 	bl	167be <pended_on_thread>
   137ec:	4621      	mov	r1, r4
   137ee:	f003 f807 	bl	16800 <z_priq_dumb_remove>
   137f2:	7b63      	ldrb	r3, [r4, #13]
   137f4:	f023 0302 	bic.w	r3, r3, #2
   137f8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   137fa:	2600      	movs	r6, #0
   137fc:	60a6      	str	r6, [r4, #8]
   137fe:	f104 0018 	add.w	r0, r4, #24
   13802:	f003 f958 	bl	16ab6 <z_abort_timeout>
   13806:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   1380a:	4620      	mov	r0, r4
   1380c:	f7ff fe6a 	bl	134e4 <ready_thread>
	return list->head == list;
   13810:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13812:	42bc      	cmp	r4, r7
   13814:	d001      	beq.n	1381a <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   13816:	2c00      	cmp	r4, #0
   13818:	d1e5      	bne.n	137e6 <end_thread+0x56>
		update_cache(1);
   1381a:	2001      	movs	r0, #1
   1381c:	f7ff fdac 	bl	13378 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   13820:	4628      	mov	r0, r5
   13822:	f7ff f943 	bl	12aac <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   13826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13828:	20001f6c 	.word	0x20001f6c

0001382c <z_sched_init>:
{
   1382c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   1382e:	4804      	ldr	r0, [pc, #16]	; (13840 <z_sched_init+0x14>)
   13830:	f003 f8ef 	bl	16a12 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   13834:	2100      	movs	r1, #0
   13836:	4608      	mov	r0, r1
   13838:	f7ff fd2e 	bl	13298 <k_sched_time_slice_set>
}
   1383c:	bd08      	pop	{r3, pc}
   1383e:	bf00      	nop
   13840:	20001f68 	.word	0x20001f68

00013844 <z_impl_k_yield>:
{
   13844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13846:	f04f 0340 	mov.w	r3, #64	; 0x40
   1384a:	f3ef 8611 	mrs	r6, BASEPRI
   1384e:	f383 8812 	msr	BASEPRI_MAX, r3
   13852:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   13856:	4c1c      	ldr	r4, [pc, #112]	; (138c8 <z_impl_k_yield+0x84>)
   13858:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1385a:	7b4b      	ldrb	r3, [r1, #13]
   1385c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13860:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   13862:	f104 0720 	add.w	r7, r4, #32
   13866:	4638      	mov	r0, r7
   13868:	f002 ffca 	bl	16800 <z_priq_dumb_remove>
	queue_thread(_current);
   1386c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1386e:	7b6b      	ldrb	r3, [r5, #13]
   13870:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13874:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   13876:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13878:	42bc      	cmp	r4, r7
   1387a:	d023      	beq.n	138c4 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1387c:	b16c      	cbz	r4, 1389a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1387e:	4621      	mov	r1, r4
   13880:	4628      	mov	r0, r5
   13882:	f002 ff9e 	bl	167c2 <z_sched_prio_cmp>
   13886:	2800      	cmp	r0, #0
   13888:	dc16      	bgt.n	138b8 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1388a:	b134      	cbz	r4, 1389a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   1388c:	4b0e      	ldr	r3, [pc, #56]	; (138c8 <z_impl_k_yield+0x84>)
   1388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13890:	429c      	cmp	r4, r3
   13892:	d002      	beq.n	1389a <z_impl_k_yield+0x56>
   13894:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13896:	2c00      	cmp	r4, #0
   13898:	d1f0      	bne.n	1387c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   1389a:	4b0b      	ldr	r3, [pc, #44]	; (138c8 <z_impl_k_yield+0x84>)
   1389c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1389e:	f103 0120 	add.w	r1, r3, #32
   138a2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   138a4:	606a      	str	r2, [r5, #4]
	tail->next = node;
   138a6:	6015      	str	r5, [r2, #0]
	list->tail = node;
   138a8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   138aa:	2001      	movs	r0, #1
   138ac:	f7ff fd64 	bl	13378 <update_cache>
   138b0:	4630      	mov	r0, r6
   138b2:	f7fb fa91 	bl	edd8 <arch_swap>
}
   138b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   138b8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   138ba:	606b      	str	r3, [r5, #4]
	node->next = successor;
   138bc:	602c      	str	r4, [r5, #0]
	prev->next = node;
   138be:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   138c0:	6065      	str	r5, [r4, #4]
}
   138c2:	e7f2      	b.n	138aa <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   138c4:	2400      	movs	r4, #0
   138c6:	e7d9      	b.n	1387c <z_impl_k_yield+0x38>
   138c8:	20001f4c 	.word	0x20001f4c

000138cc <z_tick_sleep>:
{
   138cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138d0:	4604      	mov	r4, r0
   138d2:	460d      	mov	r5, r1
	if (ticks == 0) {
   138d4:	ea54 0105 	orrs.w	r1, r4, r5
   138d8:	d037      	beq.n	1394a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   138da:	f06f 0101 	mvn.w	r1, #1
   138de:	1a0a      	subs	r2, r1, r0
   138e0:	f04f 31ff 	mov.w	r1, #4294967295
   138e4:	eb61 0305 	sbc.w	r3, r1, r5
   138e8:	2a01      	cmp	r2, #1
   138ea:	f173 0300 	sbcs.w	r3, r3, #0
   138ee:	db30      	blt.n	13952 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   138f0:	f06f 0601 	mvn.w	r6, #1
   138f4:	1a36      	subs	r6, r6, r0
   138f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   138fa:	f3ef 8811 	mrs	r8, BASEPRI
   138fe:	f383 8812 	msr	BASEPRI_MAX, r3
   13902:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   13906:	4f16      	ldr	r7, [pc, #88]	; (13960 <z_tick_sleep+0x94>)
   13908:	68b8      	ldr	r0, [r7, #8]
   1390a:	4b16      	ldr	r3, [pc, #88]	; (13964 <z_tick_sleep+0x98>)
   1390c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1390e:	f7ff fe47 	bl	135a0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   13912:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   13914:	4622      	mov	r2, r4
   13916:	462b      	mov	r3, r5
   13918:	4913      	ldr	r1, [pc, #76]	; (13968 <z_tick_sleep+0x9c>)
   1391a:	3018      	adds	r0, #24
   1391c:	f000 f904 	bl	13b28 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   13920:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   13922:	7b53      	ldrb	r3, [r2, #13]
   13924:	f043 0310 	orr.w	r3, r3, #16
   13928:	7353      	strb	r3, [r2, #13]
   1392a:	4640      	mov	r0, r8
   1392c:	f7fb fa54 	bl	edd8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   13930:	2500      	movs	r5, #0
   13932:	f003 f91f 	bl	16b74 <sys_clock_tick_get_32>
   13936:	1a34      	subs	r4, r6, r0
   13938:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   1393c:	2c01      	cmp	r4, #1
   1393e:	f175 0300 	sbcs.w	r3, r5, #0
   13942:	da0a      	bge.n	1395a <z_tick_sleep+0x8e>
	return 0;
   13944:	2000      	movs	r0, #0
}
   13946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1394a:	f7ff ff7b 	bl	13844 <z_impl_k_yield>
		return 0;
   1394e:	2000      	movs	r0, #0
   13950:	e7f9      	b.n	13946 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   13952:	f003 f90f 	bl	16b74 <sys_clock_tick_get_32>
   13956:	1906      	adds	r6, r0, r4
   13958:	e7cd      	b.n	138f6 <z_tick_sleep+0x2a>
		return ticks;
   1395a:	4620      	mov	r0, r4
   1395c:	e7f3      	b.n	13946 <z_tick_sleep+0x7a>
   1395e:	bf00      	nop
   13960:	20001f4c 	.word	0x20001f4c
   13964:	20001f80 	.word	0x20001f80
   13968:	0001689d 	.word	0x0001689d

0001396c <z_impl_k_sleep>:
{
   1396c:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1396e:	f1b1 3fff 	cmp.w	r1, #4294967295
   13972:	bf08      	it	eq
   13974:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   13978:	d01a      	beq.n	139b0 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   1397a:	f7ff ffa7 	bl	138cc <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1397e:	4604      	mov	r4, r0
   13980:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   13982:	0169      	lsls	r1, r5, #5
   13984:	0143      	lsls	r3, r0, #5
   13986:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   1398a:	1a18      	subs	r0, r3, r0
   1398c:	eb62 0305 	sbc.w	r3, r2, r5
   13990:	009a      	lsls	r2, r3, #2
   13992:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   13996:	0081      	lsls	r1, r0, #2
   13998:	4613      	mov	r3, r2
   1399a:	1908      	adds	r0, r1, r4
   1399c:	eb45 0303 	adc.w	r3, r5, r3
   139a0:	00da      	lsls	r2, r3, #3
   139a2:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   139a6:	00c1      	lsls	r1, r0, #3
   139a8:	0bc8      	lsrs	r0, r1, #15
   139aa:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   139ae:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   139b0:	4b03      	ldr	r3, [pc, #12]	; (139c0 <z_impl_k_sleep+0x54>)
   139b2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   139b4:	f7ff fe84 	bl	136c0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   139b8:	f04f 30ff 	mov.w	r0, #4294967295
   139bc:	e7f7      	b.n	139ae <z_impl_k_sleep+0x42>
   139be:	bf00      	nop
   139c0:	20001f4c 	.word	0x20001f4c

000139c4 <z_impl_z_current_get>:
}
   139c4:	4b01      	ldr	r3, [pc, #4]	; (139cc <z_impl_z_current_get+0x8>)
   139c6:	6898      	ldr	r0, [r3, #8]
   139c8:	4770      	bx	lr
   139ca:	bf00      	nop
   139cc:	20001f4c 	.word	0x20001f4c

000139d0 <z_impl_k_is_preempt_thread>:
   139d0:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   139d4:	b933      	cbnz	r3, 139e4 <z_impl_k_is_preempt_thread+0x14>
   139d6:	4b05      	ldr	r3, [pc, #20]	; (139ec <z_impl_k_is_preempt_thread+0x1c>)
   139d8:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   139da:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   139dc:	2b7f      	cmp	r3, #127	; 0x7f
   139de:	d803      	bhi.n	139e8 <z_impl_k_is_preempt_thread+0x18>
   139e0:	2001      	movs	r0, #1
   139e2:	4770      	bx	lr
   139e4:	2000      	movs	r0, #0
   139e6:	4770      	bx	lr
   139e8:	2000      	movs	r0, #0
}
   139ea:	4770      	bx	lr
   139ec:	20001f4c 	.word	0x20001f4c

000139f0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   139f0:	b538      	push	{r3, r4, r5, lr}
   139f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   139f6:	f3ef 8511 	mrs	r5, BASEPRI
   139fa:	f383 8812 	msr	BASEPRI_MAX, r3
   139fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   13a02:	7b43      	ldrb	r3, [r0, #13]
   13a04:	f013 0f08 	tst.w	r3, #8
   13a08:	d004      	beq.n	13a14 <z_thread_abort+0x24>
	__asm__ volatile(
   13a0a:	f385 8811 	msr	BASEPRI, r5
   13a0e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   13a12:	bd38      	pop	{r3, r4, r5, pc}
   13a14:	4604      	mov	r4, r0
	end_thread(thread);
   13a16:	f7ff febb 	bl	13790 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   13a1a:	4b08      	ldr	r3, [pc, #32]	; (13a3c <z_thread_abort+0x4c>)
   13a1c:	689b      	ldr	r3, [r3, #8]
   13a1e:	42a3      	cmp	r3, r4
   13a20:	d004      	beq.n	13a2c <z_thread_abort+0x3c>
   13a22:	f385 8811 	msr	BASEPRI, r5
   13a26:	f3bf 8f6f 	isb	sy
   13a2a:	e7f2      	b.n	13a12 <z_thread_abort+0x22>
   13a2c:	f3ef 8305 	mrs	r3, IPSR
   13a30:	2b00      	cmp	r3, #0
   13a32:	d1f6      	bne.n	13a22 <z_thread_abort+0x32>
   13a34:	4628      	mov	r0, r5
   13a36:	f7fb f9cf 	bl	edd8 <arch_swap>
	return ret;
   13a3a:	e7f2      	b.n	13a22 <z_thread_abort+0x32>
   13a3c:	20001f4c 	.word	0x20001f4c

00013a40 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   13a40:	b5d0      	push	{r4, r6, r7, lr}
   13a42:	b082      	sub	sp, #8
   13a44:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   13a46:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   13a4a:	e9cd 6700 	strd	r6, r7, [sp]
   13a4e:	f7ff fdc3 	bl	135d8 <z_pend_curr>

	if (data != NULL) {
   13a52:	b11c      	cbz	r4, 13a5c <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   13a54:	4b02      	ldr	r3, [pc, #8]	; (13a60 <z_sched_wait+0x20>)
   13a56:	689b      	ldr	r3, [r3, #8]
   13a58:	695b      	ldr	r3, [r3, #20]
   13a5a:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   13a5c:	b002      	add	sp, #8
   13a5e:	bdd0      	pop	{r4, r6, r7, pc}
   13a60:	20001f4c 	.word	0x20001f4c

00013a64 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   13a64:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   13a66:	4806      	ldr	r0, [pc, #24]	; (13a80 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   13a68:	4a06      	ldr	r2, [pc, #24]	; (13a84 <z_data_copy+0x20>)
   13a6a:	1a12      	subs	r2, r2, r0
   13a6c:	4906      	ldr	r1, [pc, #24]	; (13a88 <z_data_copy+0x24>)
   13a6e:	f001 f9df 	bl	14e30 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   13a72:	4a06      	ldr	r2, [pc, #24]	; (13a8c <z_data_copy+0x28>)
   13a74:	4906      	ldr	r1, [pc, #24]	; (13a90 <z_data_copy+0x2c>)
   13a76:	4807      	ldr	r0, [pc, #28]	; (13a94 <z_data_copy+0x30>)
   13a78:	f001 f9da 	bl	14e30 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   13a7c:	bd08      	pop	{r3, pc}
   13a7e:	bf00      	nop
   13a80:	20000000 	.word	0x20000000
   13a84:	2000053c 	.word	0x2000053c
   13a88:	00017424 	.word	0x00017424
   13a8c:	00000000 	.word	0x00000000
   13a90:	00017424 	.word	0x00017424
   13a94:	20000000 	.word	0x20000000

00013a98 <first>:
	return list->head == list;
   13a98:	4b03      	ldr	r3, [pc, #12]	; (13aa8 <first+0x10>)
   13a9a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13a9c:	4298      	cmp	r0, r3
   13a9e:	d000      	beq.n	13aa2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   13aa0:	4770      	bx	lr
   13aa2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   13aa4:	e7fc      	b.n	13aa0 <first+0x8>
   13aa6:	bf00      	nop
   13aa8:	20000454 	.word	0x20000454

00013aac <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13aac:	b130      	cbz	r0, 13abc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   13aae:	4a04      	ldr	r2, [pc, #16]	; (13ac0 <next+0x14>)
   13ab0:	6852      	ldr	r2, [r2, #4]
   13ab2:	4290      	cmp	r0, r2
   13ab4:	d001      	beq.n	13aba <next+0xe>
   13ab6:	6800      	ldr	r0, [r0, #0]
   13ab8:	4770      	bx	lr
   13aba:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   13abc:	4770      	bx	lr
   13abe:	bf00      	nop
   13ac0:	20000454 	.word	0x20000454

00013ac4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   13ac4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   13ac6:	4b04      	ldr	r3, [pc, #16]	; (13ad8 <elapsed+0x14>)
   13ac8:	681b      	ldr	r3, [r3, #0]
   13aca:	b10b      	cbz	r3, 13ad0 <elapsed+0xc>
   13acc:	2000      	movs	r0, #0
}
   13ace:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   13ad0:	f7fd fdfa 	bl	116c8 <sys_clock_elapsed>
   13ad4:	e7fb      	b.n	13ace <elapsed+0xa>
   13ad6:	bf00      	nop
   13ad8:	20001f8c 	.word	0x20001f8c

00013adc <next_timeout>:

static int32_t next_timeout(void)
{
   13adc:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   13ade:	f7ff ffdb 	bl	13a98 <first>
   13ae2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   13ae4:	f7ff ffee 	bl	13ac4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   13ae8:	b18c      	cbz	r4, 13b0e <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   13aea:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13aee:	1a12      	subs	r2, r2, r0
   13af0:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   13af4:	2a01      	cmp	r2, #1
   13af6:	f173 0100 	sbcs.w	r1, r3, #0
   13afa:	db11      	blt.n	13b20 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   13afc:	4610      	mov	r0, r2
   13afe:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   13b02:	f173 0300 	sbcs.w	r3, r3, #0
   13b06:	db04      	blt.n	13b12 <next_timeout+0x36>
   13b08:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   13b0c:	e001      	b.n	13b12 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   13b0e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   13b12:	4b04      	ldr	r3, [pc, #16]	; (13b24 <next_timeout+0x48>)
   13b14:	691b      	ldr	r3, [r3, #16]
   13b16:	b113      	cbz	r3, 13b1e <next_timeout+0x42>
   13b18:	4283      	cmp	r3, r0
   13b1a:	da00      	bge.n	13b1e <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   13b1c:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   13b1e:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   13b20:	2000      	movs	r0, #0
   13b22:	e7f6      	b.n	13b12 <next_timeout+0x36>
   13b24:	20001f4c 	.word	0x20001f4c

00013b28 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   13b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b2c:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
   13b32:	bf08      	it	eq
   13b34:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   13b38:	f000 8096 	beq.w	13c68 <z_add_timeout+0x140>
   13b3c:	4682      	mov	sl, r0
   13b3e:	4614      	mov	r4, r2
   13b40:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   13b42:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   13b44:	2300      	movs	r3, #0
	__asm__ volatile(
   13b46:	f04f 0240 	mov.w	r2, #64	; 0x40
   13b4a:	f3ef 8b11 	mrs	fp, BASEPRI
   13b4e:	f382 8812 	msr	BASEPRI_MAX, r2
   13b52:	f3bf 8f6f 	isb	sy
   13b56:	e02e      	b.n	13bb6 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   13b58:	2201      	movs	r2, #1
   13b5a:	2300      	movs	r3, #0
   13b5c:	e04b      	b.n	13bf6 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   13b5e:	f7ff ffb1 	bl	13ac4 <elapsed>
   13b62:	1822      	adds	r2, r4, r0
   13b64:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   13b68:	3201      	adds	r2, #1
   13b6a:	f143 0300 	adc.w	r3, r3, #0
   13b6e:	f8ca 2010 	str.w	r2, [sl, #16]
   13b72:	f8ca 3014 	str.w	r3, [sl, #20]
   13b76:	e042      	b.n	13bfe <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   13b78:	9b00      	ldr	r3, [sp, #0]
   13b7a:	1ac2      	subs	r2, r0, r3
   13b7c:	9b01      	ldr	r3, [sp, #4]
   13b7e:	eb61 0303 	sbc.w	r3, r1, r3
   13b82:	f8cc 2010 	str.w	r2, [ip, #16]
   13b86:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   13b8a:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   13b8e:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   13b92:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   13b96:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   13b9a:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   13b9e:	f1bc 0f00 	cmp.w	ip, #0
   13ba2:	d049      	beq.n	13c38 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   13ba4:	f7ff ff78 	bl	13a98 <first>
   13ba8:	4582      	cmp	sl, r0
   13baa:	d050      	beq.n	13c4e <z_add_timeout+0x126>
	__asm__ volatile(
   13bac:	f38b 8811 	msr	BASEPRI, fp
   13bb0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   13bb4:	2301      	movs	r3, #1
   13bb6:	2b00      	cmp	r3, #0
   13bb8:	d156      	bne.n	13c68 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   13bba:	f06f 0301 	mvn.w	r3, #1
   13bbe:	ebb3 0804 	subs.w	r8, r3, r4
   13bc2:	f04f 30ff 	mov.w	r0, #4294967295
   13bc6:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   13bca:	f1b8 0f00 	cmp.w	r8, #0
   13bce:	f179 0300 	sbcs.w	r3, r9, #0
   13bd2:	dbc4      	blt.n	13b5e <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   13bd4:	4a26      	ldr	r2, [pc, #152]	; (13c70 <z_add_timeout+0x148>)
   13bd6:	6813      	ldr	r3, [r2, #0]
   13bd8:	6852      	ldr	r2, [r2, #4]
   13bda:	18e3      	adds	r3, r4, r3
   13bdc:	eb45 0202 	adc.w	r2, r5, r2
   13be0:	f06f 0101 	mvn.w	r1, #1
   13be4:	1ace      	subs	r6, r1, r3
   13be6:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   13bea:	4632      	mov	r2, r6
   13bec:	463b      	mov	r3, r7
   13bee:	2e01      	cmp	r6, #1
   13bf0:	f177 0100 	sbcs.w	r1, r7, #0
   13bf4:	dbb0      	blt.n	13b58 <z_add_timeout+0x30>
   13bf6:	f8ca 2010 	str.w	r2, [sl, #16]
   13bfa:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   13bfe:	f7ff ff4b 	bl	13a98 <first>
   13c02:	4684      	mov	ip, r0
   13c04:	f1bc 0f00 	cmp.w	ip, #0
   13c08:	d0c9      	beq.n	13b9e <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   13c0a:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   13c0e:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   13c12:	e9cd 2300 	strd	r2, r3, [sp]
   13c16:	4282      	cmp	r2, r0
   13c18:	418b      	sbcs	r3, r1
   13c1a:	dbad      	blt.n	13b78 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   13c1c:	9b00      	ldr	r3, [sp, #0]
   13c1e:	1a1a      	subs	r2, r3, r0
   13c20:	9b01      	ldr	r3, [sp, #4]
   13c22:	eb63 0301 	sbc.w	r3, r3, r1
   13c26:	f8ca 2010 	str.w	r2, [sl, #16]
   13c2a:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   13c2e:	4660      	mov	r0, ip
   13c30:	f7ff ff3c 	bl	13aac <next>
   13c34:	4684      	mov	ip, r0
   13c36:	e7e5      	b.n	13c04 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   13c38:	4b0e      	ldr	r3, [pc, #56]	; (13c74 <z_add_timeout+0x14c>)
   13c3a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   13c3c:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   13c40:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   13c44:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   13c48:	f8c3 a004 	str.w	sl, [r3, #4]
}
   13c4c:	e7aa      	b.n	13ba4 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   13c4e:	f7ff ff45 	bl	13adc <next_timeout>

			if (next_time == 0 ||
   13c52:	4603      	mov	r3, r0
   13c54:	b118      	cbz	r0, 13c5e <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   13c56:	4a08      	ldr	r2, [pc, #32]	; (13c78 <z_add_timeout+0x150>)
   13c58:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   13c5a:	4282      	cmp	r2, r0
   13c5c:	d0a6      	beq.n	13bac <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   13c5e:	2100      	movs	r1, #0
   13c60:	4618      	mov	r0, r3
   13c62:	f7fd fcfd 	bl	11660 <sys_clock_set_timeout>
   13c66:	e7a1      	b.n	13bac <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   13c68:	b003      	add	sp, #12
   13c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c6e:	bf00      	nop
   13c70:	200016d0 	.word	0x200016d0
   13c74:	20000454 	.word	0x20000454
   13c78:	20001f4c 	.word	0x20001f4c

00013c7c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   13c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c7e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   13c80:	f7ff fbe4 	bl	1344c <z_time_slice>
	__asm__ volatile(
   13c84:	f04f 0340 	mov.w	r3, #64	; 0x40
   13c88:	f3ef 8511 	mrs	r5, BASEPRI
   13c8c:	f383 8812 	msr	BASEPRI_MAX, r3
   13c90:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   13c94:	4b28      	ldr	r3, [pc, #160]	; (13d38 <sys_clock_announce+0xbc>)
   13c96:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   13c98:	f7ff fefe 	bl	13a98 <first>
   13c9c:	4604      	mov	r4, r0
   13c9e:	b350      	cbz	r0, 13cf6 <sys_clock_announce+0x7a>
   13ca0:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   13ca4:	4b24      	ldr	r3, [pc, #144]	; (13d38 <sys_clock_announce+0xbc>)
   13ca6:	681b      	ldr	r3, [r3, #0]
   13ca8:	17d9      	asrs	r1, r3, #31
   13caa:	42b3      	cmp	r3, r6
   13cac:	eb71 0207 	sbcs.w	r2, r1, r7
   13cb0:	db21      	blt.n	13cf6 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   13cb2:	4a22      	ldr	r2, [pc, #136]	; (13d3c <sys_clock_announce+0xc0>)
   13cb4:	e9d2 0100 	ldrd	r0, r1, [r2]
   13cb8:	1980      	adds	r0, r0, r6
   13cba:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   13cbe:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   13cc2:	1b9b      	subs	r3, r3, r6
   13cc4:	4a1c      	ldr	r2, [pc, #112]	; (13d38 <sys_clock_announce+0xbc>)
   13cc6:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   13cc8:	2200      	movs	r2, #0
   13cca:	2300      	movs	r3, #0
   13ccc:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   13cd0:	4620      	mov	r0, r4
   13cd2:	f002 fed9 	bl	16a88 <remove_timeout>
	__asm__ volatile(
   13cd6:	f385 8811 	msr	BASEPRI, r5
   13cda:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   13cde:	68a3      	ldr	r3, [r4, #8]
   13ce0:	4620      	mov	r0, r4
   13ce2:	4798      	blx	r3
	__asm__ volatile(
   13ce4:	f04f 0340 	mov.w	r3, #64	; 0x40
   13ce8:	f3ef 8511 	mrs	r5, BASEPRI
   13cec:	f383 8812 	msr	BASEPRI_MAX, r3
   13cf0:	f3bf 8f6f 	isb	sy
   13cf4:	e7d0      	b.n	13c98 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   13cf6:	b144      	cbz	r4, 13d0a <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   13cf8:	4b0f      	ldr	r3, [pc, #60]	; (13d38 <sys_clock_announce+0xbc>)
   13cfa:	6819      	ldr	r1, [r3, #0]
   13cfc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13d00:	1a52      	subs	r2, r2, r1
   13d02:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   13d06:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   13d0a:	480c      	ldr	r0, [pc, #48]	; (13d3c <sys_clock_announce+0xc0>)
   13d0c:	490a      	ldr	r1, [pc, #40]	; (13d38 <sys_clock_announce+0xbc>)
   13d0e:	680c      	ldr	r4, [r1, #0]
   13d10:	e9d0 2300 	ldrd	r2, r3, [r0]
   13d14:	1912      	adds	r2, r2, r4
   13d16:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   13d1a:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   13d1e:	2400      	movs	r4, #0
   13d20:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   13d22:	f7ff fedb 	bl	13adc <next_timeout>
   13d26:	4621      	mov	r1, r4
   13d28:	f7fd fc9a 	bl	11660 <sys_clock_set_timeout>
	__asm__ volatile(
   13d2c:	f385 8811 	msr	BASEPRI, r5
   13d30:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   13d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13d36:	bf00      	nop
   13d38:	20001f8c 	.word	0x20001f8c
   13d3c:	200016d0 	.word	0x200016d0

00013d40 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   13d40:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   13d42:	2100      	movs	r1, #0
	__asm__ volatile(
   13d44:	f04f 0340 	mov.w	r3, #64	; 0x40
   13d48:	f3ef 8411 	mrs	r4, BASEPRI
   13d4c:	f383 8812 	msr	BASEPRI_MAX, r3
   13d50:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   13d54:	2200      	movs	r2, #0
   13d56:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   13d58:	b969      	cbnz	r1, 13d76 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   13d5a:	f7fd fcb5 	bl	116c8 <sys_clock_elapsed>
   13d5e:	4b07      	ldr	r3, [pc, #28]	; (13d7c <sys_clock_tick_get+0x3c>)
   13d60:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d64:	1812      	adds	r2, r2, r0
   13d66:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   13d6a:	f384 8811 	msr	BASEPRI, r4
   13d6e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   13d72:	2101      	movs	r1, #1
   13d74:	e7f0      	b.n	13d58 <sys_clock_tick_get+0x18>
	}
	return t;
}
   13d76:	4610      	mov	r0, r2
   13d78:	4619      	mov	r1, r3
   13d7a:	bd10      	pop	{r4, pc}
   13d7c:	200016d0 	.word	0x200016d0

00013d80 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   13d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d84:	b08d      	sub	sp, #52	; 0x34
   13d86:	4605      	mov	r5, r0
   13d88:	9107      	str	r1, [sp, #28]
   13d8a:	9202      	str	r2, [sp, #8]
   13d8c:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   13d8e:	4ba4      	ldr	r3, [pc, #656]	; (14020 <z_impl_k_poll+0x2a0>)
   13d90:	f8d3 9008 	ldr.w	r9, [r3, #8]
   13d94:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   13d98:	2301      	movs	r3, #1
   13d9a:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   13d9e:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   13da2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   13da6:	4613      	mov	r3, r2
   13da8:	430b      	orrs	r3, r1
   13daa:	bf0c      	ite	eq
   13dac:	2301      	moveq	r3, #1
   13dae:	2300      	movne	r3, #0
   13db0:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   13db2:	2600      	movs	r6, #0
	int events_registered = 0;
   13db4:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   13db6:	e02e      	b.n	13e16 <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   13db8:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   13dba:	689b      	ldr	r3, [r3, #8]
   13dbc:	b1c3      	cbz	r3, 13df0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   13dbe:	2302      	movs	r3, #2
   13dc0:	9305      	str	r3, [sp, #20]
			return true;
   13dc2:	2301      	movs	r3, #1
   13dc4:	e014      	b.n	13df0 <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   13dc6:	6923      	ldr	r3, [r4, #16]
	return list->head;
   13dc8:	681b      	ldr	r3, [r3, #0]
   13dca:	b18b      	cbz	r3, 13df0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   13dcc:	2304      	movs	r3, #4
   13dce:	9305      	str	r3, [sp, #20]
			return true;
   13dd0:	2301      	movs	r3, #1
   13dd2:	e00d      	b.n	13df0 <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   13dd4:	6923      	ldr	r3, [r4, #16]
   13dd6:	689b      	ldr	r3, [r3, #8]
   13dd8:	b153      	cbz	r3, 13df0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   13dda:	2301      	movs	r3, #1
   13ddc:	9305      	str	r3, [sp, #20]
   13dde:	e007      	b.n	13df0 <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   13de0:	6923      	ldr	r3, [r4, #16]
   13de2:	6a1b      	ldr	r3, [r3, #32]
   13de4:	b123      	cbz	r3, 13df0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   13de6:	2310      	movs	r3, #16
   13de8:	9305      	str	r3, [sp, #20]
			return true;
   13dea:	2301      	movs	r3, #1
   13dec:	e000      	b.n	13df0 <z_impl_k_poll+0x70>
	switch (event->type) {
   13dee:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   13df0:	2b00      	cmp	r3, #0
   13df2:	d03d      	beq.n	13e70 <z_impl_k_poll+0xf0>
	event->poller = NULL;
   13df4:	2100      	movs	r1, #0
   13df6:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   13df8:	68e3      	ldr	r3, [r4, #12]
   13dfa:	f3c3 3245 	ubfx	r2, r3, #13, #6
   13dfe:	9805      	ldr	r0, [sp, #20]
   13e00:	4302      	orrs	r2, r0
   13e02:	f362 3352 	bfi	r3, r2, #13, #6
   13e06:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   13e08:	7039      	strb	r1, [r7, #0]
   13e0a:	9b08      	ldr	r3, [sp, #32]
   13e0c:	f383 8811 	msr	BASEPRI, r3
   13e10:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   13e14:	3601      	adds	r6, #1
   13e16:	9b07      	ldr	r3, [sp, #28]
   13e18:	42b3      	cmp	r3, r6
   13e1a:	f340 81bf 	ble.w	1419c <z_impl_k_poll+0x41c>
	__asm__ volatile(
   13e1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13e22:	f3ef 8211 	mrs	r2, BASEPRI
   13e26:	f383 8812 	msr	BASEPRI_MAX, r3
   13e2a:	f3bf 8f6f 	isb	sy
   13e2e:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   13e30:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   13e34:	00a3      	lsls	r3, r4, #2
   13e36:	9309      	str	r3, [sp, #36]	; 0x24
   13e38:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   13e3c:	7b63      	ldrb	r3, [r4, #13]
   13e3e:	f003 031f 	and.w	r3, r3, #31
   13e42:	3b01      	subs	r3, #1
   13e44:	2b07      	cmp	r3, #7
   13e46:	d8d2      	bhi.n	13dee <z_impl_k_poll+0x6e>
   13e48:	a201      	add	r2, pc, #4	; (adr r2, 13e50 <z_impl_k_poll+0xd0>)
   13e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13e4e:	bf00      	nop
   13e50:	00013dd5 	.word	0x00013dd5
   13e54:	00013db9 	.word	0x00013db9
   13e58:	00013def 	.word	0x00013def
   13e5c:	00013dc7 	.word	0x00013dc7
   13e60:	00013def 	.word	0x00013def
   13e64:	00013def 	.word	0x00013def
   13e68:	00013def 	.word	0x00013def
   13e6c:	00013de1 	.word	0x00013de1
		} else if (!just_check && poller->is_polling) {
   13e70:	9b06      	ldr	r3, [sp, #24]
   13e72:	2b00      	cmp	r3, #0
   13e74:	d1c9      	bne.n	13e0a <z_impl_k_poll+0x8a>
   13e76:	783b      	ldrb	r3, [r7, #0]
   13e78:	2b00      	cmp	r3, #0
   13e7a:	d0c6      	beq.n	13e0a <z_impl_k_poll+0x8a>
	switch (event->type) {
   13e7c:	7b63      	ldrb	r3, [r4, #13]
   13e7e:	f003 031f 	and.w	r3, r3, #31
   13e82:	3b01      	subs	r3, #1
   13e84:	2b07      	cmp	r3, #7
   13e86:	d846      	bhi.n	13f16 <z_impl_k_poll+0x196>
   13e88:	e8df f013 	tbh	[pc, r3, lsl #1]
   13e8c:	000800cc 	.word	0x000800cc
   13e90:	006a0045 	.word	0x006a0045
   13e94:	00450045 	.word	0x00450045
   13e98:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   13e9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   13ea0:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   13ea4:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   13ea8:	4598      	cmp	r8, r3
   13eaa:	d02b      	beq.n	13f04 <z_impl_k_poll+0x184>
   13eac:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   13eb0:	b343      	cbz	r3, 13f04 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   13eb2:	6898      	ldr	r0, [r3, #8]
   13eb4:	f002 fe98 	bl	16be8 <poller_thread>
   13eb8:	900b      	str	r0, [sp, #44]	; 0x2c
   13eba:	4638      	mov	r0, r7
   13ebc:	f002 fe94 	bl	16be8 <poller_thread>
   13ec0:	4601      	mov	r1, r0
   13ec2:	900a      	str	r0, [sp, #40]	; 0x28
   13ec4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13ec6:	f002 fc7c 	bl	167c2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   13eca:	2800      	cmp	r0, #0
   13ecc:	dc1a      	bgt.n	13f04 <z_impl_k_poll+0x184>
	return list->head == list;
   13ece:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13ed2:	45d0      	cmp	r8, sl
   13ed4:	d02f      	beq.n	13f36 <z_impl_k_poll+0x1b6>
   13ed6:	4653      	mov	r3, sl
   13ed8:	46a2      	mov	sl, r4
   13eda:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13edc:	b38c      	cbz	r4, 13f42 <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   13ede:	68a0      	ldr	r0, [r4, #8]
   13ee0:	f002 fe82 	bl	16be8 <poller_thread>
   13ee4:	4601      	mov	r1, r0
   13ee6:	980a      	ldr	r0, [sp, #40]	; 0x28
   13ee8:	f002 fc6b 	bl	167c2 <z_sched_prio_cmp>
   13eec:	2800      	cmp	r0, #0
   13eee:	dc16      	bgt.n	13f1e <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13ef0:	b34c      	cbz	r4, 13f46 <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   13ef2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   13ef6:	429c      	cmp	r4, r3
   13ef8:	d030      	beq.n	13f5c <z_impl_k_poll+0x1dc>
   13efa:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13efc:	2c00      	cmp	r4, #0
   13efe:	d1ed      	bne.n	13edc <z_impl_k_poll+0x15c>
   13f00:	4654      	mov	r4, sl
   13f02:	e021      	b.n	13f48 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   13f04:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   13f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13f0a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   13f0e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   13f10:	601c      	str	r4, [r3, #0]
	list->tail = node;
   13f12:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   13f16:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   13f18:	f10b 0b01 	add.w	fp, fp, #1
   13f1c:	e775      	b.n	13e0a <z_impl_k_poll+0x8a>
   13f1e:	4623      	mov	r3, r4
   13f20:	4654      	mov	r4, sl
   13f22:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   13f24:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   13f26:	6063      	str	r3, [r4, #4]
	node->next = successor;
   13f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13f2a:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   13f2e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   13f30:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   13f34:	e7ef      	b.n	13f16 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13f36:	f04f 0a00 	mov.w	sl, #0
   13f3a:	4653      	mov	r3, sl
   13f3c:	46a2      	mov	sl, r4
   13f3e:	461c      	mov	r4, r3
   13f40:	e7cc      	b.n	13edc <z_impl_k_poll+0x15c>
   13f42:	4654      	mov	r4, sl
   13f44:	e000      	b.n	13f48 <z_impl_k_poll+0x1c8>
   13f46:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   13f48:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   13f4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13f4e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   13f52:	6063      	str	r3, [r4, #4]
	tail->next = node;
   13f54:	601c      	str	r4, [r3, #0]
	list->tail = node;
   13f56:	f8c8 4004 	str.w	r4, [r8, #4]
}
   13f5a:	e7dc      	b.n	13f16 <z_impl_k_poll+0x196>
   13f5c:	4654      	mov	r4, sl
   13f5e:	e7f3      	b.n	13f48 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   13f60:	f8d4 a010 	ldr.w	sl, [r4, #16]
   13f64:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   13f68:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   13f6c:	4598      	cmp	r8, r3
   13f6e:	d02b      	beq.n	13fc8 <z_impl_k_poll+0x248>
   13f70:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   13f74:	b343      	cbz	r3, 13fc8 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   13f76:	6898      	ldr	r0, [r3, #8]
   13f78:	f002 fe36 	bl	16be8 <poller_thread>
   13f7c:	900b      	str	r0, [sp, #44]	; 0x2c
   13f7e:	4638      	mov	r0, r7
   13f80:	f002 fe32 	bl	16be8 <poller_thread>
   13f84:	4601      	mov	r1, r0
   13f86:	900a      	str	r0, [sp, #40]	; 0x28
   13f88:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13f8a:	f002 fc1a 	bl	167c2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   13f8e:	2800      	cmp	r0, #0
   13f90:	dc1a      	bgt.n	13fc8 <z_impl_k_poll+0x248>
	return list->head == list;
   13f92:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13f96:	45d0      	cmp	r8, sl
   13f98:	d02c      	beq.n	13ff4 <z_impl_k_poll+0x274>
   13f9a:	4653      	mov	r3, sl
   13f9c:	46a2      	mov	sl, r4
   13f9e:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13fa0:	b374      	cbz	r4, 14000 <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   13fa2:	68a0      	ldr	r0, [r4, #8]
   13fa4:	f002 fe20 	bl	16be8 <poller_thread>
   13fa8:	4601      	mov	r1, r0
   13faa:	980a      	ldr	r0, [sp, #40]	; 0x28
   13fac:	f002 fc09 	bl	167c2 <z_sched_prio_cmp>
   13fb0:	2800      	cmp	r0, #0
   13fb2:	dc13      	bgt.n	13fdc <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13fb4:	b334      	cbz	r4, 14004 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   13fb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   13fba:	429c      	cmp	r4, r3
   13fbc:	d02d      	beq.n	1401a <z_impl_k_poll+0x29a>
   13fbe:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13fc0:	2c00      	cmp	r4, #0
   13fc2:	d1ed      	bne.n	13fa0 <z_impl_k_poll+0x220>
   13fc4:	4654      	mov	r4, sl
   13fc6:	e01e      	b.n	14006 <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   13fc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   13fcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13fce:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   13fd2:	6063      	str	r3, [r4, #4]
	tail->next = node;
   13fd4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   13fd6:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   13fda:	e79c      	b.n	13f16 <z_impl_k_poll+0x196>
   13fdc:	4623      	mov	r3, r4
   13fde:	4654      	mov	r4, sl
   13fe0:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   13fe2:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   13fe4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   13fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13fe8:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   13fec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   13fee:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   13ff2:	e790      	b.n	13f16 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13ff4:	f04f 0a00 	mov.w	sl, #0
   13ff8:	4653      	mov	r3, sl
   13ffa:	46a2      	mov	sl, r4
   13ffc:	461c      	mov	r4, r3
   13ffe:	e7cf      	b.n	13fa0 <z_impl_k_poll+0x220>
   14000:	4654      	mov	r4, sl
   14002:	e000      	b.n	14006 <z_impl_k_poll+0x286>
   14004:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   14006:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1400a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1400c:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   14010:	6063      	str	r3, [r4, #4]
	tail->next = node;
   14012:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14014:	f8c8 4004 	str.w	r4, [r8, #4]
}
   14018:	e77d      	b.n	13f16 <z_impl_k_poll+0x196>
   1401a:	4654      	mov	r4, sl
   1401c:	e7f3      	b.n	14006 <z_impl_k_poll+0x286>
   1401e:	bf00      	nop
   14020:	20001f4c 	.word	0x20001f4c
		add_event(&event->signal->poll_events, event, poller);
   14024:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   14028:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1402c:	4598      	cmp	r8, r3
   1402e:	d02b      	beq.n	14088 <z_impl_k_poll+0x308>
   14030:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   14034:	b343      	cbz	r3, 14088 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   14036:	6898      	ldr	r0, [r3, #8]
   14038:	f002 fdd6 	bl	16be8 <poller_thread>
   1403c:	4682      	mov	sl, r0
   1403e:	4638      	mov	r0, r7
   14040:	f002 fdd2 	bl	16be8 <poller_thread>
   14044:	4601      	mov	r1, r0
   14046:	900a      	str	r0, [sp, #40]	; 0x28
   14048:	4650      	mov	r0, sl
   1404a:	f002 fbba 	bl	167c2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1404e:	2800      	cmp	r0, #0
   14050:	dc1a      	bgt.n	14088 <z_impl_k_poll+0x308>
	return list->head == list;
   14052:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14056:	45d0      	cmp	r8, sl
   14058:	d02c      	beq.n	140b4 <z_impl_k_poll+0x334>
   1405a:	4653      	mov	r3, sl
   1405c:	46a2      	mov	sl, r4
   1405e:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14060:	b374      	cbz	r4, 140c0 <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   14062:	68a0      	ldr	r0, [r4, #8]
   14064:	f002 fdc0 	bl	16be8 <poller_thread>
   14068:	4601      	mov	r1, r0
   1406a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1406c:	f002 fba9 	bl	167c2 <z_sched_prio_cmp>
   14070:	2800      	cmp	r0, #0
   14072:	dc13      	bgt.n	1409c <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14074:	b334      	cbz	r4, 140c4 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   14076:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1407a:	429c      	cmp	r4, r3
   1407c:	d02d      	beq.n	140da <z_impl_k_poll+0x35a>
   1407e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14080:	2c00      	cmp	r4, #0
   14082:	d1ed      	bne.n	14060 <z_impl_k_poll+0x2e0>
   14084:	4654      	mov	r4, sl
   14086:	e01e      	b.n	140c6 <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   14088:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1408c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1408e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   14092:	6063      	str	r3, [r4, #4]
	tail->next = node;
   14094:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14096:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1409a:	e73c      	b.n	13f16 <z_impl_k_poll+0x196>
   1409c:	4623      	mov	r3, r4
   1409e:	4654      	mov	r4, sl
   140a0:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   140a2:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   140a4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   140a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   140a8:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   140ac:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   140ae:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   140b2:	e730      	b.n	13f16 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   140b4:	f04f 0a00 	mov.w	sl, #0
   140b8:	4653      	mov	r3, sl
   140ba:	46a2      	mov	sl, r4
   140bc:	461c      	mov	r4, r3
   140be:	e7cf      	b.n	14060 <z_impl_k_poll+0x2e0>
   140c0:	4654      	mov	r4, sl
   140c2:	e000      	b.n	140c6 <z_impl_k_poll+0x346>
   140c4:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   140c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   140ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
   140cc:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   140d0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   140d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   140d4:	f8c8 4004 	str.w	r4, [r8, #4]
}
   140d8:	e71d      	b.n	13f16 <z_impl_k_poll+0x196>
   140da:	4654      	mov	r4, sl
   140dc:	e7f3      	b.n	140c6 <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   140de:	f8d4 a010 	ldr.w	sl, [r4, #16]
   140e2:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   140e6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   140ea:	4598      	cmp	r8, r3
   140ec:	d02b      	beq.n	14146 <z_impl_k_poll+0x3c6>
   140ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   140f2:	b343      	cbz	r3, 14146 <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   140f4:	6898      	ldr	r0, [r3, #8]
   140f6:	f002 fd77 	bl	16be8 <poller_thread>
   140fa:	900b      	str	r0, [sp, #44]	; 0x2c
   140fc:	4638      	mov	r0, r7
   140fe:	f002 fd73 	bl	16be8 <poller_thread>
   14102:	4601      	mov	r1, r0
   14104:	900a      	str	r0, [sp, #40]	; 0x28
   14106:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14108:	f002 fb5b 	bl	167c2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1410c:	2800      	cmp	r0, #0
   1410e:	dc1a      	bgt.n	14146 <z_impl_k_poll+0x3c6>
	return list->head == list;
   14110:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14114:	45d0      	cmp	r8, sl
   14116:	d02c      	beq.n	14172 <z_impl_k_poll+0x3f2>
   14118:	4653      	mov	r3, sl
   1411a:	46a2      	mov	sl, r4
   1411c:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1411e:	b374      	cbz	r4, 1417e <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   14120:	68a0      	ldr	r0, [r4, #8]
   14122:	f002 fd61 	bl	16be8 <poller_thread>
   14126:	4601      	mov	r1, r0
   14128:	980a      	ldr	r0, [sp, #40]	; 0x28
   1412a:	f002 fb4a 	bl	167c2 <z_sched_prio_cmp>
   1412e:	2800      	cmp	r0, #0
   14130:	dc13      	bgt.n	1415a <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14132:	b334      	cbz	r4, 14182 <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   14134:	f8d8 3004 	ldr.w	r3, [r8, #4]
   14138:	429c      	cmp	r4, r3
   1413a:	d02d      	beq.n	14198 <z_impl_k_poll+0x418>
   1413c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1413e:	2c00      	cmp	r4, #0
   14140:	d1ed      	bne.n	1411e <z_impl_k_poll+0x39e>
   14142:	4654      	mov	r4, sl
   14144:	e01e      	b.n	14184 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   14146:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1414a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1414c:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   14150:	6063      	str	r3, [r4, #4]
	tail->next = node;
   14152:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14154:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   14158:	e6dd      	b.n	13f16 <z_impl_k_poll+0x196>
   1415a:	4623      	mov	r3, r4
   1415c:	4654      	mov	r4, sl
   1415e:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   14160:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   14162:	6063      	str	r3, [r4, #4]
	node->next = successor;
   14164:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14166:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1416a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1416c:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   14170:	e6d1      	b.n	13f16 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14172:	f04f 0a00 	mov.w	sl, #0
   14176:	4653      	mov	r3, sl
   14178:	46a2      	mov	sl, r4
   1417a:	461c      	mov	r4, r3
   1417c:	e7cf      	b.n	1411e <z_impl_k_poll+0x39e>
   1417e:	4654      	mov	r4, sl
   14180:	e000      	b.n	14184 <z_impl_k_poll+0x404>
   14182:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   14184:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   14188:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1418a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1418e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   14190:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14192:	f8c8 4004 	str.w	r4, [r8, #4]
}
   14196:	e6be      	b.n	13f16 <z_impl_k_poll+0x196>
   14198:	4654      	mov	r4, sl
   1419a:	e7f3      	b.n	14184 <z_impl_k_poll+0x404>
   1419c:	f04f 0340 	mov.w	r3, #64	; 0x40
   141a0:	f3ef 8111 	mrs	r1, BASEPRI
   141a4:	f383 8812 	msr	BASEPRI_MAX, r3
   141a8:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   141ac:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   141b0:	b1cb      	cbz	r3, 141e6 <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   141b2:	2300      	movs	r3, #0
   141b4:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   141b8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   141bc:	4323      	orrs	r3, r4
   141be:	d045      	beq.n	1424c <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   141c0:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   141c4:	e9cd 3400 	strd	r3, r4, [sp]
   141c8:	4a3c      	ldr	r2, [pc, #240]	; (142bc <z_impl_k_poll+0x53c>)
   141ca:	483d      	ldr	r0, [pc, #244]	; (142c0 <z_impl_k_poll+0x540>)
   141cc:	f7ff fa04 	bl	135d8 <z_pend_curr>
   141d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   141d4:	f3ef 8c11 	mrs	ip, BASEPRI
   141d8:	f383 8812 	msr	BASEPRI_MAX, r3
   141dc:	f3bf 8f6f 	isb	sy
   141e0:	4661      	mov	r1, ip
	while (num_events--) {
   141e2:	465b      	mov	r3, fp
   141e4:	e04e      	b.n	14284 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   141e6:	4608      	mov	r0, r1
	while (num_events--) {
   141e8:	465b      	mov	r3, fp
   141ea:	e014      	b.n	14216 <z_impl_k_poll+0x496>
	return node->next != NULL;
   141ec:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   141ee:	b12a      	cbz	r2, 141fc <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   141f0:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   141f2:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   141f4:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   141f6:	2200      	movs	r2, #0
   141f8:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   141fa:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   141fc:	f380 8811 	msr	BASEPRI, r0
   14200:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   14204:	f04f 0340 	mov.w	r3, #64	; 0x40
   14208:	f3ef 8011 	mrs	r0, BASEPRI
   1420c:	f383 8812 	msr	BASEPRI_MAX, r3
   14210:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   14214:	463b      	mov	r3, r7
   14216:	1e5f      	subs	r7, r3, #1
   14218:	b193      	cbz	r3, 14240 <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   1421a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1421e:	009e      	lsls	r6, r3, #2
   14220:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   14224:	2200      	movs	r2, #0
   14226:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   14228:	7b5a      	ldrb	r2, [r3, #13]
   1422a:	f002 021f 	and.w	r2, r2, #31
   1422e:	2a08      	cmp	r2, #8
   14230:	d8e4      	bhi.n	141fc <z_impl_k_poll+0x47c>
   14232:	2401      	movs	r4, #1
   14234:	fa04 f202 	lsl.w	r2, r4, r2
   14238:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1423c:	d0de      	beq.n	141fc <z_impl_k_poll+0x47c>
   1423e:	e7d5      	b.n	141ec <z_impl_k_poll+0x46c>
	__asm__ volatile(
   14240:	f381 8811 	msr	BASEPRI, r1
   14244:	f3bf 8f6f 	isb	sy
		return 0;
   14248:	4618      	mov	r0, r3
   1424a:	e034      	b.n	142b6 <z_impl_k_poll+0x536>
   1424c:	f381 8811 	msr	BASEPRI, r1
   14250:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   14254:	f06f 000a 	mvn.w	r0, #10
   14258:	e02d      	b.n	142b6 <z_impl_k_poll+0x536>
	return node->next != NULL;
   1425a:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1425c:	b12a      	cbz	r2, 1426a <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   1425e:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   14260:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   14262:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   14264:	2200      	movs	r2, #0
   14266:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   14268:	605a      	str	r2, [r3, #4]
   1426a:	f381 8811 	msr	BASEPRI, r1
   1426e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   14272:	f04f 0340 	mov.w	r3, #64	; 0x40
   14276:	f3ef 8111 	mrs	r1, BASEPRI
   1427a:	f383 8812 	msr	BASEPRI_MAX, r3
   1427e:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   14282:	4623      	mov	r3, r4
   14284:	1e5c      	subs	r4, r3, #1
   14286:	b193      	cbz	r3, 142ae <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   14288:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1428c:	009f      	lsls	r7, r3, #2
   1428e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   14292:	2200      	movs	r2, #0
   14294:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   14296:	7b5a      	ldrb	r2, [r3, #13]
   14298:	f002 021f 	and.w	r2, r2, #31
   1429c:	2a08      	cmp	r2, #8
   1429e:	d8e4      	bhi.n	1426a <z_impl_k_poll+0x4ea>
   142a0:	2601      	movs	r6, #1
   142a2:	fa06 f202 	lsl.w	r2, r6, r2
   142a6:	f412 7f8b 	tst.w	r2, #278	; 0x116
   142aa:	d0de      	beq.n	1426a <z_impl_k_poll+0x4ea>
   142ac:	e7d5      	b.n	1425a <z_impl_k_poll+0x4da>
	__asm__ volatile(
   142ae:	f38c 8811 	msr	BASEPRI, ip
   142b2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   142b6:	b00d      	add	sp, #52	; 0x34
   142b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142bc:	2000045c 	.word	0x2000045c
   142c0:	20001f90 	.word	0x20001f90

000142c4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   142c4:	b538      	push	{r3, r4, r5, lr}
   142c6:	4603      	mov	r3, r0
	__asm__ volatile(
   142c8:	f04f 0240 	mov.w	r2, #64	; 0x40
   142cc:	f3ef 8511 	mrs	r5, BASEPRI
   142d0:	f382 8812 	msr	BASEPRI_MAX, r2
   142d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   142d8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   142da:	2201      	movs	r2, #1
   142dc:	6082      	str	r2, [r0, #8]
	return list->head == list;
   142de:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   142e0:	4283      	cmp	r3, r0
   142e2:	d011      	beq.n	14308 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   142e4:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   142e6:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   142e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   142ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   142ec:	2300      	movs	r3, #0
   142ee:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   142f0:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   142f2:	b148      	cbz	r0, 14308 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   142f4:	2101      	movs	r1, #1
   142f6:	f002 fcc7 	bl	16c88 <signal_poll_event>
   142fa:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   142fc:	4629      	mov	r1, r5
   142fe:	4805      	ldr	r0, [pc, #20]	; (14314 <z_impl_k_poll_signal_raise+0x50>)
   14300:	f7ff f806 	bl	13310 <z_reschedule>
	return rc;
}
   14304:	4620      	mov	r0, r4
   14306:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   14308:	f385 8811 	msr	BASEPRI, r5
   1430c:	f3bf 8f6f 	isb	sy
		return 0;
   14310:	2400      	movs	r4, #0
   14312:	e7f7      	b.n	14304 <z_impl_k_poll_signal_raise+0x40>
   14314:	20001f90 	.word	0x20001f90

00014318 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   14318:	b538      	push	{r3, r4, r5, lr}
   1431a:	4604      	mov	r4, r0
   1431c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1431e:	f002 f8fd 	bl	1651c <k_is_in_isr>
   14322:	b948      	cbnz	r0, 14338 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   14324:	4b05      	ldr	r3, [pc, #20]	; (1433c <z_thread_aligned_alloc+0x24>)
   14326:	689b      	ldr	r3, [r3, #8]
   14328:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1432c:	b118      	cbz	r0, 14336 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   1432e:	462a      	mov	r2, r5
   14330:	4621      	mov	r1, r4
   14332:	f002 fcdb 	bl	16cec <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   14336:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   14338:	2000      	movs	r0, #0
	return ret;
   1433a:	e7fc      	b.n	14336 <z_thread_aligned_alloc+0x1e>
   1433c:	20001f4c 	.word	0x20001f4c

00014340 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   14340:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   14342:	4a03      	ldr	r2, [pc, #12]	; (14350 <boot_banner+0x10>)
   14344:	4903      	ldr	r1, [pc, #12]	; (14354 <boot_banner+0x14>)
   14346:	4804      	ldr	r0, [pc, #16]	; (14358 <boot_banner+0x18>)
   14348:	f000 f874 	bl	14434 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   1434c:	bd08      	pop	{r3, pc}
   1434e:	bf00      	nop
   14350:	00017078 	.word	0x00017078
   14354:	000173e0 	.word	0x000173e0
   14358:	000173f0 	.word	0x000173f0

0001435c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1435c:	b510      	push	{r4, lr}
   1435e:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   14360:	4b08      	ldr	r3, [pc, #32]	; (14384 <k_sys_work_q_init+0x28>)
   14362:	9302      	str	r3, [sp, #8]
   14364:	2400      	movs	r4, #0
   14366:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1436a:	ab02      	add	r3, sp, #8
   1436c:	9300      	str	r3, [sp, #0]
   1436e:	f04f 33ff 	mov.w	r3, #4294967295
   14372:	f44f 6200 	mov.w	r2, #2048	; 0x800
   14376:	4904      	ldr	r1, [pc, #16]	; (14388 <k_sys_work_q_init+0x2c>)
   14378:	4804      	ldr	r0, [pc, #16]	; (1438c <k_sys_work_q_init+0x30>)
   1437a:	f7fe ff29 	bl	131d0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1437e:	4620      	mov	r0, r4
   14380:	b004      	add	sp, #16
   14382:	bd10      	pop	{r4, pc}
   14384:	00017418 	.word	0x00017418
   14388:	20003fc0 	.word	0x20003fc0
   1438c:	200016d8 	.word	0x200016d8

00014390 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   14390:	4602      	mov	r2, r0
   14392:	b1b0      	cbz	r0, 143c2 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   14394:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   14396:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1439a:	2b02      	cmp	r3, #2
   1439c:	d00b      	beq.n	143b6 <sys_notify_validate+0x26>
   1439e:	2b03      	cmp	r3, #3
   143a0:	d004      	beq.n	143ac <sys_notify_validate+0x1c>
   143a2:	2b01      	cmp	r3, #1
   143a4:	d004      	beq.n	143b0 <sys_notify_validate+0x20>
   143a6:	f06f 0015 	mvn.w	r0, #21
   143aa:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   143ac:	6803      	ldr	r3, [r0, #0]
   143ae:	b15b      	cbz	r3, 143c8 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   143b0:	2000      	movs	r0, #0
   143b2:	6090      	str	r0, [r2, #8]
   143b4:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   143b6:	6803      	ldr	r3, [r0, #0]
   143b8:	2b00      	cmp	r3, #0
   143ba:	d1f9      	bne.n	143b0 <sys_notify_validate+0x20>
			rv = -EINVAL;
   143bc:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   143c0:	4770      	bx	lr
		return -EINVAL;
   143c2:	f06f 0015 	mvn.w	r0, #21
   143c6:	4770      	bx	lr
			rv = -EINVAL;
   143c8:	f06f 0015 	mvn.w	r0, #21
   143cc:	4770      	bx	lr

000143ce <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   143ce:	b510      	push	{r4, lr}
   143d0:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   143d2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   143d4:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   143d8:	6081      	str	r1, [r0, #8]
	switch (method) {
   143da:	2a02      	cmp	r2, #2
   143dc:	d004      	beq.n	143e8 <sys_notify_finalize+0x1a>
   143de:	2a03      	cmp	r2, #3
   143e0:	d105      	bne.n	143ee <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   143e2:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   143e4:	2000      	movs	r0, #0
		break;
   143e6:	e004      	b.n	143f2 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   143e8:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   143ea:	2400      	movs	r4, #0
		break;
   143ec:	e001      	b.n	143f2 <sys_notify_finalize+0x24>
	switch (method) {
   143ee:	2400      	movs	r4, #0
   143f0:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   143f2:	2200      	movs	r2, #0
   143f4:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   143f6:	b108      	cbz	r0, 143fc <sys_notify_finalize+0x2e>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   143f8:	f7ff ff64 	bl	142c4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   143fc:	4620      	mov	r0, r4
   143fe:	bd10      	pop	{r4, pc}

00014400 <arch_printk_char_out>:
}
   14400:	2000      	movs	r0, #0
   14402:	4770      	bx	lr

00014404 <str_out>:
{
   14404:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   14406:	680c      	ldr	r4, [r1, #0]
   14408:	b154      	cbz	r4, 14420 <str_out+0x1c>
   1440a:	688a      	ldr	r2, [r1, #8]
   1440c:	684b      	ldr	r3, [r1, #4]
   1440e:	429a      	cmp	r2, r3
   14410:	da06      	bge.n	14420 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   14412:	3b01      	subs	r3, #1
   14414:	429a      	cmp	r2, r3
   14416:	d008      	beq.n	1442a <str_out+0x26>
		ctx->str[ctx->count++] = c;
   14418:	1c53      	adds	r3, r2, #1
   1441a:	608b      	str	r3, [r1, #8]
   1441c:	54a0      	strb	r0, [r4, r2]
   1441e:	e002      	b.n	14426 <str_out+0x22>
		ctx->count++;
   14420:	688b      	ldr	r3, [r1, #8]
   14422:	3301      	adds	r3, #1
   14424:	608b      	str	r3, [r1, #8]
}
   14426:	bc10      	pop	{r4}
   14428:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   1442a:	1c53      	adds	r3, r2, #1
   1442c:	608b      	str	r3, [r1, #8]
   1442e:	2300      	movs	r3, #0
   14430:	54a3      	strb	r3, [r4, r2]
   14432:	e7f8      	b.n	14426 <str_out+0x22>

00014434 <printk>:
{
   14434:	b40f      	push	{r0, r1, r2, r3}
   14436:	b500      	push	{lr}
   14438:	b083      	sub	sp, #12
   1443a:	a904      	add	r1, sp, #16
   1443c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   14440:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   14442:	f7f9 fd4d 	bl	dee0 <vprintk>
}
   14446:	b003      	add	sp, #12
   14448:	f85d eb04 	ldr.w	lr, [sp], #4
   1444c:	b004      	add	sp, #16
   1444e:	4770      	bx	lr

00014450 <snprintk>:
{
   14450:	b40c      	push	{r2, r3}
   14452:	b500      	push	{lr}
   14454:	b083      	sub	sp, #12
   14456:	ab04      	add	r3, sp, #16
   14458:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1445c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1445e:	f7f9 fd4f 	bl	df00 <vsnprintk>
}
   14462:	b003      	add	sp, #12
   14464:	f85d eb04 	ldr.w	lr, [sp], #4
   14468:	b002      	add	sp, #8
   1446a:	4770      	bx	lr

0001446c <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   1446c:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14470:	8b01      	ldrh	r1, [r0, #24]
   14472:	f021 0107 	bic.w	r1, r1, #7
   14476:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   14478:	8301      	strh	r1, [r0, #24]
}
   1447a:	4770      	bx	lr

0001447c <notify_monitors>:
{
   1447c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14480:	4606      	mov	r6, r0
   14482:	460f      	mov	r7, r1
   14484:	4690      	mov	r8, r2
	return list->head;
   14486:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   14488:	b119      	cbz	r1, 14492 <notify_monitors+0x16>
   1448a:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1448c:	b131      	cbz	r1, 1449c <notify_monitors+0x20>
	return node->next;
   1448e:	680c      	ldr	r4, [r1, #0]
   14490:	e004      	b.n	1449c <notify_monitors+0x20>
   14492:	460c      	mov	r4, r1
   14494:	e002      	b.n	1449c <notify_monitors+0x20>
   14496:	4623      	mov	r3, r4
   14498:	4621      	mov	r1, r4
   1449a:	461c      	mov	r4, r3
   1449c:	b159      	cbz	r1, 144b6 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   1449e:	684d      	ldr	r5, [r1, #4]
   144a0:	4643      	mov	r3, r8
   144a2:	463a      	mov	r2, r7
   144a4:	4630      	mov	r0, r6
   144a6:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   144a8:	2c00      	cmp	r4, #0
   144aa:	d0f4      	beq.n	14496 <notify_monitors+0x1a>
   144ac:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   144ae:	2c00      	cmp	r4, #0
   144b0:	d0f2      	beq.n	14498 <notify_monitors+0x1c>
	return node->next;
   144b2:	6823      	ldr	r3, [r4, #0]
   144b4:	e7f0      	b.n	14498 <notify_monitors+0x1c>
}
   144b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000144ba <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   144ba:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   144bc:	f013 0307 	ands.w	r3, r3, #7
   144c0:	d103      	bne.n	144ca <process_recheck+0x10>
	return list->head;
   144c2:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   144c4:	b10a      	cbz	r2, 144ca <process_recheck+0x10>
		evt = EVT_START;
   144c6:	2003      	movs	r0, #3
   144c8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   144ca:	2b02      	cmp	r3, #2
   144cc:	d003      	beq.n	144d6 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   144ce:	2b01      	cmp	r3, #1
   144d0:	d006      	beq.n	144e0 <process_recheck+0x26>
	int evt = EVT_NOP;
   144d2:	2000      	movs	r0, #0
   144d4:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   144d6:	8b42      	ldrh	r2, [r0, #26]
   144d8:	2a00      	cmp	r2, #0
   144da:	d1f8      	bne.n	144ce <process_recheck+0x14>
		evt = EVT_STOP;
   144dc:	2004      	movs	r0, #4
   144de:	4770      	bx	lr
   144e0:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   144e2:	b10b      	cbz	r3, 144e8 <process_recheck+0x2e>
		evt = EVT_RESET;
   144e4:	2005      	movs	r0, #5
}
   144e6:	4770      	bx	lr
	int evt = EVT_NOP;
   144e8:	2000      	movs	r0, #0
   144ea:	4770      	bx	lr

000144ec <process_complete>:
{
   144ec:	b538      	push	{r3, r4, r5, lr}
   144ee:	4604      	mov	r4, r0
   144f0:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   144f2:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   144f4:	2a00      	cmp	r2, #0
   144f6:	db07      	blt.n	14508 <process_complete+0x1c>
   144f8:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   144fc:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   144fe:	2a01      	cmp	r2, #1
   14500:	d90e      	bls.n	14520 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   14502:	2b04      	cmp	r3, #4
   14504:	d032      	beq.n	1456c <process_complete+0x80>
}
   14506:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   14508:	e9d0 0100 	ldrd	r0, r1, [r0]
   1450c:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   14510:	2300      	movs	r3, #0
   14512:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   14514:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   14516:	2101      	movs	r1, #1
   14518:	4620      	mov	r0, r4
   1451a:	f7ff ffa7 	bl	1446c <set_state>
   1451e:	e7f2      	b.n	14506 <process_complete+0x1a>
		*clients = mgr->clients;
   14520:	e9d0 0100 	ldrd	r0, r1, [r0]
   14524:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   14528:	2200      	movs	r2, #0
   1452a:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   1452c:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   1452e:	2b06      	cmp	r3, #6
   14530:	d117      	bne.n	14562 <process_complete+0x76>
	return list->head;
   14532:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   14534:	b13b      	cbz	r3, 14546 <process_complete+0x5a>
				mgr->refs += 1U;
   14536:	8b62      	ldrh	r2, [r4, #26]
   14538:	3201      	adds	r2, #1
   1453a:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1453c:	2b00      	cmp	r3, #0
   1453e:	d0f9      	beq.n	14534 <process_complete+0x48>
	return node->next;
   14540:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   14542:	2b00      	cmp	r3, #0
   14544:	d1f6      	bne.n	14534 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   14546:	2102      	movs	r1, #2
   14548:	4620      	mov	r0, r4
   1454a:	f7ff ff8f 	bl	1446c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1454e:	4620      	mov	r0, r4
   14550:	f7ff ffb3 	bl	144ba <process_recheck>
   14554:	2800      	cmp	r0, #0
   14556:	d0d6      	beq.n	14506 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   14558:	8b23      	ldrh	r3, [r4, #24]
   1455a:	f043 0320 	orr.w	r3, r3, #32
   1455e:	8323      	strh	r3, [r4, #24]
   14560:	e7d1      	b.n	14506 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   14562:	2100      	movs	r1, #0
   14564:	4620      	mov	r0, r4
   14566:	f7ff ff81 	bl	1446c <set_state>
   1456a:	e7f0      	b.n	1454e <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   1456c:	2100      	movs	r1, #0
   1456e:	f7ff ff7d 	bl	1446c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   14572:	4620      	mov	r0, r4
   14574:	f7ff ffa1 	bl	144ba <process_recheck>
   14578:	2800      	cmp	r0, #0
   1457a:	d0c4      	beq.n	14506 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1457c:	8b23      	ldrh	r3, [r4, #24]
   1457e:	f043 0320 	orr.w	r3, r3, #32
   14582:	8323      	strh	r3, [r4, #24]
}
   14584:	e7bf      	b.n	14506 <process_complete+0x1a>

00014586 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   14586:	b158      	cbz	r0, 145a0 <validate_args+0x1a>
{
   14588:	b510      	push	{r4, lr}
   1458a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1458c:	b159      	cbz	r1, 145a6 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   1458e:	1d08      	adds	r0, r1, #4
   14590:	f7ff fefe 	bl	14390 <sys_notify_validate>
	if ((rv == 0)
   14594:	b918      	cbnz	r0, 1459e <validate_args+0x18>
	    && ((cli->notify.flags
   14596:	68a3      	ldr	r3, [r4, #8]
   14598:	f033 0303 	bics.w	r3, r3, #3
   1459c:	d106      	bne.n	145ac <validate_args+0x26>
}
   1459e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   145a0:	f06f 0015 	mvn.w	r0, #21
}
   145a4:	4770      	bx	lr
		return -EINVAL;
   145a6:	f06f 0015 	mvn.w	r0, #21
   145aa:	e7f8      	b.n	1459e <validate_args+0x18>
		rv = -EINVAL;
   145ac:	f06f 0015 	mvn.w	r0, #21
   145b0:	e7f5      	b.n	1459e <validate_args+0x18>

000145b2 <notify_one>:
{
   145b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145b6:	4607      	mov	r7, r0
   145b8:	460c      	mov	r4, r1
   145ba:	4616      	mov	r6, r2
   145bc:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   145be:	4619      	mov	r1, r3
   145c0:	1d20      	adds	r0, r4, #4
   145c2:	f7ff ff04 	bl	143ce <sys_notify_finalize>
	if (cb) {
   145c6:	b128      	cbz	r0, 145d4 <notify_one+0x22>
   145c8:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   145ca:	462b      	mov	r3, r5
   145cc:	4632      	mov	r2, r6
   145ce:	4621      	mov	r1, r4
   145d0:	4638      	mov	r0, r7
   145d2:	47c0      	blx	r8
}
   145d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000145d8 <notify_all>:
{
   145d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   145dc:	4681      	mov	r9, r0
   145de:	460c      	mov	r4, r1
   145e0:	4690      	mov	r8, r2
   145e2:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   145e4:	e005      	b.n	145f2 <notify_all+0x1a>
	list->tail = node;
   145e6:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   145e8:	463b      	mov	r3, r7
   145ea:	4642      	mov	r2, r8
   145ec:	4648      	mov	r0, r9
   145ee:	f7ff ffe0 	bl	145b2 <notify_one>
	return list->head;
   145f2:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   145f4:	b129      	cbz	r1, 14602 <notify_all+0x2a>
	return node->next;
   145f6:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   145f8:	6025      	str	r5, [r4, #0]
	return list->tail;
   145fa:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   145fc:	428e      	cmp	r6, r1
   145fe:	d1f3      	bne.n	145e8 <notify_all+0x10>
   14600:	e7f1      	b.n	145e6 <notify_all+0xe>
}
   14602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014606 <transition_complete>:
{
   14606:	b510      	push	{r4, lr}
	__asm__ volatile(
   14608:	f04f 0440 	mov.w	r4, #64	; 0x40
   1460c:	f3ef 8211 	mrs	r2, BASEPRI
   14610:	f384 8812 	msr	BASEPRI_MAX, r4
   14614:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   14618:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   1461a:	2101      	movs	r1, #1
   1461c:	f7f9 fc86 	bl	df2c <process_event>
}
   14620:	bd10      	pop	{r4, pc}

00014622 <onoff_manager_init>:
	if ((mgr == NULL)
   14622:	4603      	mov	r3, r0
   14624:	b168      	cbz	r0, 14642 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   14626:	b179      	cbz	r1, 14648 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   14628:	680a      	ldr	r2, [r1, #0]
   1462a:	b182      	cbz	r2, 1464e <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   1462c:	684a      	ldr	r2, [r1, #4]
   1462e:	b18a      	cbz	r2, 14654 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   14630:	2000      	movs	r0, #0
   14632:	6018      	str	r0, [r3, #0]
   14634:	6058      	str	r0, [r3, #4]
   14636:	6098      	str	r0, [r3, #8]
   14638:	60d8      	str	r0, [r3, #12]
   1463a:	6158      	str	r0, [r3, #20]
   1463c:	6198      	str	r0, [r3, #24]
   1463e:	6119      	str	r1, [r3, #16]
	return 0;
   14640:	4770      	bx	lr
		return -EINVAL;
   14642:	f06f 0015 	mvn.w	r0, #21
   14646:	4770      	bx	lr
   14648:	f06f 0015 	mvn.w	r0, #21
   1464c:	4770      	bx	lr
   1464e:	f06f 0015 	mvn.w	r0, #21
   14652:	4770      	bx	lr
   14654:	f06f 0015 	mvn.w	r0, #21
}
   14658:	4770      	bx	lr

0001465a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1465a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1465c:	4604      	mov	r4, r0
   1465e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   14660:	f7ff ff91 	bl	14586 <validate_args>

	if (rv < 0) {
   14664:	1e06      	subs	r6, r0, #0
   14666:	db37      	blt.n	146d8 <onoff_request+0x7e>
   14668:	f04f 0340 	mov.w	r3, #64	; 0x40
   1466c:	f3ef 8211 	mrs	r2, BASEPRI
   14670:	f383 8812 	msr	BASEPRI_MAX, r3
   14674:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14678:	8b25      	ldrh	r5, [r4, #24]
   1467a:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1467e:	8b63      	ldrh	r3, [r4, #26]
   14680:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14684:	428b      	cmp	r3, r1
   14686:	d02f      	beq.n	146e8 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   14688:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   1468a:	2d02      	cmp	r5, #2
   1468c:	d00c      	beq.n	146a8 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   1468e:	b18d      	cbz	r5, 146b4 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   14690:	2d04      	cmp	r5, #4
   14692:	d00f      	beq.n	146b4 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   14694:	2d06      	cmp	r5, #6
   14696:	d00d      	beq.n	146b4 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   14698:	2d05      	cmp	r5, #5
   1469a:	d01f      	beq.n	146dc <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   1469c:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   146a0:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   146a2:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   146a4:	4608      	mov	r0, r1
   146a6:	e00a      	b.n	146be <onoff_request+0x64>
		mgr->refs += 1U;
   146a8:	3301      	adds	r3, #1
   146aa:	8363      	strh	r3, [r4, #26]
		notify = true;
   146ac:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   146ae:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   146b0:	4618      	mov	r0, r3
   146b2:	e004      	b.n	146be <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   146b4:	fab5 f385 	clz	r3, r5
   146b8:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   146ba:	2100      	movs	r1, #0
		add_client = true;
   146bc:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   146be:	b128      	cbz	r0, 146cc <onoff_request+0x72>
	parent->next = child;
   146c0:	2000      	movs	r0, #0
   146c2:	6038      	str	r0, [r7, #0]
	return list->tail;
   146c4:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   146c6:	b1a8      	cbz	r0, 146f4 <onoff_request+0x9a>
	parent->next = child;
   146c8:	6007      	str	r7, [r0, #0]
	list->tail = node;
   146ca:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   146cc:	b9ab      	cbnz	r3, 146fa <onoff_request+0xa0>
	__asm__ volatile(
   146ce:	f382 8811 	msr	BASEPRI, r2
   146d2:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   146d6:	b9a9      	cbnz	r1, 14704 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   146d8:	4630      	mov	r0, r6
   146da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   146dc:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   146e0:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   146e2:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   146e4:	4608      	mov	r0, r1
   146e6:	e7ea      	b.n	146be <onoff_request+0x64>
		rv = -EAGAIN;
   146e8:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   146ec:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   146ee:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   146f0:	4608      	mov	r0, r1
   146f2:	e7e4      	b.n	146be <onoff_request+0x64>
   146f4:	6067      	str	r7, [r4, #4]
	list->head = node;
   146f6:	6027      	str	r7, [r4, #0]
}
   146f8:	e7e8      	b.n	146cc <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   146fa:	2102      	movs	r1, #2
   146fc:	4620      	mov	r0, r4
   146fe:	f7f9 fc15 	bl	df2c <process_event>
   14702:	e7e9      	b.n	146d8 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   14704:	2300      	movs	r3, #0
   14706:	462a      	mov	r2, r5
   14708:	4639      	mov	r1, r7
   1470a:	4620      	mov	r0, r4
   1470c:	f7ff ff51 	bl	145b2 <notify_one>
   14710:	e7e2      	b.n	146d8 <onoff_request+0x7e>

00014712 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   14712:	b508      	push	{r3, lr}
   14714:	4604      	mov	r4, r0
   14716:	4608      	mov	r0, r1
   14718:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1471a:	461a      	mov	r2, r3
   1471c:	47a0      	blx	r4
	return z_impl_z_current_get();
   1471e:	f7ff f951 	bl	139c4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   14722:	f7fa fde3 	bl	f2ec <z_impl_k_thread_abort>

00014726 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   14726:	00c9      	lsls	r1, r1, #3
   14728:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   1472a:	4408      	add	r0, r1
   1472c:	4770      	bx	lr

0001472e <free_list_remove_bidx>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1472e:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   14732:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   14734:	4299      	cmp	r1, r3
   14736:	d00e      	beq.n	14756 <free_list_remove_bidx+0x28>
{
   14738:	b410      	push	{r4}
   1473a:	00cc      	lsls	r4, r1, #3
   1473c:	4404      	add	r4, r0
   1473e:	88a1      	ldrh	r1, [r4, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   14740:	3204      	adds	r2, #4
   14742:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   14746:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   14748:	3206      	adds	r2, #6
   1474a:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   1474c:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1474e:	3304      	adds	r3, #4
   14750:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   14752:	bc10      	pop	{r4}
   14754:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   14756:	2301      	movs	r3, #1
   14758:	fa03 f102 	lsl.w	r1, r3, r2
   1475c:	68c3      	ldr	r3, [r0, #12]
   1475e:	ea23 0301 	bic.w	r3, r3, r1
   14762:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   14764:	3204      	adds	r2, #4
   14766:	2300      	movs	r3, #0
   14768:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   1476c:	4770      	bx	lr

0001476e <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1476e:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   14770:	1d13      	adds	r3, r2, #4
   14772:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   14776:	b984      	cbnz	r4, 1479a <free_list_add_bidx+0x2c>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   14778:	2301      	movs	r3, #1
   1477a:	fa03 f402 	lsl.w	r4, r3, r2
   1477e:	68c3      	ldr	r3, [r0, #12]
   14780:	4323      	orrs	r3, r4
   14782:	60c3      	str	r3, [r0, #12]
		b->next = c;
   14784:	3204      	adds	r2, #4
   14786:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   1478a:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   1478c:	1d1a      	adds	r2, r3, #4
   1478e:	b289      	uxth	r1, r1
   14790:	5281      	strh	r1, [r0, r2]
   14792:	3306      	adds	r3, #6
   14794:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   14796:	bc70      	pop	{r4, r5, r6}
   14798:	4770      	bx	lr
	void *cmem = &buf[c];
   1479a:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   1479c:	3204      	adds	r2, #4
   1479e:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   147a0:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
   147a2:	1d2e      	adds	r6, r5, #4
   147a4:	5383      	strh	r3, [r0, r6]
   147a6:	3506      	adds	r5, #6
   147a8:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
   147aa:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   147ac:	3306      	adds	r3, #6
   147ae:	b289      	uxth	r1, r1
   147b0:	52c1      	strh	r1, [r0, r3]
   147b2:	5281      	strh	r1, [r0, r2]
   147b4:	e7ef      	b.n	14796 <free_list_add_bidx+0x28>

000147b6 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   147b6:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   147b8:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   147ba:	3302      	adds	r3, #2
   147bc:	5ac4      	ldrh	r4, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   147be:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
   147c0:	1a89      	subs	r1, r1, r2
   147c2:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   147c6:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   147c8:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   147ca:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
   147cc:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
   147ce:	3402      	adds	r4, #2
   147d0:	5303      	strh	r3, [r0, r4]
   147d2:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   147d6:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   147da:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
   147dc:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   147e0:	bc30      	pop	{r4, r5}
   147e2:	4770      	bx	lr

000147e4 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   147e4:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   147e6:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   147e8:	3102      	adds	r1, #2
   147ea:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
   147ec:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
   147ee:	3402      	adds	r4, #2
   147f0:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   147f2:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   147f4:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   147f8:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
   147fa:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
   147fc:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
   147fe:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   14802:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   14806:	bc30      	pop	{r4, r5}
   14808:	4770      	bx	lr

0001480a <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1480a:	3904      	subs	r1, #4
   1480c:	1a08      	subs	r0, r1, r0
}
   1480e:	08c0      	lsrs	r0, r0, #3
   14810:	4770      	bx	lr

00014812 <free_list_remove>:
{
   14812:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   14814:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   14818:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1481a:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1481c:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   14820:	f1c2 021f 	rsb	r2, r2, #31
   14824:	f7ff ff83 	bl	1472e <free_list_remove_bidx>
}
   14828:	bd08      	pop	{r3, pc}

0001482a <free_list_add>:
{
   1482a:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   1482c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   14830:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   14832:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   14834:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   14838:	f1c2 021f 	rsb	r2, r2, #31
   1483c:	f7ff ff97 	bl	1476e <free_list_add_bidx>
}
   14840:	bd08      	pop	{r3, pc}

00014842 <free_chunk>:
{
   14842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14844:	4604      	mov	r4, r0
   14846:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   14848:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   1484a:	1cb7      	adds	r7, r6, #2
   1484c:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   1484e:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   14852:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   14856:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   14858:	f013 0f01 	tst.w	r3, #1
   1485c:	d00c      	beq.n	14878 <free_chunk+0x36>
   1485e:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   14860:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   14862:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   14866:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   14868:	f013 0f01 	tst.w	r3, #1
   1486c:	d00e      	beq.n	1488c <free_chunk+0x4a>
	free_list_add(h, c);
   1486e:	4629      	mov	r1, r5
   14870:	4620      	mov	r0, r4
   14872:	f7ff ffda 	bl	1482a <free_list_add>
}
   14876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   14878:	f7ff ffcb 	bl	14812 <free_list_remove>
   1487c:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   1487e:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   14882:	4629      	mov	r1, r5
   14884:	4620      	mov	r0, r4
   14886:	f7ff ffad 	bl	147e4 <merge_chunks>
   1488a:	e7e8      	b.n	1485e <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   1488c:	4620      	mov	r0, r4
   1488e:	f7ff ffc0 	bl	14812 <free_list_remove>
   14892:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   14894:	462a      	mov	r2, r5
   14896:	1a69      	subs	r1, r5, r1
   14898:	4620      	mov	r0, r4
   1489a:	f7ff ffa3 	bl	147e4 <merge_chunks>
   1489e:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   148a0:	1aed      	subs	r5, r5, r3
   148a2:	e7e4      	b.n	1486e <free_chunk+0x2c>

000148a4 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   148a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
   148a6:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   148aa:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   148ae:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   148b2:	b1b7      	cbz	r7, 148e2 <alloc_chunk+0x3e>
   148b4:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   148b8:	2603      	movs	r6, #3
		do {
			chunkid_t c = b->next;
   148ba:	1d14      	adds	r4, r2, #4
   148bc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   148c0:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
   148c2:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   148c6:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
   148ca:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
   148ce:	d912      	bls.n	148f6 <alloc_chunk+0x52>
   148d0:	4405      	add	r5, r0
   148d2:	88ec      	ldrh	r4, [r5, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   148d4:	1d15      	adds	r5, r2, #4
   148d6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   148da:	3e01      	subs	r6, #1
   148dc:	d001      	beq.n	148e2 <alloc_chunk+0x3e>
   148de:	42a7      	cmp	r7, r4
   148e0:	d1eb      	bne.n	148ba <alloc_chunk+0x16>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   148e2:	68c4      	ldr	r4, [r0, #12]
   148e4:	f1c3 0220 	rsb	r2, r3, #32
   148e8:	2301      	movs	r3, #1
   148ea:	4093      	lsls	r3, r2
   148ec:	425b      	negs	r3, r3

	if (bmask != 0U) {
   148ee:	401c      	ands	r4, r3
   148f0:	d105      	bne.n	148fe <alloc_chunk+0x5a>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   148f2:	4620      	mov	r0, r4
   148f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
   148f6:	4621      	mov	r1, r4
   148f8:	f7ff ff19 	bl	1472e <free_list_remove_bidx>
				return c;
   148fc:	e7f9      	b.n	148f2 <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
   148fe:	fa94 f2a4 	rbit	r2, r4
   14902:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   14906:	1d13      	adds	r3, r2, #4
   14908:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1490c:	4621      	mov	r1, r4
   1490e:	f7ff ff0e 	bl	1472e <free_list_remove_bidx>
		return c;
   14912:	e7ee      	b.n	148f2 <alloc_chunk+0x4e>

00014914 <sys_heap_free>:
	if (mem == NULL) {
   14914:	b179      	cbz	r1, 14936 <sys_heap_free+0x22>
{
   14916:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   14918:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   1491a:	4620      	mov	r0, r4
   1491c:	f7ff ff75 	bl	1480a <mem_to_chunkid>
   14920:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   14922:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   14926:	8853      	ldrh	r3, [r2, #2]
   14928:	f023 0301 	bic.w	r3, r3, #1
   1492c:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   1492e:	4620      	mov	r0, r4
   14930:	f7ff ff87 	bl	14842 <free_chunk>
}
   14934:	bd10      	pop	{r4, pc}
   14936:	4770      	bx	lr

00014938 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   14938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   1493a:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1493c:	b341      	cbz	r1, 14990 <sys_heap_alloc+0x58>
   1493e:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   14940:	68aa      	ldr	r2, [r5, #8]
   14942:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   14946:	d925      	bls.n	14994 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   14948:	330b      	adds	r3, #11
   1494a:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1494c:	4621      	mov	r1, r4
   1494e:	4628      	mov	r0, r5
   14950:	f7ff ffa8 	bl	148a4 <alloc_chunk>
	if (c == 0U) {
   14954:	4607      	mov	r7, r0
   14956:	b1f8      	cbz	r0, 14998 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   14958:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   1495a:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   1495e:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   14960:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   14964:	d309      	bcc.n	1497a <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   14966:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   14968:	885a      	ldrh	r2, [r3, #2]
   1496a:	f042 0201 	orr.w	r2, r2, #1
   1496e:	805a      	strh	r2, [r3, #2]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
   14970:	4639      	mov	r1, r7
   14972:	4628      	mov	r0, r5
   14974:	f7ff fed7 	bl	14726 <chunk_mem>
}
   14978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   1497a:	4404      	add	r4, r0
   1497c:	4622      	mov	r2, r4
   1497e:	4601      	mov	r1, r0
   14980:	4628      	mov	r0, r5
   14982:	f7ff ff18 	bl	147b6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   14986:	4621      	mov	r1, r4
   14988:	4628      	mov	r0, r5
   1498a:	f7ff ff4e 	bl	1482a <free_list_add>
   1498e:	e7ea      	b.n	14966 <sys_heap_alloc+0x2e>
		return NULL;
   14990:	2000      	movs	r0, #0
   14992:	e7f1      	b.n	14978 <sys_heap_alloc+0x40>
   14994:	2000      	movs	r0, #0
   14996:	e7ef      	b.n	14978 <sys_heap_alloc+0x40>
		return NULL;
   14998:	2000      	movs	r0, #0
   1499a:	e7ed      	b.n	14978 <sys_heap_alloc+0x40>

0001499c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1499c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   149a0:	460d      	mov	r5, r1
   149a2:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   149a4:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   149a6:	424b      	negs	r3, r1
   149a8:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   149ac:	ea31 0303 	bics.w	r3, r1, r3
   149b0:	d03e      	beq.n	14a30 <sys_heap_aligned_alloc+0x94>
		align -= rew;
   149b2:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   149b6:	f1b8 0f03 	cmp.w	r8, #3
   149ba:	d844      	bhi.n	14a46 <sys_heap_aligned_alloc+0xaa>
   149bc:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   149be:	2c00      	cmp	r4, #0
   149c0:	d057      	beq.n	14a72 <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   149c2:	68b3      	ldr	r3, [r6, #8]
   149c4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   149c8:	d955      	bls.n	14a76 <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   149ca:	1929      	adds	r1, r5, r4
   149cc:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   149ce:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   149d0:	08c9      	lsrs	r1, r1, #3
   149d2:	4630      	mov	r0, r6
   149d4:	f7ff ff66 	bl	148a4 <alloc_chunk>

	if (c0 == 0) {
   149d8:	4607      	mov	r7, r0
   149da:	2800      	cmp	r0, #0
   149dc:	d04d      	beq.n	14a7a <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   149de:	4601      	mov	r1, r0
   149e0:	4630      	mov	r0, r6
   149e2:	f7ff fea0 	bl	14726 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   149e6:	4440      	add	r0, r8
   149e8:	4428      	add	r0, r5
   149ea:	3801      	subs	r0, #1
   149ec:	426d      	negs	r5, r5
   149ee:	4005      	ands	r5, r0
   149f0:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   149f4:	442c      	add	r4, r5
   149f6:	3407      	adds	r4, #7
   149f8:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   149fc:	4629      	mov	r1, r5
   149fe:	4630      	mov	r0, r6
   14a00:	f7ff ff03 	bl	1480a <mem_to_chunkid>
   14a04:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   14a06:	1ba4      	subs	r4, r4, r6
   14a08:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   14a0a:	4287      	cmp	r7, r0
   14a0c:	d31d      	bcc.n	14a4a <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   14a0e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   14a12:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   14a16:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   14a18:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   14a1c:	429c      	cmp	r4, r3
   14a1e:	d31e      	bcc.n	14a5e <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   14a20:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   14a22:	8873      	ldrh	r3, [r6, #2]
   14a24:	f043 0301 	orr.w	r3, r3, #1
   14a28:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   14a2a:	4628      	mov	r0, r5
   14a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   14a30:	2904      	cmp	r1, #4
   14a32:	d903      	bls.n	14a3c <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   14a34:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   14a38:	2204      	movs	r2, #4
   14a3a:	e7c0      	b.n	149be <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   14a3c:	4611      	mov	r1, r2
   14a3e:	f7ff ff7b 	bl	14938 <sys_heap_alloc>
   14a42:	4605      	mov	r5, r0
   14a44:	e7f1      	b.n	14a2a <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   14a46:	2204      	movs	r2, #4
   14a48:	e7b9      	b.n	149be <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   14a4a:	4602      	mov	r2, r0
   14a4c:	4639      	mov	r1, r7
   14a4e:	4630      	mov	r0, r6
   14a50:	f7ff feb1 	bl	147b6 <split_chunks>
		free_list_add(h, c0);
   14a54:	4639      	mov	r1, r7
   14a56:	4630      	mov	r0, r6
   14a58:	f7ff fee7 	bl	1482a <free_list_add>
   14a5c:	e7d7      	b.n	14a0e <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   14a5e:	4622      	mov	r2, r4
   14a60:	4641      	mov	r1, r8
   14a62:	4630      	mov	r0, r6
   14a64:	f7ff fea7 	bl	147b6 <split_chunks>
		free_list_add(h, c_end);
   14a68:	4621      	mov	r1, r4
   14a6a:	4630      	mov	r0, r6
   14a6c:	f7ff fedd 	bl	1482a <free_list_add>
   14a70:	e7d6      	b.n	14a20 <sys_heap_aligned_alloc+0x84>
		return NULL;
   14a72:	2500      	movs	r5, #0
   14a74:	e7d9      	b.n	14a2a <sys_heap_aligned_alloc+0x8e>
   14a76:	2500      	movs	r5, #0
   14a78:	e7d7      	b.n	14a2a <sys_heap_aligned_alloc+0x8e>
		return NULL;
   14a7a:	2500      	movs	r5, #0
   14a7c:	e7d5      	b.n	14a2a <sys_heap_aligned_alloc+0x8e>

00014a7e <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   14a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a80:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   14a82:	1f15      	subs	r5, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   14a84:	1dc8      	adds	r0, r1, #7
   14a86:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   14a8a:	440d      	add	r5, r1
   14a8c:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   14a90:	1a2d      	subs	r5, r5, r0
   14a92:	ea4f 0ed5 	mov.w	lr, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   14a96:	4607      	mov	r7, r0
	heap->heap = h;
   14a98:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   14a9a:	f8c0 e008 	str.w	lr, [r0, #8]
	h->avail_buckets = 0;
   14a9e:	2300      	movs	r3, #0
   14aa0:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   14aa2:	fabe f28e 	clz	r2, lr
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   14aa6:	f1c2 0620 	rsb	r6, r2, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   14aaa:	f1c2 0224 	rsb	r2, r2, #36	; 0x24
   14aae:	0092      	lsls	r2, r2, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   14ab0:	f102 0c07 	add.w	ip, r2, #7
   14ab4:	ea4f 01dc 	mov.w	r1, ip, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   14ab8:	42b3      	cmp	r3, r6
   14aba:	da05      	bge.n	14ac8 <sys_heap_init+0x4a>
		h->buckets[i].next = 0;
   14abc:	1d1a      	adds	r2, r3, #4
   14abe:	2400      	movs	r4, #0
   14ac0:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   14ac4:	3301      	adds	r3, #1
   14ac6:	e7f7      	b.n	14ab8 <sys_heap_init+0x3a>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   14ac8:	004b      	lsls	r3, r1, #1
		((uint16_t *)cmem)[f] = val;
   14aca:	b29b      	uxth	r3, r3
   14acc:	2200      	movs	r2, #0
   14ace:	8002      	strh	r2, [r0, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   14ad0:	f043 0301 	orr.w	r3, r3, #1
   14ad4:	8043      	strh	r3, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   14ad6:	ebae 0301 	sub.w	r3, lr, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   14ada:	005e      	lsls	r6, r3, #1
	void *cmem = &buf[c];
   14adc:	f02c 0207 	bic.w	r2, ip, #7
		((uint16_t *)cmem)[f] = val;
   14ae0:	1c94      	adds	r4, r2, #2
   14ae2:	5306      	strh	r6, [r0, r4]
   14ae4:	5281      	strh	r1, [r0, r2]
	void *cmem = &buf[c];
   14ae6:	f025 0207 	bic.w	r2, r5, #7
		((uint16_t *)cmem)[f] = val;
   14aea:	4405      	add	r5, r0
   14aec:	5283      	strh	r3, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   14aee:	2301      	movs	r3, #1
   14af0:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   14af2:	f7ff fe9a 	bl	1482a <free_list_add>
}
   14af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014af8 <extract_decimal>:
{
   14af8:	b410      	push	{r4}
   14afa:	4604      	mov	r4, r0
	const char *sp = *str;
   14afc:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   14afe:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   14b00:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   14b02:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   14b06:	2909      	cmp	r1, #9
   14b08:	d806      	bhi.n	14b18 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   14b0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14b0e:	3201      	adds	r2, #1
   14b10:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   14b14:	3830      	subs	r0, #48	; 0x30
   14b16:	e7f3      	b.n	14b00 <extract_decimal+0x8>
	*str = sp;
   14b18:	6022      	str	r2, [r4, #0]
}
   14b1a:	bc10      	pop	{r4}
   14b1c:	4770      	bx	lr

00014b1e <encode_uint>:
{
   14b1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b22:	b083      	sub	sp, #12
   14b24:	4604      	mov	r4, r0
   14b26:	460d      	mov	r5, r1
   14b28:	9201      	str	r2, [sp, #4]
   14b2a:	469a      	mov	sl, r3
   14b2c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   14b30:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   14b32:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   14b36:	2b6f      	cmp	r3, #111	; 0x6f
   14b38:	d00f      	beq.n	14b5a <encode_uint+0x3c>
   14b3a:	d906      	bls.n	14b4a <encode_uint+0x2c>
   14b3c:	2b70      	cmp	r3, #112	; 0x70
   14b3e:	d00f      	beq.n	14b60 <encode_uint+0x42>
   14b40:	2b78      	cmp	r3, #120	; 0x78
   14b42:	d110      	bne.n	14b66 <encode_uint+0x48>
		return 16;
   14b44:	f04f 0910 	mov.w	r9, #16
   14b48:	e026      	b.n	14b98 <encode_uint+0x7a>
	switch (specifier) {
   14b4a:	2b58      	cmp	r3, #88	; 0x58
   14b4c:	d002      	beq.n	14b54 <encode_uint+0x36>
   14b4e:	f04f 090a 	mov.w	r9, #10
   14b52:	e021      	b.n	14b98 <encode_uint+0x7a>
		return 16;
   14b54:	f04f 0910 	mov.w	r9, #16
   14b58:	e01e      	b.n	14b98 <encode_uint+0x7a>
		return 8;
   14b5a:	f04f 0908 	mov.w	r9, #8
   14b5e:	e01b      	b.n	14b98 <encode_uint+0x7a>
		return 16;
   14b60:	f04f 0910 	mov.w	r9, #16
   14b64:	e018      	b.n	14b98 <encode_uint+0x7a>
	switch (specifier) {
   14b66:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   14b6a:	e015      	b.n	14b98 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14b6c:	f1bb 0f19 	cmp.w	fp, #25
   14b70:	d820      	bhi.n	14bb4 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   14b72:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14b74:	3237      	adds	r2, #55	; 0x37
   14b76:	b2d2      	uxtb	r2, r2
   14b78:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   14b7c:	4632      	mov	r2, r6
   14b7e:	463b      	mov	r3, r7
   14b80:	4620      	mov	r0, r4
   14b82:	4629      	mov	r1, r5
   14b84:	f7eb fea0 	bl	8c8 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   14b88:	42bd      	cmp	r5, r7
   14b8a:	bf08      	it	eq
   14b8c:	42b4      	cmpeq	r4, r6
   14b8e:	d315      	bcc.n	14bbc <encode_uint+0x9e>
   14b90:	45d0      	cmp	r8, sl
   14b92:	d913      	bls.n	14bbc <encode_uint+0x9e>
		value /= radix;
   14b94:	4604      	mov	r4, r0
   14b96:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   14b98:	464e      	mov	r6, r9
   14b9a:	2700      	movs	r7, #0
   14b9c:	464a      	mov	r2, r9
   14b9e:	463b      	mov	r3, r7
   14ba0:	4620      	mov	r0, r4
   14ba2:	4629      	mov	r1, r5
   14ba4:	f7eb fe90 	bl	8c8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14ba8:	2a09      	cmp	r2, #9
   14baa:	d8df      	bhi.n	14b6c <encode_uint+0x4e>
   14bac:	b2d2      	uxtb	r2, r2
   14bae:	3230      	adds	r2, #48	; 0x30
   14bb0:	b2d2      	uxtb	r2, r2
   14bb2:	e7e1      	b.n	14b78 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   14bb4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14bb6:	3257      	adds	r2, #87	; 0x57
   14bb8:	b2d2      	uxtb	r2, r2
   14bba:	e7dd      	b.n	14b78 <encode_uint+0x5a>
	if (conv->flag_hash) {
   14bbc:	9b01      	ldr	r3, [sp, #4]
   14bbe:	781b      	ldrb	r3, [r3, #0]
   14bc0:	f013 0f20 	tst.w	r3, #32
   14bc4:	d005      	beq.n	14bd2 <encode_uint+0xb4>
		if (radix == 8) {
   14bc6:	f1b9 0f08 	cmp.w	r9, #8
   14bca:	d006      	beq.n	14bda <encode_uint+0xbc>
		} else if (radix == 16) {
   14bcc:	f1b9 0f10 	cmp.w	r9, #16
   14bd0:	d009      	beq.n	14be6 <encode_uint+0xc8>
}
   14bd2:	4640      	mov	r0, r8
   14bd4:	b003      	add	sp, #12
   14bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   14bda:	9a01      	ldr	r2, [sp, #4]
   14bdc:	7893      	ldrb	r3, [r2, #2]
   14bde:	f043 0308 	orr.w	r3, r3, #8
   14be2:	7093      	strb	r3, [r2, #2]
   14be4:	e7f5      	b.n	14bd2 <encode_uint+0xb4>
			conv->altform_0c = true;
   14be6:	9a01      	ldr	r2, [sp, #4]
   14be8:	7893      	ldrb	r3, [r2, #2]
   14bea:	f043 0310 	orr.w	r3, r3, #16
   14bee:	7093      	strb	r3, [r2, #2]
   14bf0:	e7ef      	b.n	14bd2 <encode_uint+0xb4>

00014bf2 <outs>:
{
   14bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14bf6:	4607      	mov	r7, r0
   14bf8:	460e      	mov	r6, r1
   14bfa:	4614      	mov	r4, r2
   14bfc:	4698      	mov	r8, r3
	size_t count = 0;
   14bfe:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   14c00:	e006      	b.n	14c10 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   14c02:	4631      	mov	r1, r6
   14c04:	f814 0b01 	ldrb.w	r0, [r4], #1
   14c08:	47b8      	blx	r7
		if (rc < 0) {
   14c0a:	2800      	cmp	r0, #0
   14c0c:	db09      	blt.n	14c22 <outs+0x30>
		++count;
   14c0e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   14c10:	4544      	cmp	r4, r8
   14c12:	d3f6      	bcc.n	14c02 <outs+0x10>
   14c14:	f1b8 0f00 	cmp.w	r8, #0
   14c18:	d102      	bne.n	14c20 <outs+0x2e>
   14c1a:	7823      	ldrb	r3, [r4, #0]
   14c1c:	2b00      	cmp	r3, #0
   14c1e:	d1f0      	bne.n	14c02 <outs+0x10>
	return (int)count;
   14c20:	4628      	mov	r0, r5
}
   14c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014c26 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   14c26:	4770      	bx	lr

00014c28 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   14c28:	2200      	movs	r2, #0
   14c2a:	6002      	str	r2, [r0, #0]
   14c2c:	6042      	str	r2, [r0, #4]
   14c2e:	6082      	str	r2, [r0, #8]
}
   14c30:	4770      	bx	lr

00014c32 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14c32:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14c34:	f001 fbd6 	bl	163e4 <z_fatal_error>
}
   14c38:	bd08      	pop	{r3, pc}

00014c3a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   14c3a:	b508      	push	{r3, lr}
   14c3c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   14c3e:	6800      	ldr	r0, [r0, #0]
   14c40:	f7ff fff7 	bl	14c32 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   14c44:	bd08      	pop	{r3, pc}

00014c46 <z_irq_spurious>:
{
   14c46:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14c48:	2100      	movs	r1, #0
   14c4a:	2001      	movs	r0, #1
   14c4c:	f7ff fff1 	bl	14c32 <z_arm_fatal_error>
}
   14c50:	bd08      	pop	{r3, pc}

00014c52 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   14c52:	b508      	push	{r3, lr}
	handler();
   14c54:	f7fa f8a0 	bl	ed98 <z_SysNmiOnReset>
	z_arm_int_exit();
   14c58:	f7fa f99c 	bl	ef94 <z_arm_exc_exit>
}
   14c5c:	bd08      	pop	{r3, pc}

00014c5e <memory_fault_recoverable>:
}
   14c5e:	2000      	movs	r0, #0
   14c60:	4770      	bx	lr

00014c62 <debug_monitor>:
	*recoverable = false;
   14c62:	2300      	movs	r3, #0
   14c64:	700b      	strb	r3, [r1, #0]
}
   14c66:	4770      	bx	lr

00014c68 <fault_handle>:
{
   14c68:	b508      	push	{r3, lr}
	*recoverable = false;
   14c6a:	2300      	movs	r3, #0
   14c6c:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   14c6e:	1ecb      	subs	r3, r1, #3
   14c70:	2b09      	cmp	r3, #9
   14c72:	d81a      	bhi.n	14caa <fault_handle+0x42>
   14c74:	e8df f003 	tbb	[pc, r3]
   14c78:	110d0905 	.word	0x110d0905
   14c7c:	19191919 	.word	0x19191919
   14c80:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   14c82:	4611      	mov	r1, r2
   14c84:	f7fa fa16 	bl	f0b4 <hard_fault>
		break;
   14c88:	e010      	b.n	14cac <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   14c8a:	2100      	movs	r1, #0
   14c8c:	f7fa f9cc 	bl	f028 <mem_manage_fault>
		break;
   14c90:	e00c      	b.n	14cac <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   14c92:	2100      	movs	r1, #0
   14c94:	f7fa f98c 	bl	efb0 <bus_fault>
		break;
   14c98:	e008      	b.n	14cac <fault_handle+0x44>
		reason = usage_fault(esf);
   14c9a:	f7fa f9b3 	bl	f004 <usage_fault>
		break;
   14c9e:	e005      	b.n	14cac <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   14ca0:	4611      	mov	r1, r2
   14ca2:	f7ff ffde 	bl	14c62 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14ca6:	2000      	movs	r0, #0
		break;
   14ca8:	e000      	b.n	14cac <fault_handle+0x44>
	*recoverable = false;
   14caa:	2000      	movs	r0, #0
}
   14cac:	bd08      	pop	{r3, pc}

00014cae <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   14cae:	6843      	ldr	r3, [r0, #4]
   14cb0:	1e5a      	subs	r2, r3, #1
		&&
   14cb2:	4213      	tst	r3, r2
   14cb4:	d106      	bne.n	14cc4 <mpu_partition_is_valid+0x16>
		&&
   14cb6:	2b1f      	cmp	r3, #31
   14cb8:	d906      	bls.n	14cc8 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   14cba:	6803      	ldr	r3, [r0, #0]
		&&
   14cbc:	421a      	tst	r2, r3
   14cbe:	d005      	beq.n	14ccc <mpu_partition_is_valid+0x1e>
   14cc0:	2000      	movs	r0, #0
   14cc2:	4770      	bx	lr
   14cc4:	2000      	movs	r0, #0
   14cc6:	4770      	bx	lr
   14cc8:	2000      	movs	r0, #0
   14cca:	4770      	bx	lr
   14ccc:	2001      	movs	r0, #1
}
   14cce:	4770      	bx	lr

00014cd0 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   14cd0:	2807      	cmp	r0, #7
   14cd2:	d805      	bhi.n	14ce0 <region_allocate_and_init+0x10>
{
   14cd4:	b510      	push	{r4, lr}
   14cd6:	4604      	mov	r4, r0
	region_init(index, region_conf);
   14cd8:	f7fa fb3e 	bl	f358 <region_init>
	return index;
   14cdc:	4620      	mov	r0, r4
}
   14cde:	bd10      	pop	{r4, pc}
		return -EINVAL;
   14ce0:	f06f 0015 	mvn.w	r0, #21
}
   14ce4:	4770      	bx	lr

00014ce6 <mpu_configure_region>:
{
   14ce6:	b500      	push	{lr}
   14ce8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   14cea:	680b      	ldr	r3, [r1, #0]
   14cec:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   14cee:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14cf0:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   14cf2:	2b20      	cmp	r3, #32
   14cf4:	d912      	bls.n	14d1c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   14cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   14cfa:	d811      	bhi.n	14d20 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   14cfc:	3b01      	subs	r3, #1
   14cfe:	fab3 f383 	clz	r3, r3
   14d02:	f1c3 031f 	rsb	r3, r3, #31
   14d06:	005b      	lsls	r3, r3, #1
   14d08:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14d0c:	4313      	orrs	r3, r2
   14d0e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   14d10:	a901      	add	r1, sp, #4
   14d12:	f7ff ffdd 	bl	14cd0 <region_allocate_and_init>
}
   14d16:	b005      	add	sp, #20
   14d18:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   14d1c:	2308      	movs	r3, #8
   14d1e:	e7f5      	b.n	14d0c <mpu_configure_region+0x26>
		return REGION_4G;
   14d20:	233e      	movs	r3, #62	; 0x3e
   14d22:	e7f3      	b.n	14d0c <mpu_configure_region+0x26>

00014d24 <mpu_configure_regions>:
{
   14d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14d28:	4680      	mov	r8, r0
   14d2a:	460f      	mov	r7, r1
   14d2c:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
   14d2e:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
   14d30:	2500      	movs	r5, #0
   14d32:	e009      	b.n	14d48 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14d34:	4621      	mov	r1, r4
   14d36:	b2f0      	uxtb	r0, r6
   14d38:	f7ff ffd5 	bl	14ce6 <mpu_configure_region>
   14d3c:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
   14d3e:	f110 0f16 	cmn.w	r0, #22
   14d42:	d014      	beq.n	14d6e <mpu_configure_regions+0x4a>
		reg_index++;
   14d44:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   14d46:	3501      	adds	r5, #1
   14d48:	42bd      	cmp	r5, r7
   14d4a:	da10      	bge.n	14d6e <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   14d4c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   14d50:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   14d54:	6862      	ldr	r2, [r4, #4]
   14d56:	2a00      	cmp	r2, #0
   14d58:	d0f5      	beq.n	14d46 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   14d5a:	f1b9 0f00 	cmp.w	r9, #0
   14d5e:	d0e9      	beq.n	14d34 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   14d60:	4620      	mov	r0, r4
   14d62:	f7ff ffa4 	bl	14cae <mpu_partition_is_valid>
		if (do_sanity_check &&
   14d66:	2800      	cmp	r0, #0
   14d68:	d1e4      	bne.n	14d34 <mpu_configure_regions+0x10>
			return -EINVAL;
   14d6a:	f06f 0615 	mvn.w	r6, #21
}
   14d6e:	4630      	mov	r0, r6
   14d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014d74 <arm_core_mpu_configure_static_mpu_regions>:
{
   14d74:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   14d76:	f7fa faff 	bl	f378 <mpu_configure_static_mpu_regions>
}
   14d7a:	bd08      	pop	{r3, pc}

00014d7c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   14d7c:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   14d7e:	f7fa fb05 	bl	f38c <mpu_configure_dynamic_mpu_regions>
}
   14d82:	bd08      	pop	{r3, pc}

00014d84 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   14d84:	4602      	mov	r2, r0
   14d86:	780b      	ldrb	r3, [r1, #0]
   14d88:	b11b      	cbz	r3, 14d92 <strcpy+0xe>
		*d = *s;
   14d8a:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   14d8e:	3101      	adds	r1, #1
   14d90:	e7f9      	b.n	14d86 <strcpy+0x2>
	}

	*d = '\0';
   14d92:	7013      	strb	r3, [r2, #0]

	return dest;
}
   14d94:	4770      	bx	lr

00014d96 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   14d96:	4603      	mov	r3, r0
   14d98:	b1a2      	cbz	r2, 14dc4 <strncpy+0x2e>
{
   14d9a:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   14d9c:	780c      	ldrb	r4, [r1, #0]
   14d9e:	b12c      	cbz	r4, 14dac <strncpy+0x16>
		*d = *s;
   14da0:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   14da4:	3101      	adds	r1, #1
		d++;
		n--;
   14da6:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   14da8:	2a00      	cmp	r2, #0
   14daa:	d1f7      	bne.n	14d9c <strncpy+0x6>
	}

	while (n > 0) {
   14dac:	b122      	cbz	r2, 14db8 <strncpy+0x22>
		*d = '\0';
   14dae:	2100      	movs	r1, #0
   14db0:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   14db4:	3a01      	subs	r2, #1
   14db6:	e7f9      	b.n	14dac <strncpy+0x16>
	}

	return dest;
}
   14db8:	bc10      	pop	{r4}
   14dba:	4770      	bx	lr
		*d = '\0';
   14dbc:	2100      	movs	r1, #0
   14dbe:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   14dc2:	3a01      	subs	r2, #1
	while (n > 0) {
   14dc4:	2a00      	cmp	r2, #0
   14dc6:	d1f9      	bne.n	14dbc <strncpy+0x26>
   14dc8:	4770      	bx	lr

00014dca <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   14dca:	4603      	mov	r3, r0
	size_t n = 0;
   14dcc:	2000      	movs	r0, #0

	while (*s != '\0') {
   14dce:	781a      	ldrb	r2, [r3, #0]
   14dd0:	b112      	cbz	r2, 14dd8 <strlen+0xe>
		s++;
   14dd2:	3301      	adds	r3, #1
		n++;
   14dd4:	3001      	adds	r0, #1
   14dd6:	e7fa      	b.n	14dce <strlen+0x4>
	}

	return n;
}
   14dd8:	4770      	bx	lr

00014dda <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   14dda:	4603      	mov	r3, r0
	size_t n = 0;
   14ddc:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   14dde:	781a      	ldrb	r2, [r3, #0]
   14de0:	b122      	cbz	r2, 14dec <strnlen+0x12>
   14de2:	4288      	cmp	r0, r1
   14de4:	d202      	bcs.n	14dec <strnlen+0x12>
		s++;
   14de6:	3301      	adds	r3, #1
		n++;
   14de8:	3001      	adds	r0, #1
   14dea:	e7f8      	b.n	14dde <strnlen+0x4>
	}

	return n;
}
   14dec:	4770      	bx	lr

00014dee <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   14dee:	7803      	ldrb	r3, [r0, #0]
   14df0:	780a      	ldrb	r2, [r1, #0]
   14df2:	4293      	cmp	r3, r2
   14df4:	d103      	bne.n	14dfe <strcmp+0x10>
   14df6:	b113      	cbz	r3, 14dfe <strcmp+0x10>
		s1++;
   14df8:	3001      	adds	r0, #1
		s2++;
   14dfa:	3101      	adds	r1, #1
   14dfc:	e7f7      	b.n	14dee <strcmp>
	}

	return *s1 - *s2;
}
   14dfe:	1a98      	subs	r0, r3, r2
   14e00:	4770      	bx	lr

00014e02 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   14e02:	b17a      	cbz	r2, 14e24 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   14e04:	1e53      	subs	r3, r2, #1
   14e06:	d00f      	beq.n	14e28 <memcmp+0x26>
{
   14e08:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   14e0a:	7804      	ldrb	r4, [r0, #0]
   14e0c:	780a      	ldrb	r2, [r1, #0]
   14e0e:	4294      	cmp	r4, r2
   14e10:	d103      	bne.n	14e1a <memcmp+0x18>
		c1++;
   14e12:	3001      	adds	r0, #1
		c2++;
   14e14:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   14e16:	3b01      	subs	r3, #1
   14e18:	d1f7      	bne.n	14e0a <memcmp+0x8>
	}

	return *c1 - *c2;
   14e1a:	7800      	ldrb	r0, [r0, #0]
   14e1c:	780b      	ldrb	r3, [r1, #0]
   14e1e:	1ac0      	subs	r0, r0, r3
}
   14e20:	bc10      	pop	{r4}
   14e22:	4770      	bx	lr
		return 0;
   14e24:	2000      	movs	r0, #0
   14e26:	4770      	bx	lr
	return *c1 - *c2;
   14e28:	7800      	ldrb	r0, [r0, #0]
   14e2a:	780b      	ldrb	r3, [r1, #0]
   14e2c:	1ac0      	subs	r0, r0, r3
}
   14e2e:	4770      	bx	lr

00014e30 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   14e30:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   14e32:	ea80 0301 	eor.w	r3, r0, r1
   14e36:	f013 0f03 	tst.w	r3, #3
   14e3a:	d001      	beq.n	14e40 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   14e3c:	4603      	mov	r3, r0
   14e3e:	e017      	b.n	14e70 <memcpy+0x40>
   14e40:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   14e42:	f013 0f03 	tst.w	r3, #3
   14e46:	d00b      	beq.n	14e60 <memcpy+0x30>
			if (n == 0) {
   14e48:	b1a2      	cbz	r2, 14e74 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   14e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
   14e4e:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   14e52:	3a01      	subs	r2, #1
   14e54:	e7f5      	b.n	14e42 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   14e56:	f851 4b04 	ldr.w	r4, [r1], #4
   14e5a:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   14e5e:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   14e60:	2a03      	cmp	r2, #3
   14e62:	d8f8      	bhi.n	14e56 <memcpy+0x26>
   14e64:	e004      	b.n	14e70 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   14e66:	f811 4b01 	ldrb.w	r4, [r1], #1
   14e6a:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   14e6e:	3a01      	subs	r2, #1
	while (n > 0) {
   14e70:	2a00      	cmp	r2, #0
   14e72:	d1f8      	bne.n	14e66 <memcpy+0x36>
	}

	return d;
}
   14e74:	bc10      	pop	{r4}
   14e76:	4770      	bx	lr

00014e78 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   14e78:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   14e7a:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   14e7c:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   14e7e:	f013 0f03 	tst.w	r3, #3
   14e82:	d004      	beq.n	14e8e <memset+0x16>
		if (n == 0) {
   14e84:	b19a      	cbz	r2, 14eae <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   14e86:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   14e8a:	3a01      	subs	r2, #1
   14e8c:	e7f7      	b.n	14e7e <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   14e8e:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   14e90:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   14e94:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   14e98:	2a03      	cmp	r2, #3
   14e9a:	d906      	bls.n	14eaa <memset+0x32>
		*(d_word++) = c_word;
   14e9c:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   14ea0:	3a04      	subs	r2, #4
   14ea2:	e7f9      	b.n	14e98 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   14ea4:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   14ea8:	3a01      	subs	r2, #1
	while (n > 0) {
   14eaa:	2a00      	cmp	r2, #0
   14eac:	d1fa      	bne.n	14ea4 <memset+0x2c>
	}

	return buf;
}
   14eae:	bc10      	pop	{r4}
   14eb0:	4770      	bx	lr

00014eb2 <_stdout_hook_default>:
}
   14eb2:	f04f 30ff 	mov.w	r0, #4294967295
   14eb6:	4770      	bx	lr

00014eb8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   14eb8:	b084      	sub	sp, #16
   14eba:	ab04      	add	r3, sp, #16
   14ebc:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   14ec0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   14ec4:	2b06      	cmp	r3, #6
   14ec6:	d001      	beq.n	14ecc <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   14ec8:	b004      	add	sp, #16
   14eca:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   14ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14ed0:	2201      	movs	r2, #1
   14ed2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   14ed6:	f3bf 8f4f 	dsb	sy
        __WFE();
   14eda:	bf20      	wfe
    while (true)
   14edc:	e7fd      	b.n	14eda <pm_power_state_set+0x22>

00014ede <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   14ede:	b084      	sub	sp, #16
   14ee0:	ab04      	add	r3, sp, #16
   14ee2:	e903 0007 	stmdb	r3, {r0, r1, r2}
   14ee6:	2300      	movs	r3, #0
   14ee8:	f383 8811 	msr	BASEPRI, r3
   14eec:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   14ef0:	b004      	add	sp, #16
   14ef2:	4770      	bx	lr

00014ef4 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   14ef4:	b510      	push	{r4, lr}
   14ef6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   14ef8:	2301      	movs	r3, #1
   14efa:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   14efe:	2106      	movs	r1, #6
   14f00:	f7fc fd0a 	bl	11918 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   14f04:	b918      	cbnz	r0, 14f0e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   14f06:	79a3      	ldrb	r3, [r4, #6]
   14f08:	f063 033f 	orn	r3, r3, #63	; 0x3f
   14f0c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   14f0e:	bd10      	pop	{r4, pc}

00014f10 <hci_vendor_event>:
}
   14f10:	4770      	bx	lr

00014f12 <bt_br_init>:
}
   14f12:	2000      	movs	r0, #0
   14f14:	4770      	bx	lr

00014f16 <hci_hardware_error>:
{
   14f16:	b508      	push	{r3, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
   14f18:	2101      	movs	r1, #1
   14f1a:	3008      	adds	r0, #8
   14f1c:	f000 fa3c 	bl	15398 <net_buf_simple_pull_mem>
}
   14f20:	bd08      	pop	{r3, pc}

00014f22 <le_set_event_mask>:
{
   14f22:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   14f24:	2108      	movs	r1, #8
   14f26:	f242 0001 	movw	r0, #8193	; 0x2001
   14f2a:	f7fa fcbf 	bl	f8ac <bt_hci_cmd_create>
	if (!buf) {
   14f2e:	b1a0      	cbz	r0, 14f5a <le_set_event_mask+0x38>
   14f30:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   14f32:	2108      	movs	r1, #8
   14f34:	4408      	add	r0, r1
   14f36:	f000 fa16 	bl	15366 <net_buf_simple_add>
	dst[0] = val;
   14f3a:	2302      	movs	r3, #2
   14f3c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   14f3e:	2200      	movs	r2, #0
   14f40:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
   14f42:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   14f44:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   14f46:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   14f48:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   14f4a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14f4c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   14f4e:	4621      	mov	r1, r4
   14f50:	f242 0001 	movw	r0, #8193	; 0x2001
   14f54:	f7fa fce6 	bl	f924 <bt_hci_cmd_send_sync>
}
   14f58:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   14f5a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14f5e:	e7fb      	b.n	14f58 <le_set_event_mask+0x36>

00014f60 <set_event_mask>:
{
   14f60:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   14f62:	2108      	movs	r1, #8
   14f64:	f640 4001 	movw	r0, #3073	; 0xc01
   14f68:	f7fa fca0 	bl	f8ac <bt_hci_cmd_create>
	if (!buf) {
   14f6c:	b1b0      	cbz	r0, 14f9c <set_event_mask+0x3c>
   14f6e:	4604      	mov	r4, r0
   14f70:	2108      	movs	r1, #8
   14f72:	4408      	add	r0, r1
   14f74:	f000 f9f7 	bl	15366 <net_buf_simple_add>
	dst[0] = val;
   14f78:	2200      	movs	r2, #0
   14f7a:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   14f7c:	2380      	movs	r3, #128	; 0x80
   14f7e:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   14f80:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   14f82:	2302      	movs	r3, #2
   14f84:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   14f86:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   14f88:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   14f8a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14f8c:	2320      	movs	r3, #32
   14f8e:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   14f90:	4621      	mov	r1, r4
   14f92:	f640 4001 	movw	r0, #3073	; 0xc01
   14f96:	f7fa fcc5 	bl	f924 <bt_hci_cmd_send_sync>
}
   14f9a:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   14f9c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14fa0:	e7fb      	b.n	14f9a <set_event_mask+0x3a>

00014fa2 <process_events>:
{
   14fa2:	b538      	push	{r3, r4, r5, lr}
   14fa4:	4604      	mov	r4, r0
   14fa6:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   14fa8:	e003      	b.n	14fb2 <process_events+0x10>
				send_cmd();
   14faa:	f7fa fe33 	bl	fc14 <send_cmd>
	for (; count; ev++, count--) {
   14fae:	3414      	adds	r4, #20
   14fb0:	3d01      	subs	r5, #1
   14fb2:	b145      	cbz	r5, 14fc6 <process_events+0x24>
		switch (ev->state) {
   14fb4:	68e3      	ldr	r3, [r4, #12]
   14fb6:	f3c3 3345 	ubfx	r3, r3, #13, #6
   14fba:	2b04      	cmp	r3, #4
   14fbc:	d1f7      	bne.n	14fae <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   14fbe:	7b23      	ldrb	r3, [r4, #12]
   14fc0:	2b00      	cmp	r3, #0
   14fc2:	d1f4      	bne.n	14fae <process_events+0xc>
   14fc4:	e7f1      	b.n	14faa <process_events+0x8>
}
   14fc6:	bd38      	pop	{r3, r4, r5, pc}

00014fc8 <bt_init>:
{
   14fc8:	b510      	push	{r4, lr}
	err = hci_init();
   14fca:	f7fa fdf5 	bl	fbb8 <hci_init>
	if (err) {
   14fce:	4604      	mov	r4, r0
   14fd0:	b108      	cbz	r0, 14fd6 <bt_init+0xe>
}
   14fd2:	4620      	mov	r0, r4
   14fd4:	bd10      	pop	{r4, pc}
	bt_finalize_init();
   14fd6:	f7fa ff5d 	bl	fe94 <bt_finalize_init>
	return 0;
   14fda:	e7fa      	b.n	14fd2 <bt_init+0xa>

00014fdc <is_adv_using_rand_addr>:
}
   14fdc:	2000      	movs	r0, #0
   14fde:	4770      	bx	lr

00014fe0 <bt_lookup_id_addr>:
}
   14fe0:	4608      	mov	r0, r1
   14fe2:	4770      	bx	lr

00014fe4 <bt_id_set_private_addr>:
{
   14fe4:	b500      	push	{lr}
   14fe6:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   14fe8:	2106      	movs	r1, #6
   14fea:	4668      	mov	r0, sp
   14fec:	f7fc fc94 	bl	11918 <bt_rand>
	if (err) {
   14ff0:	b110      	cbz	r0, 14ff8 <bt_id_set_private_addr+0x14>
}
   14ff2:	b003      	add	sp, #12
   14ff4:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   14ff8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15000:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   15004:	4668      	mov	r0, sp
   15006:	f7fa fff9 	bl	fffc <set_random_address>
	if (err)  {
   1500a:	e7f2      	b.n	14ff2 <bt_id_set_private_addr+0xe>

0001500c <bt_id_scan_random_addr_check>:
}
   1500c:	2001      	movs	r0, #1
   1500e:	4770      	bx	lr

00015010 <get_adv_props_legacy>:
	switch (evt_type) {
   15010:	2804      	cmp	r0, #4
   15012:	d80a      	bhi.n	1502a <get_adv_props_legacy+0x1a>
   15014:	e8df f000 	tbb	[pc, r0]
   15018:	050c0b03 	.word	0x050c0b03
   1501c:	07          	.byte	0x07
   1501d:	00          	.byte	0x00
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   1501e:	2003      	movs	r0, #3
   15020:	4770      	bx	lr
		return 0;
   15022:	2000      	movs	r0, #0
   15024:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   15026:	200a      	movs	r0, #10
   15028:	4770      	bx	lr
		return 0;
   1502a:	2000      	movs	r0, #0
   1502c:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   1502e:	2005      	movs	r0, #5
}
   15030:	4770      	bx	lr

00015032 <valid_le_scan_param>:
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   15032:	7803      	ldrb	r3, [r0, #0]
   15034:	2b01      	cmp	r3, #1
   15036:	d815      	bhi.n	15064 <valid_le_scan_param+0x32>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   15038:	6843      	ldr	r3, [r0, #4]
   1503a:	f033 030f 	bics.w	r3, r3, #15
   1503e:	d113      	bne.n	15068 <valid_le_scan_param+0x36>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   15040:	8902      	ldrh	r2, [r0, #8]
   15042:	1f13      	subs	r3, r2, #4
   15044:	b29b      	uxth	r3, r3
   15046:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   1504a:	428b      	cmp	r3, r1
   1504c:	d80e      	bhi.n	1506c <valid_le_scan_param+0x3a>
	if (param->window < 0x0004 || param->window > 0x4000) {
   1504e:	8941      	ldrh	r1, [r0, #10]
   15050:	1f0b      	subs	r3, r1, #4
   15052:	b29b      	uxth	r3, r3
   15054:	f643 70fc 	movw	r0, #16380	; 0x3ffc
   15058:	4283      	cmp	r3, r0
   1505a:	d809      	bhi.n	15070 <valid_le_scan_param+0x3e>
	if (param->window > param->interval) {
   1505c:	428a      	cmp	r2, r1
   1505e:	d309      	bcc.n	15074 <valid_le_scan_param+0x42>
	return true;
   15060:	2001      	movs	r0, #1
   15062:	4770      	bx	lr
		return false;
   15064:	2000      	movs	r0, #0
   15066:	4770      	bx	lr
		return false;
   15068:	2000      	movs	r0, #0
   1506a:	4770      	bx	lr
		return false;
   1506c:	2000      	movs	r0, #0
   1506e:	4770      	bx	lr
		return false;
   15070:	2000      	movs	r0, #0
   15072:	4770      	bx	lr
		return false;
   15074:	2000      	movs	r0, #0
}
   15076:	4770      	bx	lr

00015078 <bt_le_scan_set_enable>:
{
   15078:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   1507a:	f7fb f95d 	bl	10338 <bt_le_scan_set_enable_legacy>
}
   1507e:	bd08      	pop	{r3, pc}

00015080 <bt_hci_le_adv_report>:
{
   15080:	b5f0      	push	{r4, r5, r6, r7, lr}
   15082:	b085      	sub	sp, #20
   15084:	4607      	mov	r7, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   15086:	f100 0608 	add.w	r6, r0, #8
   1508a:	4630      	mov	r0, r6
   1508c:	f000 f98c 	bl	153a8 <net_buf_simple_pull_u8>
	while (num_reports--) {
   15090:	1e45      	subs	r5, r0, #1
   15092:	b2ed      	uxtb	r5, r5
   15094:	b378      	cbz	r0, 150f6 <bt_hci_le_adv_report+0x76>
		if (buf->len < sizeof(*evt)) {
   15096:	89bb      	ldrh	r3, [r7, #12]
   15098:	2b08      	cmp	r3, #8
   1509a:	d92c      	bls.n	150f6 <bt_hci_le_adv_report+0x76>
	return net_buf_simple_pull_mem(&buf->b, len);
   1509c:	2109      	movs	r1, #9
   1509e:	4630      	mov	r0, r6
   150a0:	f000 f97a 	bl	15398 <net_buf_simple_pull_mem>
   150a4:	4604      	mov	r4, r0
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   150a6:	2301      	movs	r3, #1
   150a8:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   150ac:	2200      	movs	r2, #0
   150ae:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   150b2:	237f      	movs	r3, #127	; 0x7f
   150b4:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   150b8:	7a03      	ldrb	r3, [r0, #8]
   150ba:	4403      	add	r3, r0
   150bc:	f993 3009 	ldrsb.w	r3, [r3, #9]
   150c0:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   150c4:	23ff      	movs	r3, #255	; 0xff
   150c6:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   150ca:	f8ad 200a 	strh.w	r2, [sp, #10]
		adv_info.adv_type = evt->evt_type;
   150ce:	7800      	ldrb	r0, [r0, #0]
   150d0:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   150d4:	f7ff ff9c 	bl	15010 <get_adv_props_legacy>
   150d8:	f8ad 0008 	strh.w	r0, [sp, #8]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   150dc:	7a23      	ldrb	r3, [r4, #8]
   150de:	4632      	mov	r2, r6
   150e0:	4669      	mov	r1, sp
   150e2:	1c60      	adds	r0, r4, #1
   150e4:	f7fb f95e 	bl	103a4 <le_adv_recv>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   150e8:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   150ea:	3101      	adds	r1, #1
   150ec:	4630      	mov	r0, r6
   150ee:	f000 f94b 	bl	15388 <net_buf_simple_pull>
	while (num_reports--) {
   150f2:	4628      	mov	r0, r5
   150f4:	e7cc      	b.n	15090 <bt_hci_le_adv_report+0x10>
}
   150f6:	b005      	add	sp, #20
   150f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000150fa <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   150fa:	4770      	bx	lr

000150fc <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   150fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15100:	4604      	mov	r4, r0
   15102:	460d      	mov	r5, r1
   15104:	4617      	mov	r7, r2
   15106:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15108:	7980      	ldrb	r0, [r0, #6]
   1510a:	f7fb faf9 	bl	10700 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   1510e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15110:	681b      	ldr	r3, [r3, #0]
   15112:	f8d3 8000 	ldr.w	r8, [r3]
   15116:	463a      	mov	r2, r7
   15118:	4633      	mov	r3, r6
   1511a:	4629      	mov	r1, r5
   1511c:	4620      	mov	r0, r4
   1511e:	47c0      	blx	r8
}
   15120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015124 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   15124:	b538      	push	{r3, r4, r5, lr}
   15126:	4604      	mov	r4, r0
   15128:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1512a:	7980      	ldrb	r0, [r0, #6]
   1512c:	f7fb fae8 	bl	10700 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   15130:	7963      	ldrb	r3, [r4, #5]
   15132:	f013 0f02 	tst.w	r3, #2
   15136:	d105      	bne.n	15144 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   15138:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1513a:	681b      	ldr	r3, [r3, #0]
   1513c:	689b      	ldr	r3, [r3, #8]
   1513e:	4629      	mov	r1, r5
   15140:	4620      	mov	r0, r4
   15142:	4798      	blx	r3
}
   15144:	bd38      	pop	{r3, r4, r5, pc}

00015146 <net_buf_id>:
{
   15146:	b510      	push	{r4, lr}
   15148:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1514a:	7980      	ldrb	r0, [r0, #6]
   1514c:	f7fb fad8 	bl	10700 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   15150:	7f03      	ldrb	r3, [r0, #28]
   15152:	3317      	adds	r3, #23
   15154:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   15158:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1515a:	1a20      	subs	r0, r4, r0
}
   1515c:	fbb0 f0f3 	udiv	r0, r0, r3
   15160:	bd10      	pop	{r4, pc}

00015162 <fixed_data_alloc>:
{
   15162:	b570      	push	{r4, r5, r6, lr}
   15164:	4604      	mov	r4, r0
   15166:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15168:	7980      	ldrb	r0, [r0, #6]
   1516a:	f7fb fac9 	bl	10700 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1516e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15170:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   15172:	682a      	ldr	r2, [r5, #0]
   15174:	6819      	ldr	r1, [r3, #0]
   15176:	428a      	cmp	r2, r1
   15178:	bf28      	it	cs
   1517a:	460a      	movcs	r2, r1
   1517c:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1517e:	685d      	ldr	r5, [r3, #4]
   15180:	681e      	ldr	r6, [r3, #0]
   15182:	4620      	mov	r0, r4
   15184:	f7ff ffdf 	bl	15146 <net_buf_id>
}
   15188:	fb00 5006 	mla	r0, r0, r6, r5
   1518c:	bd70      	pop	{r4, r5, r6, pc}

0001518e <net_buf_reset>:
	buf->len  = 0U;
   1518e:	2300      	movs	r3, #0
   15190:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   15192:	6903      	ldr	r3, [r0, #16]
   15194:	6083      	str	r3, [r0, #8]
}
   15196:	4770      	bx	lr

00015198 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   15198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1519c:	b083      	sub	sp, #12
   1519e:	4605      	mov	r5, r0
   151a0:	9101      	str	r1, [sp, #4]
   151a2:	4616      	mov	r6, r2
   151a4:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   151a6:	4610      	mov	r0, r2
   151a8:	4619      	mov	r1, r3
   151aa:	f001 fced 	bl	16b88 <sys_clock_timeout_end_calc>
   151ae:	4682      	mov	sl, r0
   151b0:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   151b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   151b6:	f3ef 8211 	mrs	r2, BASEPRI
   151ba:	f383 8812 	msr	BASEPRI_MAX, r3
   151be:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   151c2:	8b6b      	ldrh	r3, [r5, #26]
   151c4:	2b00      	cmp	r3, #0
   151c6:	d042      	beq.n	1524e <net_buf_alloc_len+0xb6>
   151c8:	4693      	mov	fp, r2

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   151ca:	8b2a      	ldrh	r2, [r5, #24]
   151cc:	4293      	cmp	r3, r2
   151ce:	d20b      	bcs.n	151e8 <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   151d0:	2200      	movs	r2, #0
   151d2:	2300      	movs	r3, #0
   151d4:	4628      	mov	r0, r5
   151d6:	f7fd fe45 	bl	12e64 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   151da:	4604      	mov	r4, r0
   151dc:	b120      	cbz	r0, 151e8 <net_buf_alloc_len+0x50>
	__asm__ volatile(
   151de:	f38b 8811 	msr	BASEPRI, fp
   151e2:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   151e6:	e015      	b.n	15214 <net_buf_alloc_len+0x7c>
			}
		}

		uninit_count = pool->uninit_count--;
   151e8:	8b6a      	ldrh	r2, [r5, #26]
   151ea:	1e53      	subs	r3, r2, #1
   151ec:	836b      	strh	r3, [r5, #26]
   151ee:	f38b 8811 	msr	BASEPRI, fp
   151f2:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   151f6:	7f2c      	ldrb	r4, [r5, #28]
   151f8:	3417      	adds	r4, #23
   151fa:	f024 0403 	bic.w	r4, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   151fe:	8b2b      	ldrh	r3, [r5, #24]
   15200:	1a9b      	subs	r3, r3, r2
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   15202:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15204:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   15208:	4628      	mov	r0, r5
   1520a:	f7fb fa6d 	bl	106e8 <pool_id>
   1520e:	71a0      	strb	r0, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   15210:	7f2b      	ldrb	r3, [r5, #28]
   15212:	71e3      	strb	r3, [r4, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   15214:	9b01      	ldr	r3, [sp, #4]
   15216:	2b00      	cmp	r3, #0
   15218:	d038      	beq.n	1528c <net_buf_alloc_len+0xf4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1521a:	ea56 0307 	orrs.w	r3, r6, r7
   1521e:	d005      	beq.n	1522c <net_buf_alloc_len+0x94>
   15220:	f1b7 3fff 	cmp.w	r7, #4294967295
   15224:	bf08      	it	eq
   15226:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1522a:	d11d      	bne.n	15268 <net_buf_alloc_len+0xd0>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1522c:	4632      	mov	r2, r6
   1522e:	463b      	mov	r3, r7
   15230:	a901      	add	r1, sp, #4
   15232:	4620      	mov	r0, r4
   15234:	f7ff ff62 	bl	150fc <data_alloc>
   15238:	4605      	mov	r5, r0
   1523a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1523c:	bb40      	cbnz	r0, 15290 <net_buf_alloc_len+0xf8>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1523e:	79a0      	ldrb	r0, [r4, #6]
   15240:	f7fb fa5e 	bl	10700 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   15244:	4621      	mov	r1, r4
   15246:	f001 fa3e 	bl	166c6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1524a:	462c      	mov	r4, r5
}
   1524c:	e02a      	b.n	152a4 <net_buf_alloc_len+0x10c>
   1524e:	f382 8811 	msr	BASEPRI, r2
   15252:	f3bf 8f6f 	isb	sy
   15256:	4632      	mov	r2, r6
   15258:	463b      	mov	r3, r7
   1525a:	4628      	mov	r0, r5
   1525c:	f7fd fe02 	bl	12e64 <z_impl_k_queue_get>
	if (!buf) {
   15260:	4604      	mov	r4, r0
   15262:	2800      	cmp	r0, #0
   15264:	d1d6      	bne.n	15214 <net_buf_alloc_len+0x7c>
   15266:	e01d      	b.n	152a4 <net_buf_alloc_len+0x10c>
			int64_t remaining = end - sys_clock_tick_get();
   15268:	f7fe fd6a 	bl	13d40 <sys_clock_tick_get>
   1526c:	ebba 0800 	subs.w	r8, sl, r0
   15270:	9b00      	ldr	r3, [sp, #0]
   15272:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   15276:	f1b8 0f01 	cmp.w	r8, #1
   1527a:	f179 0300 	sbcs.w	r3, r9, #0
   1527e:	db02      	blt.n	15286 <net_buf_alloc_len+0xee>
				timeout = Z_TIMEOUT_TICKS(remaining);
   15280:	4646      	mov	r6, r8
   15282:	464f      	mov	r7, r9
   15284:	e7d2      	b.n	1522c <net_buf_alloc_len+0x94>
				timeout = K_NO_WAIT;
   15286:	2600      	movs	r6, #0
   15288:	2700      	movs	r7, #0
   1528a:	e7cf      	b.n	1522c <net_buf_alloc_len+0x94>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   1528c:	2300      	movs	r3, #0
   1528e:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   15290:	2301      	movs	r3, #1
   15292:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   15294:	2300      	movs	r3, #0
   15296:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   15298:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   1529a:	9b01      	ldr	r3, [sp, #4]
   1529c:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1529e:	4620      	mov	r0, r4
   152a0:	f7ff ff75 	bl	1518e <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   152a4:	4620      	mov	r0, r4
   152a6:	b003      	add	sp, #12
   152a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000152ac <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   152ac:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   152ae:	6a41      	ldr	r1, [r0, #36]	; 0x24
   152b0:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   152b2:	6809      	ldr	r1, [r1, #0]
   152b4:	f7ff ff70 	bl	15198 <net_buf_alloc_len>
}
   152b8:	bd08      	pop	{r3, pc}

000152ba <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   152ba:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   152bc:	4605      	mov	r5, r0
   152be:	f7fd fdd1 	bl	12e64 <z_impl_k_queue_get>
	if (!buf) {
   152c2:	4606      	mov	r6, r0
   152c4:	b190      	cbz	r0, 152ec <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   152c6:	4604      	mov	r4, r0
   152c8:	e00a      	b.n	152e0 <net_buf_get+0x26>
   152ca:	2200      	movs	r2, #0
   152cc:	2300      	movs	r3, #0
   152ce:	4628      	mov	r0, r5
   152d0:	f7fd fdc8 	bl	12e64 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   152d4:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   152d6:	7963      	ldrb	r3, [r4, #5]
   152d8:	f023 0301 	bic.w	r3, r3, #1
   152dc:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   152de:	4604      	mov	r4, r0
   152e0:	7963      	ldrb	r3, [r4, #5]
   152e2:	f013 0f01 	tst.w	r3, #1
   152e6:	d1f0      	bne.n	152ca <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   152e8:	2300      	movs	r3, #0
   152ea:	6023      	str	r3, [r4, #0]

	return buf;
}
   152ec:	4630      	mov	r0, r6
   152ee:	bd70      	pop	{r4, r5, r6, pc}

000152f0 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   152f0:	6883      	ldr	r3, [r0, #8]
   152f2:	440b      	add	r3, r1
   152f4:	6003      	str	r3, [r0, #0]
}
   152f6:	4770      	bx	lr

000152f8 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   152f8:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   152fa:	460a      	mov	r2, r1
   152fc:	6814      	ldr	r4, [r2, #0]
   152fe:	b12c      	cbz	r4, 1530c <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   15300:	7953      	ldrb	r3, [r2, #5]
   15302:	f043 0301 	orr.w	r3, r3, #1
   15306:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   15308:	4622      	mov	r2, r4
   1530a:	e7f7      	b.n	152fc <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
   1530c:	f001 f9e6 	bl	166dc <k_queue_append_list>
}
   15310:	bd10      	pop	{r4, pc}

00015312 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   15312:	b538      	push	{r3, r4, r5, lr}
   15314:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   15316:	e00f      	b.n	15338 <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   15318:	4620      	mov	r0, r4
   1531a:	f7ff ff03 	bl	15124 <data_unref>
			buf->__buf = NULL;
   1531e:	2300      	movs	r3, #0
   15320:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   15322:	2300      	movs	r3, #0
   15324:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   15326:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   15328:	79a0      	ldrb	r0, [r4, #6]
   1532a:	f7fb f9e9 	bl	10700 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1532e:	6a03      	ldr	r3, [r0, #32]
   15330:	b16b      	cbz	r3, 1534e <net_buf_unref+0x3c>
			pool->destroy(buf);
   15332:	4620      	mov	r0, r4
   15334:	4798      	blx	r3
{
   15336:	462c      	mov	r4, r5
	while (buf) {
   15338:	b184      	cbz	r4, 1535c <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   1533a:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   1533c:	7923      	ldrb	r3, [r4, #4]
   1533e:	3b01      	subs	r3, #1
   15340:	b2db      	uxtb	r3, r3
   15342:	7123      	strb	r3, [r4, #4]
   15344:	b953      	cbnz	r3, 1535c <net_buf_unref+0x4a>
		if (buf->__buf) {
   15346:	6921      	ldr	r1, [r4, #16]
   15348:	2900      	cmp	r1, #0
   1534a:	d1e5      	bne.n	15318 <net_buf_unref+0x6>
   1534c:	e7e9      	b.n	15322 <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1534e:	79a0      	ldrb	r0, [r4, #6]
   15350:	f7fb f9d6 	bl	10700 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   15354:	4621      	mov	r1, r4
   15356:	f001 f9b6 	bl	166c6 <k_queue_prepend>
}
   1535a:	e7ec      	b.n	15336 <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1535c:	bd38      	pop	{r3, r4, r5, pc}

0001535e <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1535e:	7902      	ldrb	r2, [r0, #4]
   15360:	3201      	adds	r2, #1
   15362:	7102      	strb	r2, [r0, #4]
	return buf;
}
   15364:	4770      	bx	lr

00015366 <net_buf_simple_add>:
	return buf->data + buf->len;
   15366:	6802      	ldr	r2, [r0, #0]
   15368:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1536a:	4419      	add	r1, r3
   1536c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1536e:	18d0      	adds	r0, r2, r3
   15370:	4770      	bx	lr

00015372 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   15372:	b538      	push	{r3, r4, r5, lr}
   15374:	460d      	mov	r5, r1
   15376:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   15378:	4611      	mov	r1, r2
   1537a:	f7ff fff4 	bl	15366 <net_buf_simple_add>
   1537e:	4622      	mov	r2, r4
   15380:	4629      	mov	r1, r5
   15382:	f7ff fd55 	bl	14e30 <memcpy>
}
   15386:	bd38      	pop	{r3, r4, r5, pc}

00015388 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   15388:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1538a:	8882      	ldrh	r2, [r0, #4]
   1538c:	1a52      	subs	r2, r2, r1
   1538e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   15390:	6800      	ldr	r0, [r0, #0]
   15392:	4408      	add	r0, r1
   15394:	6018      	str	r0, [r3, #0]
}
   15396:	4770      	bx	lr

00015398 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   15398:	4603      	mov	r3, r0
	void *data = buf->data;
   1539a:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1539c:	889a      	ldrh	r2, [r3, #4]
   1539e:	1a52      	subs	r2, r2, r1
   153a0:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   153a2:	4401      	add	r1, r0
   153a4:	6019      	str	r1, [r3, #0]

	return data;
}
   153a6:	4770      	bx	lr

000153a8 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   153a8:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   153aa:	6803      	ldr	r3, [r0, #0]
   153ac:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   153ae:	2101      	movs	r1, #1
   153b0:	f7ff ffea 	bl	15388 <net_buf_simple_pull>

	return val;
}
   153b4:	4620      	mov	r0, r4
   153b6:	bd10      	pop	{r4, pc}

000153b8 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   153b8:	6802      	ldr	r2, [r0, #0]
   153ba:	6880      	ldr	r0, [r0, #8]
}
   153bc:	1a10      	subs	r0, r2, r0
   153be:	4770      	bx	lr

000153c0 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   153c0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   153c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   153c6:	0089      	lsls	r1, r1, #2
   153c8:	3138      	adds	r1, #56	; 0x38
}
   153ca:	4408      	add	r0, r1
   153cc:	4770      	bx	lr

000153ce <get_sub_config>:
	const struct nrf_clock_control_config *config =
   153ce:	6840      	ldr	r0, [r0, #4]
}
   153d0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   153d4:	4770      	bx	lr

000153d6 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   153d6:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   153d8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   153dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   153e0:	4770      	bx	lr

000153e2 <get_status>:
{
   153e2:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   153e4:	b2c9      	uxtb	r1, r1
   153e6:	f7ff ffeb 	bl	153c0 <get_sub_data>
   153ea:	6880      	ldr	r0, [r0, #8]
}
   153ec:	f000 0007 	and.w	r0, r0, #7
   153f0:	bd08      	pop	{r3, pc}

000153f2 <set_off_state>:
	__asm__ volatile(
   153f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   153f6:	f3ef 8211 	mrs	r2, BASEPRI
   153fa:	f383 8812 	msr	BASEPRI_MAX, r3
   153fe:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   15402:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   15404:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   15408:	d001      	beq.n	1540e <set_off_state+0x1c>
   1540a:	428b      	cmp	r3, r1
   1540c:	d107      	bne.n	1541e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1540e:	2301      	movs	r3, #1
   15410:	6003      	str	r3, [r0, #0]
	int err = 0;
   15412:	2000      	movs	r0, #0
	__asm__ volatile(
   15414:	f382 8811 	msr	BASEPRI, r2
   15418:	f3bf 8f6f 	isb	sy
}
   1541c:	4770      	bx	lr
		err = -EPERM;
   1541e:	f04f 30ff 	mov.w	r0, #4294967295
   15422:	e7f7      	b.n	15414 <set_off_state+0x22>

00015424 <set_starting_state>:
{
   15424:	b410      	push	{r4}
	__asm__ volatile(
   15426:	f04f 0340 	mov.w	r3, #64	; 0x40
   1542a:	f3ef 8211 	mrs	r2, BASEPRI
   1542e:	f383 8812 	msr	BASEPRI_MAX, r3
   15432:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   15436:	6803      	ldr	r3, [r0, #0]
   15438:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1543c:	f003 0307 	and.w	r3, r3, #7
   15440:	2b01      	cmp	r3, #1
   15442:	d009      	beq.n	15458 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   15444:	428c      	cmp	r4, r1
   15446:	d00a      	beq.n	1545e <set_starting_state+0x3a>
		err = -EPERM;
   15448:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   1544c:	f382 8811 	msr	BASEPRI, r2
   15450:	f3bf 8f6f 	isb	sy
}
   15454:	bc10      	pop	{r4}
   15456:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   15458:	6001      	str	r1, [r0, #0]
	int err = 0;
   1545a:	2000      	movs	r0, #0
   1545c:	e7f6      	b.n	1544c <set_starting_state+0x28>
		err = -EALREADY;
   1545e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15462:	e7f3      	b.n	1544c <set_starting_state+0x28>

00015464 <set_on_state>:
	__asm__ volatile(
   15464:	f04f 0340 	mov.w	r3, #64	; 0x40
   15468:	f3ef 8211 	mrs	r2, BASEPRI
   1546c:	f383 8812 	msr	BASEPRI_MAX, r3
   15470:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   15474:	6803      	ldr	r3, [r0, #0]
   15476:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1547a:	f043 0302 	orr.w	r3, r3, #2
   1547e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   15480:	f382 8811 	msr	BASEPRI, r2
   15484:	f3bf 8f6f 	isb	sy
}
   15488:	4770      	bx	lr

0001548a <clkstarted_handle>:
{
   1548a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1548c:	4606      	mov	r6, r0
   1548e:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   15490:	f7ff ff96 	bl	153c0 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   15494:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   15496:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   15498:	2300      	movs	r3, #0
   1549a:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   1549e:	f7ff ffe1 	bl	15464 <set_on_state>
	if (callback) {
   154a2:	b11d      	cbz	r5, 154ac <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   154a4:	463a      	mov	r2, r7
   154a6:	4621      	mov	r1, r4
   154a8:	4630      	mov	r0, r6
   154aa:	47a8      	blx	r5
}
   154ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000154ae <stop>:
{
   154ae:	b570      	push	{r4, r5, r6, lr}
   154b0:	4606      	mov	r6, r0
   154b2:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   154b4:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   154b6:	4621      	mov	r1, r4
   154b8:	f7ff ff82 	bl	153c0 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   154bc:	4629      	mov	r1, r5
   154be:	3008      	adds	r0, #8
   154c0:	f7ff ff97 	bl	153f2 <set_off_state>
	if (err < 0) {
   154c4:	2800      	cmp	r0, #0
   154c6:	db06      	blt.n	154d6 <stop+0x28>
	get_sub_config(dev, type)->stop();
   154c8:	4621      	mov	r1, r4
   154ca:	4630      	mov	r0, r6
   154cc:	f7ff ff7f 	bl	153ce <get_sub_config>
   154d0:	6843      	ldr	r3, [r0, #4]
   154d2:	4798      	blx	r3
	return 0;
   154d4:	2000      	movs	r0, #0
}
   154d6:	bd70      	pop	{r4, r5, r6, pc}

000154d8 <api_stop>:
{
   154d8:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   154da:	2280      	movs	r2, #128	; 0x80
   154dc:	f7ff ffe7 	bl	154ae <stop>
}
   154e0:	bd08      	pop	{r3, pc}

000154e2 <async_start>:
{
   154e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   154e6:	4606      	mov	r6, r0
   154e8:	4690      	mov	r8, r2
   154ea:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   154ec:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   154ee:	4629      	mov	r1, r5
   154f0:	f7ff ff66 	bl	153c0 <get_sub_data>
   154f4:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   154f6:	9906      	ldr	r1, [sp, #24]
   154f8:	3008      	adds	r0, #8
   154fa:	f7ff ff93 	bl	15424 <set_starting_state>
	if (err < 0) {
   154fe:	2800      	cmp	r0, #0
   15500:	db09      	blt.n	15516 <async_start+0x34>
	subdata->cb = cb;
   15502:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   15506:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   15508:	4629      	mov	r1, r5
   1550a:	4630      	mov	r0, r6
   1550c:	f7ff ff5f 	bl	153ce <get_sub_config>
   15510:	6803      	ldr	r3, [r0, #0]
   15512:	4798      	blx	r3
	return 0;
   15514:	2000      	movs	r0, #0
}
   15516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001551a <api_start>:
{
   1551a:	b510      	push	{r4, lr}
   1551c:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1551e:	2480      	movs	r4, #128	; 0x80
   15520:	9400      	str	r4, [sp, #0]
   15522:	f7ff ffde 	bl	154e2 <async_start>
}
   15526:	b002      	add	sp, #8
   15528:	bd10      	pop	{r4, pc}

0001552a <onoff_started_callback>:
{
   1552a:	b510      	push	{r4, lr}
   1552c:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   1552e:	b2c9      	uxtb	r1, r1
   15530:	f7ff ff51 	bl	153d6 <get_onoff_manager>
	notify(mgr, 0);
   15534:	2100      	movs	r1, #0
   15536:	47a0      	blx	r4
}
   15538:	bd10      	pop	{r4, pc}

0001553a <hfclk_start>:
{
   1553a:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1553c:	2001      	movs	r0, #1
   1553e:	f7fc fa83 	bl	11a48 <nrfx_clock_start>
}
   15542:	bd08      	pop	{r3, pc}

00015544 <hfclk_stop>:
{
   15544:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   15546:	2001      	movs	r0, #1
   15548:	f000 fe9e 	bl	16288 <nrfx_clock_stop>
}
   1554c:	bd08      	pop	{r3, pc}

0001554e <lfclk_stop>:
{
   1554e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   15550:	2000      	movs	r0, #0
   15552:	f000 fe99 	bl	16288 <nrfx_clock_stop>
}
   15556:	bd08      	pop	{r3, pc}

00015558 <blocking_start_callback>:
{
   15558:	b508      	push	{r3, lr}
   1555a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1555c:	f7fd fcbe 	bl	12edc <z_impl_k_sem_give>
}
   15560:	bd08      	pop	{r3, pc}

00015562 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   15562:	f010 0f10 	tst.w	r0, #16
   15566:	d104      	bne.n	15572 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   15568:	f010 0f20 	tst.w	r0, #32
   1556c:	d103      	bne.n	15576 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   1556e:	2000      	movs	r0, #0
   15570:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   15572:	2003      	movs	r0, #3
   15574:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   15576:	2001      	movs	r0, #1
}
   15578:	4770      	bx	lr

0001557a <gpio_nrfx_port_get_raw>:
	return port->config;
   1557a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1557c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1557e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   15582:	600b      	str	r3, [r1, #0]
}
   15584:	2000      	movs	r0, #0
   15586:	4770      	bx	lr

00015588 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   15588:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1558a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1558c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   15590:	4042      	eors	r2, r0
   15592:	400a      	ands	r2, r1
   15594:	4042      	eors	r2, r0
    p_reg->OUT = value;
   15596:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1559a:	2000      	movs	r0, #0
   1559c:	4770      	bx	lr

0001559e <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   1559e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   155a0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   155a2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   155a6:	2000      	movs	r0, #0
   155a8:	4770      	bx	lr

000155aa <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   155aa:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   155ac:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   155ae:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   155b2:	2000      	movs	r0, #0
   155b4:	4770      	bx	lr

000155b6 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   155b6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   155b8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   155ba:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   155be:	404b      	eors	r3, r1
    p_reg->OUT = value;
   155c0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   155c4:	2000      	movs	r0, #0
   155c6:	4770      	bx	lr

000155c8 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   155c8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   155cc:	d007      	beq.n	155de <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   155ce:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   155d2:	d00d      	beq.n	155f0 <get_trigger+0x28>
   155d4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   155d8:	d008      	beq.n	155ec <get_trigger+0x24>
   155da:	2001      	movs	r0, #1
}
   155dc:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   155de:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   155e2:	d001      	beq.n	155e8 <get_trigger+0x20>
   155e4:	2005      	movs	r0, #5
   155e6:	4770      	bx	lr
   155e8:	2004      	movs	r0, #4
   155ea:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   155ec:	2002      	movs	r0, #2
   155ee:	4770      	bx	lr
   155f0:	2003      	movs	r0, #3
   155f2:	4770      	bx	lr

000155f4 <gpio_nrfx_manage_callback>:
{
   155f4:	b470      	push	{r4, r5, r6}
	return port->data;
   155f6:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   155f8:	1d05      	adds	r5, r0, #4
	return list->head;
   155fa:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   155fc:	b1db      	cbz	r3, 15636 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   155fe:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15600:	2400      	movs	r4, #0
   15602:	e00a      	b.n	1561a <gpio_nrfx_manage_callback+0x26>
	return node->next;
   15604:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   15606:	6043      	str	r3, [r0, #4]
	return list->tail;
   15608:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1560a:	42a1      	cmp	r1, r4
   1560c:	d10f      	bne.n	1562e <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   1560e:	606b      	str	r3, [r5, #4]
}
   15610:	e00d      	b.n	1562e <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   15612:	606c      	str	r4, [r5, #4]
}
   15614:	e00b      	b.n	1562e <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15616:	461c      	mov	r4, r3
   15618:	681b      	ldr	r3, [r3, #0]
   1561a:	b15b      	cbz	r3, 15634 <gpio_nrfx_manage_callback+0x40>
   1561c:	429e      	cmp	r6, r3
   1561e:	d1fa      	bne.n	15616 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   15620:	2c00      	cmp	r4, #0
   15622:	d0ef      	beq.n	15604 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   15624:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   15626:	6023      	str	r3, [r4, #0]
	return list->tail;
   15628:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1562a:	4299      	cmp	r1, r3
   1562c:	d0f1      	beq.n	15612 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   1562e:	2300      	movs	r3, #0
   15630:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15632:	e000      	b.n	15636 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   15634:	b152      	cbz	r2, 1564c <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
   15636:	b162      	cbz	r2, 15652 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   15638:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   1563a:	600b      	str	r3, [r1, #0]
	list->head = node;
   1563c:	6041      	str	r1, [r0, #4]
	return list->tail;
   1563e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15640:	b10b      	cbz	r3, 15646 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   15642:	2000      	movs	r0, #0
   15644:	e006      	b.n	15654 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   15646:	6069      	str	r1, [r5, #4]
   15648:	2000      	movs	r0, #0
}
   1564a:	e003      	b.n	15654 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   1564c:	f06f 0015 	mvn.w	r0, #21
   15650:	e000      	b.n	15654 <gpio_nrfx_manage_callback+0x60>
	return 0;
   15652:	2000      	movs	r0, #0
}
   15654:	bc70      	pop	{r4, r5, r6}
   15656:	4770      	bx	lr

00015658 <nrfx_gpio_handler>:
{
   15658:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   1565a:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   1565e:	0940      	lsrs	r0, r0, #5
   15660:	f7fb fa72 	bl	10b48 <get_dev>
	if (port == NULL) {
   15664:	b1d8      	cbz	r0, 1569e <nrfx_gpio_handler+0x46>
   15666:	4606      	mov	r6, r0
	return port->data;
   15668:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   1566a:	2501      	movs	r5, #1
   1566c:	40a5      	lsls	r5, r4
	return list->head;
   1566e:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15670:	b119      	cbz	r1, 1567a <nrfx_gpio_handler+0x22>
   15672:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   15674:	b149      	cbz	r1, 1568a <nrfx_gpio_handler+0x32>
	return node->next;
   15676:	680c      	ldr	r4, [r1, #0]
   15678:	e007      	b.n	1568a <nrfx_gpio_handler+0x32>
   1567a:	460c      	mov	r4, r1
   1567c:	e005      	b.n	1568a <nrfx_gpio_handler+0x32>
   1567e:	b164      	cbz	r4, 1569a <nrfx_gpio_handler+0x42>
   15680:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   15682:	b104      	cbz	r4, 15686 <nrfx_gpio_handler+0x2e>
	return node->next;
   15684:	6823      	ldr	r3, [r4, #0]
   15686:	4621      	mov	r1, r4
   15688:	461c      	mov	r4, r3
   1568a:	b141      	cbz	r1, 1569e <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   1568c:	688a      	ldr	r2, [r1, #8]
   1568e:	402a      	ands	r2, r5
   15690:	d0f5      	beq.n	1567e <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   15692:	684b      	ldr	r3, [r1, #4]
   15694:	4630      	mov	r0, r6
   15696:	4798      	blx	r3
   15698:	e7f1      	b.n	1567e <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1569a:	4623      	mov	r3, r4
   1569c:	e7f3      	b.n	15686 <nrfx_gpio_handler+0x2e>
}
   1569e:	bd70      	pop	{r4, r5, r6, pc}

000156a0 <uarte_nrfx_pins_configure>:
	return dev->config;
   156a0:	6843      	ldr	r3, [r0, #4]
	if (!sleep) {
   156a2:	2900      	cmp	r1, #0
   156a4:	d15d      	bne.n	15762 <uarte_nrfx_pins_configure+0xc2>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   156a6:	68da      	ldr	r2, [r3, #12]
   156a8:	f1b2 3fff 	cmp.w	r2, #4294967295
   156ac:	d010      	beq.n	156d0 <uarte_nrfx_pins_configure+0x30>
   156ae:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   156b2:	2101      	movs	r1, #1
   156b4:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   156b8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   156bc:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->tx_pin);
   156c0:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
   156c2:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   156c6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   156ca:	2003      	movs	r0, #3
   156cc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   156d0:	691a      	ldr	r2, [r3, #16]
   156d2:	f1b2 3fff 	cmp.w	r2, #4294967295
   156d6:	d00c      	beq.n	156f2 <uarte_nrfx_pins_configure+0x52>
					   (cfg->rx_pull_up ?
   156d8:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   156da:	2900      	cmp	r1, #0
   156dc:	d03d      	beq.n	1575a <uarte_nrfx_pins_configure+0xba>
   156de:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
   156e0:	f002 021f 	and.w	r2, r2, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   156e4:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   156e6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   156ea:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   156ee:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   156f2:	695a      	ldr	r2, [r3, #20]
   156f4:	f1b2 3fff 	cmp.w	r2, #4294967295
   156f8:	d010      	beq.n	1571c <uarte_nrfx_pins_configure+0x7c>
    *p_pin = pin_number & 0x1F;
   156fa:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   156fe:	2101      	movs	r1, #1
   15700:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   15704:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   15708:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->rts_pin);
   1570c:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
   1570e:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   15712:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   15716:	2003      	movs	r0, #3
   15718:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1571c:	699a      	ldr	r2, [r3, #24]
   1571e:	f1b2 3fff 	cmp.w	r2, #4294967295
   15722:	d00b      	beq.n	1573c <uarte_nrfx_pins_configure+0x9c>
					   (cfg->cts_pull_up ?
   15724:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   15726:	b1d1      	cbz	r1, 1575e <uarte_nrfx_pins_configure+0xbe>
   15728:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
   1572a:	f002 021f 	and.w	r2, r2, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1572e:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   15730:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   15734:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   15738:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1573c:	681a      	ldr	r2, [r3, #0]
   1573e:	68d8      	ldr	r0, [r3, #12]
   15740:	6919      	ldr	r1, [r3, #16]
    p_reg->PSEL.TXD = pseltxd;
   15742:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   15746:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   1574a:	681a      	ldr	r2, [r3, #0]
   1574c:	6959      	ldr	r1, [r3, #20]
   1574e:	699b      	ldr	r3, [r3, #24]
    p_reg->PSEL.RTS = pselrts;
   15750:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   15754:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   15758:	4770      	bx	lr
			nrf_gpio_cfg_input(cfg->rx_pin,
   1575a:	2100      	movs	r1, #0
   1575c:	e7c0      	b.n	156e0 <uarte_nrfx_pins_configure+0x40>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1575e:	2100      	movs	r1, #0
   15760:	e7e3      	b.n	1572a <uarte_nrfx_pins_configure+0x8a>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15762:	68da      	ldr	r2, [r3, #12]
   15764:	f1b2 3fff 	cmp.w	r2, #4294967295
   15768:	d008      	beq.n	1577c <uarte_nrfx_pins_configure+0xdc>
    *p_pin = pin_number & 0x1F;
   1576a:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   1576e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   15772:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   15776:	2002      	movs	r0, #2
   15778:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1577c:	691a      	ldr	r2, [r3, #16]
   1577e:	f1b2 3fff 	cmp.w	r2, #4294967295
   15782:	d008      	beq.n	15796 <uarte_nrfx_pins_configure+0xf6>
    *p_pin = pin_number & 0x1F;
   15784:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   15788:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1578c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   15790:	2002      	movs	r0, #2
   15792:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15796:	695a      	ldr	r2, [r3, #20]
   15798:	f1b2 3fff 	cmp.w	r2, #4294967295
   1579c:	d008      	beq.n	157b0 <uarte_nrfx_pins_configure+0x110>
    *p_pin = pin_number & 0x1F;
   1579e:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   157a2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   157a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   157aa:	2002      	movs	r0, #2
   157ac:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   157b0:	699a      	ldr	r2, [r3, #24]
   157b2:	f1b2 3fff 	cmp.w	r2, #4294967295
   157b6:	d0c1      	beq.n	1573c <uarte_nrfx_pins_configure+0x9c>
    *p_pin = pin_number & 0x1F;
   157b8:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   157bc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   157c0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   157c4:	2002      	movs	r0, #2
   157c6:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
}
   157ca:	e7b7      	b.n	1573c <uarte_nrfx_pins_configure+0x9c>

000157cc <endtx_isr>:
	return dev->config;
   157cc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   157ce:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   157d0:	f04f 0140 	mov.w	r1, #64	; 0x40
   157d4:	f3ef 8211 	mrs	r2, BASEPRI
   157d8:	f381 8812 	msr	BASEPRI_MAX, r1
   157dc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   157e0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   157e4:	b131      	cbz	r1, 157f4 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   157e6:	2100      	movs	r1, #0
   157e8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   157ec:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   157f0:	2101      	movs	r1, #1
   157f2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   157f4:	f382 8811 	msr	BASEPRI, r2
   157f8:	f3bf 8f6f 	isb	sy
}
   157fc:	4770      	bx	lr

000157fe <uarte_nrfx_isr_int>:
{
   157fe:	b538      	push	{r3, r4, r5, lr}
   15800:	4604      	mov	r4, r0
	return dev->config;
   15802:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   15804:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   15806:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1580a:	f413 7f80 	tst.w	r3, #256	; 0x100
   1580e:	d002      	beq.n	15816 <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15810:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   15814:	b9db      	cbnz	r3, 1584e <uarte_nrfx_isr_int+0x50>
	return dev->config;
   15816:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   15818:	685b      	ldr	r3, [r3, #4]
   1581a:	f013 0f10 	tst.w	r3, #16
   1581e:	d015      	beq.n	1584c <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
   15820:	f04f 0240 	mov.w	r2, #64	; 0x40
   15824:	f3ef 8311 	mrs	r3, BASEPRI
   15828:	f382 8812 	msr	BASEPRI_MAX, r2
   1582c:	f3bf 8f6f 	isb	sy
   15830:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   15834:	b112      	cbz	r2, 1583c <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15836:	2200      	movs	r2, #0
   15838:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1583c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   15840:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   15844:	f383 8811 	msr	BASEPRI, r3
   15848:	f3bf 8f6f 	isb	sy
}
   1584c:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   1584e:	f7ff ffbd 	bl	157cc <endtx_isr>
   15852:	e7e0      	b.n	15816 <uarte_nrfx_isr_int+0x18>

00015854 <uarte_nrfx_configure>:
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   15854:	794b      	ldrb	r3, [r1, #5]
   15856:	2b01      	cmp	r3, #1
   15858:	d13a      	bne.n	158d0 <uarte_nrfx_configure+0x7c>
{
   1585a:	b530      	push	{r4, r5, lr}
   1585c:	b083      	sub	sp, #12
   1585e:	4605      	mov	r5, r0
   15860:	460c      	mov	r4, r1
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15862:	798b      	ldrb	r3, [r1, #6]
   15864:	2b03      	cmp	r3, #3
   15866:	d137      	bne.n	158d8 <uarte_nrfx_configure+0x84>
	switch (cfg->flow_ctrl) {
   15868:	79cb      	ldrb	r3, [r1, #7]
   1586a:	b133      	cbz	r3, 1587a <uarte_nrfx_configure+0x26>
   1586c:	2b01      	cmp	r3, #1
   1586e:	d00e      	beq.n	1588e <uarte_nrfx_configure+0x3a>
   15870:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   15874:	4618      	mov	r0, r3
   15876:	b003      	add	sp, #12
   15878:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   1587a:	2300      	movs	r3, #0
   1587c:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   15880:	7923      	ldrb	r3, [r4, #4]
   15882:	b143      	cbz	r3, 15896 <uarte_nrfx_configure+0x42>
   15884:	2b02      	cmp	r3, #2
   15886:	d01f      	beq.n	158c8 <uarte_nrfx_configure+0x74>
   15888:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1588c:	e7f2      	b.n	15874 <uarte_nrfx_configure+0x20>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   1588e:	2301      	movs	r3, #1
   15890:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   15894:	e7f4      	b.n	15880 <uarte_nrfx_configure+0x2c>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   15896:	2300      	movs	r3, #0
   15898:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1589c:	6821      	ldr	r1, [r4, #0]
   1589e:	4628      	mov	r0, r5
   158a0:	f7fb fa7c 	bl	10d9c <baudrate_set>
   158a4:	4603      	mov	r3, r0
   158a6:	b9d0      	cbnz	r0, 158de <uarte_nrfx_configure+0x8a>
	return dev->config;
   158a8:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   158aa:	6811      	ldr	r1, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   158ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
                    | (uint32_t)p_cfg->hwfc;
   158b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   158b4:	4302      	orrs	r2, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   158b6:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	return dev->data;
   158ba:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   158bc:	3204      	adds	r2, #4
   158be:	e894 0003 	ldmia.w	r4, {r0, r1}
   158c2:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   158c6:	e7d5      	b.n	15874 <uarte_nrfx_configure+0x20>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   158c8:	230e      	movs	r3, #14
   158ca:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   158ce:	e7e5      	b.n	1589c <uarte_nrfx_configure+0x48>
		return -ENOTSUP;
   158d0:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   158d4:	4618      	mov	r0, r3
   158d6:	4770      	bx	lr
		return -ENOTSUP;
   158d8:	f06f 0385 	mvn.w	r3, #133	; 0x85
   158dc:	e7ca      	b.n	15874 <uarte_nrfx_configure+0x20>
		return -ENOTSUP;
   158de:	f06f 0385 	mvn.w	r3, #133	; 0x85
   158e2:	e7c7      	b.n	15874 <uarte_nrfx_configure+0x20>

000158e4 <uarte_nrfx_config_get>:
{
   158e4:	460b      	mov	r3, r1
	return dev->data;
   158e6:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   158e8:	6891      	ldr	r1, [r2, #8]
   158ea:	6850      	ldr	r0, [r2, #4]
   158ec:	e883 0003 	stmia.w	r3, {r0, r1}
}
   158f0:	2000      	movs	r0, #0
   158f2:	4770      	bx	lr

000158f4 <uarte_nrfx_err_check>:
	return dev->config;
   158f4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   158f6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   158f8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   158fc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   15900:	4770      	bx	lr

00015902 <is_tx_ready>:
	return dev->config;
   15902:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   15904:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   15906:	685b      	ldr	r3, [r3, #4]
   15908:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1590c:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   15910:	b929      	cbnz	r1, 1591e <is_tx_ready+0x1c>
   15912:	b933      	cbnz	r3, 15922 <is_tx_ready+0x20>
   15914:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   15918:	b92b      	cbnz	r3, 15926 <is_tx_ready+0x24>
   1591a:	2000      	movs	r0, #0
   1591c:	4770      	bx	lr
   1591e:	2001      	movs	r0, #1
   15920:	4770      	bx	lr
   15922:	2000      	movs	r0, #0
   15924:	4770      	bx	lr
   15926:	2001      	movs	r0, #1
}
   15928:	4770      	bx	lr

0001592a <uarte_enable>:
	return dev->config;
   1592a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1592c:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1592e:	2208      	movs	r2, #8
   15930:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   15934:	4770      	bx	lr

00015936 <tx_start>:
{
   15936:	b510      	push	{r4, lr}
	return dev->config;
   15938:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1593a:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1593c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15940:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15944:	2300      	movs	r3, #0
   15946:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1594a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   1594e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   15952:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   15956:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   15958:	685b      	ldr	r3, [r3, #4]
   1595a:	f013 0f10 	tst.w	r3, #16
   1595e:	d102      	bne.n	15966 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15960:	2301      	movs	r3, #1
   15962:	60a3      	str	r3, [r4, #8]
}
   15964:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   15966:	2101      	movs	r1, #1
   15968:	f7ff ffdf 	bl	1592a <uarte_enable>
    p_reg->INTENSET = mask;
   1596c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   15970:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   15974:	e7f4      	b.n	15960 <tx_start+0x2a>

00015976 <uarte_nrfx_poll_in>:
{
   15976:	b410      	push	{r4}
	return dev->data;
   15978:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   1597a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1597c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1597e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   15982:	b152      	cbz	r2, 1599a <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   15984:	7c62      	ldrb	r2, [r4, #17]
   15986:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15988:	2000      	movs	r0, #0
   1598a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1598e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15992:	2201      	movs	r2, #1
   15994:	601a      	str	r2, [r3, #0]
}
   15996:	bc10      	pop	{r4}
   15998:	4770      	bx	lr
		return -1;
   1599a:	f04f 30ff 	mov.w	r0, #4294967295
   1599e:	e7fa      	b.n	15996 <uarte_nrfx_poll_in+0x20>

000159a0 <wait_tx_ready>:
{
   159a0:	b570      	push	{r4, r5, r6, lr}
   159a2:	4606      	mov	r6, r0
   159a4:	e014      	b.n	159d0 <wait_tx_ready+0x30>
		if (res) {
   159a6:	b17d      	cbz	r5, 159c8 <wait_tx_ready+0x28>
	__asm__ volatile(
   159a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   159ac:	f3ef 8411 	mrs	r4, BASEPRI
   159b0:	f383 8812 	msr	BASEPRI_MAX, r3
   159b4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   159b8:	4630      	mov	r0, r6
   159ba:	f7ff ffa2 	bl	15902 <is_tx_ready>
   159be:	b9a0      	cbnz	r0, 159ea <wait_tx_ready+0x4a>
	__asm__ volatile(
   159c0:	f384 8811 	msr	BASEPRI, r4
   159c4:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   159c8:	2021      	movs	r0, #33	; 0x21
   159ca:	2100      	movs	r1, #0
   159cc:	f7fd ffce 	bl	1396c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   159d0:	2464      	movs	r4, #100	; 0x64
   159d2:	4630      	mov	r0, r6
   159d4:	f7ff ff95 	bl	15902 <is_tx_ready>
   159d8:	4605      	mov	r5, r0
   159da:	2800      	cmp	r0, #0
   159dc:	d1e3      	bne.n	159a6 <wait_tx_ready+0x6>
   159de:	2001      	movs	r0, #1
   159e0:	f000 fc61 	bl	162a6 <nrfx_busy_wait>
   159e4:	3c01      	subs	r4, #1
   159e6:	d1f4      	bne.n	159d2 <wait_tx_ready+0x32>
   159e8:	e7dd      	b.n	159a6 <wait_tx_ready+0x6>
}
   159ea:	4620      	mov	r0, r4
   159ec:	bd70      	pop	{r4, r5, r6, pc}

000159ee <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   159ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   159f0:	4604      	mov	r4, r0
	return dev->config;
   159f2:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   159f4:	6835      	ldr	r5, [r6, #0]
	return dev->data;
   159f6:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   159f8:	2100      	movs	r1, #0
   159fa:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   159fe:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   15a00:	f7ff fe4e 	bl	156a0 <uarte_nrfx_pins_configure>
	return dev->data;
   15a04:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   15a06:	3104      	adds	r1, #4
   15a08:	4620      	mov	r0, r4
   15a0a:	f7ff ff23 	bl	15854 <uarte_nrfx_configure>
	if (err) {
   15a0e:	4604      	mov	r4, r0
   15a10:	bb68      	cbnz	r0, 15a6e <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   15a12:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   15a14:	f013 0f02 	tst.w	r3, #2
   15a18:	d12b      	bne.n	15a72 <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15a1a:	2308      	movs	r3, #8
   15a1c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   15a20:	7a33      	ldrb	r3, [r6, #8]
   15a22:	b95b      	cbnz	r3, 15a3c <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15a24:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   15a28:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   15a2c:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15a30:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   15a34:	2301      	movs	r3, #1
   15a36:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15a3a:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   15a3c:	6873      	ldr	r3, [r6, #4]
   15a3e:	f013 0f02 	tst.w	r3, #2
   15a42:	d103      	bne.n	15a4c <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
   15a44:	f44f 7380 	mov.w	r3, #256	; 0x100
   15a48:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   15a4c:	6873      	ldr	r3, [r6, #4]
   15a4e:	f013 0f10 	tst.w	r3, #16
   15a52:	d003      	beq.n	15a5c <uarte_instance_init+0x6e>
   15a54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   15a58:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   15a5c:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15a5e:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15a62:	2300      	movs	r3, #0
   15a64:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15a68:	2301      	movs	r3, #1
   15a6a:	60ab      	str	r3, [r5, #8]
   15a6c:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   15a6e:	4620      	mov	r0, r4
   15a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   15a72:	4639      	mov	r1, r7
   15a74:	4628      	mov	r0, r5
   15a76:	f7fb fa71 	bl	10f5c <endtx_stoptx_ppi_init>
		if (err < 0) {
   15a7a:	2800      	cmp	r0, #0
   15a7c:	dacd      	bge.n	15a1a <uarte_instance_init+0x2c>
			return err;
   15a7e:	4604      	mov	r4, r0
   15a80:	e7f5      	b.n	15a6e <uarte_instance_init+0x80>

00015a82 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   15a82:	b510      	push	{r4, lr}
   15a84:	4604      	mov	r4, r0
   15a86:	2200      	movs	r2, #0
   15a88:	2101      	movs	r1, #1
   15a8a:	2002      	movs	r0, #2
   15a8c:	f7f9 f958 	bl	ed40 <z_arm_irq_priority_set>
   15a90:	2002      	movs	r0, #2
   15a92:	f7f9 f923 	bl	ecdc <arch_irq_enable>
   15a96:	2100      	movs	r1, #0
   15a98:	4620      	mov	r0, r4
   15a9a:	f7ff ffa8 	bl	159ee <uarte_instance_init>
   15a9e:	bd10      	pop	{r4, pc}

00015aa0 <rng_pool_put>:
{
   15aa0:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   15aa2:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   15aa4:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   15aa6:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   15aa8:	1a9a      	subs	r2, r3, r2
   15aaa:	ea34 0202 	bics.w	r2, r4, r2
   15aae:	d008      	beq.n	15ac2 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   15ab0:	18c2      	adds	r2, r0, r3
   15ab2:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   15ab4:	3301      	adds	r3, #1
   15ab6:	b25b      	sxtb	r3, r3
   15ab8:	4023      	ands	r3, r4
   15aba:	7083      	strb	r3, [r0, #2]
	return 0;
   15abc:	2000      	movs	r0, #0
}
   15abe:	bc10      	pop	{r4}
   15ac0:	4770      	bx	lr
		return -ENOBUFS;
   15ac2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15ac6:	e7fa      	b.n	15abe <rng_pool_put+0x1e>

00015ac8 <rng_pool_init>:
	rngp->first_alloc = 0U;
   15ac8:	2300      	movs	r3, #0
   15aca:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   15acc:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   15ace:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   15ad0:	3901      	subs	r1, #1
   15ad2:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   15ad4:	7102      	strb	r2, [r0, #4]
}
   15ad6:	4770      	bx	lr

00015ad8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   15ad8:	4770      	bx	lr

00015ada <counter_sub>:
	return (a - b) & COUNTER_MAX;
   15ada:	1a40      	subs	r0, r0, r1
}
   15adc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15ae0:	4770      	bx	lr

00015ae2 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   15ae2:	f100 0350 	add.w	r3, r0, #80	; 0x50
   15ae6:	009b      	lsls	r3, r3, #2
   15ae8:	b29b      	uxth	r3, r3
   15aea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15aee:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   15af2:	2200      	movs	r2, #0
   15af4:	601a      	str	r2, [r3, #0]
   15af6:	681b      	ldr	r3, [r3, #0]
}
   15af8:	4770      	bx	lr

00015afa <absolute_time_to_cc>:
}
   15afa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15afe:	4770      	bx	lr

00015b00 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   15b00:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   15b04:	b672      	cpsid	i
}
   15b06:	4770      	bx	lr

00015b08 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15b08:	f380 8810 	msr	PRIMASK, r0
}
   15b0c:	4770      	bx	lr

00015b0e <set_absolute_alarm>:
{
   15b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b10:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   15b12:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   15b16:	f7fb fb97 	bl	11248 <get_comparator>
   15b1a:	4607      	mov	r7, r0
   15b1c:	e019      	b.n	15b52 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   15b1e:	2013      	movs	r0, #19
   15b20:	f001 f82c 	bl	16b7c <z_impl_k_busy_wait>
}
   15b24:	e022      	b.n	15b6c <set_absolute_alarm+0x5e>
		event_clear(chan);
   15b26:	4630      	mov	r0, r6
   15b28:	f7ff ffdb 	bl	15ae2 <event_clear>
		event_enable(chan);
   15b2c:	4630      	mov	r0, r6
   15b2e:	f7fb fb93 	bl	11258 <event_enable>
		set_comparator(chan, cc_val);
   15b32:	4629      	mov	r1, r5
   15b34:	4630      	mov	r0, r6
   15b36:	f7fb fb7d 	bl	11234 <set_comparator>
		now2 = counter();
   15b3a:	f7fb fba1 	bl	11280 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   15b3e:	4284      	cmp	r4, r0
   15b40:	d01e      	beq.n	15b80 <set_absolute_alarm+0x72>
   15b42:	1c81      	adds	r1, r0, #2
   15b44:	4628      	mov	r0, r5
   15b46:	f7ff ffc8 	bl	15ada <counter_sub>
	} while ((now2 != now) &&
   15b4a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15b4e:	d917      	bls.n	15b80 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   15b50:	462f      	mov	r7, r5
		now = counter();
   15b52:	f7fb fb95 	bl	11280 <counter>
   15b56:	4604      	mov	r4, r0
		set_comparator(chan, now);
   15b58:	4601      	mov	r1, r0
   15b5a:	4630      	mov	r0, r6
   15b5c:	f7fb fb6a 	bl	11234 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   15b60:	4621      	mov	r1, r4
   15b62:	4638      	mov	r0, r7
   15b64:	f7ff ffb9 	bl	15ada <counter_sub>
   15b68:	2801      	cmp	r0, #1
   15b6a:	d0d8      	beq.n	15b1e <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   15b6c:	1ca7      	adds	r7, r4, #2
   15b6e:	4639      	mov	r1, r7
   15b70:	4628      	mov	r0, r5
   15b72:	f7ff ffb2 	bl	15ada <counter_sub>
   15b76:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15b7a:	d9d4      	bls.n	15b26 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   15b7c:	463d      	mov	r5, r7
   15b7e:	e7d2      	b.n	15b26 <set_absolute_alarm+0x18>
}
   15b80:	4628      	mov	r0, r5
   15b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015b84 <compare_set>:
{
   15b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b86:	b083      	sub	sp, #12
   15b88:	4604      	mov	r4, r0
   15b8a:	4617      	mov	r7, r2
   15b8c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   15b8e:	f7fb fb7d 	bl	1128c <compare_int_lock>
   15b92:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   15b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15b96:	9301      	str	r3, [sp, #4]
   15b98:	9b08      	ldr	r3, [sp, #32]
   15b9a:	9300      	str	r3, [sp, #0]
   15b9c:	463a      	mov	r2, r7
   15b9e:	462b      	mov	r3, r5
   15ba0:	4620      	mov	r0, r4
   15ba2:	f7fb fc61 	bl	11468 <compare_set_nolocks>
   15ba6:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   15ba8:	4631      	mov	r1, r6
   15baa:	4620      	mov	r0, r4
   15bac:	f7fb fbd2 	bl	11354 <compare_int_unlock>
}
   15bb0:	4628      	mov	r0, r5
   15bb2:	b003      	add	sp, #12
   15bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015bb6 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   15bb6:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   15bb8:	2000      	movs	r0, #0
   15bba:	f7f9 fc51 	bl	f460 <sys_arch_reboot>

00015bbe <sdc_assertion_handler>:
	k_oops();
   15bbe:	4040      	eors	r0, r0
   15bc0:	f380 8811 	msr	BASEPRI, r0
   15bc4:	f04f 0003 	mov.w	r0, #3
   15bc8:	df02      	svc	2
}
   15bca:	4770      	bx	lr

00015bcc <event_packet_is_discardable>:
	switch (hdr->evt) {
   15bcc:	7803      	ldrb	r3, [r0, #0]
   15bce:	2b3e      	cmp	r3, #62	; 0x3e
   15bd0:	d003      	beq.n	15bda <event_packet_is_discardable+0xe>
   15bd2:	2bff      	cmp	r3, #255	; 0xff
   15bd4:	d008      	beq.n	15be8 <event_packet_is_discardable+0x1c>
   15bd6:	2000      	movs	r0, #0
   15bd8:	4770      	bx	lr
		switch (me->subevent) {
   15bda:	7883      	ldrb	r3, [r0, #2]
   15bdc:	2b02      	cmp	r3, #2
   15bde:	d001      	beq.n	15be4 <event_packet_is_discardable+0x18>
			return false;
   15be0:	2000      	movs	r0, #0
   15be2:	4770      	bx	lr
			return true;
   15be4:	2001      	movs	r0, #1
   15be6:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   15be8:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   15bea:	2b80      	cmp	r3, #128	; 0x80
   15bec:	d001      	beq.n	15bf2 <event_packet_is_discardable+0x26>
			return false;
   15bee:	2000      	movs	r0, #0
}
   15bf0:	4770      	bx	lr
			return true;
   15bf2:	2001      	movs	r0, #1
   15bf4:	4770      	bx	lr

00015bf6 <hci_driver_send>:
{
   15bf6:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   15bf8:	8983      	ldrh	r3, [r0, #12]
   15bfa:	b163      	cbz	r3, 15c16 <hci_driver_send+0x20>
   15bfc:	4604      	mov	r4, r0
   15bfe:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   15c00:	b963      	cbnz	r3, 15c1c <hci_driver_send+0x26>
		err = cmd_handle(buf);
   15c02:	f7fb fd9d 	bl	11740 <cmd_handle>
	if (!err) {
   15c06:	4605      	mov	r5, r0
   15c08:	b108      	cbz	r0, 15c0e <hci_driver_send+0x18>
}
   15c0a:	4628      	mov	r0, r5
   15c0c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   15c0e:	4620      	mov	r0, r4
   15c10:	f7ff fb7f 	bl	15312 <net_buf_unref>
   15c14:	e7f9      	b.n	15c0a <hci_driver_send+0x14>
		return -EINVAL;
   15c16:	f06f 0515 	mvn.w	r5, #21
   15c1a:	e7f6      	b.n	15c0a <hci_driver_send+0x14>
		return -EINVAL;
   15c1c:	f06f 0515 	mvn.w	r5, #21
   15c20:	e7f3      	b.n	15c0a <hci_driver_send+0x14>

00015c22 <event_packet_process>:
{
   15c22:	b538      	push	{r3, r4, r5, lr}
   15c24:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   15c26:	f7ff ffd1 	bl	15bcc <event_packet_is_discardable>
   15c2a:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   15c2c:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   15c2e:	4619      	mov	r1, r3
   15c30:	b17b      	cbz	r3, 15c52 <event_packet_process+0x30>
   15c32:	2200      	movs	r2, #0
   15c34:	2300      	movs	r3, #0
   15c36:	f7f9 fc5f 	bl	f4f8 <bt_buf_get_evt>
	if (!evt_buf) {
   15c3a:	4605      	mov	r5, r0
   15c3c:	b140      	cbz	r0, 15c50 <event_packet_process+0x2e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   15c3e:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15c40:	3202      	adds	r2, #2
   15c42:	4621      	mov	r1, r4
   15c44:	3008      	adds	r0, #8
   15c46:	f7ff fb94 	bl	15372 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   15c4a:	4628      	mov	r0, r5
   15c4c:	f7fa f8dc 	bl	fe08 <bt_recv>
}
   15c50:	bd38      	pop	{r3, r4, r5, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   15c52:	f04f 32ff 	mov.w	r2, #4294967295
   15c56:	f04f 33ff 	mov.w	r3, #4294967295
   15c5a:	e7ec      	b.n	15c36 <event_packet_process+0x14>

00015c5c <fetch_and_process_hci_evt>:
{
   15c5c:	b538      	push	{r3, r4, r5, lr}
   15c5e:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   15c60:	f04f 30ff 	mov.w	r0, #4294967295
   15c64:	f04f 31ff 	mov.w	r1, #4294967295
   15c68:	f7fb fd38 	bl	116dc <multithreading_lock_acquire>
	if (!errcode) {
   15c6c:	4605      	mov	r5, r0
   15c6e:	b110      	cbz	r0, 15c76 <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   15c70:	b145      	cbz	r5, 15c84 <fetch_and_process_hci_evt+0x28>
		return false;
   15c72:	2000      	movs	r0, #0
}
   15c74:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   15c76:	4620      	mov	r0, r4
   15c78:	f7fb fe3c 	bl	118f4 <hci_internal_evt_get>
   15c7c:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   15c7e:	f7fb fd37 	bl	116f0 <multithreading_lock_release>
   15c82:	e7f5      	b.n	15c70 <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   15c84:	4620      	mov	r0, r4
   15c86:	f7ff ffcc 	bl	15c22 <event_packet_process>
	return true;
   15c8a:	2001      	movs	r0, #1
   15c8c:	e7f2      	b.n	15c74 <fetch_and_process_hci_evt+0x18>

00015c8e <configure_supported_features>:
{
   15c8e:	b508      	push	{r3, lr}
			err = sdc_support_scan();
   15c90:	f7ee fc8e 	bl	45b0 <sdc_support_scan>
			if (err) {
   15c94:	b900      	cbnz	r0, 15c98 <configure_supported_features+0xa>
}
   15c96:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   15c98:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15c9c:	e7fb      	b.n	15c96 <configure_supported_features+0x8>

00015c9e <configure_memory_usage>:
{
   15c9e:	b500      	push	{lr}
   15ca0:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   15ca2:	2000      	movs	r0, #0
   15ca4:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   15ca8:	aa01      	add	r2, sp, #4
   15caa:	2101      	movs	r1, #1
   15cac:	f7ee fb7a 	bl	43a4 <sdc_cfg_set>
	if (required_memory < 0) {
   15cb0:	2800      	cmp	r0, #0
   15cb2:	db3a      	blt.n	15d2a <configure_memory_usage+0x8c>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   15cb4:	2000      	movs	r0, #0
   15cb6:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   15cba:	aa01      	add	r2, sp, #4
   15cbc:	2102      	movs	r1, #2
   15cbe:	f7ee fb71 	bl	43a4 <sdc_cfg_set>
	if (required_memory < 0) {
   15cc2:	2800      	cmp	r0, #0
   15cc4:	db31      	blt.n	15d2a <configure_memory_usage+0x8c>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   15cc6:	231b      	movs	r3, #27
   15cc8:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   15ccc:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   15cd0:	2302      	movs	r3, #2
   15cd2:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   15cd6:	2103      	movs	r1, #3
   15cd8:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   15cdc:	aa01      	add	r2, sp, #4
   15cde:	2000      	movs	r0, #0
   15ce0:	f7ee fb60 	bl	43a4 <sdc_cfg_set>
	if (required_memory < 0) {
   15ce4:	2800      	cmp	r0, #0
   15ce6:	db20      	blt.n	15d2a <configure_memory_usage+0x8c>
	cfg.event_length.event_length_us =
   15ce8:	f641 534c 	movw	r3, #7500	; 0x1d4c
   15cec:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   15cee:	aa01      	add	r2, sp, #4
   15cf0:	2104      	movs	r1, #4
   15cf2:	2000      	movs	r0, #0
   15cf4:	f7ee fb56 	bl	43a4 <sdc_cfg_set>
	if (required_memory < 0) {
   15cf8:	2800      	cmp	r0, #0
   15cfa:	db16      	blt.n	15d2a <configure_memory_usage+0x8c>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   15cfc:	2000      	movs	r0, #0
   15cfe:	f88d 0004 	strb.w	r0, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   15d02:	aa01      	add	r2, sp, #4
   15d04:	2105      	movs	r1, #5
   15d06:	f7ee fb4d 	bl	43a4 <sdc_cfg_set>
	if (required_memory < 0) {
   15d0a:	2800      	cmp	r0, #0
   15d0c:	db0d      	blt.n	15d2a <configure_memory_usage+0x8c>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   15d0e:	2303      	movs	r3, #3
   15d10:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   15d14:	aa01      	add	r2, sp, #4
   15d16:	2106      	movs	r1, #6
   15d18:	2000      	movs	r0, #0
   15d1a:	f7ee fb43 	bl	43a4 <sdc_cfg_set>
		if (required_memory < 0) {
   15d1e:	2800      	cmp	r0, #0
   15d20:	db03      	blt.n	15d2a <configure_memory_usage+0x8c>
	if (required_memory > sizeof(sdc_mempool)) {
   15d22:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
   15d26:	d803      	bhi.n	15d30 <configure_memory_usage+0x92>
	return 0;
   15d28:	2000      	movs	r0, #0
}
   15d2a:	b003      	add	sp, #12
   15d2c:	f85d fb04 	ldr.w	pc, [sp], #4
		k_panic();
   15d30:	4040      	eors	r0, r0
   15d32:	f380 8811 	msr	BASEPRI, r0
   15d36:	f04f 0004 	mov.w	r0, #4
   15d3a:	df02      	svc	2
		return -ENOMEM;
   15d3c:	f06f 000b 	mvn.w	r0, #11
   15d40:	e7f3      	b.n	15d2a <configure_memory_usage+0x8c>

00015d42 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   15d42:	f242 0344 	movw	r3, #8260	; 0x2044
   15d46:	4298      	cmp	r0, r3
   15d48:	d834      	bhi.n	15db4 <command_generates_command_complete_event+0x72>
   15d4a:	f242 030d 	movw	r3, #8205	; 0x200d
   15d4e:	4298      	cmp	r0, r3
   15d50:	d20b      	bcs.n	15d6a <command_generates_command_complete_event+0x28>
   15d52:	f240 4306 	movw	r3, #1030	; 0x406
   15d56:	4298      	cmp	r0, r3
   15d58:	d02e      	beq.n	15db8 <command_generates_command_complete_event+0x76>
   15d5a:	f240 431d 	movw	r3, #1053	; 0x41d
   15d5e:	4298      	cmp	r0, r3
   15d60:	d001      	beq.n	15d66 <command_generates_command_complete_event+0x24>
		return true;
   15d62:	2001      	movs	r0, #1
   15d64:	4770      	bx	lr
	switch (hci_opcode) {
   15d66:	2000      	movs	r0, #0
   15d68:	4770      	bx	lr
   15d6a:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   15d6e:	380d      	subs	r0, #13
   15d70:	2837      	cmp	r0, #55	; 0x37
   15d72:	d823      	bhi.n	15dbc <command_generates_command_complete_event+0x7a>
   15d74:	e8df f000 	tbb	[pc, r0]
   15d78:	2222221c 	.word	0x2222221c
   15d7c:	221c2222 	.word	0x221c2222
   15d80:	22221c22 	.word	0x22221c22
   15d84:	2222221c 	.word	0x2222221c
   15d88:	22222222 	.word	0x22222222
   15d8c:	22222222 	.word	0x22222222
   15d90:	22222222 	.word	0x22222222
   15d94:	22222222 	.word	0x22222222
   15d98:	22222222 	.word	0x22222222
   15d9c:	22221c22 	.word	0x22221c22
   15da0:	22222222 	.word	0x22222222
   15da4:	22222222 	.word	0x22222222
   15da8:	22222222 	.word	0x22222222
   15dac:	1c1c2222 	.word	0x1c1c2222
   15db0:	2000      	movs	r0, #0
   15db2:	4770      	bx	lr
		return true;
   15db4:	2001      	movs	r0, #1
   15db6:	4770      	bx	lr
	switch (hci_opcode) {
   15db8:	2000      	movs	r0, #0
   15dba:	4770      	bx	lr
		return true;
   15dbc:	2001      	movs	r0, #1
}
   15dbe:	4770      	bx	lr

00015dc0 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   15dc0:	230f      	movs	r3, #15
   15dc2:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   15dc4:	2304      	movs	r3, #4
   15dc6:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   15dc8:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   15dca:	2301      	movs	r3, #1
   15dcc:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   15dce:	8081      	strh	r1, [r0, #4]
}
   15dd0:	4770      	bx	lr

00015dd2 <encode_command_complete_header>:
{
   15dd2:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   15dd4:	240e      	movs	r4, #14
   15dd6:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   15dd8:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   15dda:	2201      	movs	r2, #1
   15ddc:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   15dde:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   15de2:	7143      	strb	r3, [r0, #5]
}
   15de4:	bc10      	pop	{r4}
   15de6:	4770      	bx	lr

00015de8 <le_read_supported_states>:
	*buf = states1;
   15de8:	2330      	movs	r3, #48	; 0x30
   15dea:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   15dec:	2300      	movs	r3, #0
   15dee:	7103      	strb	r3, [r0, #4]
}
   15df0:	4770      	bx	lr

00015df2 <status_param_cmd_put>:
}
   15df2:	2001      	movs	r0, #1
   15df4:	4770      	bx	lr

00015df6 <controller_and_baseband_cmd_put>:
{
   15df6:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   15df8:	7841      	ldrb	r1, [r0, #1]
   15dfa:	7803      	ldrb	r3, [r0, #0]
   15dfc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   15e00:	b21b      	sxth	r3, r3
	switch (opcode)	{
   15e02:	f640 4201 	movw	r2, #3073	; 0xc01
   15e06:	4293      	cmp	r3, r2
   15e08:	d005      	beq.n	15e16 <controller_and_baseband_cmd_put+0x20>
   15e0a:	f640 4203 	movw	r2, #3075	; 0xc03
   15e0e:	4293      	cmp	r3, r2
   15e10:	d005      	beq.n	15e1e <controller_and_baseband_cmd_put+0x28>
   15e12:	2001      	movs	r0, #1
}
   15e14:	bd08      	pop	{r3, pc}
   15e16:	3003      	adds	r0, #3
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   15e18:	f7f5 fdf4 	bl	ba04 <sdc_hci_cmd_cb_set_event_mask>
   15e1c:	e7fa      	b.n	15e14 <controller_and_baseband_cmd_put+0x1e>
		return sdc_hci_cmd_cb_reset();
   15e1e:	f7ee fcf3 	bl	4808 <sdc_hci_cmd_cb_reset>
   15e22:	e7f7      	b.n	15e14 <controller_and_baseband_cmd_put+0x1e>

00015e24 <supported_commands>:
{
   15e24:	b510      	push	{r4, lr}
   15e26:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   15e28:	222e      	movs	r2, #46	; 0x2e
   15e2a:	2100      	movs	r1, #0
   15e2c:	f7ff f824 	bl	14e78 <memset>
	cmds->hci_set_event_mask = 1;
   15e30:	7963      	ldrb	r3, [r4, #5]
	cmds->hci_reset = 1;
   15e32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   15e36:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_local_version_information = 1;
   15e38:	7ba3      	ldrb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   15e3a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   15e3e:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   15e40:	7be3      	ldrb	r3, [r4, #15]
   15e42:	f043 0302 	orr.w	r3, r3, #2
   15e46:	73e3      	strb	r3, [r4, #15]
	cmds->hci_le_set_event_mask = 1;
   15e48:	7e63      	ldrb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   15e4a:	f043 0317 	orr.w	r3, r3, #23
   15e4e:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_parameters = 1;
   15e50:	7ea3      	ldrb	r3, [r4, #26]
	cmds->hci_le_clear_white_list = 1;
   15e52:	f043 03cc 	orr.w	r3, r3, #204	; 0xcc
   15e56:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_white_list = 1;
   15e58:	7ee3      	ldrb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   15e5a:	f043 03c3 	orr.w	r3, r3, #195	; 0xc3
   15e5e:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_supported_states = 1;
   15e60:	7f23      	ldrb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   15e62:	f043 0378 	orr.w	r3, r3, #120	; 0x78
   15e66:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_add_device_to_resolving_list = 1;
   15e68:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_resolving_list_size = 1;
   15e6c:	f043 0378 	orr.w	r3, r3, #120	; 0x78
   15e70:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_set_address_resolution_enable = 1;
   15e74:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   15e78:	f043 0386 	orr.w	r3, r3, #134	; 0x86
   15e7c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   15e80:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   15e84:	f043 0301 	orr.w	r3, r3, #1
   15e88:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   15e8c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   15e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15e94:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   15e98:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   15e9c:	f043 0304 	orr.w	r3, r3, #4
   15ea0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   15ea4:	bd10      	pop	{r4, pc}

00015ea6 <supported_features>:
{
   15ea6:	b510      	push	{r4, lr}
   15ea8:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   15eaa:	2208      	movs	r2, #8
   15eac:	2100      	movs	r1, #0
   15eae:	f7fe ffe3 	bl	14e78 <memset>
	features->bdedr_not_supported = 1;
   15eb2:	7923      	ldrb	r3, [r4, #4]
	features->le_supported = 1;
   15eb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   15eb8:	7123      	strb	r3, [r4, #4]
}
   15eba:	bd10      	pop	{r4, pc}

00015ebc <info_param_cmd_put>:
{
   15ebc:	b538      	push	{r3, r4, r5, lr}
   15ebe:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   15ec0:	1d88      	adds	r0, r1, #6
   15ec2:	7865      	ldrb	r5, [r4, #1]
   15ec4:	7823      	ldrb	r3, [r4, #0]
   15ec6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   15eca:	b21b      	sxth	r3, r3
	switch (opcode)	{
   15ecc:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   15ed0:	3b01      	subs	r3, #1
   15ed2:	2b08      	cmp	r3, #8
   15ed4:	d820      	bhi.n	15f18 <info_param_cmd_put+0x5c>
   15ed6:	e8df f003 	tbb	[pc, r3]
   15eda:	0b05      	.short	0x0b05
   15edc:	1f1f1f12 	.word	0x1f1f1f12
   15ee0:	1f1f      	.short	0x1f1f
   15ee2:	19          	.byte	0x19
   15ee3:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   15ee4:	7813      	ldrb	r3, [r2, #0]
   15ee6:	3308      	adds	r3, #8
   15ee8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   15eea:	f7f5 fe6b 	bl	bbc4 <sdc_hci_cmd_ip_read_local_version_information>
   15eee:	e014      	b.n	15f1a <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   15ef0:	7813      	ldrb	r3, [r2, #0]
   15ef2:	3340      	adds	r3, #64	; 0x40
   15ef4:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   15ef6:	f7ff ff95 	bl	15e24 <supported_commands>
		return 0;
   15efa:	2000      	movs	r0, #0
   15efc:	e00d      	b.n	15f1a <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   15efe:	7813      	ldrb	r3, [r2, #0]
   15f00:	3308      	adds	r3, #8
   15f02:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   15f04:	f7ff ffcf 	bl	15ea6 <supported_features>
		return 0;
   15f08:	2000      	movs	r0, #0
   15f0a:	e006      	b.n	15f1a <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   15f0c:	7813      	ldrb	r3, [r2, #0]
   15f0e:	3306      	adds	r3, #6
   15f10:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   15f12:	f7f5 fe55 	bl	bbc0 <sdc_hci_cmd_ip_read_bd_addr>
   15f16:	e000      	b.n	15f1a <info_param_cmd_put+0x5e>
   15f18:	2001      	movs	r0, #1
}
   15f1a:	bd38      	pop	{r3, r4, r5, pc}

00015f1c <le_supported_features>:
{
   15f1c:	b510      	push	{r4, lr}
   15f1e:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   15f20:	2205      	movs	r2, #5
   15f22:	2100      	movs	r1, #0
   15f24:	f7fe ffa8 	bl	14e78 <memset>
	features->le_encryption = 1;
   15f28:	7823      	ldrb	r3, [r4, #0]
	features->extended_scanner_filter_policies = 1;
   15f2a:	f043 03d5 	orr.w	r3, r3, #213	; 0xd5
   15f2e:	7023      	strb	r3, [r4, #0]
	features->channel_selection_algorithm_2 = 1;
   15f30:	7863      	ldrb	r3, [r4, #1]
   15f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15f36:	7063      	strb	r3, [r4, #1]
}
   15f38:	bd10      	pop	{r4, pc}

00015f3a <vs_zephyr_supported_commands>:
{
   15f3a:	b510      	push	{r4, lr}
   15f3c:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   15f3e:	2202      	movs	r2, #2
   15f40:	2100      	movs	r1, #0
   15f42:	f7fe ff99 	bl	14e78 <memset>
	cmds->read_version_info = 1;
   15f46:	7823      	ldrb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   15f48:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   15f4c:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   15f4e:	7863      	ldrb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   15f50:	f043 0307 	orr.w	r3, r3, #7
   15f54:	7063      	strb	r3, [r4, #1]
}
   15f56:	bd10      	pop	{r4, pc}

00015f58 <vs_supported_commands>:
{
   15f58:	b510      	push	{r4, lr}
   15f5a:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   15f5c:	2201      	movs	r2, #1
   15f5e:	2100      	movs	r1, #0
   15f60:	f7fe ff8a 	bl	14e78 <memset>
	cmds->read_supported_vs_commands = 1;
   15f64:	7823      	ldrb	r3, [r4, #0]
	cmds->event_length_set = 1;
   15f66:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   15f6a:	7023      	strb	r3, [r4, #0]
}
   15f6c:	bd10      	pop	{r4, pc}

00015f6e <le_controller_cmd_put>:
{
   15f6e:	b538      	push	{r3, r4, r5, lr}
   15f70:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   15f72:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   15f74:	3106      	adds	r1, #6
   15f76:	7865      	ldrb	r5, [r4, #1]
   15f78:	7823      	ldrb	r3, [r4, #0]
   15f7a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   15f7e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   15f80:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   15f84:	3b01      	subs	r3, #1
   15f86:	2b4d      	cmp	r3, #77	; 0x4d
   15f88:	f200 8089 	bhi.w	1609e <le_controller_cmd_put+0x130>
   15f8c:	e8df f003 	tbb	[pc, r3]
   15f90:	87312a27 	.word	0x87312a27
   15f94:	87878739 	.word	0x87878739
   15f98:	3f3c8787 	.word	0x3f3c8787
   15f9c:	49428787 	.word	0x49428787
   15fa0:	87874f4c 	.word	0x87874f4c
   15fa4:	58528787 	.word	0x58528787
   15fa8:	5f878787 	.word	0x5f878787
   15fac:	87878787 	.word	0x87878787
   15fb0:	87878787 	.word	0x87878787
   15fb4:	6a678787 	.word	0x6a678787
   15fb8:	8787706d 	.word	0x8787706d
   15fbc:	87877a77 	.word	0x87877a77
   15fc0:	87878787 	.word	0x87878787
   15fc4:	87878787 	.word	0x87878787
   15fc8:	87878787 	.word	0x87878787
   15fcc:	87878787 	.word	0x87878787
   15fd0:	87878787 	.word	0x87878787
   15fd4:	87878787 	.word	0x87878787
   15fd8:	877d8787 	.word	0x877d8787
   15fdc:	8487      	.short	0x8487
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   15fde:	f7f5 fe0d 	bl	bbfc <sdc_hci_cmd_le_set_event_mask>
   15fe2:	e05d      	b.n	160a0 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   15fe4:	7813      	ldrb	r3, [r2, #0]
   15fe6:	3303      	adds	r3, #3
   15fe8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   15fea:	4608      	mov	r0, r1
   15fec:	f7f5 fdf8 	bl	bbe0 <sdc_hci_cmd_le_read_buffer_size>
   15ff0:	e056      	b.n	160a0 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   15ff2:	7813      	ldrb	r3, [r2, #0]
   15ff4:	3308      	adds	r3, #8
   15ff6:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   15ff8:	4608      	mov	r0, r1
   15ffa:	f7ff ff8f 	bl	15f1c <le_supported_features>
		return 0;
   15ffe:	2000      	movs	r0, #0
   16000:	e04e      	b.n	160a0 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   16002:	f7f5 fe02 	bl	bc0a <sdc_hci_cmd_le_set_random_address>
   16006:	e04b      	b.n	160a0 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   16008:	f7f5 fe05 	bl	bc16 <sdc_hci_cmd_le_set_scan_params>
   1600c:	e048      	b.n	160a0 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   1600e:	f7f5 fe00 	bl	bc12 <sdc_hci_cmd_le_set_scan_enable>
   16012:	e045      	b.n	160a0 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   16014:	7813      	ldrb	r3, [r2, #0]
   16016:	3301      	adds	r3, #1
   16018:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1601a:	4608      	mov	r0, r1
   1601c:	f7f5 fde6 	bl	bbec <sdc_hci_cmd_le_read_white_list_size>
   16020:	e03e      	b.n	160a0 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_clear_white_list();
   16022:	f7f5 fdd7 	bl	bbd4 <sdc_hci_cmd_le_clear_white_list>
   16026:	e03b      	b.n	160a0 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   16028:	f7f5 fdd0 	bl	bbcc <sdc_hci_cmd_le_add_device_to_white_list>
   1602c:	e038      	b.n	160a0 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1602e:	f7f5 fde1 	bl	bbf4 <sdc_hci_cmd_le_remove_device_from_white_list>
   16032:	e035      	b.n	160a0 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   16034:	7813      	ldrb	r3, [r2, #0]
   16036:	3310      	adds	r3, #16
   16038:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1603a:	f7f5 fdcd 	bl	bbd8 <sdc_hci_cmd_le_encrypt>
   1603e:	e02f      	b.n	160a0 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   16040:	7813      	ldrb	r3, [r2, #0]
   16042:	3308      	adds	r3, #8
   16044:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   16046:	4608      	mov	r0, r1
   16048:	f7f5 fdc8 	bl	bbdc <sdc_hci_cmd_le_rand>
   1604c:	e028      	b.n	160a0 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1604e:	7813      	ldrb	r3, [r2, #0]
   16050:	3308      	adds	r3, #8
   16052:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   16054:	4608      	mov	r0, r1
   16056:	f7ff fec7 	bl	15de8 <le_read_supported_states>
		return 0;
   1605a:	2000      	movs	r0, #0
   1605c:	e020      	b.n	160a0 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1605e:	f7f5 fdb3 	bl	bbc8 <sdc_hci_cmd_le_add_device_to_resolving_list>
   16062:	e01d      	b.n	160a0 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   16064:	f7f5 fdc4 	bl	bbf0 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   16068:	e01a      	b.n	160a0 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_clear_resolving_list();
   1606a:	f7f5 fdb1 	bl	bbd0 <sdc_hci_cmd_le_clear_resolving_list>
   1606e:	e017      	b.n	160a0 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   16070:	7813      	ldrb	r3, [r2, #0]
   16072:	3301      	adds	r3, #1
   16074:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   16076:	4608      	mov	r0, r1
   16078:	f7f5 fdb4 	bl	bbe4 <sdc_hci_cmd_le_read_resolving_list_size>
   1607c:	e010      	b.n	160a0 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1607e:	f7f5 fdbb 	bl	bbf8 <sdc_hci_cmd_le_set_address_resolution_enable>
   16082:	e00d      	b.n	160a0 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   16084:	f7f5 fdc3 	bl	bc0e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   16088:	e00a      	b.n	160a0 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1608a:	7813      	ldrb	r3, [r2, #0]
   1608c:	3302      	adds	r3, #2
   1608e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   16090:	4608      	mov	r0, r1
   16092:	f7f5 fda9 	bl	bbe8 <sdc_hci_cmd_le_read_transmit_power>
   16096:	e003      	b.n	160a0 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   16098:	f7f5 fdb5 	bl	bc06 <sdc_hci_cmd_le_set_privacy_mode>
   1609c:	e000      	b.n	160a0 <le_controller_cmd_put+0x132>
   1609e:	2001      	movs	r0, #1
}
   160a0:	bd38      	pop	{r3, r4, r5, pc}

000160a2 <vs_cmd_put>:
{
   160a2:	b538      	push	{r3, r4, r5, lr}
   160a4:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   160a6:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   160a8:	3106      	adds	r1, #6
   160aa:	7865      	ldrb	r5, [r4, #1]
   160ac:	7823      	ldrb	r3, [r4, #0]
   160ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   160b2:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   160b6:	42a3      	cmp	r3, r4
   160b8:	d90f      	bls.n	160da <vs_cmd_put+0x38>
   160ba:	f64f 5405 	movw	r4, #64773	; 0xfd05
   160be:	42a3      	cmp	r3, r4
   160c0:	d85b      	bhi.n	1617a <vs_cmd_put+0xd8>
   160c2:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   160c6:	d319      	bcc.n	160fc <vs_cmd_put+0x5a>
   160c8:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   160cc:	2b05      	cmp	r3, #5
   160ce:	d850      	bhi.n	16172 <vs_cmd_put+0xd0>
   160d0:	e8df f003 	tbb	[pc, r3]
   160d4:	46434038 	.word	0x46434038
   160d8:	4c49      	.short	0x4c49
   160da:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   160de:	d801      	bhi.n	160e4 <vs_cmd_put+0x42>
   160e0:	2001      	movs	r0, #1
}
   160e2:	bd38      	pop	{r3, r4, r5, pc}
   160e4:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   160e8:	3b01      	subs	r3, #1
   160ea:	2b09      	cmp	r3, #9
   160ec:	d843      	bhi.n	16176 <vs_cmd_put+0xd4>
   160ee:	e8df f003 	tbb	[pc, r3]
   160f2:	0e07      	.short	0x0e07
   160f4:	26424242 	.word	0x26424242
   160f8:	1f164242 	.word	0x1f164242
	switch (opcode)	{
   160fc:	2001      	movs	r0, #1
   160fe:	e7f0      	b.n	160e2 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   16100:	7813      	ldrb	r3, [r2, #0]
   16102:	330c      	adds	r3, #12
   16104:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   16106:	4608      	mov	r0, r1
   16108:	f7ee fb92 	bl	4830 <sdc_hci_cmd_vs_zephyr_read_version_info>
   1610c:	e7e9      	b.n	160e2 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1610e:	7813      	ldrb	r3, [r2, #0]
   16110:	3340      	adds	r3, #64	; 0x40
   16112:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   16114:	4608      	mov	r0, r1
   16116:	f7ff ff10 	bl	15f3a <vs_zephyr_supported_commands>
		return 0;
   1611a:	2000      	movs	r0, #0
   1611c:	e7e1      	b.n	160e2 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   1611e:	7813      	ldrb	r3, [r2, #0]
   16120:	3301      	adds	r3, #1
   16122:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   16124:	3316      	adds	r3, #22
   16126:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   16128:	4608      	mov	r0, r1
   1612a:	f7f5 fcf8 	bl	bb1e <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1612e:	e7d8      	b.n	160e2 <vs_cmd_put+0x40>
		*param_length_out +=
   16130:	7813      	ldrb	r3, [r2, #0]
   16132:	3320      	adds	r3, #32
   16134:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   16136:	4608      	mov	r0, r1
   16138:	f7f5 fca4 	bl	ba84 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1613c:	e7d1      	b.n	160e2 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1613e:	f7f5 fd3d 	bl	bbbc <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   16142:	e7ce      	b.n	160e2 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   16144:	7813      	ldrb	r3, [r2, #0]
   16146:	3340      	adds	r3, #64	; 0x40
   16148:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   1614a:	4608      	mov	r0, r1
   1614c:	f7ff ff04 	bl	15f58 <vs_supported_commands>
		return 0;
   16150:	2000      	movs	r0, #0
   16152:	e7c6      	b.n	160e2 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   16154:	f7f5 fc8f 	bl	ba76 <sdc_hci_cmd_vs_llpm_mode_set>
   16158:	e7c3      	b.n	160e2 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1615a:	f7f5 fc60 	bl	ba1e <sdc_hci_cmd_vs_conn_update>
   1615e:	e7c0      	b.n	160e2 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   16160:	f7f5 fc55 	bl	ba0e <sdc_hci_cmd_vs_conn_event_extend>
   16164:	e7bd      	b.n	160e2 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   16166:	f7f5 fc88 	bl	ba7a <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1616a:	e7ba      	b.n	160e2 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1616c:	f7f5 fc81 	bl	ba72 <sdc_hci_cmd_vs_event_length_set>
   16170:	e7b7      	b.n	160e2 <vs_cmd_put+0x40>
	switch (opcode)	{
   16172:	2001      	movs	r0, #1
   16174:	e7b5      	b.n	160e2 <vs_cmd_put+0x40>
   16176:	2001      	movs	r0, #1
   16178:	e7b3      	b.n	160e2 <vs_cmd_put+0x40>
   1617a:	2001      	movs	r0, #1
   1617c:	e7b1      	b.n	160e2 <vs_cmd_put+0x40>

0001617e <cmd_put>:
{
   1617e:	b570      	push	{r4, r5, r6, lr}
   16180:	b082      	sub	sp, #8
   16182:	460e      	mov	r6, r1
   16184:	7842      	ldrb	r2, [r0, #1]
   16186:	7805      	ldrb	r5, [r0, #0]
   16188:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1618c:	2304      	movs	r3, #4
   1618e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   16192:	0893      	lsrs	r3, r2, #2
   16194:	2a23      	cmp	r2, #35	; 0x23
   16196:	d809      	bhi.n	161ac <cmd_put+0x2e>
   16198:	2b03      	cmp	r3, #3
   1619a:	d335      	bcc.n	16208 <cmd_put+0x8a>
   1619c:	3b03      	subs	r3, #3
   1619e:	2b05      	cmp	r3, #5
   161a0:	d834      	bhi.n	1620c <cmd_put+0x8e>
   161a2:	e8df f003 	tbb	[pc, r3]
   161a6:	1f19      	.short	0x1f19
   161a8:	2b333325 	.word	0x2b333325
   161ac:	2b3f      	cmp	r3, #63	; 0x3f
   161ae:	d105      	bne.n	161bc <cmd_put+0x3e>
		status = vs_cmd_put(cmd_in,
   161b0:	f10d 0207 	add.w	r2, sp, #7
   161b4:	f7ff ff75 	bl	160a2 <vs_cmd_put>
   161b8:	4604      	mov	r4, r0
		break;
   161ba:	e000      	b.n	161be <cmd_put+0x40>
	switch (BT_OGF(opcode)) {
   161bc:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   161be:	4628      	mov	r0, r5
   161c0:	f7ff fdbf 	bl	15d42 <command_generates_command_complete_event>
   161c4:	b108      	cbz	r0, 161ca <cmd_put+0x4c>
   161c6:	2c01      	cmp	r4, #1
   161c8:	d122      	bne.n	16210 <cmd_put+0x92>
		encode_command_status(raw_event_out, opcode, status);
   161ca:	4622      	mov	r2, r4
   161cc:	4629      	mov	r1, r5
   161ce:	4630      	mov	r0, r6
   161d0:	f7ff fdf6 	bl	15dc0 <encode_command_status>
}
   161d4:	b002      	add	sp, #8
   161d6:	bd70      	pop	{r4, r5, r6, pc}
		status = controller_and_baseband_cmd_put(cmd_in,
   161d8:	f10d 0207 	add.w	r2, sp, #7
   161dc:	f7ff fe0b 	bl	15df6 <controller_and_baseband_cmd_put>
   161e0:	4604      	mov	r4, r0
		break;
   161e2:	e7ec      	b.n	161be <cmd_put+0x40>
		status = info_param_cmd_put(cmd_in,
   161e4:	f10d 0207 	add.w	r2, sp, #7
   161e8:	f7ff fe68 	bl	15ebc <info_param_cmd_put>
   161ec:	4604      	mov	r4, r0
		break;
   161ee:	e7e6      	b.n	161be <cmd_put+0x40>
		status = status_param_cmd_put(cmd_in,
   161f0:	f10d 0207 	add.w	r2, sp, #7
   161f4:	f7ff fdfd 	bl	15df2 <status_param_cmd_put>
   161f8:	4604      	mov	r4, r0
		break;
   161fa:	e7e0      	b.n	161be <cmd_put+0x40>
		status = le_controller_cmd_put(cmd_in,
   161fc:	f10d 0207 	add.w	r2, sp, #7
   16200:	f7ff feb5 	bl	15f6e <le_controller_cmd_put>
   16204:	4604      	mov	r4, r0
		break;
   16206:	e7da      	b.n	161be <cmd_put+0x40>
	switch (BT_OGF(opcode)) {
   16208:	2401      	movs	r4, #1
   1620a:	e7d8      	b.n	161be <cmd_put+0x40>
   1620c:	2401      	movs	r4, #1
   1620e:	e7d6      	b.n	161be <cmd_put+0x40>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   16210:	4623      	mov	r3, r4
   16212:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16216:	4629      	mov	r1, r5
   16218:	4630      	mov	r0, r6
   1621a:	f7ff fdda 	bl	15dd2 <encode_command_complete_header>
}
   1621e:	e7d9      	b.n	161d4 <cmd_put+0x56>

00016220 <m_assert_handler>:
	k_oops();
   16220:	4040      	eors	r0, r0
   16222:	f380 8811 	msr	BASEPRI, r0
   16226:	f04f 0003 	mov.w	r0, #3
   1622a:	df02      	svc	2
}
   1622c:	4770      	bx	lr

0001622e <m_config_clock_source_get>:
}
   1622e:	2001      	movs	r0, #1
   16230:	4770      	bx	lr

00016232 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   16232:	4668      	mov	r0, sp
   16234:	f020 0107 	bic.w	r1, r0, #7
   16238:	468d      	mov	sp, r1
   1623a:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1623c:	f7ec ff0c 	bl	3058 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   16240:	f7f8 fd9a 	bl	ed78 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   16244:	f7f8 fea6 	bl	ef94 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   16248:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1624c:	4685      	mov	sp, r0
   1624e:	4770      	bx	lr

00016250 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   16250:	4668      	mov	r0, sp
   16252:	f020 0107 	bic.w	r1, r0, #7
   16256:	468d      	mov	sp, r1
   16258:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1625a:	f7ec fe7f 	bl	2f5c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1625e:	f7f8 fd8b 	bl	ed78 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   16262:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   16266:	4685      	mov	sp, r0
   16268:	4770      	bx	lr

0001626a <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1626a:	4668      	mov	r0, sp
   1626c:	f020 0107 	bic.w	r1, r0, #7
   16270:	468d      	mov	sp, r1
   16272:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   16274:	f7f4 fea3 	bl	afbe <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   16278:	f7f8 fd7e 	bl	ed78 <_arch_isr_direct_pm>
   1627c:	f7f8 fe8a 	bl	ef94 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   16280:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   16284:	4685      	mov	sp, r0
   16286:	4770      	bx	lr

00016288 <nrfx_clock_stop>:
	switch (domain) {
   16288:	2801      	cmp	r0, #1
   1628a:	d000      	beq.n	1628e <nrfx_clock_stop+0x6>
   1628c:	4770      	bx	lr
{
   1628e:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   16290:	f7ed fcfa 	bl	3c88 <mpsl_clock_hfclk_release>
}
   16294:	bd08      	pop	{r3, pc}

00016296 <nrfx_clock_enable>:
}
   16296:	4770      	bx	lr

00016298 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   16298:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   1629a:	f7ed fb13 	bl	38c4 <MPSL_IRQ_CLOCK_Handler>
}
   1629e:	bd08      	pop	{r3, pc}

000162a0 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   162a0:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   162a2:	4780      	blx	r0
}
   162a4:	bd08      	pop	{r3, pc}

000162a6 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   162a6:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   162a8:	f000 fc68 	bl	16b7c <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   162ac:	bd08      	pop	{r3, pc}

000162ae <pin_is_task_output>:
{
   162ae:	b510      	push	{r4, lr}
   162b0:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   162b2:	f7fb fe69 	bl	11f88 <pin_is_output>
   162b6:	b128      	cbz	r0, 162c4 <pin_is_task_output+0x16>
   162b8:	4620      	mov	r0, r4
   162ba:	f7fb fe4f 	bl	11f5c <pin_in_use_by_te>
   162be:	b118      	cbz	r0, 162c8 <pin_is_task_output+0x1a>
   162c0:	2001      	movs	r0, #1
   162c2:	e000      	b.n	162c6 <pin_is_task_output+0x18>
   162c4:	2000      	movs	r0, #0
}
   162c6:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   162c8:	2000      	movs	r0, #0
   162ca:	e7fc      	b.n	162c6 <pin_is_task_output+0x18>

000162cc <pin_is_input>:
{
   162cc:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   162ce:	f7fb fe5b 	bl	11f88 <pin_is_output>
   162d2:	f080 0001 	eor.w	r0, r0, #1
}
   162d6:	b2c0      	uxtb	r0, r0
   162d8:	bd08      	pop	{r3, pc}

000162da <gpiote_polarity_to_trigger>:
}
   162da:	4770      	bx	lr

000162dc <gpiote_trigger_to_polarity>:
}
   162dc:	4770      	bx	lr

000162de <is_level>:
}
   162de:	2803      	cmp	r0, #3
   162e0:	bf94      	ite	ls
   162e2:	2000      	movls	r0, #0
   162e4:	2001      	movhi	r0, #1
   162e6:	4770      	bx	lr

000162e8 <next_sense_cond_call_handler>:
{
   162e8:	b570      	push	{r4, r5, r6, lr}
   162ea:	4604      	mov	r4, r0
   162ec:	460d      	mov	r5, r1
   162ee:	4616      	mov	r6, r2
    if (is_level(trigger))
   162f0:	4608      	mov	r0, r1
   162f2:	f7ff fff4 	bl	162de <is_level>
   162f6:	b9b8      	cbnz	r0, 16328 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   162f8:	2e02      	cmp	r6, #2
   162fa:	d037      	beq.n	1636c <next_sense_cond_call_handler+0x84>
   162fc:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   162fe:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   16302:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   16306:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1630a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1630e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   16312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   16316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1631a:	2d03      	cmp	r5, #3
   1631c:	d02a      	beq.n	16374 <next_sense_cond_call_handler+0x8c>
   1631e:	2e02      	cmp	r6, #2
   16320:	d026      	beq.n	16370 <next_sense_cond_call_handler+0x88>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   16322:	2e03      	cmp	r6, #3
   16324:	d02b      	beq.n	1637e <next_sense_cond_call_handler+0x96>
}
   16326:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   16328:	4629      	mov	r1, r5
   1632a:	4620      	mov	r0, r4
   1632c:	f7fb fe7e 	bl	1202c <call_handler>
    *p_pin = pin_number & 0x1F;
   16330:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16334:	f504 72e0 	add.w	r2, r4, #448	; 0x1c0
   16338:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1633c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   16340:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   16344:	429e      	cmp	r6, r3
   16346:	d1ee      	bne.n	16326 <next_sense_cond_call_handler+0x3e>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   16348:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1634c:	4614      	mov	r4, r2
   1634e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cnf &= ~to_update;
   16352:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   16356:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1635a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    cnf &= ~to_update;
   1635e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   16362:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   16366:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
   1636a:	e7dc      	b.n	16326 <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1636c:	2003      	movs	r0, #3
   1636e:	e7c6      	b.n	162fe <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   16370:	2d01      	cmp	r5, #1
   16372:	d1d6      	bne.n	16322 <next_sense_cond_call_handler+0x3a>
            call_handler(pin, trigger);
   16374:	4629      	mov	r1, r5
   16376:	4620      	mov	r0, r4
   16378:	f7fb fe58 	bl	1202c <call_handler>
}
   1637c:	e7d3      	b.n	16326 <next_sense_cond_call_handler+0x3e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1637e:	2d02      	cmp	r5, #2
   16380:	d1d1      	bne.n	16326 <next_sense_cond_call_handler+0x3e>
   16382:	e7f7      	b.n	16374 <next_sense_cond_call_handler+0x8c>

00016384 <latch_pending_read_and_check>:
{
   16384:	b410      	push	{r4}
    for (i = start_port; i < (start_port + length); i++)
   16386:	4604      	mov	r4, r0
   16388:	2300      	movs	r3, #0
   1638a:	b94b      	cbnz	r3, 163a0 <latch_pending_read_and_check+0x1c>
        *p_masks = gpio_regs[i]->LATCH;
   1638c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   16390:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   16394:	f844 1b04 	str.w	r1, [r4], #4
        gpio_regs[i]->LATCH = *p_masks;
   16398:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1639c:	3301      	adds	r3, #1
   1639e:	e7f4      	b.n	1638a <latch_pending_read_and_check+0x6>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   163a0:	2300      	movs	r3, #0
   163a2:	b113      	cbz	r3, 163aa <latch_pending_read_and_check+0x26>
    return false;
   163a4:	2000      	movs	r0, #0
}
   163a6:	bc10      	pop	{r4}
   163a8:	4770      	bx	lr
        if (latch[port_idx])
   163aa:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   163ae:	b90a      	cbnz	r2, 163b4 <latch_pending_read_and_check+0x30>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   163b0:	3301      	adds	r3, #1
   163b2:	e7f6      	b.n	163a2 <latch_pending_read_and_check+0x1e>
            return true;
   163b4:	2001      	movs	r0, #1
   163b6:	e7f6      	b.n	163a6 <latch_pending_read_and_check+0x22>

000163b8 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   163b8:	b508      	push	{r3, lr}
  _DoInit();
   163ba:	f7fc f9d3 	bl	12764 <_DoInit>
}
   163be:	bd08      	pop	{r3, pc}

000163c0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   163c0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   163c2:	f7ff fff9 	bl	163b8 <SEGGER_RTT_Init>

	return 0;
}
   163c6:	2000      	movs	r0, #0
   163c8:	bd08      	pop	{r3, pc}

000163ca <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   163ca:	b148      	cbz	r0, 163e0 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   163cc:	68c3      	ldr	r3, [r0, #12]
   163ce:	8818      	ldrh	r0, [r3, #0]
   163d0:	f3c0 0008 	ubfx	r0, r0, #0, #9
   163d4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   163d8:	bf14      	ite	ne
   163da:	2000      	movne	r0, #0
   163dc:	2001      	moveq	r0, #1
   163de:	4770      	bx	lr
		return false;
   163e0:	2000      	movs	r0, #0
}
   163e2:	4770      	bx	lr

000163e4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   163e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163e6:	4605      	mov	r5, r0
   163e8:	460e      	mov	r6, r1
	__asm__ volatile(
   163ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   163ee:	f3ef 8711 	mrs	r7, BASEPRI
   163f2:	f383 8812 	msr	BASEPRI_MAX, r3
   163f6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   163fa:	f7fd fae3 	bl	139c4 <z_impl_z_current_get>
   163fe:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   16400:	4631      	mov	r1, r6
   16402:	4628      	mov	r0, r5
   16404:	f7ff fbd7 	bl	15bb6 <k_sys_fatal_error_handler>
	__asm__ volatile(
   16408:	f387 8811 	msr	BASEPRI, r7
   1640c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   16410:	4620      	mov	r0, r4
   16412:	f7f8 ff6b 	bl	f2ec <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   16416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016418 <k_heap_init>:
{
   16418:	b510      	push	{r4, lr}
   1641a:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   1641e:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   16420:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   16422:	f7fe fb2c 	bl	14a7e <sys_heap_init>
}
   16426:	bd10      	pop	{r4, pc}

00016428 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   16428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1642c:	b087      	sub	sp, #28
   1642e:	4680      	mov	r8, r0
   16430:	9103      	str	r1, [sp, #12]
   16432:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   16434:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   16438:	f000 fba6 	bl	16b88 <sys_clock_timeout_end_calc>
   1643c:	4681      	mov	r9, r0
   1643e:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   16440:	f108 0314 	add.w	r3, r8, #20
   16444:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   16446:	f04f 0340 	mov.w	r3, #64	; 0x40
   1644a:	f3ef 8511 	mrs	r5, BASEPRI
   1644e:	f383 8812 	msr	BASEPRI_MAX, r3
   16452:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   16456:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   1645a:	4654      	mov	r4, sl

	while (ret == NULL) {
   1645c:	e00f      	b.n	1647e <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1645e:	e9cd 6700 	strd	r6, r7, [sp]
   16462:	f108 020c 	add.w	r2, r8, #12
   16466:	4629      	mov	r1, r5
   16468:	9805      	ldr	r0, [sp, #20]
   1646a:	f7fd f8b5 	bl	135d8 <z_pend_curr>
   1646e:	f04f 0340 	mov.w	r3, #64	; 0x40
   16472:	f3ef 8511 	mrs	r5, BASEPRI
   16476:	f383 8812 	msr	BASEPRI_MAX, r3
   1647a:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   1647e:	b9b4      	cbnz	r4, 164ae <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   16480:	9a04      	ldr	r2, [sp, #16]
   16482:	9903      	ldr	r1, [sp, #12]
   16484:	4640      	mov	r0, r8
   16486:	f7fe fa89 	bl	1499c <sys_heap_aligned_alloc>
   1648a:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   1648c:	f7fd fc58 	bl	13d40 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   16490:	b96c      	cbnz	r4, 164ae <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   16492:	ebb9 0600 	subs.w	r6, r9, r0
   16496:	eb6b 0701 	sbc.w	r7, fp, r1
   1649a:	2e01      	cmp	r6, #1
   1649c:	f177 0300 	sbcs.w	r3, r7, #0
   164a0:	db05      	blt.n	164ae <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   164a2:	f1ba 0f00 	cmp.w	sl, #0
   164a6:	d1da      	bne.n	1645e <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   164a8:	f04f 0a01 	mov.w	sl, #1
   164ac:	e7d7      	b.n	1645e <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   164ae:	f385 8811 	msr	BASEPRI, r5
   164b2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   164b6:	4620      	mov	r0, r4
   164b8:	b007      	add	sp, #28
   164ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000164be <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   164be:	b570      	push	{r4, r5, r6, lr}
   164c0:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   164c2:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   164c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   164ca:	f3ef 8511 	mrs	r5, BASEPRI
   164ce:	f383 8812 	msr	BASEPRI_MAX, r3
   164d2:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   164d6:	f7fe fa1d 	bl	14914 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   164da:	f104 000c 	add.w	r0, r4, #12
   164de:	f000 fa87 	bl	169f0 <z_unpend_all>
   164e2:	b920      	cbnz	r0, 164ee <k_heap_free+0x30>
	__asm__ volatile(
   164e4:	f385 8811 	msr	BASEPRI, r5
   164e8:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   164ec:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   164ee:	4629      	mov	r1, r5
   164f0:	4630      	mov	r0, r6
   164f2:	f7fc ff0d 	bl	13310 <z_reschedule>
   164f6:	e7f9      	b.n	164ec <k_heap_free+0x2e>

000164f8 <setup_thread_stack>:
{
   164f8:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   164fa:	3207      	adds	r2, #7
   164fc:	f022 0207 	bic.w	r2, r2, #7
   16500:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   16504:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   16508:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   1650c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   16510:	2200      	movs	r2, #0
   16512:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   16516:	18c8      	adds	r0, r1, r3
   16518:	bc10      	pop	{r4}
   1651a:	4770      	bx	lr

0001651c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1651c:	f3ef 8005 	mrs	r0, IPSR
}
   16520:	3800      	subs	r0, #0
   16522:	bf18      	it	ne
   16524:	2001      	movne	r0, #1
   16526:	4770      	bx	lr

00016528 <z_impl_k_thread_start>:
{
   16528:	b508      	push	{r3, lr}
	z_sched_start(thread);
   1652a:	f7fd f81b 	bl	13564 <z_sched_start>
}
   1652e:	bd08      	pop	{r3, pc}

00016530 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   16530:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   16532:	2400      	movs	r4, #0
   16534:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   16536:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   16538:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   1653a:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   1653c:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   1653e:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   16540:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   16542:	bc10      	pop	{r4}
   16544:	4770      	bx	lr

00016546 <z_impl_k_thread_create>:
{
   16546:	b5f0      	push	{r4, r5, r6, r7, lr}
   16548:	b087      	sub	sp, #28
   1654a:	4604      	mov	r4, r0
   1654c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   16550:	2500      	movs	r5, #0
   16552:	9505      	str	r5, [sp, #20]
   16554:	9d10      	ldr	r5, [sp, #64]	; 0x40
   16556:	9504      	str	r5, [sp, #16]
   16558:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1655a:	9503      	str	r5, [sp, #12]
   1655c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1655e:	9502      	str	r5, [sp, #8]
   16560:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   16562:	9501      	str	r5, [sp, #4]
   16564:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   16566:	9500      	str	r5, [sp, #0]
   16568:	f7fc fae4 	bl	12b34 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1656c:	f1b7 3fff 	cmp.w	r7, #4294967295
   16570:	bf08      	it	eq
   16572:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   16576:	d102      	bne.n	1657e <z_impl_k_thread_create+0x38>
}
   16578:	4620      	mov	r0, r4
   1657a:	b007      	add	sp, #28
   1657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   1657e:	4632      	mov	r2, r6
   16580:	463b      	mov	r3, r7
   16582:	4620      	mov	r0, r4
   16584:	f7fc fac4 	bl	12b10 <schedule_new_thread>
   16588:	e7f6      	b.n	16578 <z_impl_k_thread_create+0x32>

0001658a <z_pm_save_idle_exit>:
{
   1658a:	b508      	push	{r3, lr}
	pm_system_resume();
   1658c:	f7f8 fa64 	bl	ea58 <pm_system_resume>
	sys_clock_idle_exit();
   16590:	f7ff faa2 	bl	15ad8 <sys_clock_idle_exit>
}
   16594:	bd08      	pop	{r3, pc}

00016596 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   16596:	4288      	cmp	r0, r1
   16598:	da00      	bge.n	1659c <new_prio_for_inheritance+0x6>
   1659a:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1659c:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   165a0:	db01      	blt.n	165a6 <new_prio_for_inheritance+0x10>
   165a2:	4608      	mov	r0, r1
   165a4:	4770      	bx	lr
   165a6:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   165aa:	4770      	bx	lr

000165ac <adjust_owner_prio>:
{
   165ac:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   165ae:	6880      	ldr	r0, [r0, #8]
   165b0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   165b4:	428b      	cmp	r3, r1
   165b6:	d101      	bne.n	165bc <adjust_owner_prio+0x10>
	return false;
   165b8:	2000      	movs	r0, #0
}
   165ba:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   165bc:	f7fd f820 	bl	13600 <z_set_prio>
   165c0:	e7fb      	b.n	165ba <adjust_owner_prio+0xe>

000165c2 <prepare_thread_to_run>:
{
   165c2:	b508      	push	{r3, lr}
   165c4:	2200      	movs	r2, #0
   165c6:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   165ca:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   165cc:	f000 f94a 	bl	16864 <z_ready_thread>
}
   165d0:	bd08      	pop	{r3, pc}

000165d2 <queue_insert>:
{
   165d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   165d6:	4605      	mov	r5, r0
   165d8:	460e      	mov	r6, r1
   165da:	4614      	mov	r4, r2
   165dc:	461f      	mov	r7, r3
   165de:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   165e2:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   165e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   165ea:	f3ef 8911 	mrs	r9, BASEPRI
   165ee:	f383 8812 	msr	BASEPRI_MAX, r3
   165f2:	f3bf 8f6f 	isb	sy
	if (is_append) {
   165f6:	b102      	cbz	r2, 165fa <queue_insert+0x28>
	return list->tail;
   165f8:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   165fa:	4640      	mov	r0, r8
   165fc:	f000 f9cd 	bl	1699a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   16600:	b9a0      	cbnz	r0, 1662c <queue_insert+0x5a>
	if (alloc) {
   16602:	b9e7      	cbnz	r7, 1663e <queue_insert+0x6c>
	node->next_and_flags = flags;
   16604:	2300      	movs	r3, #0
   16606:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   16608:	b356      	cbz	r6, 16660 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1660a:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1660c:	f033 0303 	bics.w	r3, r3, #3
   16610:	d134      	bne.n	1667c <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   16612:	6823      	ldr	r3, [r4, #0]
   16614:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   16618:	6023      	str	r3, [r4, #0]
	return list->tail;
   1661a:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1661c:	b35a      	cbz	r2, 16676 <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1661e:	6813      	ldr	r3, [r2, #0]
   16620:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   16624:	4323      	orrs	r3, r4
   16626:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16628:	606c      	str	r4, [r5, #4]
}
   1662a:	e031      	b.n	16690 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   1662c:	4621      	mov	r1, r4
   1662e:	f7ff ffc8 	bl	165c2 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   16632:	4649      	mov	r1, r9
   16634:	4640      	mov	r0, r8
   16636:	f7fc fe6b 	bl	13310 <z_reschedule>
		return 0;
   1663a:	2000      	movs	r0, #0
   1663c:	e032      	b.n	166a4 <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   1663e:	2108      	movs	r1, #8
   16640:	2000      	movs	r0, #0
   16642:	f7fd fe69 	bl	14318 <z_thread_aligned_alloc>
		if (anode == NULL) {
   16646:	b120      	cbz	r0, 16652 <queue_insert+0x80>
		anode->data = data;
   16648:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   1664a:	2201      	movs	r2, #1
   1664c:	6002      	str	r2, [r0, #0]
		data = anode;
   1664e:	4604      	mov	r4, r0
   16650:	e7da      	b.n	16608 <queue_insert+0x36>
	__asm__ volatile(
   16652:	f389 8811 	msr	BASEPRI, r9
   16656:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1665a:	f06f 000b 	mvn.w	r0, #11
   1665e:	e021      	b.n	166a4 <queue_insert+0xd2>
	return list->head;
   16660:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   16662:	6823      	ldr	r3, [r4, #0]
   16664:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   16668:	4313      	orrs	r3, r2
   1666a:	6023      	str	r3, [r4, #0]
	list->head = node;
   1666c:	602c      	str	r4, [r5, #0]
	return list->tail;
   1666e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   16670:	b973      	cbnz	r3, 16690 <queue_insert+0xbe>
	list->tail = node;
   16672:	606c      	str	r4, [r5, #4]
}
   16674:	e00c      	b.n	16690 <queue_insert+0xbe>
	list->tail = node;
   16676:	606c      	str	r4, [r5, #4]
	list->head = node;
   16678:	602c      	str	r4, [r5, #0]
}
   1667a:	e009      	b.n	16690 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1667c:	6822      	ldr	r2, [r4, #0]
   1667e:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   16682:	4313      	orrs	r3, r2
   16684:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   16686:	6833      	ldr	r3, [r6, #0]
   16688:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1668c:	431c      	orrs	r4, r3
   1668e:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   16690:	2104      	movs	r1, #4
   16692:	f105 0010 	add.w	r0, r5, #16
   16696:	f000 fb19 	bl	16ccc <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1669a:	4649      	mov	r1, r9
   1669c:	4640      	mov	r0, r8
   1669e:	f7fc fe37 	bl	13310 <z_reschedule>
	return 0;
   166a2:	2000      	movs	r0, #0
}
   166a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000166a8 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   166a8:	b160      	cbz	r0, 166c4 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   166aa:	6803      	ldr	r3, [r0, #0]
   166ac:	f013 0f03 	tst.w	r3, #3
   166b0:	d008      	beq.n	166c4 <z_queue_node_peek+0x1c>
{
   166b2:	b510      	push	{r4, lr}
		ret = anode->data;
   166b4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   166b6:	b909      	cbnz	r1, 166bc <z_queue_node_peek+0x14>
		ret = anode->data;
   166b8:	4620      	mov	r0, r4
}
   166ba:	bd10      	pop	{r4, pc}
			k_free(anode);
   166bc:	f000 fb30 	bl	16d20 <k_free>
		ret = anode->data;
   166c0:	4620      	mov	r0, r4
   166c2:	e7fa      	b.n	166ba <z_queue_node_peek+0x12>
}
   166c4:	4770      	bx	lr

000166c6 <k_queue_prepend>:
{
   166c6:	b500      	push	{lr}
   166c8:	b083      	sub	sp, #12
   166ca:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   166cc:	2100      	movs	r1, #0
   166ce:	9100      	str	r1, [sp, #0]
   166d0:	460b      	mov	r3, r1
   166d2:	f7ff ff7e 	bl	165d2 <queue_insert>
}
   166d6:	b003      	add	sp, #12
   166d8:	f85d fb04 	ldr.w	pc, [sp], #4

000166dc <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   166dc:	b3a1      	cbz	r1, 16748 <k_queue_append_list+0x6c>
{
   166de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   166e2:	4606      	mov	r6, r0
   166e4:	4617      	mov	r7, r2
   166e6:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   166e8:	b38a      	cbz	r2, 1674e <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   166ea:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   166ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   166f2:	f3ef 8811 	mrs	r8, BASEPRI
   166f6:	f383 8812 	msr	BASEPRI_MAX, r3
   166fa:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   166fe:	4628      	mov	r0, r5
   16700:	f000 f94b 	bl	1699a <z_unpend_first_thread>
   16704:	e006      	b.n	16714 <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
   16706:	4621      	mov	r1, r4
   16708:	f7ff ff5b 	bl	165c2 <prepare_thread_to_run>
		head = *(void **)head;
   1670c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1670e:	4628      	mov	r0, r5
   16710:	f000 f943 	bl	1699a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   16714:	b10c      	cbz	r4, 1671a <k_queue_append_list+0x3e>
   16716:	2800      	cmp	r0, #0
   16718:	d1f5      	bne.n	16706 <k_queue_append_list+0x2a>
	if (head != NULL) {
   1671a:	b13c      	cbz	r4, 1672c <k_queue_append_list+0x50>
	return list->tail;
   1671c:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1671e:	b18a      	cbz	r2, 16744 <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   16720:	6813      	ldr	r3, [r2, #0]
   16722:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   16726:	431c      	orrs	r4, r3
   16728:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1672a:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1672c:	2104      	movs	r1, #4
   1672e:	f106 0010 	add.w	r0, r6, #16
   16732:	f000 facb 	bl	16ccc <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   16736:	4641      	mov	r1, r8
   16738:	4628      	mov	r0, r5
   1673a:	f7fc fde9 	bl	13310 <z_reschedule>
	return 0;
   1673e:	2000      	movs	r0, #0
}
   16740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   16744:	6034      	str	r4, [r6, #0]
}
   16746:	e7f0      	b.n	1672a <k_queue_append_list+0x4e>
		return -EINVAL;
   16748:	f06f 0015 	mvn.w	r0, #21
}
   1674c:	4770      	bx	lr
		return -EINVAL;
   1674e:	f06f 0015 	mvn.w	r0, #21
   16752:	e7f5      	b.n	16740 <k_queue_append_list+0x64>

00016754 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   16754:	b15a      	cbz	r2, 1676e <z_impl_k_sem_init+0x1a>
   16756:	428a      	cmp	r2, r1
   16758:	d30c      	bcc.n	16774 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   1675a:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1675c:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1675e:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   16760:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   16762:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   16766:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   16768:	6143      	str	r3, [r0, #20]
	return 0;
   1676a:	2000      	movs	r0, #0
   1676c:	4770      	bx	lr
		return -EINVAL;
   1676e:	f06f 0015 	mvn.w	r0, #21
   16772:	4770      	bx	lr
   16774:	f06f 0015 	mvn.w	r0, #21
}
   16778:	4770      	bx	lr

0001677a <k_work_submit_to_queue>:
{
   1677a:	b530      	push	{r4, r5, lr}
   1677c:	b083      	sub	sp, #12
   1677e:	9001      	str	r0, [sp, #4]
   16780:	4608      	mov	r0, r1
   16782:	f04f 0340 	mov.w	r3, #64	; 0x40
   16786:	f3ef 8511 	mrs	r5, BASEPRI
   1678a:	f383 8812 	msr	BASEPRI_MAX, r3
   1678e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   16792:	a901      	add	r1, sp, #4
   16794:	f7fc fbf4 	bl	12f80 <submit_to_queue_locked>
   16798:	4604      	mov	r4, r0
	__asm__ volatile(
   1679a:	f385 8811 	msr	BASEPRI, r5
   1679e:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   167a2:	2800      	cmp	r0, #0
   167a4:	dc02      	bgt.n	167ac <k_work_submit_to_queue+0x32>
}
   167a6:	4620      	mov	r0, r4
   167a8:	b003      	add	sp, #12
   167aa:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   167ac:	f7fd f910 	bl	139d0 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   167b0:	2800      	cmp	r0, #0
   167b2:	d0f8      	beq.n	167a6 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   167b4:	f7fd f846 	bl	13844 <z_impl_k_yield>
	return ret;
   167b8:	e7f5      	b.n	167a6 <k_work_submit_to_queue+0x2c>

000167ba <thread_active_elsewhere>:
}
   167ba:	2000      	movs	r0, #0
   167bc:	4770      	bx	lr

000167be <pended_on_thread>:
}
   167be:	6880      	ldr	r0, [r0, #8]
   167c0:	4770      	bx	lr

000167c2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   167c2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   167c6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   167ca:	4283      	cmp	r3, r0
   167cc:	d001      	beq.n	167d2 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   167ce:	1ac0      	subs	r0, r0, r3
   167d0:	4770      	bx	lr
	return 0;
   167d2:	2000      	movs	r0, #0
}
   167d4:	4770      	bx	lr

000167d6 <z_reschedule_irqlock>:
{
   167d6:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   167d8:	4603      	mov	r3, r0
   167da:	b920      	cbnz	r0, 167e6 <z_reschedule_irqlock+0x10>
   167dc:	f3ef 8205 	mrs	r2, IPSR
   167e0:	b942      	cbnz	r2, 167f4 <z_reschedule_irqlock+0x1e>
   167e2:	2201      	movs	r2, #1
   167e4:	e000      	b.n	167e8 <z_reschedule_irqlock+0x12>
   167e6:	2200      	movs	r2, #0
	if (resched(key)) {
   167e8:	b932      	cbnz	r2, 167f8 <z_reschedule_irqlock+0x22>
   167ea:	f383 8811 	msr	BASEPRI, r3
   167ee:	f3bf 8f6f 	isb	sy
}
   167f2:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   167f4:	2200      	movs	r2, #0
   167f6:	e7f7      	b.n	167e8 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   167f8:	4618      	mov	r0, r3
   167fa:	f7f8 faed 	bl	edd8 <arch_swap>
	return ret;
   167fe:	e7f8      	b.n	167f2 <z_reschedule_irqlock+0x1c>

00016800 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   16800:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   16802:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   16804:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16806:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16808:	2300      	movs	r3, #0
   1680a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   1680c:	604b      	str	r3, [r1, #4]
}
   1680e:	4770      	bx	lr

00016810 <z_unpend_thread>:
{
   16810:	b538      	push	{r3, r4, r5, lr}
   16812:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   16814:	2300      	movs	r3, #0
	__asm__ volatile(
   16816:	f04f 0240 	mov.w	r2, #64	; 0x40
   1681a:	f3ef 8511 	mrs	r5, BASEPRI
   1681e:	f382 8812 	msr	BASEPRI_MAX, r2
   16822:	f3bf 8f6f 	isb	sy
   16826:	b98b      	cbnz	r3, 1684c <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   16828:	4620      	mov	r0, r4
   1682a:	f7ff ffc8 	bl	167be <pended_on_thread>
   1682e:	4621      	mov	r1, r4
   16830:	f7ff ffe6 	bl	16800 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   16834:	7b63      	ldrb	r3, [r4, #13]
   16836:	f023 0302 	bic.w	r3, r3, #2
   1683a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1683c:	2300      	movs	r3, #0
   1683e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   16840:	f385 8811 	msr	BASEPRI, r5
   16844:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16848:	2301      	movs	r3, #1
   1684a:	e7ec      	b.n	16826 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   1684c:	f104 0018 	add.w	r0, r4, #24
   16850:	f000 f931 	bl	16ab6 <z_abort_timeout>
}
   16854:	bd38      	pop	{r3, r4, r5, pc}

00016856 <z_priq_dumb_best>:
{
   16856:	4603      	mov	r3, r0
	return list->head == list;
   16858:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1685a:	4283      	cmp	r3, r0
   1685c:	d000      	beq.n	16860 <z_priq_dumb_best+0xa>
}
   1685e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   16860:	2000      	movs	r0, #0
	return thread;
   16862:	e7fc      	b.n	1685e <z_priq_dumb_best+0x8>

00016864 <z_ready_thread>:
{
   16864:	b538      	push	{r3, r4, r5, lr}
   16866:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   16868:	2300      	movs	r3, #0
	__asm__ volatile(
   1686a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1686e:	f3ef 8511 	mrs	r5, BASEPRI
   16872:	f382 8812 	msr	BASEPRI_MAX, r2
   16876:	f3bf 8f6f 	isb	sy
   1687a:	e007      	b.n	1688c <z_ready_thread+0x28>
			ready_thread(thread);
   1687c:	4620      	mov	r0, r4
   1687e:	f7fc fe31 	bl	134e4 <ready_thread>
	__asm__ volatile(
   16882:	f385 8811 	msr	BASEPRI, r5
   16886:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1688a:	2301      	movs	r3, #1
   1688c:	b92b      	cbnz	r3, 1689a <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   1688e:	4620      	mov	r0, r4
   16890:	f7ff ff93 	bl	167ba <thread_active_elsewhere>
   16894:	2800      	cmp	r0, #0
   16896:	d1f4      	bne.n	16882 <z_ready_thread+0x1e>
   16898:	e7f0      	b.n	1687c <z_ready_thread+0x18>
}
   1689a:	bd38      	pop	{r3, r4, r5, pc}

0001689c <z_thread_timeout>:
{
   1689c:	b570      	push	{r4, r5, r6, lr}
   1689e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   168a0:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   168a4:	2300      	movs	r3, #0
	__asm__ volatile(
   168a6:	f04f 0240 	mov.w	r2, #64	; 0x40
   168aa:	f3ef 8611 	mrs	r6, BASEPRI
   168ae:	f382 8812 	msr	BASEPRI_MAX, r2
   168b2:	f3bf 8f6f 	isb	sy
   168b6:	e019      	b.n	168ec <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   168b8:	4628      	mov	r0, r5
   168ba:	f7ff ff80 	bl	167be <pended_on_thread>
   168be:	4629      	mov	r1, r5
   168c0:	f7ff ff9e 	bl	16800 <z_priq_dumb_remove>
   168c4:	7b6b      	ldrb	r3, [r5, #13]
   168c6:	f023 0302 	bic.w	r3, r3, #2
   168ca:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   168cc:	2300      	movs	r3, #0
   168ce:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   168d0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   168d4:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   168d8:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   168dc:	4628      	mov	r0, r5
   168de:	f7fc fe01 	bl	134e4 <ready_thread>
	__asm__ volatile(
   168e2:	f386 8811 	msr	BASEPRI, r6
   168e6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   168ea:	2301      	movs	r3, #1
   168ec:	b94b      	cbnz	r3, 16902 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   168ee:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   168f2:	f013 0f28 	tst.w	r3, #40	; 0x28
   168f6:	d1f4      	bne.n	168e2 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   168f8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   168fc:	2b00      	cmp	r3, #0
   168fe:	d1db      	bne.n	168b8 <z_thread_timeout+0x1c>
   16900:	e7e6      	b.n	168d0 <z_thread_timeout+0x34>
}
   16902:	bd70      	pop	{r4, r5, r6, pc}

00016904 <add_to_waitq_locked>:
{
   16904:	b570      	push	{r4, r5, r6, lr}
   16906:	4605      	mov	r5, r0
   16908:	460e      	mov	r6, r1
	unready_thread(thread);
   1690a:	f7fc fe49 	bl	135a0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1690e:	7b6b      	ldrb	r3, [r5, #13]
   16910:	f043 0302 	orr.w	r3, r3, #2
   16914:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   16916:	b1b6      	cbz	r6, 16946 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   16918:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   1691a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1691c:	42a6      	cmp	r6, r4
   1691e:	d019      	beq.n	16954 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16920:	b164      	cbz	r4, 1693c <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16922:	4621      	mov	r1, r4
   16924:	4628      	mov	r0, r5
   16926:	f7ff ff4c 	bl	167c2 <z_sched_prio_cmp>
   1692a:	2800      	cmp	r0, #0
   1692c:	dc0c      	bgt.n	16948 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1692e:	b12c      	cbz	r4, 1693c <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   16930:	6873      	ldr	r3, [r6, #4]
   16932:	429c      	cmp	r4, r3
   16934:	d002      	beq.n	1693c <add_to_waitq_locked+0x38>
   16936:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16938:	2c00      	cmp	r4, #0
   1693a:	d1f1      	bne.n	16920 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   1693c:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   1693e:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   16940:	606b      	str	r3, [r5, #4]
	tail->next = node;
   16942:	601d      	str	r5, [r3, #0]
	list->tail = node;
   16944:	6075      	str	r5, [r6, #4]
}
   16946:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   16948:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1694a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1694c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1694e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   16950:	6065      	str	r5, [r4, #4]
}
   16952:	e7f8      	b.n	16946 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16954:	2400      	movs	r4, #0
   16956:	e7e3      	b.n	16920 <add_to_waitq_locked+0x1c>

00016958 <pend>:
{
   16958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1695c:	4605      	mov	r5, r0
   1695e:	460f      	mov	r7, r1
   16960:	4691      	mov	r9, r2
   16962:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   16964:	2400      	movs	r4, #0
	__asm__ volatile(
   16966:	f04f 0340 	mov.w	r3, #64	; 0x40
   1696a:	f3ef 8611 	mrs	r6, BASEPRI
   1696e:	f383 8812 	msr	BASEPRI_MAX, r3
   16972:	f3bf 8f6f 	isb	sy
   16976:	b94c      	cbnz	r4, 1698c <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   16978:	4639      	mov	r1, r7
   1697a:	4628      	mov	r0, r5
   1697c:	f7ff ffc2 	bl	16904 <add_to_waitq_locked>
	__asm__ volatile(
   16980:	f386 8811 	msr	BASEPRI, r6
   16984:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16988:	2401      	movs	r4, #1
   1698a:	e7f4      	b.n	16976 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   1698c:	464a      	mov	r2, r9
   1698e:	4643      	mov	r3, r8
   16990:	4628      	mov	r0, r5
   16992:	f7fc fc5b 	bl	1324c <add_thread_timeout>
}
   16996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001699a <z_unpend_first_thread>:
{
   1699a:	b570      	push	{r4, r5, r6, lr}
   1699c:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   1699e:	2300      	movs	r3, #0
	__asm__ volatile(
   169a0:	f04f 0240 	mov.w	r2, #64	; 0x40
   169a4:	f3ef 8511 	mrs	r5, BASEPRI
   169a8:	f382 8812 	msr	BASEPRI_MAX, r2
   169ac:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   169b0:	461c      	mov	r4, r3
   169b2:	e013      	b.n	169dc <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   169b4:	f7ff ff03 	bl	167be <pended_on_thread>
   169b8:	4621      	mov	r1, r4
   169ba:	f7ff ff21 	bl	16800 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   169be:	7b63      	ldrb	r3, [r4, #13]
   169c0:	f023 0302 	bic.w	r3, r3, #2
   169c4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   169c6:	2300      	movs	r3, #0
   169c8:	60a3      	str	r3, [r4, #8]
   169ca:	f104 0018 	add.w	r0, r4, #24
   169ce:	f000 f872 	bl	16ab6 <z_abort_timeout>
	__asm__ volatile(
   169d2:	f385 8811 	msr	BASEPRI, r5
   169d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   169da:	2301      	movs	r3, #1
   169dc:	b933      	cbnz	r3, 169ec <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   169de:	4630      	mov	r0, r6
   169e0:	f7ff ff39 	bl	16856 <z_priq_dumb_best>
		if (thread != NULL) {
   169e4:	4604      	mov	r4, r0
   169e6:	2800      	cmp	r0, #0
   169e8:	d1e4      	bne.n	169b4 <z_unpend_first_thread+0x1a>
   169ea:	e7f2      	b.n	169d2 <z_unpend_first_thread+0x38>
}
   169ec:	4620      	mov	r0, r4
   169ee:	bd70      	pop	{r4, r5, r6, pc}

000169f0 <z_unpend_all>:
{
   169f0:	b538      	push	{r3, r4, r5, lr}
   169f2:	4605      	mov	r5, r0
	int need_sched = 0;
   169f4:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   169f6:	e006      	b.n	16a06 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   169f8:	4620      	mov	r0, r4
   169fa:	f7ff ff09 	bl	16810 <z_unpend_thread>
		z_ready_thread(thread);
   169fe:	4620      	mov	r0, r4
   16a00:	f7ff ff30 	bl	16864 <z_ready_thread>
		need_sched = 1;
   16a04:	2001      	movs	r0, #1
	return list->head == list;
   16a06:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16a08:	42a5      	cmp	r5, r4
   16a0a:	d001      	beq.n	16a10 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   16a0c:	2c00      	cmp	r4, #0
   16a0e:	d1f3      	bne.n	169f8 <z_unpend_all+0x8>
}
   16a10:	bd38      	pop	{r3, r4, r5, pc}

00016a12 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   16a12:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   16a14:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   16a16:	6083      	str	r3, [r0, #8]
}
   16a18:	4770      	bx	lr

00016a1a <z_sched_wake>:
{
   16a1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16a1e:	4606      	mov	r6, r0
   16a20:	4688      	mov	r8, r1
   16a22:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   16a24:	2300      	movs	r3, #0
	__asm__ volatile(
   16a26:	f04f 0240 	mov.w	r2, #64	; 0x40
   16a2a:	f3ef 8511 	mrs	r5, BASEPRI
   16a2e:	f382 8812 	msr	BASEPRI_MAX, r2
   16a32:	f3bf 8f6f 	isb	sy
	bool ret = false;
   16a36:	4699      	mov	r9, r3
   16a38:	e01b      	b.n	16a72 <z_sched_wake+0x58>
   16a3a:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   16a3e:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   16a40:	f7ff febd 	bl	167be <pended_on_thread>
   16a44:	4621      	mov	r1, r4
   16a46:	f7ff fedb 	bl	16800 <z_priq_dumb_remove>
   16a4a:	7b63      	ldrb	r3, [r4, #13]
   16a4c:	f023 0302 	bic.w	r3, r3, #2
   16a50:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   16a52:	2300      	movs	r3, #0
   16a54:	60a3      	str	r3, [r4, #8]
   16a56:	f104 0018 	add.w	r0, r4, #24
   16a5a:	f000 f82c 	bl	16ab6 <z_abort_timeout>
			ready_thread(thread);
   16a5e:	4620      	mov	r0, r4
   16a60:	f7fc fd40 	bl	134e4 <ready_thread>
			ret = true;
   16a64:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   16a68:	f385 8811 	msr	BASEPRI, r5
   16a6c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16a70:	2301      	movs	r3, #1
   16a72:	b933      	cbnz	r3, 16a82 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   16a74:	4630      	mov	r0, r6
   16a76:	f7ff feee 	bl	16856 <z_priq_dumb_best>
		if (thread != NULL) {
   16a7a:	4604      	mov	r4, r0
   16a7c:	2800      	cmp	r0, #0
   16a7e:	d1dc      	bne.n	16a3a <z_sched_wake+0x20>
   16a80:	e7f2      	b.n	16a68 <z_sched_wake+0x4e>
}
   16a82:	4648      	mov	r0, r9
   16a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00016a88 <remove_timeout>:
{
   16a88:	b538      	push	{r3, r4, r5, lr}
   16a8a:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   16a8c:	f7fd f80e 	bl	13aac <next>
   16a90:	b148      	cbz	r0, 16aa6 <remove_timeout+0x1e>
   16a92:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   16a94:	6920      	ldr	r0, [r4, #16]
   16a96:	6965      	ldr	r5, [r4, #20]
   16a98:	6913      	ldr	r3, [r2, #16]
   16a9a:	6951      	ldr	r1, [r2, #20]
   16a9c:	181b      	adds	r3, r3, r0
   16a9e:	eb45 0101 	adc.w	r1, r5, r1
   16aa2:	6113      	str	r3, [r2, #16]
   16aa4:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   16aa6:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   16aa8:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   16aaa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16aac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16aae:	2300      	movs	r3, #0
   16ab0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   16ab2:	6063      	str	r3, [r4, #4]
}
   16ab4:	bd38      	pop	{r3, r4, r5, pc}

00016ab6 <z_abort_timeout>:
{
   16ab6:	b570      	push	{r4, r5, r6, lr}
   16ab8:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   16aba:	2300      	movs	r3, #0
	__asm__ volatile(
   16abc:	f04f 0240 	mov.w	r2, #64	; 0x40
   16ac0:	f3ef 8611 	mrs	r6, BASEPRI
   16ac4:	f382 8812 	msr	BASEPRI_MAX, r2
   16ac8:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   16acc:	f06f 0015 	mvn.w	r0, #21
   16ad0:	e008      	b.n	16ae4 <z_abort_timeout+0x2e>
			remove_timeout(to);
   16ad2:	4620      	mov	r0, r4
   16ad4:	f7ff ffd8 	bl	16a88 <remove_timeout>
			ret = 0;
   16ad8:	4628      	mov	r0, r5
	__asm__ volatile(
   16ada:	f386 8811 	msr	BASEPRI, r6
   16ade:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   16ae2:	2301      	movs	r3, #1
   16ae4:	461d      	mov	r5, r3
   16ae6:	b91b      	cbnz	r3, 16af0 <z_abort_timeout+0x3a>
	return node->next != NULL;
   16ae8:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   16aea:	2b00      	cmp	r3, #0
   16aec:	d1f1      	bne.n	16ad2 <z_abort_timeout+0x1c>
   16aee:	e7f4      	b.n	16ada <z_abort_timeout+0x24>
}
   16af0:	bd70      	pop	{r4, r5, r6, pc}

00016af2 <z_get_next_timeout_expiry>:
{
   16af2:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   16af4:	2300      	movs	r3, #0
	__asm__ volatile(
   16af6:	f04f 0240 	mov.w	r2, #64	; 0x40
   16afa:	f3ef 8411 	mrs	r4, BASEPRI
   16afe:	f382 8812 	msr	BASEPRI_MAX, r2
   16b02:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   16b06:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   16b0a:	b93b      	cbnz	r3, 16b1c <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   16b0c:	f7fc ffe6 	bl	13adc <next_timeout>
	__asm__ volatile(
   16b10:	f384 8811 	msr	BASEPRI, r4
   16b14:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   16b18:	2301      	movs	r3, #1
   16b1a:	e7f6      	b.n	16b0a <z_get_next_timeout_expiry+0x18>
}
   16b1c:	bd10      	pop	{r4, pc}

00016b1e <z_set_timeout_expiry>:
{
   16b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b20:	4606      	mov	r6, r0
   16b22:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   16b24:	2300      	movs	r3, #0
	__asm__ volatile(
   16b26:	f04f 0240 	mov.w	r2, #64	; 0x40
   16b2a:	f3ef 8511 	mrs	r5, BASEPRI
   16b2e:	f382 8812 	msr	BASEPRI_MAX, r2
   16b32:	f3bf 8f6f 	isb	sy
   16b36:	e00a      	b.n	16b4e <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   16b38:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   16b3a:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   16b3e:	2801      	cmp	r0, #1
   16b40:	dd00      	ble.n	16b44 <z_set_timeout_expiry+0x26>
   16b42:	b97c      	cbnz	r4, 16b64 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   16b44:	f385 8811 	msr	BASEPRI, r5
   16b48:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   16b4c:	2301      	movs	r3, #1
   16b4e:	461c      	mov	r4, r3
   16b50:	b97b      	cbnz	r3, 16b72 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   16b52:	f7fc ffc3 	bl	13adc <next_timeout>
			      || (ticks <= next_to);
   16b56:	f1b0 3fff 	cmp.w	r0, #4294967295
   16b5a:	d0ed      	beq.n	16b38 <z_set_timeout_expiry+0x1a>
   16b5c:	42b0      	cmp	r0, r6
   16b5e:	dbec      	blt.n	16b3a <z_set_timeout_expiry+0x1c>
   16b60:	2401      	movs	r4, #1
   16b62:	e7ea      	b.n	16b3a <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   16b64:	4639      	mov	r1, r7
   16b66:	42b0      	cmp	r0, r6
   16b68:	bfa8      	it	ge
   16b6a:	4630      	movge	r0, r6
   16b6c:	f7fa fd78 	bl	11660 <sys_clock_set_timeout>
   16b70:	e7e8      	b.n	16b44 <z_set_timeout_expiry+0x26>
}
   16b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016b74 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   16b74:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   16b76:	f7fd f8e3 	bl	13d40 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   16b7a:	bd08      	pop	{r3, pc}

00016b7c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   16b7c:	b900      	cbnz	r0, 16b80 <z_impl_k_busy_wait+0x4>
   16b7e:	4770      	bx	lr
{
   16b80:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   16b82:	f7f8 fc83 	bl	f48c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   16b86:	bd08      	pop	{r3, pc}

00016b88 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   16b88:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16b8a:	f1b1 3fff 	cmp.w	r1, #4294967295
   16b8e:	bf08      	it	eq
   16b90:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   16b94:	d024      	beq.n	16be0 <sys_clock_timeout_end_calc+0x58>
   16b96:	4604      	mov	r4, r0
   16b98:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16b9a:	ea54 0105 	orrs.w	r1, r4, r5
   16b9e:	d00d      	beq.n	16bbc <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   16ba0:	f06f 0101 	mvn.w	r1, #1
   16ba4:	1a0a      	subs	r2, r1, r0
   16ba6:	f04f 31ff 	mov.w	r1, #4294967295
   16baa:	eb61 0305 	sbc.w	r3, r1, r5
   16bae:	2a00      	cmp	r2, #0
   16bb0:	f173 0100 	sbcs.w	r1, r3, #0
   16bb4:	db05      	blt.n	16bc2 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   16bb6:	4610      	mov	r0, r2
   16bb8:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   16bba:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   16bbc:	f7fd f8c0 	bl	13d40 <sys_clock_tick_get>
   16bc0:	e7fb      	b.n	16bba <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   16bc2:	f7fd f8bd 	bl	13d40 <sys_clock_tick_get>
   16bc6:	4623      	mov	r3, r4
   16bc8:	462a      	mov	r2, r5
   16bca:	2c01      	cmp	r4, #1
   16bcc:	f175 0400 	sbcs.w	r4, r5, #0
   16bd0:	db03      	blt.n	16bda <sys_clock_timeout_end_calc+0x52>
   16bd2:	18c0      	adds	r0, r0, r3
   16bd4:	eb42 0101 	adc.w	r1, r2, r1
   16bd8:	e7ef      	b.n	16bba <sys_clock_timeout_end_calc+0x32>
   16bda:	2301      	movs	r3, #1
   16bdc:	2200      	movs	r2, #0
   16bde:	e7f8      	b.n	16bd2 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   16be0:	f04f 30ff 	mov.w	r0, #4294967295
   16be4:	4601      	mov	r1, r0
   16be6:	e7e8      	b.n	16bba <sys_clock_timeout_end_calc+0x32>

00016be8 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   16be8:	b108      	cbz	r0, 16bee <poller_thread+0x6>
   16bea:	3860      	subs	r0, #96	; 0x60
   16bec:	4770      	bx	lr
}
   16bee:	4770      	bx	lr

00016bf0 <signal_poller>:
{
   16bf0:	b538      	push	{r3, r4, r5, lr}
   16bf2:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   16bf4:	6880      	ldr	r0, [r0, #8]
   16bf6:	f7ff fff7 	bl	16be8 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   16bfa:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   16bfc:	f013 0f02 	tst.w	r3, #2
   16c00:	d028      	beq.n	16c54 <signal_poller+0x64>
   16c02:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   16c04:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   16c08:	f06f 0001 	mvn.w	r0, #1
   16c0c:	f04f 31ff 	mov.w	r1, #4294967295
   16c10:	428b      	cmp	r3, r1
   16c12:	bf08      	it	eq
   16c14:	4282      	cmpeq	r2, r0
   16c16:	d01f      	beq.n	16c58 <signal_poller+0x68>
	z_unpend_thread(thread);
   16c18:	4620      	mov	r0, r4
   16c1a:	f7ff fdf9 	bl	16810 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   16c1e:	2d08      	cmp	r5, #8
   16c20:	d00a      	beq.n	16c38 <signal_poller+0x48>
   16c22:	2300      	movs	r3, #0
   16c24:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   16c28:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16c2a:	f013 0f1f 	tst.w	r3, #31
   16c2e:	d108      	bne.n	16c42 <signal_poller+0x52>
   16c30:	69a3      	ldr	r3, [r4, #24]
   16c32:	b123      	cbz	r3, 16c3e <signal_poller+0x4e>
   16c34:	2300      	movs	r3, #0
   16c36:	e005      	b.n	16c44 <signal_poller+0x54>
   16c38:	f06f 0303 	mvn.w	r3, #3
   16c3c:	e7f2      	b.n	16c24 <signal_poller+0x34>
   16c3e:	2301      	movs	r3, #1
   16c40:	e000      	b.n	16c44 <signal_poller+0x54>
   16c42:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   16c44:	b90b      	cbnz	r3, 16c4a <signal_poller+0x5a>
		return 0;
   16c46:	2000      	movs	r0, #0
   16c48:	e005      	b.n	16c56 <signal_poller+0x66>
	z_ready_thread(thread);
   16c4a:	4620      	mov	r0, r4
   16c4c:	f7ff fe0a 	bl	16864 <z_ready_thread>
	return 0;
   16c50:	2000      	movs	r0, #0
   16c52:	e000      	b.n	16c56 <signal_poller+0x66>
		return 0;
   16c54:	2000      	movs	r0, #0
}
   16c56:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   16c58:	f06f 000a 	mvn.w	r0, #10
   16c5c:	e7fb      	b.n	16c56 <signal_poller+0x66>

00016c5e <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   16c5e:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   16c60:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   16c62:	7823      	ldrb	r3, [r4, #0]
   16c64:	b173      	cbz	r3, 16c84 <signal_triggered_work+0x26>
   16c66:	f854 5c04 	ldr.w	r5, [r4, #-4]
   16c6a:	b15d      	cbz	r5, 16c84 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   16c6c:	f1a4 0614 	sub.w	r6, r4, #20
   16c70:	f104 0014 	add.w	r0, r4, #20
   16c74:	f7ff ff1f 	bl	16ab6 <z_abort_timeout>
		twork->poll_result = 0;
   16c78:	2300      	movs	r3, #0
   16c7a:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   16c7c:	4631      	mov	r1, r6
   16c7e:	4628      	mov	r0, r5
   16c80:	f7ff fd7b 	bl	1677a <k_work_submit_to_queue>
	}

	return 0;
}
   16c84:	2000      	movs	r0, #0
   16c86:	bd70      	pop	{r4, r5, r6, pc}

00016c88 <signal_poll_event>:
{
   16c88:	b570      	push	{r4, r5, r6, lr}
   16c8a:	4604      	mov	r4, r0
   16c8c:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   16c8e:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   16c90:	b1d6      	cbz	r6, 16cc8 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   16c92:	7873      	ldrb	r3, [r6, #1]
   16c94:	2b01      	cmp	r3, #1
   16c96:	d00d      	beq.n	16cb4 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   16c98:	2b02      	cmp	r3, #2
   16c9a:	d012      	beq.n	16cc2 <signal_poll_event+0x3a>
		poller->is_polling = false;
   16c9c:	2000      	movs	r0, #0
   16c9e:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   16ca0:	2300      	movs	r3, #0
   16ca2:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   16ca4:	68e3      	ldr	r3, [r4, #12]
   16ca6:	f3c3 3145 	ubfx	r1, r3, #13, #6
   16caa:	430d      	orrs	r5, r1
   16cac:	f365 3352 	bfi	r3, r5, #13, #6
   16cb0:	60e3      	str	r3, [r4, #12]
}
   16cb2:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   16cb4:	f7ff ff9c 	bl	16bf0 <signal_poller>
		poller->is_polling = false;
   16cb8:	2300      	movs	r3, #0
   16cba:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   16cbc:	4298      	cmp	r0, r3
   16cbe:	daef      	bge.n	16ca0 <signal_poll_event+0x18>
   16cc0:	e7f7      	b.n	16cb2 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   16cc2:	f7ff ffcc 	bl	16c5e <signal_triggered_work>
   16cc6:	e7f7      	b.n	16cb8 <signal_poll_event+0x30>
	int retcode = 0;
   16cc8:	2000      	movs	r0, #0
   16cca:	e7e9      	b.n	16ca0 <signal_poll_event+0x18>

00016ccc <z_handle_obj_poll_events>:
{
   16ccc:	b508      	push	{r3, lr}
   16cce:	4603      	mov	r3, r0
	return list->head == list;
   16cd0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   16cd2:	4283      	cmp	r3, r0
   16cd4:	d009      	beq.n	16cea <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   16cd6:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   16cd8:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   16cda:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16cdc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16cde:	2300      	movs	r3, #0
   16ce0:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   16ce2:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   16ce4:	b108      	cbz	r0, 16cea <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   16ce6:	f7ff ffcf 	bl	16c88 <signal_poll_event>
}
   16cea:	bd08      	pop	{r3, pc}

00016cec <z_heap_aligned_alloc>:
{
   16cec:	b5d0      	push	{r4, r6, r7, lr}
   16cee:	b082      	sub	sp, #8
   16cf0:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   16cf2:	2000      	movs	r0, #0
   16cf4:	2304      	movs	r3, #4
   16cf6:	18d2      	adds	r2, r2, r3
   16cf8:	d20e      	bcs.n	16d18 <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   16cfa:	b978      	cbnz	r0, 16d1c <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   16cfc:	2600      	movs	r6, #0
   16cfe:	2700      	movs	r7, #0
   16d00:	e9cd 6700 	strd	r6, r7, [sp]
   16d04:	f041 0104 	orr.w	r1, r1, #4
   16d08:	4620      	mov	r0, r4
   16d0a:	f7ff fb8d 	bl	16428 <k_heap_aligned_alloc>
	if (mem == NULL) {
   16d0e:	b108      	cbz	r0, 16d14 <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
   16d10:	f840 4b04 	str.w	r4, [r0], #4
}
   16d14:	b002      	add	sp, #8
   16d16:	bdd0      	pop	{r4, r6, r7, pc}
   16d18:	2001      	movs	r0, #1
   16d1a:	e7ee      	b.n	16cfa <z_heap_aligned_alloc+0xe>
		return NULL;
   16d1c:	2000      	movs	r0, #0
   16d1e:	e7f9      	b.n	16d14 <z_heap_aligned_alloc+0x28>

00016d20 <k_free>:
	if (ptr != NULL) {
   16d20:	b130      	cbz	r0, 16d30 <k_free+0x10>
{
   16d22:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   16d24:	1f01      	subs	r1, r0, #4
   16d26:	f850 0c04 	ldr.w	r0, [r0, #-4]
   16d2a:	f7ff fbc8 	bl	164be <k_heap_free>
}
   16d2e:	bd08      	pop	{r3, pc}
   16d30:	4770      	bx	lr

00016d32 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   16d32:	4770      	bx	lr

00016d34 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   16d34:	f7fa bfbc 	b.w	11cb0 <SystemInit>
